"""
File: tg_generic_reportlab.py
Author: Camilla Buys
Company: Dotxml
email: camilla at dotxmltech dot com
Github: Not yet
"""

# -*- coding: utf-8 -*-
from math import ceil
from reportlab.lib import colors
from reportlab.lib.units import inch
from reportlab.lib.utils import ImageReader
from reportlab.lib.pagesizes import A4, portrait
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import PageBreak, Paragraph, Table, Flowable
from reportlab.platypus import BaseDocTemplate, NextPageTemplate, PageTemplate, Frame


###############################################################################
# PDFCreator - A4 Setup starts here
###############################################################################


class PDFCreator(BaseDocTemplate):

    def __init__(self, *args, **kwargs):
        self.filename = kwargs.pop('filename', None)
        ext = '.pdf'
        if not self.filename.endswith(ext):
            self.filename += ext
        #apply(BaseDocTemplate.__init__, (self, self.filename), kwargs) # python2.7
        super(PDFCreator, self).__init__(self.filename) # python3.6
        self.setup_page(**kwargs)
        self.create_styles()
        self.showBoundary = 0 # Boolean
        self.Title = kwargs.get('title', 'Generic Title')

    def setup_page(self, *args, **kwargs):
        self.pagesize = kwargs.get('pagesize', None)
        if self.pagesize:
            self.width = self.pagesize[0]
            self.height = self.pagesize[1]
        else:
            self.pagesize = portrait(A4)
            self.width = A4[0]
            self.height = A4[1]

    def create_styles(self, *args, **kwargs):
        """ Defaults:
            BodyText, Bullet, Code, Definition,
            Heading1 - 6,
            Normal, Italic, Title,
            OrderedList, UnorderedList,
        """
        self.styles = getSampleStyleSheet()
        self.styleNormal = self.styles['Normal']
        self.styleBold = ParagraphStyle('Bold')
        self.styleBold.fontName = 'Helvetica-Bold'
        self.styleCenter = ParagraphStyle('Center')
        self.styleCenter.alignment = 1

###############################################################################
# PDFCreator - PDF From Flowables - Portrait
###############################################################################

    def CreatePDF_FromFlowables_Portrait(self, static_content, outputlist):
        self.ensure_portrait()
        self.static_content = static_content
        pagelist = self.get_pagelist_portrait('page1', 'page2')

        content_list = [NextPageTemplate('page2')]
        for flow in outputlist:
            content_list.append(flow)
        content_list.append(NextPageTemplate('page1'))

        doc = self
        class lastPageNumberFlowable(Flowable):
            def __init__(self, parent, xoffset = 0, yoffset = 0):
                Flowable.__init__(self)
                self._xoffset = xoffset
                self._yoffset = yoffset
                self.parent = parent

            def draw(self):
                canvas = self.parent.canvas
                if not canvas.hasForm("lastPageNumber"):
                    canvas.beginForm('lastPageNumber')
                    canvas.setFont('Times-Roman', 10)
                    canvas.drawString(doc.width - 10, 0.75 * inch, str(canvas.getPageNumber()))
                    canvas.endForm()
        content_list.append(lastPageNumberFlowable(self))

        self.addPageTemplates(pagelist)
        self.build(content_list)

###############################################################################
# PDFCreator - PDF From Flowables - Landscape
###############################################################################

    def CreatePDF_FromFlowables_Landscape(self, static_content, outputlist):
        self.ensure_landscape()
        self.static_content = static_content
        pagelist = self.get_pagelist_landscape('page1', 'page2')

        content_list = [NextPageTemplate('page2')]
        for flow in outputlist:
            content_list.append(flow)
        content_list.append(NextPageTemplate('page1'))

        doc = self
        class lastPageNumberFlowable(Flowable):
            def __init__(self, parent, xoffset = 0, yoffset = 0):
                Flowable.__init__(self)
                self._xoffset = xoffset
                self._yoffset = yoffset
                self.parent = parent

            def draw(self):
                canvas = self.parent.canvas
                if not canvas.hasForm("lastPageNumber"):
                    canvas.beginForm('lastPageNumber')
                    canvas.setFont('Times-Roman', 10)
                    canvas.drawString(doc.width - 10, 0.75 * inch, str(canvas.getPageNumber()))
                    canvas.endForm()
        content_list.append(lastPageNumberFlowable(self))

        self.addPageTemplates(pagelist)
        self.build(content_list)

###############################################################################
# PDFCreator - PDF From Table - Portrait
###############################################################################

    def CreatePDF_Table_Portrait(self, static_content, outputlist, headerlist, headerwidths):
        self.ensure_portrait()
        self.static_content = static_content

        tablestyle = self.get_default_tablestyle()
        pagelist = self.get_pagelist_portrait('page1', 'page2')
        frameheight = pagelist[0].frames[0]._height
        rowsperpage = self.get_rowsperpage(frameheight, outputlist, headerwidths)

        content_list = [NextPageTemplate('page1')]
        tabledata = [headerlist]
        for row in outputlist[0: rowsperpage]:
            tabledata.append(row)

        first_page_table = Table(tabledata, style=tablestyle, colWidths=headerwidths)
        content_list.append(first_page_table)
        content_list.append(NextPageTemplate('page2'))

        pageqty = 1
        if int(rowsperpage) > 0 and len(tabledata) >= 1:
            pageqty = int(ceil(float(len(outputlist))/float(rowsperpage)))

        # Used when the extras become another page
        if rowsperpage+1 != len(tabledata) \
        and (len(tabledata) + pageqty)%rowsperpage != 0:
            pageqty += 1

        if pageqty > 1:
            for i in range(pageqty):
                frameheight = pagelist[1].frames[0]._height
                newrowsperpage = self.get_rowsperpage(frameheight, outputlist[rowsperpage: ], headerwidths)
                if newrowsperpage > 1:

                    section = outputlist[rowsperpage: rowsperpage+newrowsperpage]

                    tabledata = [headerlist]
                    for row in section:
                        tabledata.append(row)

                    later_page_table = Table(tabledata, style=tablestyle, colWidths=headerwidths)
                    content_list.append(PageBreak())
                    content_list.append(later_page_table)

                    rowsperpage += newrowsperpage

        doc = self
        class lastPageNumberFlowable(Flowable):
            def __init__(self, parent, xoffset = 0, yoffset = 0):
                Flowable.__init__(self)
                self._xoffset = xoffset
                self._yoffset = yoffset
                self.parent = parent

            def draw(self):
                canvas = self.parent.canvas
                if not canvas.hasForm("lastPageNumber"):
                    canvas.beginForm('lastPageNumber')
                    canvas.setFont('Times-Roman', 10)
                    canvas.drawString(doc.width - 10, 0.75 * inch, str(canvas.getPageNumber()))
                    canvas.endForm()
        content_list.append(lastPageNumberFlowable(self))
        self.addPageTemplates(pagelist)
        self.build(content_list)

###############################################################################
# PDFCreator - PDF From Table - Landscape
###############################################################################

    def CreatePDF_Table_Landscape(self, static_content, outputlist, headerlist, headerwidths):
        self.ensure_landscape()
        self.static_content = static_content

        tablestyle = self.get_default_tablestyle()
        pagelist = self.get_pagelist_landscape('page1', 'page2')
        frameheight = pagelist[0].frames[0]._height
        rowsperpage = self.get_rowsperpage(frameheight, outputlist, headerwidths)

        content_list = [NextPageTemplate('page1')]
        tabledata = [headerlist]
        for row in outputlist[0: rowsperpage]:
            tabledata.append(row)

        first_page_table = Table(tabledata, style=tablestyle, colWidths=headerwidths)
        content_list.append(first_page_table)
        content_list.append(NextPageTemplate('page2'))

        pageqty = 1
        if int(rowsperpage) > 0 and len(outputlist) >= 1:
            pageqty = int(ceil(float(len(outputlist))/float(rowsperpage)))

        # Used when the extras become another page
        if rowsperpage+1 != len(tabledata) \
        and (len(tabledata) + pageqty)%rowsperpage != 0:
            pageqty += 1

        if pageqty > 1:
            for i in range(pageqty):
                frameheight = pagelist[1].frames[0]._height
                newrowsperpage = self.get_rowsperpage(frameheight, outputlist[rowsperpage: ], headerwidths)
                if newrowsperpage > 1:

                    section = outputlist[rowsperpage: rowsperpage+newrowsperpage]

                    tabledata = [headerlist]
                    for row in section:
                        tabledata.append(row)

                    later_page_table = Table(tabledata, style=tablestyle, colWidths=headerwidths)
                    content_list.append(PageBreak())
                    content_list.append(later_page_table)

                    rowsperpage += newrowsperpage

        doc = self
        class lastPageNumberFlowable(Flowable):
            def __init__(self, parent, xoffset = 0, yoffset = 0):
                Flowable.__init__(self)
                self._xoffset = xoffset
                self._yoffset = yoffset
                self.parent = parent

            def draw(self):
                try:
                    canvas = self.parent.canvas
                except Exception as e:
                    return False
                if not canvas.hasForm("lastPageNumber"):
                    canvas.beginForm('lastPageNumber')
                    canvas.setFont('Times-Roman', 10)
                    canvas.drawString(doc.width - 10, 0.75 * inch, str(canvas.getPageNumber()))
                    canvas.endForm()
        #content_list.append(lastPageNumberFlowable(self))

        self.addPageTemplates(pagelist)
        self.build(content_list)

###############################################################################
# PDFCreator - PDF From Image/s - Portrait
###############################################################################

    def CreatePDF_Image_Portrait(self, static_content, outputlist):
        self.ensure_portrait()
        self.static_content = static_content
        self.outputlist = outputlist

        frame_fullheader = Frame(10, 10, self.width-20, self.height-200, 0, 0, 0, 0, showBoundary=0)
        frame_partialheader = Frame(10, 10, self.width-20, self.height-100, 0, 0, 0, 0, showBoundary=0)
        pagelist = [
            PageTemplate(id='page1', frames=[frame_fullheader], pagesize=self.pagesize, onPage=self.FirstPageImagePortrait),
            PageTemplate(id='page2', frames=[frame_partialheader], pagesize=self.pagesize, onPage=self.LaterPageImagePortrait),
                ]

        self.content_list = [NextPageTemplate('page2')]

        doc = self
        class lastPageNumberFlowable(Flowable):
            def __init__(self, parent, xoffset = 0, yoffset = 0):
                Flowable.__init__(self)
                self._xoffset = xoffset
                self._yoffset = yoffset
                self.parent = parent

            def draw(self):
                canvas = self.parent.canvas
                if not canvas.hasForm("lastPageNumber"):
                    canvas.beginForm('lastPageNumber')
                    canvas.setFont('Times-Roman', 10)
                    canvas.drawString(doc.width - 10, 0.75 * inch, str(canvas.getPageNumber()))
                    canvas.endForm()
        self.content_list.append(lastPageNumberFlowable(self))

        self.addPageTemplates(pagelist)
        self.build(self.content_list)

###############################################################################
# PDFCreator - List of PageTemplates = Portrait
###############################################################################

    def get_pagelist_portrait(self, page1id, page2id):
        frame_fullheader = Frame(10, 10, self.width-20, self.height-200, 0, 0, 0, 0, showBoundary=0)
        frame_partialheader = Frame(10, 10, self.width-20, self.height-100, 0, 0, 0, 0, showBoundary=0)
        return [
            PageTemplate(id=page1id, frames=[frame_fullheader], pagesize=self.pagesize, onPage=self.FirstPagePortrait),
            PageTemplate(id=page2id, frames=[frame_partialheader], pagesize=self.pagesize, onPage=self.LaterPagePortrait),
                ]

###############################################################################
# PDFCreator - List of PageTemplates = Landscape
###############################################################################

    def get_pagelist_landscape(self, page1id, page2id):
        frame_fullheader = Frame(10, 10, self.width-20, self.height-120, 0, 0, 0, 0, showBoundary=0)
        frame_partialheader = Frame(10, 10, self.width-20, self.height-100, 0, 0, 0, 0, showBoundary=0)
        return [
            PageTemplate(id=page1id, frames=[frame_fullheader], pagesize=self.pagesize, onPage=self.FirstPageLandscape),
            PageTemplate(id=page2id, frames=[frame_partialheader], pagesize=self.pagesize, onPage=self.LaterPageLandscape),
                ]

###############################################################################
# PDFCreator - Static content - First page - Portrait
###############################################################################

    def drawCompanyHeaderPortrait(self, canvas, doc):
        pass

    def FirstPagePortrait(self, canvas, doc):
        self.drawCompanyHeaderPortrait(canvas, doc)

        canvas.setFont('Helvetica', 20)
        header = self.static_content.get('header', None)
        if header:
            canvas.drawCentredString(self.width/2, self.height+100, header)

        canvas.setFont('Helvetica', 14)
        title1 = self.static_content.get('title1_header', None)
        if title1:
            content = self.static_content.get('title1_content', None)
            title1text = "{0}: {1}".format(title1, content)
            canvas.drawString(15, self.height+50, title1text)

        title2 = self.static_content.get('title2_header', None)
        if title2:
            content = self.static_content.get('title2_content', None)
            title2text = "{0}: {1}".format(title2, content)
            canvas.drawString(15, self.height+30, title2text)

        canvas.setFont('Helvetica', 10)
        left1 = self.static_content.get('left1_header', None)
        if left1:
            content = self.static_content.get('left1_content', None)
            left1text = "{0}: {1}".format(left1, content)
            canvas.drawString(15, self.height+10, left1text)

        left2 = self.static_content.get('left2_header', None)
        if left2:
            content = self.static_content.get('left2_content', None)
            left2text = "{0}: {1}".format(left2, content)
            canvas.drawString(15, self.height-5, left2text)

        left3 = self.static_content.get('left3_header', None)
        if left3:
            content = self.static_content.get('left3_content', None)
            left3text = "{0}: {1}".format(left3, content)
            canvas.drawString(15, self.height-20, left3text)

        left4 = self.static_content.get('left4_header', None)
        if left4:
            content = self.static_content.get('left4_content', None)
            left4text = "{0}: {1}".format(left4, content)
            canvas.drawString(15, self.height-35, left4text)

        right1 = self.static_content.get('right1_header', None)
        if right1:
            content = self.static_content.get('right1_content', None)
            right1text = "{0}: {1}".format(right1, content)
            canvas.drawString(400, self.height+10, right1text)

        right2 = self.static_content.get('right2_header', None)
        if right2:
            content = self.static_content.get('right2_content', None)
            right2text = "{0}: {1}".format(right2, content)
            canvas.drawString(400, self.height-5, right2text)

        right3 = self.static_content.get('right3_header', None)
        if right3:
            content = self.static_content.get('right3_content', None)
            right3text = "{0}: {1}".format(right3, content)
            canvas.drawString(400, self.height-20, right3text)

        right4 = self.static_content.get('right4_header', None)
        if right4:
            content = self.static_content.get('right4_content', None)
            right4text = "{0}: {1}".format(right4, content)
            canvas.drawString(400, self.height-35, right4text)

        canvas.setFont('Times-Roman', 9)
        canvas.drawString(doc.width - 100 , 0.75 * inch, "Page  %d " % (doc.page))
        canvas.drawString(doc.width - 50 , 0.75 * inch, "Of")
        canvas.setFont('Times-Roman', 9)
        canvas.doForm('lastPageNumber')

###############################################################################
# PDFCreator - Static content - Later page - Portrait
###############################################################################

    def LaterPagePortrait(self, canvas, doc):
        self.drawCompanyHeaderPortrait(canvas, doc)
        canvas.setFont('Times-Roman', 9)
        canvas.drawString(doc.width - 100 , 0.75 * inch, "Page  %d " % (doc.page))
        canvas.drawString(doc.width - 50 , 0.75 * inch, "Of")
        canvas.setFont('Times-Roman', 9)
        canvas.doForm('lastPageNumber')

###############################################################################
# PDFCreator - Static content - First page - Landscape
###############################################################################

    def drawCompanyHeaderLandscape(self, canvas, doc):
        pass

    def FirstPageLandscape(self, canvas, doc):
        self.drawCompanyHeaderLandscape(canvas, doc)

        canvas.setFont('Helvetica', 20)
        header = self.static_content.get('header', None)
        if header:
            canvas.drawCentredString(self.width/2, self.height+100, header)

        canvas.setFont('Helvetica', 10)
        right1 = self.static_content.get('right1_header', None)
        if right1:
            content = self.static_content.get('right1_content', None)
            right1text = "{0}: {1}".format(right1, content)
            canvas.drawString(700, self.height+50, right1text)

    def FirstPageLandscapeOld(self, canvas, doc):
        self.drawCompanyHeaderLandscape(canvas, doc)

        canvas.setFont('Helvetica', 20)
        header = self.static_content.get('header', None)
        if header:
            canvas.drawCentredString(self.width/2, self.height+100, header)

        canvas.setFont('Helvetica', 14)
        title1 = self.static_content.get('title1_header', None)
        if title1:
            content = self.static_content.get('title1_content', None)
            title1text = "{0}: {1}".format(title1, content)
            canvas.drawString(15, self.height+50, title1text)

        title2 = self.static_content.get('title2_header', None)
        if title2:
            content = self.static_content.get('title2_content', None)
            title2text = "{0}: {1}".format(title2, content)
            canvas.drawString(15, self.height+30, title2text)

        canvas.setFont('Helvetica', 10)
        left1 = self.static_content.get('left1_header', None)
        if left1:
            content = self.static_content.get('left1_content', None)
            left1text = "{0}: {1}".format(left1, content)
            canvas.drawString(15, self.height+10, left1text)

        left2 = self.static_content.get('left2_header', None)
        if left2:
            content = self.static_content.get('left2_content', None)
            left2text = "{0}: {1}".format(left2, content)
            canvas.drawString(15, self.height-5, left2text)

        left3 = self.static_content.get('left3_header', None)
        if left3:
            content = self.static_content.get('left3_content', None)
            left3text = "{0}: {1}".format(left3, content)
            canvas.drawString(15, self.height-20, left3text)

        left4 = self.static_content.get('left4_header', None)
        if left4:
            content = self.static_content.get('left4_content', None)
            left4text = "{0}: {1}".format(left4, content)
            canvas.drawString(15, self.height-35, left4text)

        right1 = self.static_content.get('right1_header', None)
        if right1:
            content = self.static_content.get('right1_content', None)
            right1text = "{0}: {1}".format(right1, content)
            canvas.drawString(700, self.height+10, right1text)

        right2 = self.static_content.get('right2_header', None)
        if right2:
            content = self.static_content.get('right2_content', None)
            right2text = "{0}: {1}".format(right2, content)
            canvas.drawString(700, self.height-5, right2text)

        right3 = self.static_content.get('right3_header', None)
        if right3:
            content = self.static_content.get('right3_content', None)
            right3text = "{0}: {1}".format(right3, content)
            canvas.drawString(700, self.height-20, right3text)

        right4 = self.static_content.get('right4_header', None)
        if right4:
            content = self.static_content.get('right4_content', None)
            right4text = "{0}: {1}".format(right4, content)
            canvas.drawString(700, self.height-35, right4text)

        #canvas.setFont('Times-Roman', 9)
        #canvas.drawString(doc.width - 100 , 0.75 * inch, "Page  %d " % (doc.page))
        #canvas.drawString(doc.width - 50 , 0.75 * inch, "Of")
        #canvas.setFont('Times-Roman', 9)
        #canvas.doForm('lastPageNumber')

###############################################################################
# PDFCreator - Static content - Later page - Landscape
###############################################################################

    def LaterPageLandscape(self, canvas, doc):
        self.drawCompanyHeaderLandscape(canvas, doc)
        #canvas.setFont('Times-Roman', 9)
        #canvas.drawString(doc.width - 100 , 0.75 * inch, "Page  %d " % (doc.page))
        #canvas.drawString(doc.width - 50 , 0.75 * inch, "Of")
        #canvas.setFont('Times-Roman', 9)
        #canvas.doForm('lastPageNumber')

###############################################################################
# PDFCreator - Static content - Images First Page - Portrait
###############################################################################

    def FirstPageImagePortrait(self, canvas, doc):
        self.FirstPagePortrait(canvas, doc)

        pagew, pageh = self.pagesize
        framew = framew_available = pagew - 20
        frameh = frameh_available = pageh - 200
        startx, starty = 15, self.height - 50

        canvas.rect(10, 10, framew, frameh)

        prevw, prevh = 0, 0
        for i in self.outputlist:
            img = ImageReader(i)

            imgw, imgh = img.getSize()
            imgw, imgh = float(imgw), float(imgh)

            blnhorizontal = False
            if framew_available > imgw:
                blnhorizontal = True

            blnvertical = False
            if frameh_available > imgh:
                blnvertical = True

            if blnhorizontal and blnvertical:
                canvas.drawImage(img, startx, starty-imgh)
                framew_available -= imgw
                startx += imgw
                prevh = imgh
                prevw = imgw

            elif blnhorizontal and not blnvertical:
                # width not height
                pass

            elif blnvertical and not blnhorizontal:
                # height not width
                framew_available = framew
                startx = 15
                frameh_available -= prevh
                starty -= prevh
                self.content_list.append(PageBreak())
                self.content_list.append(NextPageTemplate('page1'))

            else:
                # no space
                pass


        """
        for imgpath in self.outputlist:
            openimg = ImageReader(imgpath)
            imgw, imgh = openimg.getSize()
            imgw, imgh = float(imgw), float(imgh)

            blnhorizontal = False
            if framew_available > imgw:
                blnhorizontal = True

            blnvertical = False
            if frameh_available > imgh:
                blnvertical = True

            print
            print 'img', imgw, imgh
            print 'frame', framew_available, frameh_available
            print 'bln', 'horizon', blnhorizontal, 'vert', blnvertical

            if blnhorizontal and blnvertical:
                print 'both space - draw the pic'
                #canvas.drawImage(openimg, startx, starty-imgh)
                canvas.rect(startx, starty-imgh, imgw, imgh)

                framew_available -= imgw
                startx += imgw

            elif blnhorizontal and not blnvertical:
                print 'wide space not high space'

            elif blnvertical and not blnhorizontal:
                print 'high space not wide space'
                framew_available = framew
                startx = 15
                starty -= imgh

            else:
                print 'neither space - add another page'
        """

        """
        for img in self.outputlist:
            openimg = ImageReader(img)
            imgw, imgh = openimg.getSize()
            imgw, imgh = float(imgw), float(imgh)

            blnhorizontal = False
            if framew_available > imgw:
                blnhorizontal = True

            blnvertical = False
            if frameh_available > imgh:
                blnvertical = True

            if blnhorizontal and blnvertical:
                #canvas.drawImage(openimg, startx, starty-imgh)
                canvas.rect(startx, starty-imgh, imgw, imgh)

                #starty -= imgh
                startx += imgw

                framew_available -= imgw
                frameh_available -= imgh


                print 'paint the pic'
                print 'w', framew_available, imgw
                print 'h', frameh_available, imgh
            else:
                canvas.showPage()
                print 'no space, add pagebreak or shrink image'
        """

###############################################################################
# PDFCreator - Static content - Images Later Page - Portrait
###############################################################################

    def LaterPageImagePortrait(self, canvas, doc):
        self.LaterPagePortrait(canvas, doc)

    def ensure_portrait(self):
        if self.width > self.height:
            self.width, self.height = self.height, self.width
            self.pagesize = (self.width, self.height)

    def ensure_landscape(self):
        if self.height > self.width:
            self.width, self.height = self.height, self.width
            self.pagesize = (self.width, self.height)

    def get_default_tablestyle(self):
        return [
         ('ALIGN', (1, 1), (-1, -1), 'LEFT'),
         ('LINEABOVE', (0, 0), (-1, 0), 0.25, colors.black),
         ('LINEBELOW', (0, 0), (-1, 0), 0.25, colors.black),
         ('FONT', (0, 0), (-1, 0), 'Times-Bold'),
         ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
         ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black)
               ]

###############################################################################
# PDFCreator - Get int of amount of rows per page
###############################################################################

    def get_rowsperpage(self, frameheight, outputlist, headerwidths):
        """ get_rowsperpage """
        tableheight = 0
        rowsperpage = 0

        for row in outputlist:
            thisrow_maxheight = 0
            for i, col in enumerate(row):
                text = col.text
                if text:
                    frags = col.frags[0]
                    textwidth = self.get_textwidth(text, frags.fontName, frags.fontSize, 0.5)

                    height_in_rows = int(ceil(textwidth/headerwidths[i]))
                    lineh = float(height_in_rows * (frags.fontSize*2))
                    if thisrow_maxheight < lineh:
                        thisrow_maxheight = lineh

            if frameheight < tableheight:
                return rowsperpage
            tableheight += thisrow_maxheight
            rowsperpage += 1
        return rowsperpage

    def get_textwidth(self, text, font, size, space):
        """ get_textwidth """
        from reportlab.pdfbase.pdfmetrics import stringWidth
        width = stringWidth(text, font, size)
        width += (len(text)-1) * space
        return width


if __name__ == "__main__":

    from datetime import datetime
    import os

    datename = str(datetime.now()).split('')[0]
    filename = f"Policy Sales {datename}.pdf"
    filepath = os.path.join(os.getcwd(), filename)
    pdffile = PDFCreator(**{'filename': filepath})
    headers=[
            'Code',
            'Description',
            'Purchase Method',
            'Count',
            ]
    headerwidths=[
            180,
            180,
            180,
            180,
            ]
    outputlist = []
    for item in []:
        code = item.get('code')
        count = item.get('count')
        description = item.get('description')
        purchase_method = get_name_from_enum_id(PurchaseMethod, item.get('enum_purchase_method_id'))
        outputlist.append((
            Paragraph(checknullvalue(code), pdffile.styleNormal),
            Paragraph(checknullvalue(description), pdffile.styleNormal),
            Paragraph(checknullvalue(purchase_method), pdffile.styleNormal),
            Paragraph(checknullvalue(count), pdffile.styleNormal),
        ))
    userdata = {
        'header': 'Header',
        'title1_header': 'Title1', 'title1_content': 'Title1 Content',
        'title2_header': 'Title2', 'title2_content': 'Title2 Content',
        'left1_header': 'Left1', 'left1_content': 'Left1 Content',
        'left2_header': 'Left2', 'left2_content': 'Left2 Content',
        'left3_header': 'Left3', 'left3_content': 'Left3 Content',
        'left4_header': 'Left4', 'left4_content': 'Left4 Content',
        'right1_header': 'Right1', 'right1_content': 'Right1 Content',
        'right2_header': 'Right2', 'right2_content': 'Right2 Content',
        'right3_header': 'Right3', 'right3_content': 'Right3 Content',
        'right4_header': 'Right4', 'right4_content': 'Right4 Content',
    }
    result = pdffile.CreatePDF_Table_Landscape(userdata, outputlist, headers, headerwidths)
