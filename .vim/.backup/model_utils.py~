from rocket.model import DeclarativeBase, metadata, DBSession
from sqlalchemy.schema import UniqueConstraint
from sqlalchemy.orm import relation, synonym
from sqlalchemy.ext.declarative import declared_attr
from sqlalchemy import asc, desc, Column
from sqlalchemy.types import Numeric, Boolean, DateTime, Date, Time
import os
from datetime import datetime
from hashlib import sha256
from rocket.lib.phat.unicode_columns import common_unicode_columns
from rocket.lib.phat.integer_columns import common_integer_columns, get_id_primarykey
from rocket.lib.phat.numeric_columns import common_numeric_columns
from rocket.lib.phat.boolean_columns import common_boolean_columns
from rocket.lib.phat.datetime_columns import common_datetime_columns

def get_numeric_column():
    return Column(Numeric(22, 8))

def get_boolean_column():
    return Column(Boolean)

def get_datetime_column():
    return Column(DateTime)

def get_time_column():
    return Column(Time)

def get_date_column():
    return Column(Date)

common_columns = {
        'description': common_unicode_columns.get('description'),
        'title': common_unicode_columns.get('title'),
        'longtext': common_unicode_columns.get('longtext'),

        'numeric': get_numeric_column,
        'boolean': get_boolean_column,
        'datetime': get_datetime_column,
        'time': get_time_column,
        'date': get_date_column,
        'currency': common_numeric_columns.get('currency'),
                      }

common_columns.update(common_unicode_columns)
common_columns.update(common_integer_columns)
common_columns.update(common_numeric_columns)
common_columns.update(common_boolean_columns)
common_columns.update(common_datetime_columns)
#print("*"*80)
#print("Current common_columns are: ")
#print("*"*80)
#for key in common_columns.keys():
#    print(key)
#print("*"*80)


class PhatBase(object):

    id = get_id_primarykey()
    added_by = common_columns.get('integer_not_nullable')()
    added = common_columns.get('datetime_default_now')()
    active = common_columns.get('boolean_default_true')()

    def __repr__(self):
        return f"<{self.id}: {self.__tablename__[4: ].title()}>"

    @classmethod
    def latest_entry(cls):
        return DBSession.query(cls). \
                filter(cls.active==True). \
                order_by(cls.added.desc()). \
                first()

    @classmethod
    def oldest_entry(cls):
        return DBSession.query(cls). \
                filter(cls.active==True). \
                order_by(cls.added.asc()). \
                first()

    @classmethod
    def get_all(cls, attr, active=True):
        return DBSession.query(cls). \
                filter(cls.active==active). \
                order_by(asc(getattr(cls, attr))). \
                all()

    @classmethod
    def get_limit(cls, limit, attr, active=True):
        return DBSession.query(cls). \
                filter(cls.active==active). \
                order_by(asc(getattr(cls, attr))). \
                limit(limit)

    @classmethod
    def by_attr_count(cls, attr, value):
        return DBSession.query(cls). \
                filter(cls.active==True). \
                filter(getattr(cls, attr)==value). \
                count()

    @classmethod
    def by_attr_one(cls, attr, value):
        return DBSession.query(cls). \
                filter(cls.active==True). \
                filter(getattr(cls, attr)==value). \
                one()

    @classmethod
    def by_attr_first(cls, attr, value):
        return DBSession.query(cls). \
                filter(cls.active==True). \
                filter(getattr(cls, attr)==value). \
                first()

    @classmethod
    def by_attr_all(cls, attr, value):
        return DBSession.query(cls). \
                filter(cls.active==True). \
                filter(getattr(cls, attr)==value). \
                all()

    @classmethod
    def by_attr_limit(cls, attr, value, limit):
        return DBSession.query(cls). \
                filter(cls.active==True). \
                filter(getattr(cls, attr)==value). \
                limit(limit)

    @classmethod
    def like_attr_one(cls, attr, value, limit):
        return DBSession.query(cls). \
                filter(cls.active==True). \
                filter(getattr(cls, attr).like(value)). \
                one()

    @classmethod
    def like_attr_first(cls, attr, value, limit):
        return DBSession.query(cls). \
                filter(cls.active==True). \
                filter(getattr(cls, attr).like(value)). \
                first()

    @classmethod
    def like_attr_all(cls, attr, value, limit):
        return DBSession.query(cls). \
                filter(cls.active==True). \
                filter(getattr(cls, attr).like(value)). \
                all()

    @classmethod
    def like_attr_limit(cls, attr, value, limit):
        return DBSession.query(cls). \
                filter(cls.active==True). \
                filter(getattr(cls, attr).like(value)). \
                limit(limit)

    @classmethod
    def by_id(cls, id):
        return cls.by_attr_first('id', id)

def get_default_columns():
    default_columns = {}
    default_config = {}

    id_config = get_id_primarykey()
    id_column = id_config.pop('column')
    default_columns['id'] = id_column
    default_config['id'] = id_config

    added_config = get_datetime_now('added')
    added_column = added_config.pop('column')
    default_columns['added'] = added_column
    default_config['added'] = added_config

    added_by_config = get_id_secondary('added_by')
    added_by_column = added_by_config.pop('column')
    default_columns['added_by'] = added_by_column
    default_config['added_by'] = added_by_config

    edited_config = get_datetime_now('edited')
    edited_column = edited_config.pop('column')
    default_columns['edited'] = edited_column
    default_config['edited'] = edited_config

    edited_by_config = get_id_secondary('edited_by')
    edited_by_column = edited_by_config.pop('column')
    default_columns['edited_by'] = edited_by_column
    default_config['edited_by'] = edited_by_config

    active_config = get_boolean_true('active')
    active_column = active_config.pop('column')
    default_columns['active'] = active_column
    default_config['active'] = active_config

    default_config['default_columns'] = default_columns
    return default_config

class TypeBase(object):

    id = get_id_primarykey()
    added_by = common_columns.get('integer_default')(1)
    added = common_columns.get('datetime_default_now')()
    active = common_columns.get('boolean_default_true')()

    def __repr__(self):
        return f"<{self.id}: {self.name}>"

    @classmethod
    def get_all(cls, attr):
        return DBSession.query(cls). \
                order_by(asc(getattr(cls, attr))). \
                all()

    @classmethod
    def by_attr_first(cls, attr, value):
        return DBSession.query(cls). \
                filter(getattr(cls, attr)==value). \
                first()

def get_type_table(model_name=None, table_name=None):
    if not model_name or not table_name: return False
    if 'type' in model_name.lower(): return False
    if 'type' in table_name.lower(): return False
    output_table_name = f'tbl_{table_name.lower()}_type'
    output_model_name = f'{model_name}Type'

    primary_id = get_id_primarykey()
    name = common_columns.get('title')()

    type_table_dict = {
            '__tablename__': output_table_name,
            'id': primary_id,
            'name': name,
                       }

    type_table = type(output_model_name, (TypeBase, DeclarativeBase), type_table_dict)
    return type_table

needs_length = ['unicode', 'numeric']

def get_phat_table(model_name=None, columndict={}):
    if not model_name or not columndict: return False
    return type(model_name, (PhatBase, DeclarativeBase), columndict)
