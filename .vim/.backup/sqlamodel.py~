# -*- coding: utf-8 -*-
import os
from datetime import datetime
from hashlib import sha256

from sqlalchemy import Table, ForeignKey, Column
from sqlalchemy.types import Unicode, Integer, DateTime, Boolean, Date, Numeric
from sqlalchemy.schema import UniqueConstraint
from sqlalchemy.orm import relation, synonym
from sqlalchemy import func, desc, asc

from rocket_app.model import DeclarativeBase, metadata, DBSession
from rocket_app.model.enumodel import *

class BatchImport(DeclarativeBase):
    __tablename__='tbl_batchimport'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    enum_import_type_id = Column(Integer, nullable=False)
    filename = Column(Unicode(255), nullable=False)
    group_id = Column(Integer)
    product_id = Column(Integer)
    processed = Column(DateTime, nullable=False, default=datetime.now)
    total_count = Column(Integer, default=0)
    accepted_count = Column(Integer, default=0)
    pre_purchase_count = Column(Integer, default=0)
    rejected_count = Column(Integer, default=0)
    notes = Column(Unicode(1000))
    is_complete_load = Column(Boolean)
    is_complete_update = Column(Boolean)
    is_successful = Column(Boolean, default=False)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_filename(cls, filename):
        return DBSession.query(cls).filter_by(filename=filename).first()

class BatchImportAudit(DeclarativeBase):
    __tablename__='tbl_batchimportaudit'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    batch_import_id = Column(Integer, nullable=False)
    audit_date_time = Column(DateTime, default=datetime.now, nullable=False)
    audit = Column(Unicode(1500), nullable=False)
    added_by = Column(Integer, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class BatchImportError(DeclarativeBase):
    __tablename__='tbl_batchimporterror'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    batch_import_id = Column(Integer, nullable=False)
    message = Column(Unicode(150), nullable=False)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class MemberRequest(DeclarativeBase):
    __tablename__='tbl_memberrequest'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    batch_import_id = Column(Integer)
    group_id = Column(Integer)
    id_number = Column(Unicode(16))
    first_name = Column(Unicode(50))
    surname = Column(Unicode(50))
    mobile = Column(Unicode(30))
    intermediary_code = Column(Unicode(255))
    gender = Column(Unicode(10))
    birthdate = Column(Date)
    language = Column(Unicode(10))
    startdate = Column(Date)
    beneficiary_id_number = Column(Unicode(16))
    beneficiary_first_name = Column(Unicode(50))
    beneficiary_surname = Column(Unicode(50))
    beneficiary_mobile = Column(Unicode(30))
    beneficiary_birthdate = Column(Date)
    group_reference = Column(Unicode(20))
    client_code = Column(Unicode(10))
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_batch_id_number(cls, batch_import_id, id_number):
        return DBSession.query(cls). \
                filter_by(batch_import_id=batch_import_id). \
                filter_by(id_number=id_number). \
                first()

    @classmethod
    def by_batch_id(cls, batch_import_id):
        return DBSession.query(cls). \
                filter_by(batch_import_id=batch_import_id). \
                all()

    @classmethod
    def by_batch_import_id(cls, tenant_id, batch_import_id):
        return DBSession.query(cls).\
            filter_by(tenant_id=tenant_id).\
            filter_by(batch_import_id=batch_import_id).\
            all()

class FamilyRequest(DeclarativeBase):
    __tablename__='tbl_familyrequest'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    batch_import_id = Column(Integer)
    group_id = Column(Integer)
    member_id_number = Column(Unicode(16))
    relationship = Column(Unicode(15))
    id_number = Column(Unicode(16))
    first_name = Column(Unicode(50))
    surname = Column(Unicode(50))
    mobile = Column(Unicode(30))
    gender = Column(Unicode(10))
    birthdate = Column(Date)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_batch_id_number(cls, batch_import_id, member_id_number, id_number):
        return DBSession.query(cls). \
                filter_by(batch_import_id=batch_import_id). \
                filter_by(member_id_number=member_id_number). \
                filter_by(id_number=id_number). \
                first()

    @classmethod
    def by_batch_id(cls, batch_import_id):
        return DBSession.query(cls). \
                filter_by(batch_import_id=batch_import_id). \
                all()

    @classmethod
    def by_batch_import_id(cls, tenant_id, batch_import_id):
        return DBSession.query(cls).\
            filter_by(tenant_id=tenant_id).\
            filter_by(batch_import_id=batch_import_id).\
            all()

class PurchaseRequest(DeclarativeBase):
    __tablename__='tbl_purchaserequest'
    id = Column(Integer, autoincrement=True, primary_key=True)
    batch_import_id = Column(Integer)
    id_number = Column(Unicode(16))
    product_code = Column(Unicode(50))
    purchase_date = Column(Date)
    group_id = Column(Integer)
    product_id = Column(Integer)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_batch_id_number(cls, batch_import_id, id_number):
        return DBSession.query(cls). \
                filter_by(batch_import_id=batch_import_id). \
                filter_by(id_number=id_number). \
                first()

    @classmethod
    def by_batch_id(cls, batch_import_id):
        return DBSession.query(cls). \
                filter_by(batch_import_id=batch_import_id). \
                all()

    @classmethod
    def by_batch_import_id(cls, batch_import_id):
        return DBSession.query(cls).\
            filter_by(batch_import_id=batch_import_id).\
            all()

class TextMerge(DeclarativeBase):
    __tablename__='tbl_textmerge'
    id = Column(Integer, autoincrement=True, primary_key=True)
    text = Column(Unicode(255))
    description = Column(Unicode(255))
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class Allocation(DeclarativeBase):
    __tablename__='tbl_allocation'
    id = Column(Integer, autoincrement=True, primary_key=True)
    description = Column(Unicode(100))
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class ClassCoverType(DeclarativeBase):
    __tablename__='tbl_classcovertype'
    id = Column(Integer, autoincrement=True, primary_key=True)
    enum_product_class_id = Column(Integer)
    enum_cover_type_id = Column(Integer)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class Loader(DeclarativeBase):
    # add cover type id here to remove CoverTypeLoader table
    __tablename__='tbl_loader'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    loader_name = Column(Unicode(100))
    is_single_claim = Column(Boolean, default=False)
    is_default = Column(Boolean, default=False)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class LoaderDetail(DeclarativeBase):
    __tablename__='tbl_loaderdetail'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    loader_id = Column(Integer)
    answer = Column(Unicode(100))
    percentage = Column(Numeric(20, 8))
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_loader_id(cls, loader_id):
        return DBSession.query(cls).filter_by(loader_id=loader_id).all()

class CoverTypeLoader(DeclarativeBase):
    __tablename__='tbl_covertypeloader'
    id = Column(Integer, autoincrement=True, primary_key=True)
    enum_cover_type_id = Column(Integer)
    loader_id = Column(Integer)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class GeneralLedgerAccount(DeclarativeBase):
    __tablename__='tbl_generalledgeraccount'
    id = Column(Integer, autoincrement=True, primary_key=True)
    description = Column(Unicode(100), nullable=False)
    dr_account = Column(Unicode(20), nullable=False)
    cr_account = Column(Unicode(20), nullable=False)
    gl_key = Column(Unicode(20))
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class Intermediary(DeclarativeBase):
    __tablename__='tbl_intermediary'
    id = Column(Integer, autoincrement=True, primary_key=True)
    code = Column(Unicode(10))
    enum_intermediary_type_id = Column(Integer, nullable=False, default=1)
    person_id = Column(Integer, nullable=True)
    group_id = Column(Integer, nullable=True)
    start_date = Column(Date)
    # Do not make links to my own table
    up_level_id = Column(Integer, nullable=True)
    commission_percentage = Column(Numeric(20, 8))
    enum_status_id = Column(Integer, nullable=False, default=1)
    disclosure = Column(Unicode(1000))
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class GroupRocket(DeclarativeBase):
    __tablename__='tbl_grouprocket'
    id = Column(Integer, autoincrement=True, primary_key=True)
    enum_group_type_id = Column(Integer, nullable=False, default=1)
    group_id = Column(Integer, nullable=False)
    policy_number_prefix = Column(Unicode(3), nullable=False) #used to prefix the policy number if set.
    enum_financial_year_id = Column(Integer)
    last_pay_date = Column(Date)
    last_bill_date = Column(Date)
    intermediary_id = Column(Integer)
    currency_id = Column(Integer)
    enum_billing_cycle_id = Column(Integer)
    discount = Column(Numeric(20, 8))
    start_date = Column(Date)
    end_date = Column(Date)
    enum_mail_option_id = Column(Integer)
    enum_message_batch_type_id = Column(Integer, nullable=False)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_group_id(cls, group_id):
        return DBSession.query(cls).filter_by(group_id=group_id).first()

class GroupDocument(DeclarativeBase):
    __tablename__='tbl_groupdocument'
    id = Column(Integer, autoincrement=True, primary_key=True)
    group_id = Column(Integer, nullable=False)
    system_document_id = Column(Integer, nullable=False)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class PremiumRate(DeclarativeBase):
    __tablename__='tbl_premiumrate'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    name = Column(Unicode(15))
    description = Column(Unicode(50))
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class PremiumRateDetail(DeclarativeBase):
    __tablename__='tbl_premiumratedetail'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    premium_rate_id = Column(Integer, nullable=False)
    enum_gender_id = Column(Integer, nullable=False)
    from_age = Column(Integer)
    to_age = Column(Integer)
    adjust_factor = Column(Numeric(20, 8), nullable=False)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_premium_rate_id(cls, premium_rate_id):
        return DBSession.query(cls). \
            filter_by(premium_rate_id=premium_rate_id). \
            order_by(asc(cls.from_age)). \
            all()

class Product(DeclarativeBase):
    __tablename__='tbl_product'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    code = Column(Unicode(10), nullable=False)
    description = Column(Unicode(50), nullable=False)
    group_id = Column(Integer, nullable=False)
    insurer_group_id = Column(Integer)
    enum_product_premium_type_id = Column(Integer, nullable=False, default=1)
    enum_product_type_id = Column(Integer, nullable=False)
    enum_product_class_id = Column(Integer, nullable=False)
    enum_cover_type_id = Column(Integer)
    enum_assured_type_id = Column(Integer)
    currency_id = Column(Integer)
    price = Column(Numeric(20, 8), nullable=False)
    premium_rate_id = Column(Integer)
    waiting_period = Column(Integer)
    active_period = Column(Integer)
    claim_grace_period = Column(Integer)
    enum_period_type_id = Column(Integer, nullable=False)
    min_age = Column(Integer, default=0)
    max_age = Column(Integer, default=0)
    is_stackable = Column(Boolean)
    stack_limit = Column(Numeric(20, 8))
    enum_purchase_type_id = Column(Integer, nullable=False)
    cover_product_id = Column(Integer)
    cover_period = Column(Integer)
    cover_restart_period = Column(Integer)
    refund_grace_period = Column(Integer)
    advance_reminder_period = Column(Integer)
    enum_product_claim_type_id = Column(Integer, default=1)
    number_of_payments = Column(Integer, nullable=False, default=1)
    enum_payment_frequency_id = Column(Integer, default=1)
    payout_cap = Column(Numeric(20, 8))
    product_price_plan_id = Column(Integer)
    max_claim_units = Column(Integer)
    cover_cancel_period = Column(Integer)
    lapse_period = Column(Integer)
    display_order = Column(Integer)
    image_name = Column(Unicode(255))
    contract_text_line_start = Column(Integer)
    enum_product_state_id = Column(Integer, nullable=False, default=1)
    # Do not make links to my own table 
    parent_id = Column(Integer)

    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_insurer_id(cls, insurer_group_id):
        return DBSession.query(cls).filter_by(insurer_group_id=insurer_group_id).all()

    @classmethod
    def by_code(cls, tenant_id, code):
        return DBSession.query(cls).\
            filter_by(tenant_id=tenant_id).\
            filter_by(code=code).\
            first()

class Industry(DeclarativeBase):
    __tablename__='tbl_industry'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    description = Column(Unicode(255), nullable=False)
    premium_rate_id = Column(Integer, nullable=False)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class ProductAllocation(DeclarativeBase):
    __tablename__='tbl_productallocation'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    product_id = Column(Integer, nullable=False)
    enum_allocation_type_id = Column(Integer)
    allocation_id = Column(Integer, nullable=False)
    general_ledger_account_id = Column(Integer)
    investment_fund_id = Column(Integer)
    is_claimable = Column(Boolean, default=True)
    percentage = Column(Numeric(20, 8), default=0)
    amount = Column(Numeric(20, 8), default=0)
    factor = Column(Numeric(20, 8), default=0)
    allocation_recipient_id = Column(Integer)
    group_id = Column(Integer)
    account_id = Column(Integer)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_product_id(cls, product_id, active=True):
        """Return all the Product allocations for this product id."""
        return DBSession.query(cls). \
            filter_by(product_id=product_id).\
            filter_by(active=active).\
            all()

class ProductBenefit(DeclarativeBase):
    __tablename__='tbl_productbenefit'
    id = Column(Integer, autoincrement=True, primary_key=True)
    master_product_id = Column(Integer, nullable=False)
    benefit_product_id = Column(Integer, nullable=False)
    percentage = Column(Numeric(20, 8))
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_master_product_id(cls, product_id):
        """Return all the Product Benefits for this master product id."""
        return DBSession.query(cls). \
            filter_by(master_product_id=product_id).\
            all()

class ProductDocument(DeclarativeBase):
    __tablename__='tbl_productdocument'
    id = Column(Integer, autoincrement=True, primary_key=True)
    product_id = Column(Integer, nullable=False)
    system_document_id = Column(Integer, nullable=False)
    enum_allocation_type_id = Column(Integer, nullable=False)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        """Return the Product document."""
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_product_id(cls, product_id):
        """Return all the Product Documents for this product id."""
        return DBSession.query(cls). \
            filter_by(product_id=product_id).\
            all()

# isnt this a Loader? - ProductEligibility
class ProductFamily(DeclarativeBase):
    __tablename__='tbl_productfamily'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    product_id = Column(Integer, nullable=False)
    enum_relationship_type_id = Column(Integer, nullable=False, default=1)
    from_age = Column(Integer)
    to_age = Column(Integer)
    percentage = Column(Numeric(20, 8), nullable=False)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_product_id(cls, product_id):
        return DBSession.query(cls). \
            filter_by(product_id=product_id).\
            order_by(asc(cls.from_age)). \
            order_by(asc(cls.to_age)). \
            all()

class ProductLoader(DeclarativeBase):
    __tablename__='tbl_productloaders'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    product_id = Column(Integer)
    loader_id = Column(Integer)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_product_id(cls, product_id):
        """Return all the Product Loaders for this product id."""
        return DBSession.query(cls). \
            filter_by(product_id=product_id).\
            all()

class ProductText(DeclarativeBase):
    __tablename__='tbl_producttext'
    id = Column(Integer, autoincrement=True, primary_key=True)
    product_id = Column(Integer)
    enum_product_text_type_id = Column(Integer)
    text = Column(Unicode(1024))
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_product_id(cls, product_id):
        """Return all the Product Texts for this product id."""
        return DBSession.query(cls). \
            filter_by(product_id=product_id).\
            all()

class Claim(DeclarativeBase):
    __tablename__='tbl_claim'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    enum_claim_status_id = Column(Integer)
    member_id = Column(Integer)
    enum_claim_initiation_id = Column(Integer)
    beneficiary_id = Column(Integer)
    group_id = Column(Integer)
    incident_date = Column(Date)
    claim_date = Column(Date)
    claimant_id_number = Column(Unicode(50))
    claimant_full_name = Column(Unicode(255))
    enum_cover_type_id = Column(Integer)
    claim_status_reason_id = Column(Integer)
    updated = Column(DateTime)
    updated_by = Column(Integer, nullable=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class ClaimComment(DeclarativeBase):
    __tablename__='tbl_claimcomment'
    id = Column(Integer, autoincrement=True, primary_key=True)
    claim_id = Column(Integer, nullable=False)
    comment = Column(Unicode(5000))
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_claim_id(cls, claim_id):
        return DBSession.query(cls).filter_by(claim_id=claim_id).First()

class ClaimDocument(DeclarativeBase):
    __tablename__='tbl_claimdocument'
    id = Column(Integer, autoincrement=True, primary_key=True)
    claim_id = Column(Integer, nullable=False)
    system_document_id = Column(Integer, nullable=False)
    filename = Column(Unicode(255))
    is_received = Column(Boolean)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class ClaimDocumentRepository(DeclarativeBase):
    __tablename__='tbl_claimdocumentrepository'
    id = Column(Integer, autoincrement=True, primary_key=True)
    claim_document_id = Column(Integer)
    document_id = Column(Integer)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class ClaimPaymentSchedule(DeclarativeBase):
    __tablename__='tbl_claimpaymentschedule'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    member_id = Column(Integer)
    claim_id = Column(Integer)
    policy_id = Column(Integer)
    product_allocation_id = Column(Integer)
    due_date = Column(Date)
    amount = Column(Numeric(20, 8))
    is_processed = Column(Boolean)
    transaction_reference = Column(Unicode(36), nullable=False)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class ClaimPolicy(DeclarativeBase):
    __tablename__='tbl_claimpolicy'
    id = Column(Integer, autoincrement=True, primary_key=True)
    claim_id = Column(Integer, nullable=False)
    policy_id = Column(Integer, nullable=False)
    enum_claim_policy_type_id = Column(Integer, nullable=False)
    is_valid = Column(Boolean, default=False)
    is_accepted = Column(Boolean, default=False)
    is_claimable = Column(Boolean, default=False)
    is_policy = Column(Boolean, default=False)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_claim_id(cls, claim_id):
        return DBSession.query(cls).filter_by(claim_id=claim_id).all()

class ClaimStatusReason(DeclarativeBase):
    __tablename__='tbl_claimstatusreason'
    id = Column(Integer, autoincrement=True, primary_key=True)
    label = Column(Unicode(50), nullable=False)
    description = Column(Unicode(500))
    enum_claim_status_id = Column(Integer, nullable=False)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class Member(DeclarativeBase):
    __tablename__='tbl_member'
    id = Column(Integer, autoincrement=True, primary_key=True)
    person_id = Column(Integer, nullable=False)
    register_date = Column(Date)
    pin = Column(Unicode(100))
    external_id = Column(Integer)
    enum_member_type_id = Column(Integer, default=1)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    """
    __table_args__ = (
        UniqueConstraint(person_id, tenant_id, name='unique_tenant_person'),
    )
    """

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_person_id(cls, person_id):
        return DBSession.query(cls).filter_by(person_id=person_id).first()

class MemberComment(DeclarativeBase):
    __tablename__='tbl_membercomment'
    id = Column(Integer, autoincrement=True, primary_key=True)
    member_id = Column(Integer, nullable=False)
    comment = Column(Unicode(5000))
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class MemberGroup(DeclarativeBase):
    __tablename__='tbl_membergroup'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    member_id = Column(Integer)
    deceased = Column(Boolean, default=False)
    group_id = Column(Integer)
    client_group_id = Column(Integer)
    group_reference = Column(Unicode(20))
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_member_id(cls, tenant_id, member_id, group_id):
        return DBSession.query(cls).\
            filter_by(tenant_id=tenant_id).\
            filter_by(member_id=member_id).\
            filter_by(group_id=group_id).\
            first()

    @classmethod
    def by_member_group(cls, tenant_id, member_id, group_id, active=True):
        return DBSession.query(cls).\
            filter_by(tenant_id=tenant_id).\
            filter_by(member_id=member_id).\
            filter_by(group_id=group_id).\
            filter_by(active=active).\
            first()

class MemberGroupContract(DeclarativeBase):
    __tablename__='tbl_membergroupcontract'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    member_group_id = Column(Integer, nullable=False)
    product_id = Column(Integer, nullable=False)
    policy_number = Column(Unicode(20), nullable=False, unique=True) #used to prefix the policy number if set.
    batch_import_id = Column(Integer)
    enum_payment_type_id =  Column(Integer, nullable=False, default=PaymentType.Client.value)
    industry_id = Column(Integer)
    is_inform = Column(Boolean, default=False)
    form_serial_number = Column(Unicode(8))
    lead_date = Column(Date)
    lead_by = Column(Integer)
    is_enrolled = Column(Boolean, default=False)
    enroll_date = Column(Date)
    enrolled_by = Column(Integer)
    product_premium = Column(Numeric(20, 8))
    product_sum_assured = Column(Numeric(20, 8))
    product_premium_reset_date = Column(Date)
    last_purchase_date = Column(Date)
    last_cover_to_date = Column(Date)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def last(cls):
        return DBSession.query(cls).order_by(desc(cls.id)).first()

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_policy_number(cls, num):
        return DBSession.query(cls).filter_by(policy_number=num).first()

    @classmethod
    def by_member_group_id(cls, member_group_id):
        return DBSession.query(cls).\
            filter_by(member_group_id=member_group_id).\
            all()

    @classmethod
    def by_member_group_product_id(cls, member_group_id, product_id):
        return DBSession.query(cls).\
            filter_by(member_group_id=member_group_id).\
            filter_by(product_id=product_id).\
            first()

class MemberFamily(DeclarativeBase):
    __tablename__='tbl_memberfamily'
    id = Column(Integer, autoincrement=True, primary_key=True)
    member_id = Column(Integer, nullable=False)
    family_member_id = Column(Integer, nullable=False)
    enum_relationship_type_id = Column(Integer, nullable=False, default=1)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_member_and_family_id(cls, member_id, family_member_id):
        return DBSession.query(cls).\
            filter_by(member_id=member_id).\
            filter_by(family_member_id=family_member_id).\
            first()

    @classmethod
    def by_member_id(cls, member_id, active=True):
        return DBSession.query(cls).\
            filter_by(member_id=member_id).\
            filter_by(active=active). \
            all()

    @classmethod
    def by_member_relation(cls, member_id, enum_relationship_type_id):
        return DBSession.query(cls).\
                filter_by(member_id=member_id). \
                filter_by(enum_relationship_type_id=enum_relationship_type_id). \
                all()

class MemberClient(DeclarativeBase):
    __tablename__='tbl_memberclient'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    member_id = Column(Integer, nullable=False)
    client_group_id = Column(Integer)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class PolicyBeneficiary(DeclarativeBase):
    __tablename__='tbl_policybeneficiary'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    member_group_contract_id = Column(Integer)
    beneficiary_id = Column(Integer, nullable=False)
    percentage = Column(Numeric(20, 8), nullable=False)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_member_group_contract_id(cls, member_group_contract_id):
        return DBSession.query(cls). \
            filter_by(active=True). \
            filter_by(member_group_contract_id=member_group_contract_id).\
            all()

    @classmethod
    def by_beneficiary_id(cls, member_group_contract_id, beneficiary_id):
        return DBSession.query(cls). \
            filter_by(member_group_contract_id=member_group_contract_id).\
            filter_by(beneficiary_id=beneficiary_id).\
            filter_by(active=True). \
            all()

class ClaimBeneficiary(DeclarativeBase):
    __tablename__='tbl_claimbeneficiary'
    id = Column(Integer, autoincrement=True, primary_key=True)
    claim_id = Column(Integer, nullable=False)
    beneficiary_id = Column(Integer, nullable=False)
    percentage = Column(Numeric(20, 8), nullable=False)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_claim_id(cls, claim_id):
        return DBSession.query(cls).filter_by(claim_id=claim_id).First()

    @classmethod
    def by_beneficiary_id(cls, beneficiary_id):
        return DBSession.query(cls). \
            filter_by(beneficiary_id=beneficiary_id).\
            filter_by(active=True). \
            all()

class PolicyFamily(DeclarativeBase):
    __tablename__='tbl_policyfamily'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    member_group_contract_id = Column(Integer)
    family_code =  Column(Unicode(2), nullable=False)
    member_family_id = Column(Integer, nullable=False)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_member_group_contract_id(cls, member_group_contract_id):
        return DBSession.query(cls). \
            filter_by(member_group_contract_id=member_group_contract_id).\
            all()

class MemberGroupContractLoader(DeclarativeBase):
    __tablename__='tbl_membergroupcontractloader'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    member_group_contract_id = Column(Integer)
    loader_id = Column(Integer)
    loader_name = Column(Unicode(100))
    loader_detail_id = Column(Integer)
    answer = Column(Unicode(100))
    percentage = Column(Numeric(20, 8))
    is_single_claim = Column(Boolean)
    is_default = Column(Boolean)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        """Return the Product loader."""
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_member_contract_id(cls, member_group_contract_id):
        """Return all the Product Loaders for this product id."""
        return DBSession.query(cls). \
            filter_by(member_group_contract_id=member_group_contract_id).\
            all()

class SystemDocument(DeclarativeBase):
    __tablename__='tbl_systemdocument'
    id = Column(Integer, autoincrement=True, primary_key=True)
    name = Column(Unicode(50), nullable=False)
    description = Column(Unicode(500))
    enum_document_usage_id = Column(Integer)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class PrePurchase(DeclarativeBase):
    __tablename__='tbl_prepurchase'
    id = Column(Integer, autoincrement=True, primary_key=True)
    member_id = Column(Integer, nullable=False)
    product_id = Column(Integer, nullable=False)
    purchase_date = Column(Date)
    cover_release_date = Column(Date)
    batch_import_id = Column(Integer)
    group_id = Column(Integer)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)
    tenant_id = Column(Integer, default=1, nullable=False)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_member_id(cls, tenant_id, member_id, group_id):
        return DBSession.query(cls).\
            filter_by(tenant_id=tenant_id).\
            filter_by(member_id=member_id).\
            filter_by(group_id=group_id).\
            all()

    @classmethod
    def by_member_product(cls, member_id, product_id):
        return DBSession.query(cls).\
            filter_by(member_id=member_id).\
            filter_by(product_id=product_id).\
            all()

class Policy(DeclarativeBase):
    __tablename__='tbl_policy'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    member_id = Column(Integer, nullable=False)
    policy_number = Column(Unicode(20), nullable=False, unique=True) #used to prefix the policy number if set.
    product_id = Column(Integer, nullable=False)
    group_id = Column(Integer)
    master_policy_id = Column(Integer)
    master_product_id = Column(Integer)
    cover_product_id = Column(Integer)
    cover_period = Column(Integer)
    cover_restart_period = Column(Integer)
    purchase_date = Column(Date)
    valid_from_date = Column(Date)
    valid_to_date = Column(Date)
    purchase_price = Column(Numeric(20, 8))
    currency_id = Column(Integer)
    exchange_rate = Column(Numeric(20, 8))
    base_currency_id = Column(Integer)
    base_amount = Column(Numeric(20, 8))
    transaction_reference = Column(Unicode(36), nullable=False)
    enum_policy_state_id = Column(Integer)
    enum_purchase_status_id = Column(Integer)
    enum_purchase_type_id = Column(Integer)
    enum_purchase_method_id = Column(Integer)
    batch_import_id = Column(Integer)
    is_processed = Column(Boolean)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_member_id(cls, member_id):
        return DBSession.query(cls).filter_by(member_id=member_id).all()

    @classmethod
    def by_policy_number(cls, num):
        return DBSession.query(cls).filter_by(policy_number=num).first()

class Transaction(DeclarativeBase):
    __tablename__='tbl_transaction'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    policy_id = Column(Integer)
    claim_id = Column(Integer)
    product_allocation_id = Column(Integer)
    enum_transaction_status_id = Column(Unicode(255))
    member_id = Column(Integer)
    transaction_reference = Column(Unicode(36))
    receipt_no = Column(Unicode(20))
    currency_id = Column(Integer)
    amount = Column(Numeric(20, 8))
    base_currency_id = Column(Integer)
    base_amount = Column(Numeric(20, 8))
    exchange_rate = Column(Numeric(20, 8))
    bank_account_id = Column(Integer)
    description = Column(Unicode(100))
    is_claimable = Column(Boolean)
    general_ledger_account_id = Column(Integer)
    group_id = Column(Integer, nullable=True)
    updated_by = Column(Integer, nullable=False)
    updated = Column(DateTime, default=datetime.now)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class AuditLog(DeclarativeBase):
    __tablename__='tbl_auditlog'
    id = Column(Integer, autoincrement=True, primary_key=True)
    user_id = Column(Integer, nullable=False)
    tenant_id = Column(Integer, default=1, nullable=False)
    table_name = Column(Unicode(255), nullable=False)
    datetimestamp = Column(DateTime, default=datetime.now)
    function_name = Column(Unicode(255), nullable=False)
    enum_audit_type_id = Column(Integer, nullable=False)
    note = Column(Unicode(255))

class InvestmentFund(DeclarativeBase):
    __tablename__='tbl_investmentfund'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    code = Column(Unicode(10), nullable=False)
    name = Column(Unicode(50), nullable=False)
    fund_manager = Column(Unicode(50), nullable=False)
    contact_number = Column(Unicode(20), nullable=False)
    mobile = Column(Unicode(20), nullable=False)
    email_address = Column(Unicode(250), nullable=False)
    enum_investment_method_id = Column(Integer)
    compliance = Column(Boolean, default=True)
    weighted_unit_value = Column(Numeric(20, 8))
    unit_cost = Column(Numeric(20, 8))
    total_units = Column(Numeric(20, 8))
    yield_to_use = Column(Numeric(20, 8))
    decimals_on_price = Column(Integer, nullable=False, default=2)
    decimals_on_units = Column(Integer, nullable=False, default=2)
    enum_investment_repurchase_option_id = Column(Integer)
    active = Column(Boolean, default=True)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

class SessionKey(DeclarativeBase):
    __tablename__='tbl_sessionkey'
    id = Column(Integer, autoincrement=True, primary_key=True)
    name = Column(Unicode(255), nullable=False)

class SessionValue(DeclarativeBase):
    __tablename__='tbl_sessionvalue'
    id = Column(Integer, autoincrement=True, primary_key=True)
    key_id = Column(Integer, nullable=False)
    user_id = Column(Integer, nullable=False)
    value = Column(Unicode(255), nullable=False)

class PasswordHistory(DeclarativeBase):
    __tablename__='tbl_passwordhistory'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    user_id = Column(Integer, nullable=False)
    password = Column(Unicode(128), nullable=False)
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

class UserGuid(DeclarativeBase):
    __tablename__='tbl_userguid'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    user_id = Column(Integer, nullable=False)
    guid = Column(Unicode(32), nullable=False)
    expires = Column(DateTime, nullable=False)

    @classmethod
    def by_guid(cls, guid):
        return DBSession.query(cls).filter_by(guid=guid).first()

class Quote(DeclarativeBase):
    __tablename__='tbl_quote'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    user_id = Column(Integer, nullable=False)
    member_id = Column(Integer, nullable=False)
    group_id = Column(Integer, nullable=False)
    product_id = Column(Integer, nullable=False)
    premium = Column(Numeric(20, 8), default=0)  #Total premium for member and other lives assured.
    sum_assured = Column(Numeric(20, 8), default=0)
    active = Column(Boolean, default=True)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def last(cls):
        return DBSession.query(cls).order_by(desc(cls.id)).first()

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_user_id(cls, tenant_id, member_id, group_id, user_id, active=True):
        return DBSession.query(cls).\
            filter_by(tenant_id=tenant_id).\
            filter_by(member_id=member_id).\
            filter_by(group_id=group_id).\
            filter_by(user_id=user_id).\
            filter_by(active=active).\
            first()

class QuoteFamily(DeclarativeBase):
    __tablename__='tbl_quotefamily'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    quote_id = Column(Integer, nullable=False)
    member_family_id = Column(Integer)
    product_family_id = Column(Integer, nullable=False)
    family_code =  Column(Unicode(2), nullable=False)
    enum_relationship_type_id = Column(Integer, nullable=False, default=1)
    birthdate = Column(Date, nullable=False)
    enum_gender_id = Column(Integer, nullable=False)
    percentage = Column(Numeric(20, 8), nullable=False) #Cover %agem
    premium = Column(Numeric(20, 8)) #Premium for this family member based on product cover % of sum assured or premium of the member.
    sum_assured = Column(Numeric(20, 8))
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_quote_id(cls, quote_id):
        return DBSession.query(cls). \
            filter_by(quote_id=quote_id).\
            all()

class QuoteLoader(DeclarativeBase):
    __tablename__='tbl_quoteloader'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    quote_id = Column(Integer, nullable=False)
    loader_id = Column(Integer)
    loader_name = Column(Unicode(100))
    loader_detail_id = Column(Integer)
    answer = Column(Unicode(100))
    percentage = Column(Numeric(20, 8)) #Added in order to avoid complicating the calculation too much. Populated from LoaderDetail based on answer selected.
    added_by = Column(Integer, nullable=False)
    added = Column(DateTime, default=datetime.now)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_quote_id(cls, quote_id):
        return DBSession.query(cls). \
            filter_by(quote_id=quote_id).\
            all()

class Premium(DeclarativeBase):
    __tablename__='tbl_premium'
    id = Column(Integer, autoincrement=True, primary_key=True)
    tenant_id = Column(Integer, default=1, nullable=False)
    policy_id = Column(Integer, nullable=False)
    reference = Column(Unicode(30))
    bank_reference = Column(Unicode(30))
    receipt_number = Column(Unicode(10))
    payment_date = Column(Date, nullable=False)
    enum_payment_type_id = Column(Integer, nullable=False)
    enum_paywhat_type_id = Column(Integer, nullable=False)
    currency_id = Column(Integer, nullable=False)
    amount = Column(Numeric(20, 8))
    exchange_rate = Column(Numeric(20, 8))
    base_currency_id = Column(Integer)
    base_amount = Column(Numeric(20, 8))
    payment_message = Column(Unicode(50))
    active = Column(Boolean, default=True)
    #Transaction datetime and by whom... but if auto then cannot say whom
    added = Column(DateTime, default=datetime.now)
    added_by = Column(Integer)

    @classmethod
    def by_id(cls, id):
        return DBSession.query(cls).filter_by(id=id).first()

    @classmethod
    def by_policy_id(cls, policy_id):
        return DBSession.query(cls). \
            filter_by(policy_id=policy_id). \
            all()
            :qa

