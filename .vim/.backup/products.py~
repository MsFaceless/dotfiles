# -*- coding: utf-8 -*-
"""ProfileController controller module"""

import os, json
from webob.static import FileApp
from datetime import datetime
from pkg_resources import resource_filename

from tg import expose, require, redirect, validate, flash, url, request, response, predicates, use_wsgi_app

from rocket_app.model import *

from rocket_app.lib.tg_utils import *
from rocket_app.lib.base import BaseController
from rocket_app.lib.tgfileuploader import FileUploader
from rocket_app.lib.wizard_creator import WizardCreator
from rocket_app.lib.contract_document import ContractDocument
from rocket_app.lib.tg_generic_reportlab import PDFCreator, Paragraph

from rocket_app.controllers.setup import SetupController
from rocket_app.controllers.groups import GroupController
from rocket_app.controllers.common import CommonController
from rocket_app.controllers.allocations import AllocationController
from rocket_app.controllers.glaccounts import GeneralLedgerAccountController

from rocket_app.orchestration.common import CommonOrchestration
from rocket_app.orchestration.products import ProductOrchestration

from sqlalchemy import func, desc, asc, or_

FILENAME = os.path.abspath(resource_filename('rocket_app', 'public'))
PUBLIC_DIRNAME = os.path.join(FILENAME)
PDF_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'pdf')
IMAGES_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'images')
UPLOADS_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'uploads')
CATALOG_DIRNAME = os.path.join(IMAGES_DIRNAME, 'catalog_pictures')

SEARCHKEY_PRODUCT = 'Product_SearchKeyword'
SEARCHKEY_PREMIUM_RATE = 'PremiumRate_SearchKeyword'
SEARCHKEY_INVESTMENT = 'InvestmentFund_SearchKeyword'
SEARCHKEY_PRODUCT_STATE = 'ProductState_SearchKeyword'
SEARCHKEY_PREMIUM_RATE_DTL = 'PremiumRateDetail_SearchKeyword'

LIMIT = 20

SETUP = SetupController()
GROUP = GroupController()
COMMON = CommonController()
ALLOC = AllocationController()
COMMONORC = CommonOrchestration()
PRODUCTORC = ProductOrchestration()
GLACCOUNT = GeneralLedgerAccountController()

__all__ = ['ProductController']

class ProductController(BaseController):
    """Docstring for products."""

    @require(predicates.has_any_permission('Product Setup', 'Developer'))
    @expose('rocket_app.templates.generic')
    def index(self, *args, **kwargs):
        #self.create_random_products()
        title = "Products"
        html = self.get_active_product_html(*args, **kwargs)
        javascript = self.get_javascript_product_onload()
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_product_htmltbl(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        img_active = "<img src='/images/icon_check.png' />"
        img_inactive = "<img src='/images/icon_cross.png' />"
        outputlist = []
        dbase_query = self.get_all_products_list(**kwargs)
        for item in dbase_query:
            disable_text = 'disable' if item.active else 'enable'
            code = f"<div class='edit product_view' product_id='{item.id}'>{item.code}</div>"
            if item.product_state_id == ProductState.Sandbox.value:
                code = f"<div class='edit product_edit' product_id='{item.id}'>{item.code}</div>"
            outputlist.append({
                'code' : code,
                'description' : item.description,
                'cover_type_id' : get_name_from_id(CoverType, item.cover_type_id),
                'assured_type_id' : get_name_from_id(AssuredType, item.assured_type_id),
                'price' : getcurrency(item.price),
                'product_type_id' : get_name_from_id(ProductType, item.product_type_id),
                'state' : get_name_from_id(ProductState, item.product_state_id),
                'active' : img_active if item.active else img_inactive,
                'disable' : f"<div class='product_active' active='{item.active}' product_id='{item.id}' desc='{item.description}'>{disable_text}</div>",
                })
        dbcolumnlist=[
                'code',
                'description',
                'cover_type_id',
                'assured_type_id',
                'price',
                'product_type_id',
                'state',
                'active',
                'disable',
                ]
        theadlist=[
                'Code',
                'Description',
                'Cover',
                'Assured',
                'Purchase Price',
                'Product Type',
                'Product State',
                'Active',
                '',
                ]
        tdclasslist = [
                'action_link',
                '',
                '',
                '',
                '',
                '',
                '',
                'text-center',
                'action_link text-right',
                ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "product_table", tdclasslist)
        javascript = """
        <script>
        $(".product_edit").click(function(){
            var data = {product_id : $(this).attr('product_id')};
            $.redirect('/product/edit', data);
        });
        $(".product_view").click(function(){
            var data = {product_id : $(this).attr('product_id')};
            $.redirect('/product/view', data);
        });
        $(".product_active").click(function(){
            var text = $(this).html();
            var desc = $(this).attr('desc');
            var result = window.confirm("Are you sure you want to " + text + " '" + desc + "'?");
            if(result === true){
                var data = 'product_id='+$(this).attr('product_id');
                $.post('/product/save_product_active?', data, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $.redirect('/product/index');
                    }
                    return false;
                });
            }
        });
        </script>
        """
        return html + javascript

    @expose()
    def get_active_product_html(self, *args, **kwargs):
        searchproduct = COMMON.get_searchphrase(**{'searchkey' : SEARCHKEY_PRODUCT})
        searchstate = str_to_int(COMMON.get_searchphrase(**{'searchkey' : SEARCHKEY_PRODUCT_STATE}))
        selectbox_product_states = self.get_selectbox_product_states(**{'id' : 'product_state_id', 'selected' : searchstate, 'class_names': 'col-md-4'})
        producttable = self.get_product_htmltbl(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Products</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_product" class="btn btn-primary ml-auto">Create a new Product</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-6 d-flex">
                            <input id='search' type="text" class="form-control mr-2 search" name="searchphrase" placeholder="Search by Code or Description" value='{searchproduct}'>
                            {selectbox_product_states}
                        </div>
                        <div class="col-md-4 pl-0">
                            <button id='btn_search' class="btn btn-primary action_search">Search</button>
                            <button id='btn_reset' class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div id='div_product_table' class="table-responsive">
                        {producttable}
                    </div>
                </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_javascript_product_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_product").click(function(){
            $.redirect('/product/new');
        });
        $('#btn_search').click(function(){
            var kwargs = 'searchphrase='+$('#search').val();
            kwargs += '&product_state_id='+$('#product_state_id option:selected').val();
            $('#div_product_table').load('/product/get_product_htmltbl', kwargs, function(data){
                return false;
            });
        })
        $('#btn_reset').click(function(){
            $('#search').val('').focus();
            $('#div_product_table').load('/product/get_product_htmltbl', 'reset=true', function(data){
                return false;
            });
        })
        """
        return javascript

    @expose('rocket_app.templates.generic')
    def new(self, *args, **kwargs):
        kwargs['product_details_form_id'] = 'form_new_product_details'
        kwargs['product_additional_id'] = 'form_new_additional'
        kwargs['product_pricing_id'] = 'form_new_pricing'
        kwargs['product_durations_id'] = 'form_new_durations'
        kwargs['product_stack_id'] = 'form_new_stack'
        kwargs['product_claim_details_id'] = 'form_new_claim_details'
        kwargs['product_ages_id'] = 'form_new_ages'
        kwargs['product_initial_cover_id'] = 'form_new_initial_cover'
        kwargs['prepurchase_form_id'] = 'form_new_prepurchase_text'
        kwargs['purchase_form_id'] = 'form_new_purchase_text'
        kwargs['claim_form_id'] = 'form_new_claim_text'
        kwargs['refund_form_id'] = 'form_new_refund_text'
        kwargs['reminder_form_id'] = 'form_new_reminder_text'
        kwargs['product_purchase_form_id'] = 'form_new_purchase'
        kwargs['product_claim_id'] = 'form_new_claim'
        kwargs['product_refund_id'] = 'form_new_refund'

        ages = self.get_product_ages_html(**kwargs)
        stacks = self.get_product_stack_html(**kwargs)
        prepurchase = self.get_prepurchase_html(**kwargs)
        refund_setup = self.get_refund_setup_html(**kwargs)
        claim_setup = self.get_claim_setup_html(**kwargs)
        durations = self.get_product_durations_html(**kwargs)
        claim_details = self.get_claim_details_html(**kwargs)
        initial_cover = self.get_initial_cover_html(**kwargs)
        purchase = self.get_purchase_confirmation_html(**kwargs)
        product_details = self.get_product_details_html(**kwargs)
        product_pricing = self.get_product_pricing_html(**kwargs)
        additional_setup = self.get_additional_setup_html(**kwargs)
        purchase_reminder = self.get_purchase_reminder_html(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card ">
                    <div class="card-header header_only d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">New Product</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button class="btn btn-primary ml-auto action_back products_back">Back to Products List</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        {product_details}
        {additional_setup}
        {product_pricing}
        {durations}
        {initial_cover}
        {stacks}
        {claim_details}
        {ages}
        <div class="row">
            {prepurchase}
            {purchase}
            {purchase_reminder}
            {claim_setup}
            {refund_setup}
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <button id='product_save' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary products_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        var formproductdetails = "#form_new_product_details";
        var formadditional = "#form_new_additional";
        var formpricing = "#form_new_pricing";
        var formdurations = "#form_new_durations";
        var formstack = "#form_new_stack";
        var formclaimdetails = "#form_new_claim_details";
        var formages = "#form_new_ages";
        var forminitialcover = "#form_new_initial_cover";
        var formclaim = "#form_new_claim_text";
        var formrefund = "#form_new_refund_text";
        var formreminder = "#form_new_reminder_text";
        var formproductpurchase = "#form_new_purchase";
        var formpurchase = "#form_new_purchase_text";
        var formprepurchase = "#form_new_prepurchase_text";
        var formproductclaim = "#form_new_claim";
        var formproductrefund = "#form_new_refund";


        setFormValidation(formproductdetails);
        setFormValidation(formadditional);
        setFormValidation(formpricing);
        setFormValidation(formdurations);
        setFormValidation(formstack);
        setFormValidation(formclaimdetails);
        setFormValidation(formages);
        setFormValidation(forminitialcover);
        setFormValidation(formclaim);
        setFormValidation(formrefund);
        setFormValidation(formproductpurchase);
        setFormValidation(formreminder);
        setFormValidation(formpurchase);
        setFormValidation(formprepurchase);
        setFormValidation(formproductclaim);
        setFormValidation(formproductrefund);

        $('#product_save').click(function(){

            var valid_product_details = FormIsValid(formproductdetails);
            var valid_additional = FormIsValid(formadditional);
            var valid_pricing = FormIsValid(formpricing);
            var valid_durations = FormIsValid(formdurations);
            var valid_stack = FormIsValid(formstack);
            var valid_claim_details = FormIsValid(formclaimdetails);
            var valid_ages = FormIsValid(formages);
            var valid_initial_cover = FormIsValid(forminitialcover);
            var valid_claim = FormIsValid(formclaim);
            var valid_refund = FormIsValid(formrefund);
            var valid_reminder = FormIsValid(formreminder);
            var valid_product_purchase = FormIsValid(formproductpurchase);
            var valid_purchase = FormIsValid(formpurchase);
            var valid_prepurchase = FormIsValid(formprepurchase);
            var valid_product_claim = FormIsValid(formproductclaim);
            var valid_product_refund = FormIsValid(formproductrefund);

            if(valid_product_details &&
                valid_additional &&
                valid_pricing &&
                valid_durations &&
                valid_stack &&
                valid_claim_details &&
                valid_ages &&
                valid_initial_cover &&
                valid_product_purchase &&
                valid_refund &&
                valid_reminder &&
                valid_claim &&
                valid_prepurchase &&
                valid_purchase &&
                valid_product_claim &&
                valid_product_refund){

                    var formserial = new Object;
                    formserial['formproductdetails'] = getFormData(formproductdetails);
                    formserial['formadditional'] = getFormData(formadditional);
                    formserial['formpricing'] = getFormData(formpricing);
                    formserial['formdurations'] = getFormData(formdurations);
                    formserial['formstack'] = getFormData(formstack);
                    formserial['formclaimdetails'] = getFormData(formclaimdetails);
                    formserial['formages'] = getFormData(formages);
                    formserial['forminitialcover'] = getFormData(forminitialcover);
                    formserial['formproductpurchase'] = getFormData(formproductpurchase);
                    formserial['formclaim'] = getFormData(formclaim);
                    formserial['formrefund'] = getFormData(formrefund);
                    formserial['formreminder'] = getFormData(formreminder);
                    formserial['formpurchase'] = getFormData(formpurchase);
                    formserial['formprepurchase'] = getFormData(formprepurchase);
                    formserial['formproductclaim'] = getFormData(formproductclaim);
                    formserial['formproductrefund'] = getFormData(formproductrefund);

                    var data = {data : JSON.stringify(formserial)};
                    $.post('/product/save_new?', data, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect('/product/edit', {'product_id' : result.product_id});
                        }
                        return false;
                    });
            };
        });

        function change_initial_cover_product(selector){
            $(selector).change(function(){
                var selected_class = $('#product_class_id option:selected').val();
                var selected_type = $('#product_type_id option:selected').val();
                var kwargs = 'product_type_id='+selected_type+'&product_class_id='+selected_class+'&id=cover_type_id';
                $('#div_initial_cover_product').load('/product/get_selectbox_products?'+kwargs, function(data){
                    return false;
                });
            });
        };
        // REMOVE
        // change_initial_cover_product('#product_class_id');
        // change_initial_cover_product('#product_type_id');
        $('#product_class_id').trigger('change');

        $('.products_back').click(function(){
            $.redirect('/product/index');
        });
        """
        title = "New Product"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def save_new(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success': False})
        return PRODUCTORC.save_new_product(data)

    @expose()
    def save_product_active(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id: return json.dumps({'success': False})
        return PRODUCTORC.save_product_active(kwargs)

    @expose()
    def save_product_expire_edit(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id: return json.dumps({'success': False})
        result = PRODUCTORC.save_product_expire_edit(kwargs)
        return result

    @expose()
    def get_purchase_confirmation_html(self, *args, **kwargs):
        product = kwargs.get('product', None)
        purchase = kwargs.get('purchase', None)
        form_id = kwargs.get('purchase_form_id', None)
        hidden_input = COMMON.get_hidden_input(**{'id': 'id', 'value': purchase.id}) if purchase else ''
        text = purchase.text if purchase else ''
        if not text: text = ''
        html = f"""
        <div class="col-md-6">
            <div class="card ">
                <div class="card-header ">
                    <h4 class="card-title">Purchase Confirmation</h4>
                </div>
                <div class="card-body ">
                    <form id="{form_id}">
                        {hidden_input}
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Purchase Confirmation Text</label>
                                    <div class="col-md-9">
                                        <textarea name='text' type="text" class="form-control" rows="4" maxlength='255'>{text}</textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_initial_cover_html(self, *args, **kwargs):
        product = kwargs.get('product', None)
        form_id = kwargs.get('product_initial_cover_id', None)
        product_id = product.id if product else None
        selected = product.cover_product_id if product else ''
        selectbox_products = self.get_selectbox_products(**{'id' : 'cover_product_id', 'selected' : selected, 'product_id' : product_id})
        cover_period = product.cover_period if product else ''
        if not cover_period: cover_period = ''
        cover_restart_period = product.cover_restart_period if product else ''
        if not cover_restart_period: cover_restart_period = ''
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card ">
                    <div class="card-header">
                        <h4 class="card-title">Initial Cover</h4>
                    </div>
                    <div class="card-body">
                        <form id='{form_id}' class='d-flex flex-wrap'>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Initial Cover Product</label>
                                    <div id='div_initial_cover_product' class="col-md-9">
                                        {selectbox_products}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Initial Cover Period</label>
                                    <div class="col-md-9 d-flex align-items-center">
                                        <input type="number" class="form-control col-md-6" name='cover_period' value='{cover_period}'>
                                        <span class="ml-3">Days</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Initial Cover Period Starts Again After</label>
                                    <div class="col-md-9 d-flex align-items-center">
                                        <input type="number" class="form-control col-md-6" name='cover_restart_period' value='{cover_restart_period}'>
                                        <span class="ml-3">Days Cover Break</span>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_product_ages_html(self, *args, **kwargs):
        product = kwargs.get('product', None)
        form_id = kwargs.get('product_ages_id', None)
        min_age = product.min_age if product and product.min_age else ''
        max_age = product.max_age if product and product.max_age else ''
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card ">
                    <div class="card-header">
                        <h4 class="card-title">Age Limits</h4>
                    </div>
                    <div class="card-body">
                        <form id='{form_id}' class='d-flex flex-wrap'>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Minimum Age</label>
                                    <div class="col-md-9">
                                        <input type="number" class="form-control" name='min_age' value='{min_age}'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Maximum Age</label>
                                    <div class="col-md-9">
                                        <input type="number" class="form-control" name="max_age" value='{max_age}'>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_claim_details_html(self, *args, **kwargs):
        product = kwargs.get('product', None)
        disabled = 'disabled' if product else ''
        selectbox_disabled = True if product else False
        form_id = kwargs.get('product_claim_details_id', None)
        selected_claim = product.product_claim_type_id if product else ''
        selectbox_claim_types = self.get_selectbox_claim_types(**{'id' : 'product_claim_type_id', 'selected' : selected_claim})
        selected_freq = product.payment_frequency_id if product else ''
        selectbox_payment_frequency = self.get_selectbox_payment_frequency(**{'id' : 'payment_frequency_id', 'selected' : selected_freq, 'disabled': selectbox_disabled})
        max_claim_units = product.max_claim_units if product else ''
        if not max_claim_units: max_claim_units = ''
        payout_cap = getcurrency(product.payout_cap) if product else ''
        if not payout_cap: payout_cap = ''
        number_of_payments = product.number_of_payments if product else ''
        if not number_of_payments: number_of_payments = ''
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card ">
                    <div class="card-header">
                        <h4 class="card-title">Claim Details</h4>
                    </div>
                    <div class="card-body">
                        <form id='{form_id}' class='d-flex flex-wrap'>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Claim Type</label>
                                    <div class="col-md-9">
                                        {selectbox_claim_types}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Maximum Claim Units</label>
                                    <div class="col-md-9">
                                        <input type="number" class="form-control" name='max_claim_units' value='{max_claim_units}'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Max Claim Payout</label>
                                    <div class="col-md-9">
                                        <input type="number" class="form-control" name='payout_cap' value='{payout_cap}' {disabled}>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required>Number of Payments</label>
                                    <div class="col-md-9">
                                        <input type="number" class="form-control" name='number_of_payments' required value='{number_of_payments}'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Payout Frequency</label>
                                    <div class="col-md-9">
                                        {selectbox_payment_frequency}
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_product_durations_html(self, *args, **kwargs):
        product = kwargs.get('product', None)
        form_id = kwargs.get('product_durations_id', None)
        active_period = product.active_period if product else ''
        if not active_period: active_period = ''
        selected = product.period_type_id if product else ''
        selectbox_period_type = self.get_selectbox_period_type(**{'id' : 'period_type_id', 'required' : True, 'selected' : selected})
        waiting_period = product.waiting_period if product else ''
        if not waiting_period: waiting_period = ''
        cover_cancel_period = product.cover_cancel_period if product else ''
        if not cover_cancel_period: cover_cancel_period = ''
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card ">
                    <div class="card-header">
                        <h4 class="card-title">Durations</h4>
                    </div>
                    <div class="card-body">
                        <form id='{form_id}' class='d-flex flex-wrap'>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required>Period Type</label>
                                    <div class="col-md-9 d-flex align-items-center">
                                        {selectbox_period_type}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Waiting Period</label>
                                    <div class="col-md-9 d-flex align-items-center">
                                        <input type="number" class="form-control col-md-6" name='waiting_period' value='{waiting_period}'>
                                        <span class="ml-3">Days</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Active Period</label>
                                    <div class="col-md-9 d-flex align-items-center">
                                        <input type="number" class="form-control" name='active_period' value='{active_period}'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Cover Cancel Period</label>
                                    <div class="col-md-9 d-flex align-items-center">
                                        <input type="number" class="form-control col-md-6" name='cover_cancel_period' value='{cover_cancel_period}'>
                                        <span class="ml-3">Days</span>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_product_stack_html(self, *args, **kwargs):
        product = kwargs.get('product', None)
        form_id = kwargs.get('product_stack_id', None)
        stack_limit = product.stack_limit if product else ''
        if not stack_limit: stack_limit = ''
        is_stackable = 'checked' if product and product.is_stackable else ''
        if not is_stackable: is_stackable = ''
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card ">
                    <div class="card-header">
                        <h4 class="card-title">Product Stack</h4>
                    </div>
                    <div class="card-body">
                        <form id='{form_id}' class='d-flex flex-wrap'>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Stack Limit</label>
                                    <div class="col-md-9">
                                        <input type="number" class="form-control" name='stack_limit' value='{stack_limit}'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Stackable</label>
                                    <div class="form-check">
                                        <label class="form-check-label">
                                            <input class="form-check-input" type="checkbox" name='is_stackable' {is_stackable}>
                                            <span class="form-check-sign"></span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_additional_setup_html(self, *args, **kwargs):
        product = kwargs.get('product', None)
        form_id = kwargs.get('product_additional_id', None)
        selected_cover = product.cover_type_id if product else ''
        selectbox_cover_types = self.get_selectbox_cover_types(**{'id' : 'cover_type_id', 'selected' : selected_cover})
        selected_assured = product.assured_type_id if product else ''
        selectbox_assured_types = self.get_selectbox_assured_types(**{'id' : 'assured_type_id', 'selected' : selected_assured})
        selected_product_owner_group = product.group_id if product else ''
        selectbox_product_owner_groups = COMMON.get_selectbox_groups(**{'id' : 'group_id', 'required' : True, 'selected' : selected_product_owner_group, 'group_type_id' : GroupType.Product_Owner.value})
        selected_insurer_group = product.insurer_group_id if product else ''
        selectbox_insurer_groups = COMMON.get_selectbox_groups(**{'id' : 'insurer_group_id', 'selected' : selected_insurer_group, 'group_type_id' : GroupType.Insurer.value})
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card ">
                    <div class="card-header">
                        <h4 class="card-title">Additional Setup</h4>
                    </div>
                    <div class="card-body">
                        <form id='{form_id}' class='d-flex flex-wrap'>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required>Group</label>
                                    <div class="col-md-9">
                                        {selectbox_product_owner_groups}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Insurer</label>
                                    <div class="col-md-9">
                                        {selectbox_insurer_groups}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Cover Type</label>
                                    <div class="col-md-9">
                                        {selectbox_cover_types}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Life Assured Type</label>
                                    <div class="col-md-9">
                                        {selectbox_assured_types}
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_product_pricing_html(self, *args, **kwargs):
        product = kwargs.get('product', None)
        form_id = kwargs.get('product_pricing_id', None)
        selected_curr = product.currency_id if product else ''
        selectbox_currency = GROUP.get_selectbox_currencies(**{'id' : 'currency_id', 'selected' : selected_curr})
        selected_plan = product.product_price_plan_id if product else ''
        selectbox_price_plan = self.get_selectbox_price_plan(**{'id' : 'product_price_plan_id', 'selected' : selected_plan})
        selected_rate = product.premium_rate_id if product else ''
        selectbox_premium_rates = SETUP.get_selectbox_premium_rates(**{'id' : 'premium_rate_id', 'required' : True, 'selected' : selected_rate, 'class_names': 'height_42'})
        selected_type = product.purchase_type_id if product else ''
        selectbox_purchase_types = self.get_selectbox_purchase_types(**{'id' : 'purchase_type_id', 'required' : True, 'selected' : selected_type})
        selected_premium = product.product_premium_type_id if product else ''
        selectbox_product_premium_types = self.get_selectbox_product_premium_types(**{'id' : 'product_premium_type_id', 'required' : True, 'selected' : selected_premium})
        price = getcurrency(product.price) if product else ''
        if not price: price = ''
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card ">
                    <div class="card-header">
                        <h4 class="card-title">Pricing</h4>
                    </div>
                    <div class="card-body">
                        <form id='{form_id}' class='d-flex flex-wrap'>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required>Premium Type</label>
                                    <div class="col-md-9">
                                        {selectbox_product_premium_types}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Currency</label>
                                    <div class="col-md-9">
                                        {selectbox_currency}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Price Plan</label>
                                    <div class="col-md-9">
                                        {selectbox_price_plan}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required>Purchase Type</label>
                                    <div class="col-md-9">
                                        {selectbox_purchase_types}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required>Purchase Price</label>
                                    <div class="col-md-9 d-flex">
                                        <input type="number" class="form-control height_42" name='price' required value='{price}'>
                                        {selectbox_premium_rates}
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_product_details_html(self, *args, **kwargs):
        product = kwargs.get('product', None)
        form_id = kwargs.get('product_details_form_id', None)
        display_order = product.display_order if product else ''
        if not display_order: display_order = ''
        code = product.code if product else ''
        if not code: code = ''
        description = product.description if product else ''
        if not description: description = ''
        disabled = 'disabled' if product else ''
        selectbox_disabled = True if product else False
        selected_type = product.product_type_id if product else ''
        selectbox_product_types = self.get_selectbox_product_types(**{'id' : 'product_type_id', 'required' : True, 'selected' : selected_type, 'disabled': selectbox_disabled})
        selected_class = product.product_class_id if product else ''
        selectbox_product_classes = self.get_selectbox_product_classes(**{'id' : 'product_class_id', 'required' : True, 'selected' : selected_class, 'disabled': selectbox_disabled})
        hidden_input = COMMON.get_hidden_input(**{'id': 'product_id', 'value': product.id}) if product else ''
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card ">
                    <div class="card-header">
                        <h4 class="card-title">Product Details</h4>
                    </div>
                    <div class="card-body">
                        <form id='{form_id}' class='d-flex flex-wrap'>
                            {hidden_input}
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Display Order</label>
                                    <div class="col-md-9">
                                        <input type="number" class="form-control" name='display_order' value='{display_order}'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required>Product Code</label>
                                    <div class="col-md-9">
                                        <input type="text" class="form-control" name='code' maxlength='10' required value='{code}'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required>Description</label>
                                    <div class="col-md-9">
                                        <input type="text" class="form-control" name='description' maxlength='50' required value='{description}'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required>Product Type</label>
                                    <div class="col-md-9">
                                        {selectbox_product_types}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required>Product Class</label>
                                    <div class="col-md-9">
                                        {selectbox_product_classes}
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    def get_selectbox_product_types(self, *args, **kwargs):
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.value} for m in ProductType]
        return create_selectbox_html(**kwargs)

    def get_selectbox_product_classes(self, *args, **kwargs):
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.value} for m in ProductClass]
        return create_selectbox_html(**kwargs)

    def get_selectbox_cover_types(self, *args, **kwargs):
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.value} for m in CoverType]
        return create_selectbox_html(**kwargs)

    def get_selectbox_assured_types(self, *args, **kwargs):
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.value} for m in AssuredType]
        return create_selectbox_html(**kwargs)

    def get_selectbox_period_type(self, *args, **kwargs):
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.value} for m in PeriodType]
        return create_selectbox_html(**kwargs)

    def get_selectbox_product_states(self, *args, **kwargs):
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.value} for m in ProductState if m.value != ProductState.Expired.value]
        return create_selectbox_html(**kwargs)

    @expose()
    def get_selectbox_products(self, *args, **kwargs):
        dbase_query = self.get_product_list(*args, **kwargs)
        kwargs['outputlist'] = [{'name' : m.description, 'id' : m.id} for m in dbase_query]
        return create_selectbox_html(**kwargs)

    def get_selectbox_purchase_types(self, *args, **kwargs):
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.value} for m in PurchaseType]
        return create_selectbox_html(**kwargs)

    def get_selectbox_product_premium_types(self, *args, **kwargs):
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.value} for m in ProductPremiumType]
        return create_selectbox_html(**kwargs)

    def get_selectbox_claim_types(self, *args, **kwargs):
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.value} for m in ProductClaimType]
        return create_selectbox_html(**kwargs)

    def get_selectbox_payment_frequency(self, *args, **kwargs):
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.value} for m in PaymentFrequency]
        return create_selectbox_html(**kwargs)

    def get_selectbox_price_plan(self, *args, **kwargs):
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.value} for m in ProductPricePlan]
        return create_selectbox_html(**kwargs)

    @expose()
    def get_product_benefits_html(self, *args, **kwargs):
        html = """
        <!-- product benefits start  -->
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Product Benefits</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button class="btn btn-primary ml-auto action_new">Add Product Benefit</button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table" id="product_benefit_table">
                                <thead class=" text-primary">
                                    <th>Product Benefit</th>
                                    <th>Description</th>
                                    <th>Percentage</th>
                                    <th class="text-right"></th>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td class="action_link">ACCDEATH</td>
                                        <td>Adult Death Benefit</td>
                                        <td>50.00</td>
                                        <td class="text-right"><span class="action_link">remove</span></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- product benefits end  -->
        """
        return html

    @expose()
    def get_prepurchase_html(self, *args, **kwargs):
        prepurchase = kwargs.get('prepurchase', None)
        form_id = kwargs.get('prepurchase_form_id', None)
        hidden_input = COMMON.get_hidden_input(**{'id': 'id', 'value': prepurchase.id}) if prepurchase else ''
        text = prepurchase.text if prepurchase else ''
        if not text: text = ''
        html = f"""
        <div class="col-md-6">
            <div class="card ">
                <div class="card-header ">
                    <h4 class="card-title">Pre-Purchase Setup</h4>
                </div>
                <div class="card-body ">
                    <form id="{form_id}">
                        {hidden_input}
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Pre-Purchase Text</label>
                                    <div class="col-md-9">
                                        <textarea name='text' type="text" class="form-control" rows="4" maxlength='255'>{text}</textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_claim_setup_html(self, *args, **kwargs):
        claim = kwargs.get('claim', None)
        product = kwargs.get('product', None)
        form_id = kwargs.get('claim_form_id', None)
        form_product_claim_id = kwargs.get('product_claim_id', None)
        hidden_input = COMMON.get_hidden_input(**{'id': 'id', 'value': claim.id}) if claim else ''
        claim_grace_period = product.claim_grace_period if product else ''
        if not claim_grace_period: claim_grace_period = ''
        text = claim.text if claim else ''
        if not text: text = ''
        html = f"""
        <div class="col-md-6">
            <div class="card ">
                <div class="card-header ">
                    <h4 class="card-title">Redemption / Claiming Setup</h4>
                </div>
                <div class="card-body ">
                    <form id='{form_product_claim_id}'>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Claim Grace Period</label>
                                    <div class="col-md-9 d-flex align-items-center">
                                        <input name='claim_grace_period' type="text" class="form-control col-md-6" value="{claim_grace_period}">
                                        <span class="ml-3">Days</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                    <form id='{form_id}'>
                        {hidden_input}
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Redemption / Claim Confirmation Text</label>
                                    <div class="col-md-9">
                                        <textarea name='text' type="text" class="form-control" rows="4" maxlength='255'>{text}</textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_refund_setup_html(self, *args, **kwargs):
        refund = kwargs.get('refund', None)
        product = kwargs.get('product', None)
        form_id = kwargs.get('refund_form_id', None)
        form_product_refund_id = kwargs.get('product_refund_id', None)
        refund_grace_period = product.refund_grace_period if product else ''
        if not refund_grace_period: refund_grace_period = ''
        text = refund.text if refund else ''
        if not text: text = ''
        hidden_input = COMMON.get_hidden_input(**{'id': 'id', 'value': refund.id}) if refund else ''
        html = f"""
        <div class="col-md-6">
            <div class="card ">
                <div class="card-header ">
                    <h4 class="card-title">Refund Setup</h4>
                </div>
                <div class="card-body ">
                    <form id='{form_product_refund_id}'>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Refund Grace Period (after product expiration)</label>
                                    <div class="col-md-9 d-flex align-items-center">
                                        <input name='refund_grace_period' type="text" class="form-control col-md-6" value="{refund_grace_period}">
                                        <span class="ml-3">Days</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                    <form id='{form_id}'>
                        {hidden_input}
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Refund Confirmation Text </label>
                                    <div class="col-md-9">
                                        <textarea name='text' type="text" class="form-control" rows="4" maxlength='255'>{text}</textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_purchase_reminder_html(self, *args, **kwargs):
        product = kwargs.get('product', None)
        reminder = kwargs.get('reminder', None)
        form_id = kwargs.get('reminder_form_id', None)
        form_purchase_id = kwargs.get('product_purchase_form_id', None)
        hidden_input = COMMON.get_hidden_input(**{'id': 'id', 'value': reminder.id}) if reminder else ''
        advance_reminder_period = product.advance_reminder_period if product else ''
        if not advance_reminder_period: advance_reminder_period = ''
        text = reminder.text if reminder else ''
        if not text: text = ''
        html = f"""
        <div class="col-md-6">
            <div class="card ">
                <div class="card-header ">
                    <h4 class="card-title">Advanced Purchase Reminder</h4>
                </div>
                <div class="card-body ">
                    <form id='{form_purchase_id}'>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Remind</label>
                                    <div class="col-md-9 d-flex align-items-center">
                                        <input name='advance_reminder_period' type="text" class="form-control col-md-6" value="{advance_reminder_period}">
                                        <span class="ml-3">days in advance</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                    <form id="{form_id}">
                        {hidden_input}
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Advance Reminder Text</label>
                                    <div class="col-md-9">
                                        <textarea name='text' type="text" maxlength='255' class="form-control" rows="4">{text}</textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_product_allocation_table(self, *args, **kwargs):
        tablename = kwargs.get('tablename', None)
        product_id = kwargs.get('product_id', None)
        #dbase_query = ProductAllocation.by_product_id(**{'product_id':product_id})
        dbase_query = PRODUCTORC.get_product_allocation_by_type_id(**kwargs)
        outputlist = []
        for item in dbase_query:
            allocation = ALLOC.get_allocation_by_id(**{'allocation_id': item.allocation_id})
            outputlist.append({
                'description': f"<div class='edit_productalloc' id='{item.id}'>{allocation.description}</div>",
                'percentage': getcurrency(item.percentage),
                'amount': getcurrency(item.amount),
                'factor': getcurrency(item.factor),
                })
        dbcolumnlist=[
                'description',
                'percentage',
                'amount',
                'factor',
                ]
        theadlist=[
                'Description',
                'Percentage',
                'Amount',
                'Factor',
                ]
        tdclasslist = [
                'action_link'
                '',
                '',
                '',
                '',
                ]
        return build_html_table(outputlist, dbcolumnlist, theadlist, tablename, tdclasslist)

    @expose()
    def get_family_benefits_html(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id: return ''
        dbase_query = ProductFamily.by_product_id(product_id)
        outputlist = []
        for item in dbase_query:
            relationship = get_name_from_id(Relationship, item.relationship_type_id)
            outputlist.append({
                'relationship_type_id' : f"<div class='edit productfamily_edit' product_id='{item.product_id}' productfamily_id='{item.id}'>{relationship}</div>",
                'from_age' : item.from_age,
                'to_age' : item.to_age,
                'percentage' : round(item.percentage, 2),
                             })
        dbcolumnlist=[
                'relationship_type_id',
                'from_age',
                'to_age',
                'percentage',
                    ]
        theadlist=[
                'Relationship',
                'From Age',
                'To Age',
                'Percentage',
                ]
        tdclasslist=[
                'action_link',
                '',
                '',
                'text-right',
                ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "productfamily_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Family Benefits</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_productfamily" product_id='{product_id}' class="btn btn-primary ml-auto">Create a new Family Benefit</button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        {htmltbl}
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
        $("#create_new_productfamily").click(function(){
            var kwargs = 'product_id='+$(this).attr('product_id');
            $('#dialogdiv').load('/product/get_modal_productfamily?', kwargs, function(data){
                return false;
            });
        });
        $(".productfamily_edit").click(function(){
            var kwargs = 'productfamily_id='+$(this).attr('productfamily_id');
            kwargs += '&product_id='+$(this).attr('product_id');
            $('#dialogdiv').load('/product/get_modal_productfamily?', kwargs, function(data){
                return false;
            });
        });
        </script>
        """
        return html + javascript

    @expose()
    def get_modal_productfamily(self, *args, **kwargs):
        productfamily_id = kwargs.get('productfamily_id', None)
        product_id = kwargs.get('product_id', None)
        productfamily_id = kwargs.get('productfamily_id', None)
        this = ProductFamily.by_id(productfamily_id)
        selected = this.relationship_type_id if this else ''
        selectbox_relationship = self.get_selectbox_relationship(**{'id': 'relationship_type_id', 'selected' : selected})
        from_age = this.from_age if this else ''
        to_age = this.to_age if this else ''
        percentage = this.percentage if this else ''
        checked = 'checked' if this and this.active else ''
        active_input = self.get_productfamily_active_input_html(**{'checked' : checked}) if this else ''
        hidden_input = COMMON.get_hidden_input(**{'id': 'productfamily_id', 'value': this.id}) if this else ''
        hidden_input_product_id = COMMON.get_hidden_input(**{'id': 'product_id', 'value': product_id})
        title = f"Edit Family Benefit" if this else 'New Family Benefit'
        html = f"""
        <div class="modal fade" id="modal_productfamily" tabindex="-1" role="dialog" aria-labelledby="myproductfamilyLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">{title}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_productfamily'>
                            {hidden_input}
                            {hidden_input_product_id}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="relationship_type_id">Relationship</label>
                                    <div class="col-md-9">
                                        {selectbox_relationship}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" for="from_age">From Age</label>
                                    <div class="col-md-9">
                                        <input id="from_age" type="text" name="from_age" class="form-control" value='{from_age}'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" for="to_age">To Age</label>
                                    <div class="col-md-9">
                                        <input id="to_age" type="text" name="to_age" class="form-control" value='{to_age}'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="percentage">Percentage</label>
                                    <div class="col-md-9">
                                        <input id="percentage" type="text" name="percentage" class="form-control" required='true' value='{percentage}'>
                                    </div>
                                </div>
                            </div>
                            {active_input}
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_new_productfamily' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary productfamily_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
        setFormValidation('#form_productfamily');
        $('#save_new_productfamily').click(function(){
             var valid = FormIsValid("#form_productfamily");
             if(valid){
                var product_id = $('#product_id').val();
                var formserial = getFormData('#form_productfamily');
                var data = {data : JSON.stringify(formserial)};
                $.post('/product/save_productfamily?', data, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $('#modal_productfamily').modal('hide');
                        var formserial = 'product_id='+product_id;
                        $('#tab2').load('/product/get_family_benefits_html?', formserial, function(data){
                            return false;
                        });

                    };
                    return false;
                });
             }
        });
        $('.productfamily_back').click(function(){
            $('#modal_productfamily').modal('hide');
        });
        $('#modal_productfamily').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def get_productfamily_active_input_html(self, *args, **kwargs):
        checked = kwargs.get('checked', '')
        html = f"""
        <div class="col-md-12">
            <div class="form-group row">
                <label class="col-3 col-form-label" for="active" required>Active</label>
                <div class="col-9">
                    <div class="form-check">
                    <label class="form-check-label">
                        <input class="form-check-input" type="checkbox" name='active' {checked}>
                        <span class="form-check-sign"></span>
                    </label>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def save_productfamily(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success' : False})
        if data.get('productfamily_id'): return self.save_edit_productfamily(data)
        return self.save_new_productfamily(data)

    @expose()
    def save_new_productfamily(self, data):
        usernow = request.identity['user']
        this = ProductFamily()
        this.product_id = data.get('product_id', None)
        this.relationship_type_id = data.get('relationship_type_id', None)
        this.from_age = data.get('from_age', None)
        this.to_age = data.get('to_age', None)
        this.percentage = data.get('percentage', None)
        this.added_by = usernow.id
        this.tenant_id = usernow.tenant_id
        DBSession.add(this)
        DBSession.flush()
        return json.dumps({'success' : True, 'data' : this.id})

    @expose()
    def save_edit_productfamily(self, data):
        productfamily_id = data.get('productfamily_id', None)
        product_id = data.get('product_id', None)
        usernow = request.identity['user']
        this = ProductFamily.by_id(productfamily_id)
        if not this: return json.dumps({'success' : False})
        this.product_id = data.get('product_id', None)
        this.relationship_type_id = data.get('relationship_type_id', None)
        this.from_age = data.get('from_age', None)
        this.to_age = data.get('to_age', None)
        this.percentage = data.get('percentage', None)
        if not data.get('active', None): this.active = False
        DBSession.flush()
        return json.dumps({'success' : True, 'data' : this.id})

    @expose()
    def get_allocation_setup_html(self, *args, **kwargs):
        # Acquisition
        kwargs['allocation_type_id'] = AllocationType.Acquisition.value
        acquisition_html = self.get_product_allocation_html(**kwargs)
        # Purchase
        kwargs['allocation_type_id'] = AllocationType.Purchase.value
        purchase_html = self.get_product_allocation_html(**kwargs)
        # Redemption
        kwargs['allocation_type_id'] = AllocationType.Redemption.value
        redemption_html = self.get_product_allocation_html(**kwargs)
        # Refund
        kwargs['allocation_type_id'] = AllocationType.Refund.value
        refund_html = self.get_product_allocation_html(**kwargs)
        html = acquisition_html + purchase_html + redemption_html + refund_html
        javascript = """
        <script>
            $('.action_new').click(function(){
                var kwargs = 'product_id='+$(this).attr('product_id');
                kwargs += '&allocation_type_id='+$(this).attr('allocation_type_id');
                kwargs += '&name='+$(this).attr('name');
                $('#dialogdiv').load('/product/get_modal_add_product_allocation?' + encodeURI(kwargs), function(data){
                    return false;
                });
            });
            $('.edit_productalloc').click(function(){
                var kwargs = '&id='+$(this).attr('id');
                $('#dialogdiv').load('/product/get_modal_edit_product_allocation?' + encodeURI(kwargs), function(data){
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    def get_product_allocation_html(self, *args, **kwargs):
        allocation_type_id = kwargs.get('allocation_type_id', None)
        if not allocation_type_id: return ''
        html_table = self.get_product_allocation_table(**kwargs)
        name = get_name_from_id(AllocationType, allocation_type_id)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Product {name} Allocations</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button class="btn btn-primary ml-auto action_new"
                                        allocation_type_id='{allocation_type_id}'
                                        product_id='{kwargs.get('product_id')}'
                                        name='{name}'>
                                    Add a new {name} Allocation
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id='div_{name.lower()}_table' class="table-responsive">
                            {html_table}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_product_document_table_html(self, *args, **kwargs):
        dbase_query = self.get_active_product_document_list(**kwargs)
        outputlist = []
        for item in dbase_query:
            document = SETUP.get_systemdoc_by_id(**{'systemdoc_id' : item.system_document_id})
            outputlist.append({
                'name' : document.name,
                'when' : get_name_from_id(AllocationType, item.allocation_type_id),
                'remove' : f"<div class='productdoc_remove' product_id='{item.product_id}' productdoc_id='{item.id}' name='{document.name}'>Remove</div>",
                })
        dbcolumnlist=[
                'name',
                'when',
                'remove',
                ]
        theadlist=[
                'Name',
                'When',
                ''
                ]
        tdclasslist = [
                '',
                '',
                'action_link text-right',
                ]
        outputlist = sort_dict_list(outputlist, 'name')
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "product_document_table", tdclasslist)
        javascript = """
        <script>
            $('.productdoc_remove').click(function(){
                var name = $(this).attr('name');
                var product_id = $(this).attr('product_id');
                var productdoc_id = $(this).attr('productdoc_id');

                var result = window.confirm("Are you sure you want to delete '" + name + "'?");
                if(result === true){
                    var formserial = 'id='+productdoc_id;
                    $.post('/product/save_delete_productdocument?', formserial, function(data){
                        var kwargs = 'product_id='+product_id;
                        $('#div_product_document_table').load('/product/get_product_document_table_html', kwargs, function(data){
                            return false;
                        });
                    });
                };
            });
        </script>
        """
        return html + javascript

    def get_popover_text_merge_html(self, *args, **kwargs):
        dbase_query = self.get_active_textmerge_list()
        inner_html = ''
        for text in dbase_query:
            inner_html += f"""
            <div class='row'>
                <span class='col-6'>
                    {text.description}
                </span
                <span class='col-6'>
                    {text.text}
                </span>
            </div>
            """
        html = f"""
        <i class="now-ui-icons travel_info text-merge"
           id="text_merge"
           title="Options"
           data-content="{inner_html}">
        </i>
        """
        javascript = """
        <script>
        $(document).ready(function(){
            $('#text_merge').popover({
                html : true,
            })
            $('.nav-link').click(function(){
                $('#text_merge').popover('hide');
            })
        });
        </script>
        """
        return html + javascript

    @expose()
    def get_contract_and_documents_html(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        product = kwargs.get('product', None)
        if not product: product = Product.by_id(**{'id' : product_id})
        schedule = kwargs.get('schedule', None)
        if not schedule:
            kwargs['product_text_type_id'] = ProductTextType.Schedule.value
            schedule = PRODUCTORC.get_product_text_by_product_id(**kwargs)
        form_id = kwargs.get('docs_form_id', None)
        if not form_id: form_id = 'form_edit_schedule'
        contract_text_line_start = product.contract_text_line_start if product else ''
        if not contract_text_line_start: contract_text_line_start = ''
        popover = self.get_popover_text_merge_html(**kwargs)
        product_document_table = self.get_product_document_table_html(**kwargs)
        contract_wording = schedule.text if schedule else ''
        hidden_input = COMMON.get_hidden_input(**{'id': 'product_id', 'value': product.id}) if product else ''
        hidden_input_contract_product_text_id = COMMON.get_hidden_input(**{'id': 'contract_product_text_id', 'value': schedule.id}) if schedule else ''
        preview_visible = '' if schedule else "style='display:none;'"
        if product.image_name:
            dropzone_html = f"""
            <div class="col-md-6">
                <div class='dropzone' id='dropzone_background_image'></div>
            </div>
            <div class="col-md-3">
                <img style='max-height: 150px;' src='/uploads/{product.image_name}'/>
            </div>
            """
        else:
            dropzone_html = f"""
            <div class="col-md-9">
                <div class='dropzone' id='dropzone_background_image'></div>
            </div>
            """
        html = f"""
        <div class="row">
            <div class="col-md-6">
                <div class="card ">
                    <div class="card-header ">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Contract Setup</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id='btn_preview_contract' product_id='{product.id}' class="btn btn-primary ml-auto action_new" {preview_visible}>Preview Contract</button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body ">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Backgound Image</label>
                                    {dropzone_html}
                                </div>
                            </div>
                        </div>
                        <form id='{form_id}'>
                            {hidden_input}
                            {hidden_input_contract_product_text_id}
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required>Start text on line</label>
                                        <div class="col-md-9">
                                            <input type="text" class="form-control" name='contract_text_line_start' value="{contract_text_line_start}" required>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required>Contract Wording</label>
                                        <div class="col-md-9 position-relative">
                                            {popover}
                                            <textarea type="text" name='text' class="form-control" rows="10" maxlength='255' required>{contract_wording}</textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Required Documents</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id='btn_add_document' product_id='{product.id}' class="btn btn-primary ml-auto action_new">Add a Required Document</button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id='div_product_document_table' class="table-responsive">
                            {product_document_table}
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <button id='btn_apply' product_id='{product.id}' class="btn btn-primary ml-auto">Apply and Preview</button>
                        <button class="btn btn-outline-primary products_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
            $(document).ready(function(){
                var scheduleDropzone = new Dropzone('#dropzone_background_image', {
                    maxFiles: 1,
                    maxFilesize: 256,
                    parallelUploads: 1,
                    uploadMultiple: false,
                    autoProcessQueue: false,
                    acceptedFiles: '.png, .jpg, .jpeg',
                    url: '/product/handle_file_upload',
                    success: function(file, response){
                        var result = JSON.parse(response);
                        if(result.success === true){
                            var formserial = $('#form_edit_schedule').serialize();
                            formserial += '&image_name='+result.name;
                            processSaveEvent(formserial, "undefined");
                        };
                    },
                });
                function processSaveEvent(formserial, redirect_link){
                    $.post('/product/save_edit_product_schedule?'+formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            var kwargs = 'product_id='+$('#btn_apply').attr('product_id');
                            if(redirect_link === "undefined"){
                                $('#tab4').load('/product/get_contract_and_documents_html?', kwargs, function(data){
                                    $('#btn_preview_contract').trigger('click');
                                    return false;
                                });
                            }else{
                                $.redirect('/product/index');
                            };
                        };
                        return false;
                    });
                };
                $('#btn_apply').click(function(){
                    var valid_schedule = FormIsValid("#form_edit_schedule");
                    if(valid_schedule){
                        if(scheduleDropzone.files.length > 0){
                            scheduleDropzone.processQueue();
                        }else{
                            var formserial = $('#form_edit_schedule').serialize();
                            processSaveEvent(formserial, "undefined");
                        };
                    };
                });
                $('#btn_add_document').click(function(){
                    var kwargs = 'product_id='+$(this).attr('product_id');
                    $('#dialogdiv').load('/product/get_modal_product_document?'+kwargs, function(data){
                        return false;
                    });
                });
                $('#btn_preview_contract').click(function(){
                    var formserial = 'product_id='+$(this).attr('product_id');
                    var href_with_formserial = '/product/preview_contract?'+formserial;
                    $.get(href_with_formserial, function(data){
                        if(data != ''){
                            var win = window.open(href_with_formserial, '_blank');
                            win.focus();
                        };
                        return false;
                    });
                });
                $('.products_back').click(function(){
                    $.redirect('/product/index');
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def preview_contract(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        kwargs['product_text_type_id'] = ProductTextType.Schedule.value
        this = Product.by_id(**{'id' : product_id})
        if not this: return ''
        text = PRODUCTORC.get_product_text_by_product_id(**kwargs)
        if not text: return ''

        datenow = datetime.date(datetime.now())
        image_name = f"{this.code} Contract Preview {datenow}.pdf"
        filepath = os.path.join(PDF_DIRNAME, image_name)
        image_path = None
        if this.image_name:
            image_path = os.path.join(UPLOADS_DIRNAME, this.image_name)
        sane_text = self.get_sane_text(text.text)

        doc = ContractDocument(**{
            'filepath' : filepath,
            'line_start' : this.contract_text_line_start,
            'image_path' : image_path,
            'wording' : sane_text,
        })
        doc.create_pdf()
        response.headers["Content-Type"] = 'application/vnd.ms-excel'
        response.headers["Content-Disposition"] = 'attachment; image_name="'+image_name+'"'
        filecontent = FileApp(filepath)
        return use_wsgi_app(filecontent)

    def get_sane_text(self, text):
        import re
        sane_text = str(text).replace('\n', '<br/>\n')
        match = re.findall(r'\{.+?\}', sane_text)
        for m in match:
            middle = m[1:-1]
            sane = m.replace(middle, f"<b>{middle}</b>")
            sane_text = sane_text.replace(m, sane)
        return sane_text

    def get_product_loaders_by_id(self, *args, **kwargs):
        usernow = request.identity.get('user')
        return ProductLoader.by_product_id(kwargs.get('product_id', None))

    def get_loaders_by_cover_type_id(self, *args, **kwargs):
        usernow = request.identity.get('user')
        linklist = DBSession.query(CoverTypeLoader). \
                filter(CoverTypeLoader.cover_type_id==kwargs.get('cover_type_id')). \
                filter(CoverTypeLoader.tenant_id==usernow.tenant_id). \
                all()
        outputlist = []
        for link in linklist:
            loader = DBSession.query(Loader). \
                    filter(Loader.id==link.loader_id). \
                    filter(Loader.tenant_id==usernow.tenant_id). \
                    first()
            if loader: outputlist.append(loader)
        return outputlist

    def get_available_used_product_loader_html(self, *args, **kwargs):
        linklist = self.get_product_loaders_by_id(**kwargs)
        idlist = [int(x.loader_id) for x in linklist]
        loaderlist = self.get_loaders_by_cover_type_id(**kwargs)
        avail, used = '', ''
        for item in loaderlist:
            details = LoaderDetail.by_loader_id(item.id)
            detail_html = ""
            for d in details:
                detail_html += f""" <div> {d.answer} ({round(d.percentage, 2)}) </div> """
            element = f"""
                <div class='segment' product_id='{kwargs.get('product_id')}' loader_id='{item.id}'>
                    <b>{item.loader_name}</b> {detail_html}
                </div> """
            if int(item.id) in idlist: used += element
            else: avail += element
        return avail, used

    @expose()
    def get_loader_riders_html(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        this = Product.by_id(**{'id' : product_id})
        kwargs['cover_type_id'] = this.cover_type_id
        available_inner, used_inner = self.get_available_used_product_loader_html(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-6">
                <div class="card mh_260">
                    <div class="card-header ">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Attached</h4>
                            </div>
                            <div class="col-md-6 text-right">
                            </div>
                        </div>
                    </div>
                    <div id='div_used' class="card-body">
                        {used_inner}
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card mh_260">
                    <div class="card-header ">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Available</h4>
                            </div>
                            <div class="col-md-6 text-right">
                            </div>
                        </div>
                    </div>
                    <div id='div_available' class="card-body">
                        {available_inner}
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
            function SegmentClick(selector, href){
                $(selector).click(function(data){
                    var product_id = $(this).attr('product_id');
                    var kwargs = 'product_id='+product_id;
                    kwargs += '&loader_id='+$(this).attr('loader_id');
                    $.post(href, kwargs, function(data){
                        $('#tab5').load('/product/get_loader_riders_html', kwargs, function(data){
                            return false;
                        });
                    });
                });
            };
            SegmentClick('#div_used .segment', '/product/save_delete_productloader');
            SegmentClick('#div_available .segment', '/product/save_new_productloader');
        </script>
        """
        return html + javascript

    @expose()
    def get_product_rate_table_html(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        product = Product.by_id(product_id)
        if not product.premium_rate_id: return 'No Premium Rate Selected'
        outputlist, resultlist, donelist = [], [], []
        dbase_query = PremiumRateDetail.by_premium_rate_id(product.premium_rate_id)
        for i in dbase_query:
            age = f"{i.from_age} - {i.to_age}"
            if age not in donelist:
                donelist.append(age)
                try:
                    male_adjust = [x for x in dbase_query if x.from_age == i.from_age and x.to_age == i.to_age and x.gender_id == Gender.Male.value][0].adjust_factor
                except:
                    male_adjust = 0
                try:
                    female_adjust = [x for x in dbase_query if x.from_age == i.from_age and x.to_age == i.to_age and x.gender_id == Gender.Female.value][0].adjust_factor
                except:
                    female_adjust = 0
                try:
                    other_adjust = [x for x in dbase_query if x.from_age == i.from_age and x.to_age == i.to_age and x.gender_id == Gender.Other.value][0].adjust_factor
                except:
                    other_adjust = 0
                resultlist.append((age, round(male_adjust, 2), round(female_adjust, 2), round(other_adjust, 2)))
        for age, male, female, other in resultlist:
            outputlist.append({
                'age' : age,
                'male' : male,
                'female' : female,
                'other' : other,
                             })
        dbcolumnlist=[
                'age',
                'male',
                'female',
                'other',
                    ]
        theadlist=[
                'Age',
                'Male',
                'Female',
                'Other',
                ]
        tdclasslist = [
                '',
                'text-center',
                'text-center',
                'text-right',
                ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "premiumrate_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card mh_260">
                    <div class="card-header ">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Premium Rate Table</h4>
                            </div>
                            <div class="col-md-6 text-right">
                            </div>
                        </div>
                    </div>
                    <div id='div_used' class="card-body">
                        {htmltbl}
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def save_new_productloader(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        this = ProductLoader()
        this.product_id = kwargs.get('product_id')
        this.loader_id = kwargs.get('loader_id')
        this.added_by = usernow.id
        this.tenant_id = usernow.tenant_id
        DBSession.add(this)
        DBSession.flush()
        COMMONORC.save_auditlog(**{'tablename' : ProductLoader, 'function' : 'save_new_productloader', 'audit_type_id' : AuditType.Add.value})
        return ''

    @expose()
    def save_delete_productloader(self, *args, **kwargs):
        usernow = request.identity.get('user')
        this = DBSession.query(ProductLoader). \
                filter(ProductLoader.product_id==kwargs.get('product_id')). \
                filter(ProductLoader.loader_id==kwargs.get('loader_id')). \
                filter(ProductLoader.tenant_id==usernow.tenant_id). \
                one()
        DBSession.delete(this)
        DBSession.flush()
        COMMONORC.save_auditlog(**{'tablename' : ProductLoader, 'function' : 'save_delete_productloader', 'audit_type_id' : AuditType.Delete.value})
        return ''

    def get_selectbox_product_documents(self, *args, **kwargs):
        kwargs['document_usage_id'] = DocumentUsage.Product.value
        dbase_query = SETUP.get_active_systemdoc_list(**kwargs)
        current_product_docs = self.get_active_product_document_list(**kwargs)
        current_product_idlist = [x.system_document_id for x in current_product_docs]
        dbase_query = [x for x in dbase_query if x.id not in current_product_idlist]
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.id} for m in dbase_query]
        return create_selectbox_html(**kwargs)

    @expose()
    def get_modal_product_document(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        hidden_input = COMMON.get_hidden_input(**{'id': 'product_id', 'value': product_id})
        selectbox_documents = self.get_selectbox_product_documents(**{'id' : 'system_document_id', 'required' : True, 'product_id' : product_id})
        html = f"""
        <div class="modal fade" id="modal_product_document" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">Add a Required Document</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_new_productdocument'>
                            {hidden_input}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="system_document_id">Document</label>
                                    <div class="col-md-9">
                                        {selectbox_documents}
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_new_productdocument' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary document_back">Close</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
            setFormValidation('#form_new_productdocument');
            $('#save_new_productdocument').click(function(){
                 var valid = FormIsValid("#form_new_productdocument");
                 if(valid){
                    var formserial = $('#form_new_productdocument').serialize();
                    $.post('/product/save_new_productdocument?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $('#modal_product_document').modal('hide');
                            var kwargs = 'product_id='+result.product_id;
                            $('#div_product_document_table').load('/product/get_product_document_table_html', kwargs, function(data){
                                return false;
                            });
                        };
                        return false;
                    });
                 }
            });
            $('.document_back').click(function(){
                $('#modal_product_document').modal('hide');
            });
            $('#modal_product_document').modal();
        </script>
        """
        return html + javascript

    @expose()
    def save_new_productdocument(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        this = ProductDocument()
        this.product_id = kwargs.get('product_id', None)
        this.system_document_id = kwargs.get('system_document_id', None)
        this.allocation_type_id = kwargs.get('allocation_type_id', AllocationType.Redemption.value)
        this.added_by = usernow.id
        this.tenant_id = usernow.tenant_id
        DBSession.add(this)
        DBSession.flush()
        COMMONORC.save_auditlog(**{'tablename' : ProductDocument, 'function' : 'save_new_productdocument', 'audit_type_id' : AuditType.Add.value})
        return json.dumps({'success' : True, 'product_id' : this.product_id})

    @expose()
    def save_delete_productdocument(self, *args, **kwargs):
        usernow = request.identity.get('user')
        this = ProductDocument.by_id(kwargs.get('id'))
        DBSession.delete(this)
        DBSession.flush()
        COMMONORC.save_auditlog(**{'tablename' : ProductDocument, 'function' : 'save_delete_productdocument', 'audit_type_id' : AuditType.Delete.value})
        return json.dumps({'success' : True})

    @expose()
    def save_edit_product_schedule(self, *args, **kwargs):
        return PRODUCTORC.save_edit_product_schedule(**kwargs)

    @expose()
    def handle_file_upload(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        kwargs['user_id'] = usernow.id
        kwargs['upload_dir'] = UPLOADS_DIRNAME
        kwargs['allowed_extensions'] = ['.png', '.jpg', '.jpeg']
        uploader = FileUploader(**kwargs)
        return uploader.handle_file_upload()

    @expose()
    def get_modal_add_product_allocation(self, *args, **kwargs):
        allocation_type_id = str_to_int(kwargs.get('allocation_type_id', None))
        selectbox_allocations = self.get_selectbox_allocations(**{'id': 'allocation_id', 'required': True})
        selectbox_gl_accounts = self.get_selectbox_gl_account(**{'id': 'general_ledger_account_id', 'required': True})
        selectbox_investment_funds = self.get_selectbox_investment_funds(**{'id': 'investment_fund_id', 'required': True})
        hidden_input_product_id = COMMON.get_hidden_input(**{'id': 'product_id', 'value': kwargs.get('product_id')})
        hidden_input_allocation_type_id = COMMON.get_hidden_input(**{'id': 'allocation_type_id', 'value': kwargs.get('allocation_type_id')})
        is_claimable_html = ""
        if allocation_type_id == AllocationType.Redemption.value or allocation_type_id == AllocationType.Refund.value:
            is_claimable_html = f"""
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="is_claimable">Is Claimable</label>
                    <div class="form-check">
                        <label class="form-check-label">
                            <input class="form-check-input" type="checkbox" name='is_claimable'>
                            <span class="form-check-sign"></span>
                        </label>
                    </div>
                </div>
            </div> """
        html = f"""
        <div class="modal fade" id="modal_new_productallocation" tabindex="-1" role="dialog"
            aria-labelledby="myproductallocationLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">New {kwargs.get('name')} Allocation</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_new_productallocation' name='{kwargs.get('name')}'>
                            <div class="col-md-12 hidden">
                                {hidden_input_product_id}
                                {hidden_input_allocation_type_id}
                            </div>
                            <div class="d-flex justify-content-between align-items-center productalloc_calc_num">
                                <div class="pill_item">
                                    <div class="col-12 pill_header">Percentage</div>
                                    <input id="percentage" type="number" name="percentage" class="form-control alloc_pill" placeholder='0.00' required>
                                </div>
                                <div class="col-1 font-weight-bold">OR</div>
                                <div class="pill_item">
                                    <div class="col-12 pill_header">Amount</div>
                                    <input id="amount" type="number" name="amount" class="form-control alloc_pill" placeholder='0.00' required>
                                </div>
                                <div class="col-1 font-weight-bold">OR</div>
                                <div class="pill_item">
                                    <div class="col-12 pill_header">Factor</div>
                                    <input id="factor" type="number" name="factor" class="form-control alloc_pill" placeholder='0.00' required>
                                </div>
                            </div>
                            <div class="col-md-12 mt-3">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="allocation_id">Allocation</label>
                                    <div class="col-md-9">
                                        {selectbox_allocations}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="general_ledger_account_id">Account</label>
                                    <div class="col-md-9">
                                        {selectbox_gl_accounts}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="investment_fund_id">Investment Fund</label>
                                    <div class="col-md-9">
                                        {selectbox_investment_funds}
                                    </div>
                                </div>
                            </div>
                            {is_claimable_html}
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_new_productallocation' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary productallocation_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
        $('.alloc_pill').change(function(){
            var val = $(this).val();
            if(val === '0' || val === ''){
                $('.alloc_pill').each(function(){
                    $(this).prop('disabled', false);
                });
            }else{
                $('.alloc_pill').not(this).each(function(){
                    $(this).prop('disabled', true);
                });
            }
        });
        setFormValidation('#form_new_productallocation');
        $('#save_new_productallocation').click(function(){
             var valid = FormIsValid("#form_new_productallocation");
             if(valid){
                var formserial = $('#form_new_productallocation').serialize();
                $.post('/product/save_new_productallocation?', formserial, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $('#modal_new_productallocation').modal('hide');
                        var formserial = 'product_id='+result.product_id;
                        $('#tab3').load('/product/get_allocation_setup_html?', formserial, function(data){
                            return false;
                        });
                    };
                    return false;
                });
             }
        });
        $('.productallocation_back').click(function(){
            $('#modal_new_productallocation').modal('hide');
        });
        $('#modal_new_productallocation').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_new_productallocation(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        this = ProductAllocation()
        this.product_id = kwargs.get('product_id', None)
        this.allocation_type_id = kwargs.get('allocation_type_id', None)
        this.allocation_id = kwargs.get('allocation_id', None)
        this.general_ledger_account_id = kwargs.get('general_ledger_account_id', None)
        this.investment_fund_id = kwargs.get('investment_fund_id', None)
        if kwargs.get('is_claimable', None): this.is_claimable = True
        else: this.is_claimable = False
        this.percentage = str_to_float(kwargs.get('percentage', None))
        this.amount = str_to_float(kwargs.get('amount', None))
        this.factor = str_to_float(kwargs.get('factor', None))
        this.allocation_recipient_id = kwargs.get('allocation_recipient_id', None)
        this.group_id = kwargs.get('group_id', None)
        this.account_id = kwargs.get('account_id', None)
        this.added_by = usernow.id
        this.tenant_id = usernow.tenant_id
        DBSession.add(this)
        DBSession.flush()
        COMMONORC.save_auditlog(**{'tablename' : ProductAllocation, 'function' : 'save_new_productallocation', 'audit_type_id' : AuditType.Add.value})
        return json.dumps({'success' : True, 'product_id' : kwargs.get('product_id')})

    @expose()
    def get_modal_edit_product_allocation(self, *args, **kwargs):
        productallocation_id = kwargs.get('id', None)
        if not productallocation_id: return ''
        this = self.get_productallocation_by_id(*args, **kwargs)
        if not this: return ''
        selectbox_allocations = self.get_selectbox_allocations(**{'id': 'allocation_id', 'required': True, 'selected' : this.allocation_id})
        selectbox_gl_accounts = self.get_selectbox_gl_account(**{'id': 'general_ledger_account_id', 'required': True, 'selected' : this.general_ledger_account_id})
        selectbox_investment_funds = self.get_selectbox_investment_funds(**{'id': 'investment_fund_id', 'required': True, 'selected' : this.investment_fund_id})
        hidden_input = COMMON.get_hidden_input(**{'id': 'id', 'value': this.id})
        hidden_input_product_id = COMMON.get_hidden_input(**{'id': 'product_id', 'value': this.product_id})
        hidden_input_allocation_type_id = COMMON.get_hidden_input(**{'id': 'allocation_type_id', 'value': this.allocation_type_id})
        checked = 'checked' if this.is_claimable else ''
        allocation_type_name = get_name_from_id(AllocationType, this.allocation_type_id)
        html = f"""
        <div class="modal fade" id="modal_edit_productallocation" tabindex="-1" role="dialog"
            aria-labelledby="myproductallocationLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">Edit {allocation_type_name} Allocation</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_edit_productallocation' name='{allocation_type_name}'>
                            <div class="col-md-12 hidden">
                                {hidden_input}
                                {hidden_input_product_id}
                                {hidden_input_allocation_type_id}
                            </div>
                            <div class="d-flex justify-content-between align-items-center productalloc_calc_num">
                                <div class="pill_item">
                                    <div class="col-12 pill_header">Percentage</div>
                                    <input id="percentage" type="number" name="percentage" class="form-control alloc_pill" placeholder='0.00' value="{getcurrency(this.percentage)}" required>
                                </div>
                                <div class="col-1 font-weight-bold">OR</div>
                                <div class="pill_item">
                                    <div class="col-12 pill_header">Amount</div>
                                    <input id="amount" type="number" name="amount" class="form-control alloc_pill" placeholder='0.00' value="{getcurrency(this.amount)}" required>
                                </div>
                                <div class="col-1 font-weight-bold">OR</div>
                                <div class="pill_item">
                                    <div class="col-12 pill_header">Factor</div>
                                    <input id="factor" type="number" name="factor" class="form-control alloc_pill" placeholder='0.00' value="{getcurrency(this.factor)}" required>
                                </div>
                            </div>
                            <div class="col-md-12 mt-3">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="allocation_id">Allocation</label>
                                    <div class="col-md-9">
                                        {selectbox_allocations}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="general_ledger_account_id">Account</label>
                                    <div class="col-md-9">
                                        {selectbox_gl_accounts}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="investment_fund_id">Investment Fund</label>
                                    <div class="col-md-9">
                                        {selectbox_investment_funds}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="is_claimable">Is Claimable</label>
                                    <div class="form-check">
                                        <label class="form-check-label">
                                            <input class="form-check-input" type="checkbox" name='is_claimable' {checked}>
                                            <span class="form-check-sign"></span>
                                        </label>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="active">Active</label>
                                    <div class="form-check">
                                        <label class="form-check-label">
                                            <input class="form-check-input" type="checkbox" name='active' checked>
                                            <span class="form-check-sign"></span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_edit_productallocation' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary productallocation_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
        $('.alloc_pill').change(function(){
            var val = $(this).val();
            if(val === '0' || val === ''){
                $('.alloc_pill').each(function(){
                    $(this).prop('disabled', false);
                });
            }else{
                $('.alloc_pill').not(this).each(function(){
                    $(this).prop('disabled', true);
                });
            }
        });
        $('.alloc_pill').each(function(){
            var val = $(this).val();
            if(val && val != '0'){
                $(this).trigger('change');
            };
        });
        setFormValidation('#form_edit_productallocation');
        $('#save_edit_productallocation').click(function(){
             var valid = FormIsValid("#form_edit_productallocation");
             if(valid){
                var formserial = $('#form_edit_productallocation').serialize();
                $.post('/product/save_edit_productallocation?', formserial, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $('#modal_edit_productallocation').modal('hide');
                        var formserial = 'product_id='+result.product_id;
                        $('#tab3').load('/product/get_allocation_setup_html?', formserial, function(data){
                            return false;
                        });
                    };
                    return false;
                });
             }
        });
        $('.productallocation_back').click(function(){
            $('#modal_edit_productallocation').modal('hide');
        });
        $('#modal_edit_productallocation').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_edit_productallocation(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        this = self.get_productallocation_by_id(**kwargs)
        if not this: return json.dumps({'success' : False, 'kwargs' : 'No Product Allocation found for id provided'})
        this.product_id = kwargs.get('product_id', None)
        this.allocation_type_id = kwargs.get('allocation_type_id', None)
        this.allocation_id = kwargs.get('allocation_id', None)
        this.general_ledger_account_id = kwargs.get('general_ledger_account_id', None)
        this.investment_fund_id = kwargs.get('investment_fund_id', None)
        if kwargs.get('is_claimable', None): this.is_claimable = True
        else: this.is_claimable = False
        this.percentage = str_to_float(kwargs.get('percentage', None))
        this.amount = str_to_float(kwargs.get('amount', None))
        this.factor = str_to_float(kwargs.get('factor', None))
        this.allocation_recipient_id = kwargs.get('allocation_recipient_id', None)
        this.group_id = kwargs.get('group_id', None)
        this.account_id = kwargs.get('account_id', None)
        if not kwargs.get('active', None): this.active = False
        DBSession.flush()
        COMMONORC.save_auditlog(**{'tablename' : ProductAllocation, 'function' : 'save_edit_productallocation', 'audit_type_id' : AuditType.Edit.value})
        return json.dumps({'success' : True, 'product_id' : kwargs.get('product_id')})

    @expose()
    def get_productallocation_by_id(self, *args, **kwargs):
        usernow = request.identity.get('user')
        return DBSession.query(ProductAllocation). \
            filter(ProductAllocation.id==kwargs.get('id', None)). \
            filter(ProductAllocation.tenant_id==usernow.tenant_id). \
            first()

    @expose('rocket_app.templates.generic')
    def edit(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id: redirect('/product/index')
        this = Product.by_id(product_id)
        if not this: redirect('/product/index')
        kwargs['product'] = this
        # TAB: Product Parameters
        kwargs['product_details_form_id'] = 'form_edit_product_details'
        kwargs['product_additional_id'] = 'form_edit_additional'
        kwargs['product_pricing_id'] = 'form_edit_pricing'
        kwargs['product_durations_id'] = 'form_edit_durations'
        kwargs['product_stack_id'] = 'form_edit_stack'
        kwargs['product_claim_details_id'] = 'form_edit_claim_details'
        kwargs['product_ages_id'] = 'form_edit_ages'
        kwargs['product_initial_cover_id'] = 'form_edit_initial_cover'
        kwargs['product_purchase_form_id'] = 'form_edit_purchase'
        kwargs['product_claim_id'] = 'form_edit_claim'
        kwargs['product_refund_id'] = 'form_edit_refund'
        kwargs['prepurchase_form_id'] = 'form_edit_prepurchase_text'
        kwargs['purchase_form_id'] = 'form_edit_purchase_text'
        kwargs['reminder_form_id'] = 'form_edit_reminder_text'
        kwargs['claim_form_id'] = 'form_edit_claim_text'
        kwargs['refund_form_id'] = 'form_edit_refund_text'
        kwargs['docs_form_id'] = 'form_edit_schedule'
        kwargs['claim'] = PRODUCTORC.get_product_text_by_product_id(**{'product_id' : product_id, 'product_text_type_id' : ProductTextType.Claim.value})
        kwargs['refund'] = PRODUCTORC.get_product_text_by_product_id(**{'product_id' : product_id, 'product_text_type_id' : ProductTextType.Refund.value})
        kwargs['purchase'] = PRODUCTORC.get_product_text_by_product_id(**{'product_id' : product_id, 'product_text_type_id' : ProductTextType.Purchase.value})
        kwargs['schedule'] = PRODUCTORC.get_product_text_by_product_id(**{'product_id' : product_id, 'product_text_type_id' : ProductTextType.Schedule.value})
        kwargs['prepurchase'] = PRODUCTORC.get_product_text_by_product_id(**{'product_id' : product_id, 'product_text_type_id' : ProductTextType.Pre_Purchase.value})
        kwargs['reminder'] = PRODUCTORC.get_product_text_by_product_id(**{'product_id' : product_id, 'product_text_type_id' : ProductTextType.Advance_Reminder.value})
        ages = self.get_product_ages_html(**kwargs)
        stacks = self.get_product_stack_html(**kwargs)
        prepurchase = self.get_prepurchase_html(**kwargs)
        refund_setup = self.get_refund_setup_html(**kwargs)
        claim_setup = self.get_claim_setup_html(**kwargs)
        durations = self.get_product_durations_html(**kwargs)
        claim_details = self.get_claim_details_html(**kwargs)
        initial_cover = self.get_initial_cover_html(**kwargs)
        purchase = self.get_purchase_confirmation_html(**kwargs)
        product_details = self.get_product_details_html(**kwargs)
        product_pricing = self.get_product_pricing_html(**kwargs)
        additional_setup = self.get_additional_setup_html(**kwargs)
        purchase_reminder = self.get_purchase_reminder_html(**kwargs)
        # TAB: Family Benefits
        family_benefits = self.get_family_benefits_html(**{'product_id' : product_id})
        # TAB: Allocation Setup
        allocation_setup = self.get_allocation_setup_html(**{'product_id' : product_id})
        # TAB: Schedule & Docs
        schedule_docs = self.get_contract_and_documents_html(**kwargs)
        # TAB: Loader & Riders
        loaders_riders = self.get_loader_riders_html(**{'product_id' : product_id})
        # TAB: Premium Rate Table
        rate_table = self.get_product_rate_table_html(**{'product_id' : product_id})
        button_activate = ''
        if this.product_state_id == ProductState.Sandbox.value:
            button_activate = f"""<button id='product_activate' product_id='{product_id}' class="btn btn-primary">Save & Activate</button>"""
        html = f"""
        <div id='dialogdiv'></div>
        <div class="row">
            <div class="col-md-12">
                <div class="card ">
                    <div class="card-header header_only d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Edit '{this.code} - {this.description}'</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button class="btn btn-primary ml-auto action_back products_back">Back to Products List</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 ml-auto mr-auto">
                <div class="col-md-12 ml-auto mr-auto">
                    <ul class="nav nav-pills nav-pills-primary justify-content-center" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link active" data-toggle="tab" href="#tab1" role="tablist">
                                Product Parameters
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-toggle="tab" href="#tab2" role="tablist">
                                Family Benefits
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-toggle="tab" href="#tab3" role="tablist">
                                Allocation Setup
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-toggle="tab" href="#tab4" role="tablist">
                                Contract and Documents
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-toggle="tab" href="#tab5" role="tablist">
                                Loaders
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-toggle="tab" href="#tab6" role="tablist">
                                Premium Rate Table
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="tab-content tab-space tab-subcategories">
                    <div class="tab-pane active" id="tab1">
                        {product_details}
                        {additional_setup}
                        {product_pricing}
                        {durations}
                        {initial_cover}
                        {stacks}
                        {claim_details}
                        {ages}
                        <div class="row">
                            {prepurchase}
                            {purchase}
                            {purchase_reminder}
                            {claim_setup}
                            {refund_setup}
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="card">
                                    <div class="card-body">
                                        <button id='product_save' class="btn btn-primary">Save</button>
                                        {button_activate}
                                        <button class="btn btn-outline-primary products_back">Cancel</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane" id="tab2">
                        {family_benefits}
                    </div>
                    <div class="tab-pane" id="tab3">
                        {allocation_setup}
                    </div>
                    <div class="tab-pane" id="tab4">
                        {schedule_docs}
                    </div>
                    <div class="tab-pane" id="tab5">
                        {loaders_riders}
                    </div>
                    <div class="tab-pane" id="tab6">
                        {rate_table}
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        var formproduct = ".form_edit_product";

        var formproductdetails = "#form_edit_product_details";
        var formadditional = "#form_edit_additional";
        var formpricing = "#form_edit_pricing";
        var formdurations = "#form_edit_durations";
        var formstack = "#form_edit_stack";
        var formclaimdetails = "#form_edit_claim_details";
        var formages = "#form_edit_ages";
        var forminitialcover = "#form_edit_initial_cover";
        var formproductpurchase = "#form_edit_purchase";
        var formproductclaim = "#form_edit_claim";
        var formproductrefund = "#form_edit_refund";
        var formclaim = "#form_edit_claim_text";
        var formschedule = "#form_edit_schedule";
        var formrefund = "#form_edit_refund_text";
        var formreminder = "#form_edit_reminder_text";
        var formpurchase = "#form_edit_purchase_text";
        var formprepurchase = "#form_edit_prepurchase_text";

        setFormValidation(formproductdetails);
        setFormValidation(formadditional);
        setFormValidation(formpricing);
        setFormValidation(formdurations);
        setFormValidation(formstack);
        setFormValidation(formclaimdetails);
        setFormValidation(formages);
        setFormValidation(forminitialcover);
        setFormValidation(formproductpurchase);
        setFormValidation(formproductclaim);
        setFormValidation(formproductrefund);
        setFormValidation(formclaim);
        setFormValidation(formschedule);
        setFormValidation(formrefund);
        setFormValidation(formreminder);
        setFormValidation(formpurchase);
        setFormValidation(formprepurchase);

        $('#product_activate').click(function(){
            var result = window.confirm("Are you sure you want to activate this product?");
            if(result === true){
                productEditSave('save_activate');
            };
        });
        $('#product_save').click(function(){
            productEditSave('save_edit');
        });
        function productEditSave(follow_link){

            var valid_product_details = FormIsValid(formproductdetails);
            var valid_additional = FormIsValid(formadditional);
            var valid_pricing = FormIsValid(formpricing);
            var valid_durations = FormIsValid(formdurations);
            var valid_stack = FormIsValid(formstack);
            var valid_claim_details = FormIsValid(formclaimdetails);
            var valid_ages = FormIsValid(formages);
            var valid_initial_cover = FormIsValid(forminitialcover);
            var valid_product_purchase = FormIsValid(formproductpurchase);
            var valid_product_claim = FormIsValid(formproductclaim);
            var valid_product_refund = FormIsValid(formproductrefund);
            var valid_claim = FormIsValid(formclaim);
            var valid_refund = FormIsValid(formrefund);
            var valid_reminder = FormIsValid(formreminder);
            var valid_purchase = FormIsValid(formpurchase);
            var valid_prepurchase = FormIsValid(formprepurchase);

            if(valid_product_details &&
                valid_additional &&
                valid_pricing &&
                valid_durations &&
                valid_stack &&
                valid_claim_details &&
                valid_ages &&
                valid_initial_cover &&
                valid_product_purchase &&
                valid_refund &&
                valid_reminder &&
                valid_claim &&
                valid_prepurchase &&
                valid_purchase &&
                valid_product_claim &&
                valid_product_refund){

                $('select').prop('disabled', false);
                var formserial = new Object;
                formserial['formproductdetails'] = getFormData(formproductdetails);
                formserial['formadditional'] = getFormData(formadditional);
                formserial['formpricing'] = getFormData(formpricing);
                formserial['formdurations'] = getFormData(formdurations);
                formserial['formstack'] = getFormData(formstack);
                formserial['formclaimdetails'] = getFormData(formclaimdetails);
                formserial['formages'] = getFormData(formages);
                formserial['forminitialcover'] = getFormData(forminitialcover);
                formserial['formproductpurchase'] = getFormData(formproductpurchase);
                formserial['formclaim'] = getFormData(formclaim);
                formserial['formrefund'] = getFormData(formrefund);
                formserial['formreminder'] = getFormData(formreminder);
                formserial['formpurchase'] = getFormData(formpurchase);
                formserial['formprepurchase'] = getFormData(formprepurchase);
                formserial['formproductclaim'] = getFormData(formproductclaim);
                formserial['formproductrefund'] = getFormData(formproductrefund);
                var data = {data : JSON.stringify(formserial)};

                $.post('/product/'+follow_link+'?', data, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $.redirect('/product/index');
                    }
                    return false;
                });
            };
        };

        function change_initial_cover_product(selector){
            $(selector).change(function(){
                var selected_class = $('#product_class_id option:selected').val();
                var selected_type = $('#product_type_id option:selected').val();
                var product_id = $('#product_id').val();
                var kwargs = 'product_type_id='+selected_type;
                kwargs += '&product_class_id='+selected_class;
                kwargs += '&product_id='+product_id;
                kwargs += '&id=cover_type_id';
                $('#div_initial_cover_product').load('/product/get_selectbox_products?'+kwargs, function(data){
                    return false;
                });
            });
        };
        // REMOVE
        // change_initial_cover_product('#product_class_id');
        // change_initial_cover_product('#product_type_id');
        $('#product_class_id').trigger('change');

        $('.products_back').click(function(){
            $.redirect('/product/index');
        });
        """
        title = f"Edit '{this.code}'"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def save_edit(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success': False})
        return PRODUCTORC.save_edit_product(data)

    @expose()
    def save_activate(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success': False})
        result = PRODUCTORC.save_edit_product(data)
        formproduct = data.get('formproductdetails', {})
        product_id = formproduct.get('product_id', None)
        product = Product.by_id(product_id)
        product.product_state_id = ProductState.Active.value
        DBSession.flush()
        return result

    @expose()
    def get_all_products_list(self, *args, **kwargs):
        usernow = request.identity.get('user')
        reset = kwargs.get('reset', None)
        if reset:
            COMMON.delete_session_value(SEARCHKEY_PRODUCT)
            COMMON.delete_session_value(SEARCHKEY_PRODUCT_STATE)

        kwargs['searchkey'] = SEARCHKEY_PRODUCT
        searchproduct = COMMON.get_searchphrase(**kwargs).lower()
        searchstate = COMMON.get_searchphrase(**{'searchphrase' : kwargs.get('product_state_id'), 'searchkey' : SEARCHKEY_PRODUCT_STATE})
        if searchproduct and searchstate:
            searchterm = f'%{searchproduct}%'
            dbase_query = DBSession.query(Product). \
                filter(or_(
                    Product.code.like(searchterm),
                    Product.description.like(searchterm),
                )). \
                filter(Product.tenant_id==usernow.tenant_id). \
                filter(Product.product_state_id==searchstate). \
                order_by(asc(Product.code)). \
                limit(LIMIT)
        elif searchproduct and not searchstate:
            searchterm = f'%{searchproduct}%'
            dbase_query = DBSession.query(Product). \
                filter(or_(
                    Product.code.like(searchterm),
                    Product.description.like(searchterm),
                )). \
                filter(Product.tenant_id==usernow.tenant_id). \
                filter(Product.product_state_id!=ProductState.Expired.value). \
                order_by(asc(Product.code)). \
                limit(LIMIT)
        elif not searchproduct and searchstate:
            dbase_query = DBSession.query(Product). \
                filter(Product.tenant_id==usernow.tenant_id). \
                filter(Product.product_state_id==searchstate). \
                order_by(asc(Product.code)). \
                limit(LIMIT)
        else:
            dbase_query = DBSession.query(Product). \
                filter(Product.tenant_id==usernow.tenant_id). \
                filter(Product.product_state_id!=ProductState.Expired.value). \
                order_by(asc(Product.code)). \
                limit(LIMIT)
        return dbase_query

    @expose()
    def get_product_list(self, *args, **kwargs):
        usernow = request.identity.get('user')
        product_id = kwargs.get('product_id', None)
        return DBSession.query(Product). \
                filter(Product.active==True). \
                filter(Product.tenant_id==usernow.tenant_id). \
                filter(Product.product_state_id!=ProductState.Expired.value). \
                order_by(asc(Product.code)). \
                all()

    @expose()
    def get_active_product_document_list(self, *args, **kwargs):
        usernow = request.identity.get('user')
        searchphrase = kwargs.get('searchphrase', None)
        if searchphrase:
            dbase_query = DBSession.query(ProductDocument). \
                    filter(ProductDocument.product_id==kwargs.get('product_id', None)). \
                    filter(ProductDocument.active==kwargs.get('active', True)). \
                    filter(ProductDocument.tenant_id==usernow.tenant_id). \
                    all()
        else:
            dbase_query = DBSession.query(ProductDocument). \
                    filter(ProductDocument.product_id==kwargs.get('product_id', None)). \
                    filter(ProductDocument.active==kwargs.get('active', True)). \
                    filter(ProductDocument.tenant_id==usernow.tenant_id). \
                    all()
        return dbase_query

    @expose('rocket_app.templates.generic')
    def rates(self, *args, **kwargs):
        html = self.get_active_premiumrate_html(*args, **kwargs)
        javascript = self.get_javascript_premiumrate_onload()
        title = "Premium Rate"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_premiumrate_htmltbl(self, *args, **kwargs):
        outputlist = []
        dbase_query = SETUP.get_active_premiumrate_list(*args, **kwargs)
        for item in dbase_query:
            outputlist.append({
                'name' : f"<div class='edit premiumrate_edit' premium_rate_id='{item.id}'>{item.name}</div>",
                'description' : item.description,
                             })
        dbcolumnlist=[
                'name',
                'description',
                    ]
        theadlist=[
                'Name',
                'Description',
                ]
        tdclasslist = [
                'action_link',
                'text-right',
                ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "premiumrate_table", tdclasslist)
        javascript = """
        <script>
        $(".premiumrate_edit").click(function(){
            var kwargs = {'premium_rate_id':$(this).attr('premium_rate_id')};
            $.redirect('/product/edit_premiumrate', kwargs);
        });
        </script>
        """
        return html + javascript

    @expose()
    def get_active_premiumrate_html(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_PREMIUM_RATE
        usernow = request.identity.get('user', {})
        searchphrase = COMMON.get_searchphrase(**kwargs)
        premiumratetable = self.get_active_premiumrate_htmltbl(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Premium Rate</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_premiumrate" class="btn btn-primary ml-auto">Create a new Premium Rate</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input id='search' type="text" class="form-control search" name="searchphrase" value='{searchphrase}' placeholder="Search by Name">
                        </div>
                        <div class="col-md-8">
                            <button id='btn_search' class="btn btn-primary action_search">Search</button>
                            <button id='btn_reset' class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div id='div_premiumrate_table' class="table-responsive">
                        {premiumratetable}
                    </div>
                </div>
                </div>
            </div>
            <div id='dialogdiv'></div>
        </div>
        """
        return html

    @expose()
    def get_javascript_premiumrate_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_premiumrate").click(function(){
            $('#dialogdiv').load('/product/get_modal_new_premiumrate?', function(data){
                return false;
            });
        });
        $('#btn_search').click(function(){
            var kwargs = 'searchphrase='+$('#search').val();
            $('#div_premiumrate_table').load('/product/get_active_premiumrate_htmltbl', kwargs, function(data){
                return false;
            });
        })
        $('#btn_reset').click(function(){
            $('#search').val('').focus();
            $('#div_premiumrate_table').load('/product/get_active_premiumrate_htmltbl', 'reset=true', function(data){
                return false;
            });
        })
        """
        return javascript


    @expose()
    def get_modal_new_premiumrate(self, *args, **kwargs):
        html = f"""
        <div class="modal fade" id="modal_new_premiumrate" tabindex="-1" role="dialog" aria-labelledby="mypremiumrateLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">New Premium Rate</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_new_premiumrate'>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="name">Name</label>
                                    <div class="col-md-9">
                                        <input id="name" type="text" name="name" class="form-control" required='true' maxlength="15">
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="description">Description</label>
                                    <div class="col-md-9">
                                        <input id="description" type="text" name="description" class="form-control" maxlength='50' required='true'>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_new_premiumrate' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary premiumrate_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
        setFormValidation('#form_new_premiumrate');
        $('#save_new_premiumrate').click(function(){
             var valid = FormIsValid("#form_new_premiumrate");
             if(valid){
                var formserial = $('#form_new_premiumrate').serialize();
                $.post('/product/save_new_premiumrate?', formserial, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $.redirect('/product/edit_premiumrate', {'premium_rate_id' : result.premium_rate_id});
                    };
                    return false;
                });
             }
        });
        $('.premiumrate_back').click(function(){
            $('#modal_new_premiumrate').modal('hide');
        });
        $('#modal_new_premiumrate').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_new_premiumrate(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        this = PremiumRate()
        this.name = kwargs.get('name', None)
        this.description = kwargs.get('description', None)
        this.added_by = usernow.id
        this.tenant_id = usernow.tenant_id
        DBSession.add(this)
        DBSession.flush()
        COMMONORC.save_auditlog(**{'tablename' : PremiumRate, 'function' : 'save_new_premiumrate', 'audit_type_id' : AuditType.Add.value})
        return json.dumps({'success' : True, 'premium_rate_id' : this.id})

    @expose('rocket_app.templates.generic')
    def edit_premiumrate(self, *args, **kwargs):
        premium_rate_id = kwargs.get('premium_rate_id', None)
        if not premium_rate_id: redirect('/product/rates')
        this = self.get_premiumrate_by_id(*args, **kwargs)
        if not this: redirect('/product/rates')
        checked = 'checked' if this.active else ''
        detail_html = self.get_premiumrate_detail_html(**kwargs)
        hidden_input = COMMON.get_hidden_input(**{'id': 'premium_rate_id', 'value': this.id})
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Edit '{this.name}'</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button class="btn btn-primary ml-auto action_back premiumrate_back">Back to Premium Rate List</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <form id='form_edit_premiumrate' class="d-flex flex-wrap">
                            {hidden_input}
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="name">Name</label>
                                    <div class="col-md-9">
                                        <input id="name" type="text" name="name" maxlength='15' value="{this.name}" class="form-control"
                                            required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="description">Description</label>
                                    <div class="col-md-9">
                                        <input id="description" type="text" maxlength='50' name="description" value="{this.description}"
                                            class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Active</label>
                                    <div class="form-check">
                                        <label class="form-check-label">
                                            <input class="form-check-input" type="checkbox" name='active' {checked}>
                                            <span class="form-check-sign"></span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div id="div_premium_rate_detail" class="row">{detail_html}</div>
        <div id='dialogdiv'></div>
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <button id='save_edit_premiumrate' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary premiumrate_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        setFormValidation('#form_edit_premiumrate');
        $('#save_edit_premiumrate').click(function(){
             var valid = FormIsValid("#form_edit_premiumrate");
             if(valid){
                var formserial = getFormData('#form_edit_premiumrate');
                var data = {data : JSON.stringify(formserial)};

                $.post('/product/save_edit_premiumrate?', data, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $.redirect('/product/rates');
                    };
                    return false;
                });
             }
        });
        $('.premiumrate_back').click(function(){
            $.redirect('/product/rates');
        });
     	"""
        title = "Edit Premium Rate"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def save_edit_premiumrate(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success' : False})
        usernow = request.identity.get('user', {})
        this = self.get_premiumrate_by_id(**data)
        if not this: return json.dumps({'success' : False})
        this.tenant_id = usernow.tenant_id
        this.name = data.get('name', None)
        this.description = data.get('description', None)
        if not data.get('active', None): this.active = False
        DBSession.flush()
        COMMONORC.save_auditlog(**{'tablename' : PremiumRate, 'function' : 'save_edit_premiumrate', 'audit_type_id' : AuditType.Edit.value})
        return json.dumps({'success' : True})

    @expose()
    def get_premiumrate_by_id(self, *args, **kwargs):
        usernow = request.identity.get('user')
        return DBSession.query(PremiumRate). \
            filter(PremiumRate.id==kwargs.get('premium_rate_id', None)). \
            filter(PremiumRate.tenant_id==usernow.tenant_id). \
            first()

    @expose()
    def get_premiumrate_detail_html(self, *args, **kwargs):
        html = self.get_active_premiumratedetail_html(*args, **kwargs)
        javascript = self.get_javascript_premiumratedetail_onload()
        return html + javascript

    @expose()
    def get_active_premiumratedetail_htmltbl(self, *args, **kwargs):
        outputlist = []
        dbase_query = self.get_active_premiumratedetail_list(**kwargs)
        for item in dbase_query:
            gender = get_name_from_id(Gender, item.gender_id)
            outputlist.append({
                'gender_id' : f"<div class='edit premiumratedetail_edit' premiumratedetail_id='{item.id}'>{gender}</div>",
                'from_age' : item.from_age,
                'to_age' : item.to_age,
                'adjust_factor' : round(item.adjust_factor, 6),
                             })
        dbcolumnlist=[
                'gender_id',
                'from_age',
                'to_age',
                'adjust_factor',
                    ]
        theadlist=[
                'Gender',
                'Age From',
                'To Age',
                'Adjust Factor',
                ]
        tdclasslist=[
                'action_link',
                '',
                '',
                'text-right',
                ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "premiumratedetail_table", tdclasslist)

        javascript = """
        <script>
        $(".premiumratedetail_edit").click(function(){
            var kwargs = 'premium_rate_id='+$('#create_new_premiumratedetail').attr('premium_rate_id');
            kwargs += '&premiumratedetail_id='+$(this).attr('premiumratedetail_id');
            $('#dialogdiv').load('/product/get_modal_premiumratedetail?', kwargs, function(data){
                return false;
            });
        });
        </script>
        """
        return html + javascript

    @expose()
    def get_active_premiumratedetail_html(self, *args, **kwargs):
        premium_rate_id = kwargs.get('premium_rate_id', None)
        if not premium_rate_id: redirect('/product/rates')
        usernow = request.identity['user']
        kwargs['searchkey'] = SEARCHKEY_PREMIUM_RATE_DTL
        searchphrase = COMMON.get_searchphrase(**kwargs)
        premiumratedetailtable = self.get_active_premiumratedetail_htmltbl(**kwargs)
        html = f"""
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Premium Rate Detail</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_premiumratedetail" premium_rate_id='{premium_rate_id}' class="btn btn-primary ml-auto">Create a new Premium Rate Detail</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input id='search' type="text" class="form-control search" name="searchphrase" value='{searchphrase}' placeholder="Search by From Age, To Age or Adjustment Factor">
                        </div>
                        <div class="col-md-8">
                            <button id='btn_search' class="btn btn-primary action_search">Search</button>
                            <button id='btn_reset' class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div id='div_premiumratedetail_table' class="table-responsive">
                        {premiumratedetailtable}
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_javascript_premiumratedetail_onload(self, *args, **kwargs):
        javascript = """
        <script>
            $("#create_new_premiumratedetail").click(function(){
                var kwargs = 'premium_rate_id='+$(this).attr('premium_rate_id');
                $('#dialogdiv').load('/product/get_modal_premiumratedetail?', kwargs, function(data){
                    return false;
                });
            });
            $('#btn_search').click(function(){
                var kwargs = 'searchphrase='+$('#search').val();
                $('#div_premiumratedetail_table').load('/product/get_active_premiumratedetail_htmltbl', kwargs, function(data){
                    return false;
                });
            })
            $('#btn_reset').click(function(){
                $('#search').val('').focus();
                $('#div_premiumratedetail_table').load('/product/get_active_premiumratedetail_htmltbl', 'reset=true', function(data){
                    return false;
                });
            })
        </script>
        """
        return javascript

    @expose()
    def get_modal_premiumratedetail(self, *args, **kwargs):
        premium_rate_id = kwargs.get('premium_rate_id', None)
        if not premium_rate_id: return ''
        premiumratedetail_id = kwargs.get('premiumratedetail_id', None)
        this = self.get_premiumratedetail_by_id(**kwargs)
        to_age = this.to_age if this else ''
        from_age = this.from_age if this else ''
        adjust_factor = this.adjust_factor if this else ''
        checked = 'checked' if this and this.active else ''
        gender_id = this.gender_id if this else ''
        active_input = self.get_premiumratedetail_active_input_html(**{'checked' : checked}) if this else ''
        hidden_input_id = COMMON.get_hidden_input(**{'id': 'premium_rate_id', 'value': premium_rate_id})
        hidden_input = COMMON.get_hidden_input(**{'id': 'premiumratedetail_id', 'value': this.id}) if this else ''
        title = f"Edit Premium Rate Detail'" if this else 'New Premium Rate Detail'
        selected = this.gender_id if this else ''
        selectbox_gender = COMMON.get_selectbox_gender(**{'id': 'gender_id', 'selected' : selected})
        html = f"""
        <div class="modal fade" id="modal_premiumratedetail" tabindex="-1" role="dialog" aria-labelledby="mypremiumratedetailLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">{title}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_premiumratedetail'>
                            {hidden_input}
                            {hidden_input_id}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="gender_id">Gender</label>
                                    <div class="col-md-9">
                                        {selectbox_gender}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" for="from_age">Age From</label>
                                    <div class="col-md-9">
                                        <input id="from_age" type="text" name="from_age" class="form-control" value='{from_age}'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" for="to_age">To Age</label>
                                    <div class="col-md-9">
                                        <input id="to_age" type="text" name="to_age" class="form-control" value='{to_age}'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="adjust_factor">Adjust Factor</label>
                                    <div class="col-md-9">
                                        <input id="adjust_factor" type="text" name="adjust_factor" class="form-control" required='true' value='{adjust_factor}'>
                                    </div>
                                </div>
                            </div>
                            {active_input}
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_new_premiumratedetail' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary premiumratedetail_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
        setFormValidation('#form_premiumratedetail');
        $('#save_new_premiumratedetail').click(function(){
             var valid = FormIsValid("#form_premiumratedetail");
             if(valid){
                var formserial = getFormData('#form_premiumratedetail');
                var data = {data : JSON.stringify(formserial)};
                $.post('/product/save_premiumratedetail?', data, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        var kwargs = 'premium_rate_id='+$('#premium_rate_id').val();
                        $('#div_premium_rate_detail').load('/product/get_premiumrate_detail_html?', kwargs, function(data){
                            $('#modal_premiumratedetail').modal('hide');
                            return false;
                        });
                    };
                    return false;
                });
             }
        });
        $('.premiumratedetail_back').click(function(){
            $('#modal_premiumratedetail').modal('hide');
        });
        $('#modal_premiumratedetail').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def get_premiumratedetail_active_input_html(self, *args, **kwargs):
        checked = kwargs.get('checked', '')
        html = f"""
        <div class="col-md-12">
            <div class="form-group row">
                <label class="col-3 col-form-label" for="active" required>Active</label>
                <div class="col-9">
                    <div class="form-check">
                    <label class="form-check-label">
                        <input class="form-check-input" type="checkbox" name='active' {checked}>
                        <span class="form-check-sign"></span>
                    </label>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def save_premiumratedetail(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success' : False})
        if data.get('premiumratedetail_id'): return self.save_edit_premiumratedetail(data)
        return self.save_new_premiumratedetail(data)

    @expose()
    def save_new_premiumratedetail(self, data):
        usernow = request.identity['user']
        this = PremiumRateDetail()
        this.premium_rate_id = data.get('premium_rate_id', None)
        this.gender_id = data.get('gender_id', None)
        this.from_age = data.get('from_age', None)
        this.to_age = data.get('to_age', None)
        this.adjust_factor = data.get('adjust_factor', None)
        this.added_by = usernow.id
        this.tenant_id = usernow.tenant_id
        DBSession.add(this)
        DBSession.flush()
        COMMONORC.save_auditlog(**{'tablename' : PremiumRateDetail, 'function' : 'save_new_premiumratedetail', 'audit_type_id' : AuditType.Add.value})
        return json.dumps({'success' : True, 'data' : this.id})

    @expose()
    def save_edit_premiumratedetail(self, data):
        usernow = request.identity['user']
        this = self.get_premiumratedetail_by_id(**data)
        if not this: return json.dumps({'success' : False})
        this.premium_rate_id = data.get('premium_rate_id', None)
        this.gender_id = data.get('gender_id', None)
        this.from_age = data.get('from_age', None)
        this.to_age = data.get('to_age', None)
        this.adjust_factor = data.get('adjust_factor', None)
        if not data.get('active', None): this.active = False
        DBSession.flush()
        COMMONORC.save_auditlog(**{'tablename' : PremiumRateDetail, 'function' : 'save_edit_premiumratedetail', 'audit_type_id' : AuditType.Edit.value})
        return json.dumps({'success' : True, 'data' : this.id})

    @expose()
    def get_premiumratedetail_by_id(self, *args, **kwargs):
        usernow = request.identity.get('user')
        return DBSession.query(PremiumRateDetail). \
            filter(PremiumRateDetail.id==kwargs.get('premiumratedetail_id', None)). \
            filter(PremiumRateDetail.tenant_id==usernow.tenant_id). \
            first()

    @expose()
    def get_active_premiumratedetail_list(self, *args, **kwargs):
        usernow = request.identity.get('user')
        kwargs['searchkey'] = SEARCHKEY_PREMIUM_RATE_DTL
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()
        if searchphrase:
            searchterm = f'%{searchphrase}%'
            dbase_query = DBSession.query(PremiumRateDetail). \
                filter(PremiumRateDetail.premium_rate_id==kwargs.get('premium_rate_id', None)). \
                filter(or_(
                    PremiumRateDetail.from_age.like(searchterm),
                    PremiumRateDetail.to_age.like(searchterm),
                    PremiumRateDetail.adjust_factor.like(searchterm),
                )). \
                filter(PremiumRateDetail.active==1). \
                filter(PremiumRateDetail.tenant_id==usernow.tenant_id). \
                order_by(asc(PremiumRateDetail.from_age)). \
                order_by(asc(PremiumRateDetail.gender_id)). \
                all()
#                limit(LIMIT)
        else:
            dbase_query = DBSession.query(PremiumRateDetail). \
                filter(PremiumRateDetail.premium_rate_id==kwargs.get('premium_rate_id', None)). \
                filter(PremiumRateDetail.active==1). \
                filter(PremiumRateDetail.tenant_id==usernow.tenant_id). \
                order_by(asc(PremiumRateDetail.from_age)). \
                order_by(asc(PremiumRateDetail.gender_id)). \
                all()
#                limit(LIMIT)
        return dbase_query

    @require(predicates.has_any_permission('Product Setup', 'Developer'))
    @expose('rocket_app.templates.generic')
    def investment(self, *args, **kwargs):
        html = self.get_active_investmentfund_html(*args, **kwargs)
        javascript = self.get_javascript_investmentfund_onload()
        title = "Investment Fund"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_investmentfund_htmltbl(self, *args, **kwargs):
        img_active = "<span class='now-ui-icons ui-1_check text-green font-weight-bold'>"
        img_inactive = "<span class='now-ui-icons ui-1_simple-remove text-red font-weight-bold'>"
        dbase_query = self.get_active_investmentfund_list(*args, **kwargs)
        outputlist = []
        for item in dbase_query:
            is_active = img_active if item.active else img_inactive
            outputlist.append({
                'code' : f"<div class='edit investmentfund_edit' investmentfund_id='{item.id}'>{item.code}</div>",
                'name' : item.name,
                'fund_manager' : item.fund_manager,
                'contact_number' : item.contact_number,
                'active' : is_active,
                })
        dbcolumnlist=[
                'code',
                'name',
                'fund_manager',
                'contact_number',
                'active',
                ]
        theadlist=[
                'Code',
                'Name',
                'Fund Manager',
                'Contact Number',
                'Active',
                ]
        tdclasslist = [
                'action_link',
                '',
                '',
                '',
                'text-right',
              ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "investmentfund_table", tdclasslist)
        javascript = """
        <script>
        $(".investmentfund_edit").click(function(){
            var data = {investmentfund_id : $(this).attr('investmentfund_id')};
            $.redirect('/product/edit_investmentfund', data);
        });
        </script>
        """
        return html + javascript

    @expose()
    def get_active_investmentfund_html(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_INVESTMENT
        searchphrase = COMMON.get_searchphrase(**kwargs)
        investmentfundtable = self.get_investmentfund_htmltbl(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Investment Fund</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_investmentfund" class="btn btn-primary ml-auto">Create a new Investment Fund</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input id='search' type="text" class="form-control search" name="searchphrase" placeholder="Search by Code, Name, Fund Manager or Contact Number" value='{searchphrase}'>
                        </div>
                        <div class="col-md-8">
                            <button id='btn_search' class="btn btn-primary action_search">Search</button>
                            <button id='btn_reset' class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div id='div_investment_table' class="table-responsive">
                        {investmentfundtable}
                    </div>
                </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_javascript_investmentfund_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_investmentfund").click(function(){
            $.redirect('/product/new_investmentfund');
        });
        $('#btn_search').click(function(){
            var kwargs = 'searchphrase='+$('#search').val();
            $('#div_investment_table').load('/product/get_investmentfund_htmltbl', kwargs, function(data){
                return false;
            });
        })
        $('#btn_reset').click(function(){
            $('#search').val('').focus();
            $('#div_investment_table').load('/product/get_investmentfund_htmltbl', 'reset=true', function(data){
                return false;
            });
        })
        """
        return javascript

    @expose('rocket_app.templates.generic')
    def new_investmentfund(self, *args, **kwargs):
        selectbox_investment_methods = self.get_selectbox_investment_methods(**{'id': 'investment_method_id', 'required': True})
        selectbox_repurchase_option = self.get_selectbox_repurchase_option(**{'id': 'investment_repurchase_option_id', 'required': True})
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header header_only d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">New Investment Fund</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button class="btn btn-primary ml-auto action_back investmentfund_back">Back to Investment Fund List</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div>
            <div class="card">
                <div class="card-header d-flex">
                    <div class="col-md-6">
                        <h4 class="card-title">Fund Details</h4>
                    </div>
                </div>
                <div class="card-body">
                    <form class='d-flex flex-wrap' id='form_new_investmentfund'>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="code">Code</label>
                                <div class="col-md-9">
                                    <input id="code" type="text" name="code" maxlength='10' class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="name">Name</label>
                                <div class="col-md-9">
                                    <input id="name" type="text" name="name" maxlength='50' class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div>
            <div class="card">
                <div class="card-header d-flex">
                    <div class="col-md-6">
                        <h4 class="card-title">Fund Manager</h4>
                    </div>
                </div>
                <div class="card-body">
                    <form class='d-flex flex-wrap' id='form_new_fund_manager'>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="fund_manager">Fund Manager</label>
                                <div class="col-md-9">
                                    <input id="fund_manager" type="text" maxlength='50' name="fund_manager" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="contact_number">Contact Number</label>
                                <div class="col-md-9">
                                    <input id="contact_number" type="text" name="contact_number" maxlength='20' class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="mobile">Mobile</label>
                                <div class="col-md-9">
                                    <input id="mobile" type="text" name="mobile" class="form-control" maxlength='20' required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="email_address">Email</label>
                                <div class="col-md-9">
                                    <input id="email_address" type="text" name="email_address" maxlength='250' class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div>
            <div class="card">
                <div class="card-header d-flex">
                    <div class="col-md-6">
                        <h4 class="card-title">Fund Setup</h4>
                    </div>
                </div>
                <div class="card-body">
                    <form class='d-flex flex-wrap' id='form_new_investment_method'>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="investment_method_id">Investment Method</label>
                                <div class="col-md-9">
                                    {selectbox_investment_methods}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="compliance">Compliance</label>
                                <div class="col-md-9">
                                    <div class="form-check">
                                        <label class="form-check-label">
                                            <input class="form-check-input" type="checkbox" name="compliance" id="compliance"/>
                                            <span class="form-check-sign"></span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required
                                    for="weighted_unit_value">Weighted Unit Value</label>
                                <div class="col-md-9">
                                    <input id="weighted_unit_value" type="text" name="weighted_unit_value" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="unit_cost">Unit Cost</label>
                                <div class="col-md-9">
                                    <input id="unit_cost" type="text" name="unit_cost" maxlength='20' class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="total_units">Total Units</label>
                                <div class="col-md-9">
                                    <input id="total_units" type="text" maxlength='20' name="total_units" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="yield_to_use">Yield To Use</label>
                                <div class="col-md-9">
                                    <input id="yield_to_use" type="text" maxlength='20' name="yield_to_use" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="decimals_on_price">Decimals On Price</label>
                                <div class="col-md-9">
                                    <input id="decimals_on_price" type="number" name="decimals_on_price" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="decimals_on_units">Decimals On Units</label>
                                <div class="col-md-9">
                                    <input id="decimals_on_units" type="number" name="decimals_on_units" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="investment_repurchase_option_id">Investment Repurchase Option</label>
                                <div class="col-md-9">
                                    {selectbox_repurchase_option}
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <button id='save_new_investmentfund' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary investmentfund_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        var forminvestmentfund = '#form_new_investmentfund';
        var formfundmanager = '#form_new_fund_manager';
        var forminvestmethod = '#form_new_investment_method';

        setFormValidation(forminvestmentfund);
        setFormValidation(formfundmanager);
        setFormValidation(forminvestmethod);

        $('#save_new_investmentfund').click(function(){
             var valid_investment_fund = FormIsValid(forminvestmentfund);
             var valid_fund_manager = FormIsValid(formfundmanager);
             var valid_invest_method = FormIsValid(forminvestmethod);

             if(valid_investment_fund && valid_fund_manager && valid_invest_method){
                var formserial = new Object;
                formserial['forminvestmentfund'] = getFormData(form_new_investmentfund);
                formserial['formfundmanager'] = getFormData(formfundmanager);
                formserial['forminvestmethod'] = getFormData(forminvestmethod);
                var data = {data : JSON.stringify(formserial)};
                $.post('/product/save_new_investmentfund?', data, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $.redirect('/product/investment');
                    };
                    return false;
                });
             }
        });
        $('.investmentfund_back').click(function(){
            $.redirect('/product/investment');
        });
        """
        title = "New Investmentfund"
        return dict(title=title, html=html, javascript=javascript)

    @expose('rocket_app.templates.generic')
    def edit_investmentfund(self, *args, **kwargs):
        investmentfund_id = kwargs.get('investmentfund_id', None)
        if not investmentfund_id: redirect('/product/investment')
        this = self.get_investmentfund_by_id(*args, **kwargs)
        if not this: redirect('/product/investment')
        selected_investment_method = this.investment_method_id if this else ''
        selectbox_investment_method = self.get_selectbox_investment_methods(**{'id': 'investment_method_id', 'selected' : selected_investment_method})
        selected_repurchase_option = this.investment_repurchase_option_id if this else ''
        selectbox_repurchase_option = self.get_selectbox_repurchase_option(**{'id': 'investment_repurchase_option_id', 'selected' : selected_repurchase_option})
        checked = 'checked' if this.active else ''

        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header header_only d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Edit Investment Fund</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button class="btn btn-primary ml-auto action_back investmentfund_back">Back to Investment Fund List</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div>
            <div class="card">
                <div class="card-header d-flex">
                    <div class="col-md-6">
                        <h4 class="card-title">Fund Details</h4>
                    </div>
                </div>
                <div class="card-body">
                    <form class='d-flex flex-wrap' id='form_edit_investmentfund'>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="code">Code</label>
                                <div class="col-md-9">
                                    <input id="code" type="text" name="code" maxlength='10' value="{this.code}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="name">Name</label>
                                <div class="col-md-9">
                                    <input id="name" type="text" name="name" maxlength='50' value="{this.name}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div>
            <div class="card">
                <div class="card-header d-flex">
                    <div class="col-md-6">
                        <h4 class="card-title">Fund Manager</h4>
                    </div>
                </div>
                <div class="card-body">
                    <form class='d-flex flex-wrap' id='form_edit_fund_manager'>
                        <div style='display:none' class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="investmentfund_id">Id</label>
                                <div class="col-md-9">
                                    <input id="id" type="text" name="investmentfund_id" value="{this.id}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="fund_manager">Fund Manager</label>
                                <div class="col-md-9">
                                    <input id="fund_manager" type="text" name="fund_manager" maxlength='50' value="{this.fund_manager}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="contact_number">Phone</label>
                                <div class="col-md-9">
                                    <input id="contact_number" type="text" name="contact_number" maxlength='20' value="{this.contact_number}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="mobile">Mobile</label>
                                <div class="col-md-9">
                                    <input id="mobile" type="text" name="mobile" maxlength='20' value="{this.mobile}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="email_address">Email</label>
                                <div class="col-md-9">
                                    <input id="email_address" type="text" name="email_address" maxlength='250' value="{this.email_address}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div>
            <div class="card">
                <div class="card-header d-flex">
                    <div class="col-md-6">
                        <h4 class="card-title">Fund Setup</h4>
                    </div>
                </div>
                <div class="card-body">
                    <form class='d-flex flex-wrap' id='form_edit_investment_method'>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required
                                    for="investment_method_id">Investment Method</label>
                                <div class="col-md-9">
                                    {selectbox_investment_method}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="compliance">Compliance</label>
                                <div class="col-md-9">
                                    <input id="compliance" type="text" name="compliance" value="{this.compliance}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required
                                    for="weighted_unit_value">Weighted Unit Value</label>
                                <div class="col-md-9">
                                    <input id="weighted_unit_value" type="text" name="weighted_unit_value" value="{this.weighted_unit_value}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="unit_cost">Unit Cost</label>
                                <div class="col-md-9">
                                    <input id="unit_cost" type="text" name="unit_cost" maxlength='20' value="{this.unit_cost}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="total_units">Total Units</label>
                                <div class="col-md-9">
                                    <input id="total_units" type="text" name="total_units" maxlength='20' value="{this.total_units}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="yield_to_use">Yield To Use</label>
                                <div class="col-md-9">
                                    <input id="yield_to_use" type="text" name="yield_to_use" maxlength='20' value="{this.yield_to_use}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required
                                    for="decimals_on_price">Decimals On Price</label>
                                <div class="col-md-9">
                                    <input id="decimals_on_price" type="text" name="decimals_on_price" value="{this.decimals_on_price}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required
                                    for="decimals_on_units">Decimals On Units</label>
                                <div class="col-md-9">
                                    <input id="decimals_on_units" type="text" name="decimals_on_units" value="{this.decimals_on_units}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required
                                    for="investment_repurchase_option_id">Repurchase Option</label>
                                <div class="col-md-9">
                                    {selectbox_repurchase_option}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label">Active</label>
                                <div class="form-check">
                                    <label class="form-check-label">
                                        <input class="form-check-input" type="checkbox" name='active' {checked}>
                                        <span class="form-check-sign"></span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <button id='save_edit_investmentfund' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary investmentfund_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        var forminvestmentfund = '#form_edit_investmentfund';
        var formfundmanager = '#form_edit_fund_manager';
        var forminvestmethod = '#form_edit_investment_method';

        setFormValidation(forminvestmentfund);
        setFormValidation(formfundmanager);
        setFormValidation(forminvestmethod);

        $('#save_edit_investmentfund').click(function(){
             var valid_investment_fund = FormIsValid(forminvestmentfund);
             var valid_fund_manager = FormIsValid(formfundmanager);
             var valid_invest_method = FormIsValid(forminvestmethod);

             if(valid_investment_fund && valid_fund_manager && valid_invest_method){
                var formserial = new Object;
                formserial['forminvestmentfund'] = getFormData(forminvestmentfund);
                formserial['formfundmanager'] = getFormData(formfundmanager);
                formserial['forminvestmethod'] = getFormData(forminvestmethod);
                var data = {data : JSON.stringify(formserial)};

                $.post('/product/save_edit_investmentfund?', data, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $.redirect('/product/investment');
                    };
                    return false;
                });
             }
        });
        $('.investmentfund_back').click(function(){
            $.redirect('/product/investment');
        });
        """
        title = "Edit Investmentfund"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def save_new_investmentfund(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success' : False})
        investmentfund = data.get('forminvestmentfund', {})
        fundmanager = data.get('formfundmanager', {})
        investmethod = data.get('forminvestmethod', {})

        usernow = request.identity.get('user', {})
        this = InvestmentFund()
        this.code = investmentfund.get('code', None)
        this.name = investmentfund.get('name', None)
        this.fund_manager = fundmanager.get('fund_manager', None)
        this.contact_number = fundmanager.get('contact_number', None)
        this.mobile = fundmanager.get('mobile', None)
        this.email_address = fundmanager.get('email_address', None)
        this.investment_method_id = investmethod.get('investment_method_id', None)
        this.compliance = str_to_bool(investmethod.get('compliance', None))
        this.weighted_unit_value = investmethod.get('weighted_unit_value', None)
        this.unit_cost = investmethod.get('unit_cost', None)
        this.total_units = investmethod.get('total_units', None)
        this.yield_to_use = investmethod.get('yield_to_use', None)
        this.decimals_on_price = investmethod.get('decimals_on_price', None)
        this.decimals_on_units = investmethod.get('decimals_on_units', None)
        this.investment_repurchase_option_id = investmethod.get('investment_repurchase_option_id', None)
        this.added_by = usernow.id
        this.tenant_id = usernow.tenant_id
        DBSession.add(this)
        DBSession.flush()
        COMMONORC.save_auditlog(**{'tablename' : InvestmentFund, 'function' : 'save_new_investmentfund', 'audit_type_id' : AuditType.Add.value})
        return json.dumps({'success' : True})

    @expose()
    def save_edit_investmentfund(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        investmentfund = data.get('forminvestmentfund', {})
        fundmanager = data.get('formfundmanager', {})
        investmethod = data.get('forminvestmethod', {})
        if not data: return json.dumps({'success' : False})
        usernow = request.identity.get('user', {})
        this = self.get_investmentfund_by_id(**{'investmentfund_id' : fundmanager.get('investmentfund_id', False)})
        if not this: return json.dumps({'success' : False})
        this.code = investmentfund.get('code', None)
        this.name = investmentfund.get('name', None)
        this.fund_manager = fundmanager.get('fund_manager', None)
        this.contact_number = fundmanager.get('contact_number', None)
        this.mobile = fundmanager.get('mobile', None)
        this.email_address = fundmanager.get('email_address', None)
        this.investment_method_id = investmethod.get('investment_method_id', None)
        this.compliance = str_to_bool(investmethod.get('compliance', None))
        this.weighted_unit_value = investmethod.get('weighted_unit_value', None)
        this.unit_cost = investmethod.get('unit_cost', None)
        this.total_units = investmethod.get('total_units', None)
        this.yield_to_use = investmethod.get('yield_to_use', None)
        this.decimals_on_price = investmethod.get('decimals_on_price', None)
        this.decimals_on_units = investmethod.get('decimals_on_units', None)
        this.investment_repurchase_option_id = investmethod.get('investment_repurchase_option_id', None)
        if not data.get('active', None): this.active = False
        DBSession.flush()
        COMMONORC.save_auditlog(**{'tablename' : InvestmentFund, 'function' : 'save_edit_investmentfund', 'audit_type_id' : AuditType.Edit.value})
        return json.dumps({'success' : True})

    @expose()
    def get_investmentfund_by_id(self, *args, **kwargs):
        usernow = request.identity.get('user')
        return DBSession.query(InvestmentFund). \
                filter(InvestmentFund.id==kwargs.get('investmentfund_id', None)). \
                filter(InvestmentFund.tenant_id==usernow.tenant_id). \
                first()

    @expose()
    def get_active_investmentfund_list(self, *args, **kwargs):
        usernow = request.identity.get('user')
        kwargs['searchkey'] = SEARCHKEY_INVESTMENT
        searchphrase = COMMON.get_searchphrase(**kwargs)
        if searchphrase:
            searchterm = f'%{searchphrase}%'
            dbase_query = DBSession.query(InvestmentFund). \
                    filter(or_(
                        InvestmentFund.code.like(searchterm),
                        InvestmentFund.name.like(searchterm),
                        InvestmentFund.fund_manager.like(searchterm),
                        InvestmentFund.contact_number.like(searchterm),
                    )). \
                    filter(InvestmentFund.active==kwargs.get('active', True)). \
                    filter(InvestmentFund.tenant_id==usernow.tenant_id). \
                    order_by(asc(InvestmentFund.id)). \
                    limit(LIMIT)
        else:
            dbase_query = DBSession.query(InvestmentFund). \
                    filter(InvestmentFund.active==kwargs.get('active', True)). \
                    filter(InvestmentFund.tenant_id==usernow.tenant_id). \
                    order_by(asc(InvestmentFund.id)). \
                    limit(LIMIT)
        return dbase_query

    def get_selectbox_relationship(self, *args, **kwargs):
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.value} for m in Relationship]
        return create_selectbox_html(**kwargs)

    def get_selectbox_investment_methods(self, *args, **kwargs):
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.value} for m in InvestmentMethod]
        return create_selectbox_html(**kwargs)

    def get_selectbox_repurchase_option(self, *args, **kwargs):
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.value} for m in InvestmentRepurchaseOption]
        return create_selectbox_html(**kwargs)

    def get_selectbox_allocations(self, *args, **kwargs):
        dbase_query = PRODUCTORC.get_active_allocations()
        kwargs['outputlist'] = [{'name' : m.description, 'id' : m.id} for m in dbase_query]
        return create_selectbox_html(**kwargs)

    def get_selectbox_gl_account(self, *args, **kwargs):
        dbase_query = PRODUCTORC.get_active_gl_accounts()
        kwargs['outputlist'] = [{'name' : m.description, 'id' : m.id} for m in dbase_query]
        return create_selectbox_html(**kwargs)

    def get_selectbox_investment_funds(self, *args, **kwargs):
        dbase_query = PRODUCTORC.get_active_investment_fund()
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.id} for m in dbase_query]
        return create_selectbox_html(**kwargs)

    @expose('rocket_app.templates.generic')
    def view(self, *args, **kwargs):
        html = self.get_product_view_html(*args, **kwargs)
        javascript = """
        $('.products_back').click(function(){
            $.redirect('/product/index');
        });
        $('#product_edit').click(function(){
            var kwargs = 'product_id='+$(this).attr('product_id');
            var result = window.confirm("Are you sure you want to edit this product?");
            if(result === true){
                $.post('/product/save_product_expire_edit?', kwargs, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        var data = {product_id : result.product_id};
                        $.redirect('/product/edit', data);
                    }
                    return false;
                });
            }
        });

        $('#btn_preview_contract').click(function(){
            var formserial = 'product_id='+$(this).attr('product_id');
            var href_with_formserial = '/product/preview_contract?'+formserial;
            $.get(href_with_formserial, function(data){
                if(data != ''){
                    var win = window.open(href_with_formserial, '_blank');
                    win.focus();
                };
                return false;
            });
        });
        """
        title = "Product View"
        return dict(title=title, html=html, javascript=javascript)

    def get_product_view_html(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        product_id = kwargs.get('product_id', None)
        product = Product.by_id(product_id)
        if not product: return ""
        styled_none = f'<span class="not_present">Not Set</span>'
        display_order = product.display_order if product.display_order else styled_none
        code = product.code if product.code else styled_none
        """
        product_type = styled_none
        if product.product_type_id:
            product_type = get_name_from_id(ProductType, product.product_type_id)
        """
        product_type = get_name_from_id(ProductType, product.product_type_id) if product.product_type_id else styled_none

        product_class = styled_none
        if product.product_class_id:
            product_class = get_name_from_id(ProductClass, product.product_class_id)
        groupname = styled_none
        if product.group_id:
            group = COMMONORC.get_group_by_id(**{'id' : product.group_id, 'tenant_id' : usernow.tenant_id})
            groupname = group.get('name', 'Not Found')
        cover_types = styled_none
        if product.cover_type_id:
            cover_types = get_name_from_id(CoverType, product.cover_type_id)
        assured_types = styled_none
        if product.assured_type_id:
            assured_types = get_name_from_id(AssuredType, product.assured_type_id)
        currencyname = styled_none
        if product.currency_id:
            currency = COMMONORC.get_currency_by_id(product.currency_id)
            currencyname = currency.get('name', 'Not Found')
        price_plan = styled_none
        if product.product_price_plan_id:
            price_plan = get_name_from_id(ProductPricePlan, product.product_price_plan_id)
        purchase_types = styled_none
        if product.purchase_type_id:
            purchase_types = get_name_from_id(PurchaseType, product.purchase_type_id)
        premium_rate_name = f'<span class="not_present">Premium Rate Not Set</span>'
        if product.premium_rate_id:
            premium_rate = self.get_premiumrate_by_id(product.premium_rate_id)
            premium_rate_name = premium_rate.name if premium_rate else '(Premium Rate Not Found)'
        period_type = styled_none
        if product.period_type_id:
            period_type = get_name_from_id(PeriodType, product.period_type_id)
        waiting_period = f"{product.waiting_period} Days" if product.waiting_period else styled_none
        active_period = active_period = product.active_period if product.active_period else styled_none
        cover_cancel_period = f"{product.cover_cancel_period} Days" if product.cover_cancel_period else styled_none
        stack_limit = product.stack_limit if product.stack_limit else styled_none
        is_stackable = "Is Stackable" if product.is_stackable else 'Not Stackable'
        claim_types = styled_none
        if product.product_claim_type_id:
            claim_types = get_name_from_id(ProductClaimType, product.product_claim_type_id)
        max_claim_units = product.max_claim_units if product.max_claim_units else styled_none
        payout_cap = product.payout_cap if product.payout_cap else styled_none
        number_of_payments = product.number_of_payments if product.number_of_payments else styled_none
        payment_frequency = styled_none
        if product.payment_frequency_id:
            payment_frequency = get_name_from_id(PaymentFrequency, product.payment_frequency_id)
        min_age = product.min_age if product.min_age else styled_none
        max_age = product.max_age if product.max_age else styled_none
        initial_cover_product_name = styled_none
        if product.cover_product_id:
            initial_cover_product = Product.by_id(product.cover_product_id)
            initial_cover_product_name = initial_cover_product.description if initial_cover_product else '(Product Not Found)'
        cover_period = f"{product.cover_period} Days" if product.cover_period else styled_none
        cover_restart_period = f"{product.cover_restart_period} Days Cover Break" if product.cover_restart_period else styled_none
        prepurchase = PRODUCTORC.get_product_text_by_product_id(**{'product_id' : product_id, 'product_text_type_id' : ProductTextType.Pre_Purchase.value})
        pre_purchase_text = styled_none
        if prepurchase:
            pre_purchase_text = prepurchase.text
        purchase = PRODUCTORC.get_product_text_by_product_id(**{'product_id' : product_id, 'product_text_type_id' : ProductTextType.Purchase.value})
        purchase_confirmation_text = styled_none
        if purchase:
            purchase_confirmation_text = purchase.text
        advance_reminder_period = f"{product.advance_reminder_period} Days In Advance" if product.advance_reminder_period else styled_none
        reminder = PRODUCTORC.get_product_text_by_product_id(**{'product_id' : product_id, 'product_text_type_id' : ProductTextType.Advance_Reminder.value})
        advance_reminder_text = styled_none
        if reminder:
            advance_reminder_text = reminder.text
        claim_grace_period = f"{product.claim_grace_period} Days" if product.claim_grace_period else styled_none
        claim = PRODUCTORC.get_product_text_by_product_id(**{'product_id' : product_id, 'product_text_type_id' : ProductTextType.Claim.value})
        claim_text = styled_none
        if claim:
            claim_text = claim.text
        refund_grace_period = f"{product.refund_grace_period} Days" if product.refund_grace_period else styled_none
        refund = PRODUCTORC.get_product_text_by_product_id(**{'product_id' : product_id, 'product_text_type_id' : ProductTextType.Refund.value})
        refund_text = styled_none
        if refund:
            refund_text = refund.text
        contract_text_line_start = product.contract_text_line_start if product.contract_text_line_start else styled_none
        contract_product_text = PRODUCTORC.get_product_text_by_product_id(**{'product_id' : product_id, 'product_text_type_id' : ProductTextType.Schedule.value})
        contract_product_text_text = styled_none
        if contract_product_text:
            contract_product_text_text = contract_product_text.text
        allocations_html_table = self.get_product_view_allocation_table(**kwargs)
        product_document_table = self.get_product_document_table_html(**kwargs)
        preview_visible = '' if contract_product_text and product.contract_text_line_start else "style='display:none;'"

        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">View Product</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id='product_edit' product_id='{product.id}' class="btn btn-danger">Edit</button>
                            <button class="btn btn-primary ml-auto action_back products_back">Back to Products List</button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <form class='d-flex flex-wrap'>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class=" col-form-label">Display Order</label>
                                <div class="pt-2 ml-3">
                                    {display_order}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Product Code</label>
                                <div class="pt-2 ml-3">{code}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class=" col-form-label">Description</label>
                                <div class="pt-2 ml-3">{product.description}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class=" col-form-label">Product Type</label>
                                <div class="pt-2 ml-3">{product_type}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Product Class</label>
                                <div class="pt-2 ml-3">{product_class}</div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-12">
            <div class="card ">
                <div class="card-header">
                    <h4 class="card-title">Additional Setup</h4>
                </div>
                <div class="card-body">
                    <form class='d-flex flex-wrap'>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class=" col-form-label">Product Code</label>
                                <div class="pt-2 ml-3">{groupname}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Cover Type</label>
                                <div class="pt-2 ml-3">{cover_types}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Life Assured Type</label>
                                <div class="pt-2 ml-3">{assured_types}</div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-12">
            <div class="card ">
                <div class="card-header">
                    <h4 class="card-title">Pricing</h4>
                </div>
                <div class="card-body">
                    <form class='d-flex flex-wrap'>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Currency</label>
                                <div class="pt-2 ml-3">
                                    {currencyname}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class=" col-form-label">Price Plan</label>
                                <div class="pt-2 ml-3">
                                    {price_plan}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Purchase Type</label>
                                <div class="pt-2 ml-3">
                                    {purchase_types}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Purchase Price</label>
                                <div class="pt-2 ml-3">
                                    {getcurrency(product.price)} {premium_rate_name}
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-12">
            <div class="card ">
                <div class="card-header">
                    <h4 class="card-title">Durations</h4>
                </div>
                <div class="card-body">
                    <form class='d-flex flex-wrap'>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Period Type</label>
                                <div class="pt-2 ml-3">{period_type}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Waiting Period</label>
                                <div class="pt-2 ml-3">{waiting_period}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Active Period</label>
                                <div class="pt-2 ml-3">{active_period}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Cover Cancel Period</label>
                                <div class="pt-2 ml-3">{cover_cancel_period}</div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-12">
            <div class="card ">
                <div class="card-header">
                    <h4 class="card-title">Product Stack</h4>
                </div>
                <div class="card-body">
                    <form class='d-flex flex-wrap'>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Stack Limit</label>
                                <div class="pt-2 ml-3">{stack_limit}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Stackable</label>
                                <div class="pt-2 ml-3">{is_stackable}</div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-12">
            <div class="card ">
                <div class="card-header">
                    <h4 class="card-title">Claim Details</h4>
                </div>
                <div class="card-body">
                    <form class='d-flex flex-wrap'>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Claim Type</label>
                                <div class="pt-2 ml-3">{claim_types}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Maximum Claim Units</label>
                                <div class="pt-2 ml-3">{max_claim_units}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Max Claim Payout</label>
                                <div class="pt-2 ml-3">{payout_cap}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Number of Payments</label>
                                <div class="pt-2 ml-3">{number_of_payments}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Payout Frequency</label>
                                <div class="pt-2 ml-3">{payment_frequency}</div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-12">
            <div class="card ">
                <div class="card-header">
                    <h4 class="card-title">Age Limits</h4>
                </div>
                <div class="card-body">
                    <form class='d-flex flex-wrap'>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Minimum Age</label>
                                <div class="pt-2 ml-3">{min_age}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Maximum Age</label>
                                <div class="pt-2 ml-3">{max_age}</div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-12">
            <div class="card ">
                <div class="card-header">
                    <h4 class="card-title">Initial Cover</h4>
                </div>
                <div class="card-body">
                    <form class='d-flex flex-wrap'>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Initial Cover Product</label>
                                <div class="pt-2 ml-3">{initial_cover_product_name}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_view row">
                                <label class="col-form-label">Initial Cover Period</label>
                                <div class="pt-2 ml-3">{cover_period}</div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group_view row">
                                <label class="col-form-label">Initial Cover Period Starts Again After</label>
                                <div class="pt-2 ml-3">{cover_restart_period}</div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card ">
                <div class="card-header ">
                    <h4 class="card-title">Pre-Purchase Setup</h4>
                </div>
                <div class="card-body ">
                    <form>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group_view row">
                                    <label class="col-md-3 col-form-label">Pre-Purchase Text</label>
                                    <div class="col-md-9 pt-2">{pre_purchase_text}</div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card ">
                <div class="card-header ">
                    <h4 class="card-title">Purchase Confirmation</h4>
                </div>
                <div class="card-body ">
                    <form>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group_view row">
                                    <label class="col-md-3 col-form-label">Purchase Confirmation Text</label>
                                    <div class="col-md-9 pt-2">{purchase_confirmation_text}</div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card ">
                <div class="card-header ">
                    <h4 class="card-title">Advanced Purchase Reminder</h4>
                </div>
                <div class="card-body ">
                    <form>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group_view row">
                                    <label class="col-md-3 col-form-label">Remind</label>
                                    <div class="col-md-9 pt-2">
                                        {advance_reminder_period}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                    <form>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group_view row">
                                    <label class="col-md-3 col-form-label">Advance Reminder Text</label>
                                    <div class="col-md-9 pt-2">
                                        {advance_reminder_text}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card ">
                <div class="card-header ">
                    <h4 class="card-title">Redemption / Claiming Setup</h4>
                </div>
                <div class="card-body ">
                    <form>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group_view row">
                                    <label class="col-md-3 col-form-label">Claim Grace Period</label>
                                    <div class="col-md-9 pt-2">
                                        {claim_grace_period}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                    <form>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group_view row">
                                    <label class="col-md-3 col-form-label">Redemption / Claim Confirmation Text</label>
                                    <div class="col-md-9 pt-2">
                                        {claim_text}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card ">
                <div class="card-header ">
                    <h4 class="card-title">Refund Setup</h4>
                </div>
                <div class="card-body ">
                    <form>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group_view row">
                                    <label class="col-md-3 col-form-label">Refund Grace Period (after product expiration)</label>
                                    <div class="col-md-9 pt-2">
                                        {refund_grace_period}

                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                    <form'>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group_view row">
                                    <label class="col-md-3 col-form-label">Refund Confirmation Text </label>
                                    <div class="col-md-9 pt-2">
                                        {refund_text}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Product Allocations</h4>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {allocations_html_table}
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card ">
                <div class="card-header ">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Contract Setup</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id='btn_preview_contract' product_id='{product_id}' class="btn btn-primary ml-auto action_new" {preview_visible}>Preview Contract</button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <form>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Start text on line</label>
                                    <div class="col-md-9">
                                        {contract_text_line_start}
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Contract Wording</label>
                                    <div class="col-md-9">
                                        {contract_product_text_text}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-12">
                            <h4 class="card-title">Required Documents</h4>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div id='div_product_document_table' class="table-responsive">
                        {product_document_table}
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_product_view_allocation_table(self, *args, **kwargs):
        styled_none = f'<span class="not_present">Not Set</span>'
        tablename = kwargs.get('tablename', None)
        product_id = kwargs.get('product_id', None)
        img_active = "<img src='/images/icon_check.png' />"
        img_inactive = "<img src='/images/icon_cross.png' />"
        dbase_query = ProductAllocation.by_product_id(**{'product_id':product_id})
        outputlist = []
        for item in dbase_query:

            if item.percentage:
                type = 'Percentage'
                value = getcurrency(item.percentage)
            elif item.amount:
                type = 'Amount'
                value = getcurrency(item.amount)
            elif item.factor:
                type = 'Factor'
                value = getcurrency(item.factor)
            else:
                type = styled_none
                value = styled_none


            allocation = ALLOC.get_allocation_by_id(**{'allocation_id': item.allocation_id})
            glaccount = GLACCOUNT.get_glaccount_by_id(**{'glaccount_id': item.account_id})
            investment_fund = self.get_investmentfund_by_id(**{'investmentfund_id': item.investment_fund_id})
            outputlist.append({
                'description': f"<div class='edit_productalloc' id='{item.id}'>{allocation.description}</div>",
                'type': type,
                'value': value,
                'allocation': allocation.description,
                'account': glaccount.description if glaccount else styled_none,
                'investment_fund': investment_fund.name if investment_fund else styled_none,
                'claimable': img_active if item.is_claimable else img_inactive,
                })
        dbcolumnlist=[
                'description',
                'type',
                'value',
                'allocation',
                'account',
                'investment_fund',
                'claimable'
                ]
        theadlist=[
                'Description',
                'Calculation Type',
                'Value',
                'Allocation',
                'Account',
                'Investment Fund',
                'Claimable'
                ]
        tdclasslist = [
                '',
                '',
                '',
                '',
                '',
                '',
                'text-center'
                ]
        return build_html_table(outputlist, dbcolumnlist, theadlist, tablename, tdclasslist)

    def get_active_textmerge_list(self, *args, **kwargs):
        usernow = request.identity.get('user')
        searchphrase = kwargs.get('searchphrase', None)
        if searchphrase:
            dbase_query = DBSession.query(TextMerge). \
                filter(TextMerge.description.like(searchphrase)). \
                filter(TextMerge.active==kwargs.get('active', True)). \
                filter(TextMerge.tenant_id==usernow.tenant_id). \
                order_by(asc(TextMerge.description)). \
                limit(LIMIT)
        else:
            dbase_query = DBSession.query(TextMerge). \
                filter(TextMerge.active==kwargs.get('active', True)). \
                filter(TextMerge.tenant_id==usernow.tenant_id). \
                order_by(asc(TextMerge.text)). \
                all()
        return dbase_query

    def create_random_products(self, *args, **kwargs):
        import random
        import string
        groupidlist = [g.id for g in DBSession.query(GroupRocket).all()]
        if not groupidlist:
            groupidlist = [g.id for g in DBSession.query(GroupRocket).all()]
        for i in range(100):
            code = ''.join(i for i in random.choices(string.ascii_lowercase, k=5))
            this = Product()
            this.tenant_id = 1
            this.code = code
            this.description = code
            this.group_id = random.choice(groupidlist)
            this.product_type_id = random.choice([1, 2, 3])
            this.product_class_id = random.choice([1, 2])
            this.cover_type_id = random.choice([1, 2, 3, 4, 5])
            this.assured_type_id = random.choice([1, 2, 3, 4, 5])
            this.price = random.uniform(1.0, 1000.0)
            this.period_type_id = random.choice([1, 2, 3])
            this.purchase_type_id = random.choice([1, 2, 3])
            this.number_of_payments = random.choice(range(1, 100))
            this.product_state_id = random.choice([1, 2])
            this.active = 1
            this.added_by = 1
            DBSession.add(this)
            DBSession.flush()
        return True
