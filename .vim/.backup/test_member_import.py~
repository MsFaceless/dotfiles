#!/bin/python

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import sqlalchemy
import os
import pandas as pd

from zipfile import ZipFile


MemberName = 'Member Import.csv'
PurchaseName = 'Purchase Import.csv'

# pwd = "LW1mport"

APPROOT = os.getcwd()
print(APPROOT)
#CODE_ROOT = os.path.join(APPROOT, "rocket")
CODE_ROOT = APPROOT
print(CODE_ROOT)
PUBLIC_DIRNAME = os.path.join(CODE_ROOT, "public")
print(PUBLIC_DIRNAME)
CSV_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'csv')

# filepath = os.path.join(CSV_DIRNAME, 'LegalWiseImportData.zip')
# with ZipFile(filepath, 'r') as zipObj:
#     zipObj.extractall(pwd=bytes(pwd, 'utf-8'))


# data = pd.read_csv("Member Import.csv", dtype={'MobileNumber': 'Int64'}, skip_blank_lines=True,
#                    parse_dates=['DOB(Ccyy-mm-dd)', "StartingDate (Ccyy-mm-dd)", "BeneficiaryDOB (Ccyy-mm-dd)"])

# data = pd.read_csv("Member Import.csv", usecols=["GroupReference", "ProductCode"])
# data.columns = ['reference', 'product_id']
# data['reference'] = "some_reference"
#
# data_to_write = data.to_dict(orient='records')
# print(data.head())


# url = 'mysql://developer:developpass@localhost:3306/rocketdb'
# engine = create_engine(url, echo=False)
# conn = engine.connect()
# metadata = sqlalchemy.schema.MetaData(bind=engine, reflect=True)
#
# table = sqlalchemy.Table("tbl_member_request", metadata, autoload=True)
#
# Session = sessionmaker(bind=engine)
# session = Session()
# conn.execute(table.insert(), data_to_write)
# session.commit()
# session.close()


class UnzipBuilder:

    def __init__(self):
        self.batch_import_id = "some random id"  # TODO
        self.file_path = ''
        self.file_name = None
        self.password = None

    def with_file_path(self, file_path):
        self.file_path = file_path
        print(file_path)
        return self

    def with_password(self, pwd):
        self.password = pwd
        return self

    def with_file_name(self, file_name):
        self.file_name = self.file_path + '/' + file_name
        return self

    def build(self):
        with ZipFile(self.file_name, 'r') as zipObj:
            if self.password:
                zipObj.extractall(pwd=bytes(self.password, 'utf-8'))
            else:
                zipObj.extractall()


class ImportBuilder:

    def __init__(self):
        self.import_file_name = None
        self.columns_from_import_file = None
        self.new_column_names = {}

    def with_import_filename(self, import_file_name: str):
        self.import_file_name = import_file_name
        return self

    def with_columns_from_import_file(self, columns: list):
        self.columns_from_import_file = columns
        return self

    def with_new_names_of_columns(self, old_new_columns_dict: dict):
        self.new_column_names = old_new_columns_dict
        return self

    def with_confirmation(self):
        pass

    def build(self):
        data = pd.read_csv(self.import_file_name, usecols=self.columns_from_import_file)
        data.rename(columns=self.new_column_names, inplace=True)
        data_to_write = data.to_dict(orient='records')
        print(data.head)


UnzipBuilder() \
    .with_file_path(CSV_DIRNAME) \
    .with_file_name('LegalWiseImportData.zip') \
    .with_password("LW1mport") \
    .build()

ImportBuilder() \
    .with_import_filename("Member Import.csv") \
    .with_columns_from_import_file(["IDNumber", "Name", "Surname", "MobileNumber"]) \
    .with_new_names_of_columns({"IDNumber": 'identity_number', "Name": 'first_name', "Surname": "surname",
                                "MobileNumber": 'mobile'}) \
    .build()
