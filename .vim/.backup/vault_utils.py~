import requests
from dotenv import dotenv_values

env_vars = dotenv_values()
vault_url = env_vars.get('VAULT_URL')


def save_new_vault_person(*args, **kwargs):
    target = f"{vault_url}/save_new_rocket_person"
    r = None
    try: r = requests.post(target, json=kwargs)
    except: return {}
    #print(r.json())
    return r.json()

def get_person_contact_by_person_id(person_id=None):
    if not person_id: return False
    target = f"{vault_url}/get_person_contact_by_person_id"
    r = None
    kwargs = {'person_id':person_id}
    try: r = requests.get(target, params=kwargs)
    except: return {}
    return r.json()

def get_person_identity_by_id(person_id=None):
    if not person_id: return False
    target = f"{vault_url}/get_person_identity_by_person_id"
    r = None
    kwargs = {'person_id':person_id}
    try: r = requests.get(target, params=kwargs)
    except: return {}
    return r.json()

def get_person_by_id(person_id=None):
    if not person_id: return False
    target = f"{vault_url}/get_person_by_id"
    r = None
    kwargs = {'id':person_id}
    try: r = requests.get(target, params=kwargs)
    except: return {}
    #print("In vault Utils Get_person_by_id")
    #print(r.json())
    return r.json()

def get_person_title_type_list():
    try: r = requests.get(f"{vault_url}/get_persontitle_type_all")
    except: return []
    return r.json()

def get_identity_type_list():
    try: r = requests.get(f"{vault_url}/get_identity_type_all")
    except: return []
    return r.json()

def get_address_type_list():
    try: r = requests.get(f"{vault_url}/get_address_type_all")
    except: return []
    return r.json()

def get_bankaccount_type_list():
    try: r = requests.get(f"{vault_url}/get_bankaccount_type_all")
    except: return []
    return r.json()

def get_person_gender_type_list():
    try: r = requests.get(f"{vault_url}/get_persongender_type_all")
    except: return []
    return r.json()

def get_contact_type_list():
    try: r = requests.get(f"{vault_url}/get_contact_type_all")
    except: return []
    return r.json()

def bootstrap_common_titles():
    bootstrap_titles = ['Mr', 'Mrs', 'Miss', 'Ms', 'Mx', 'Sir', 'Dr', 'Lady']
    target_url = f"{vault_url}/create_persontitle_type"
    for title in bootstrap_titles:
        try:
            r = requests.post(target_url, json={'name':title})
        except Exception as e:
            #print(e)
            return e
    return True

def bootstrap_address_types():
    bootstrap_address_types = ['Street', 'Postal']
    target_url = f"{vault_url}/create_address_type"
    for address_type in bootstrap_address_types:
        try:
            r = requests.post(target_url, json={'name':address_type})
        except Exception as e:
            #print(e)
            return e
    return True

def bootstrap_bank_types():
    bootstrap_bank_types = ['Commercial', 'Investment', "Wallet"]
    target_url = f"{vault_url}/create_bankaccount_type"
    for bank_type in bootstrap_bank_types:
        try:
            r = requests.post(target_url, json={'name':bank_type})
        except Exception as e:
            #print(e)
            return e
    return True

def bootstrap_contact_types():
    bootstrap_contact_types = ['Mobile', 'Email', 'Facsimile']
    target_url = f"{vault_url}/create_contact_type"
    for contact_type in bootstrap_contact_types:
        try:
            r = requests.post(target_url, json={'name':contact_type})
        except Exception as e:
            #print(e)
            return e
    return True

def bootstrap_identity_types():
    bootstrap_identity_types = ['Identity Number', 'Passport Number', 'Other']
    target_url = f"{vault_url}/create_identity_type"
    for identity_type in bootstrap_identity_types:
        try:
            r = requests.post(target_url, json={'name':identity_type})
        except Exception as e:
            #print(e)
            return e
    return True

def bootstrap_gender_types():
    bootstrap_gender_types = ['Male', 'Female', 'Other']
    target_url = f"{vault_url}/create_persongender_type"
    for gender_type in bootstrap_gender_types:
        try:
            r = requests.post(target_url, json={'name':gender_type})
        except Exception as e:
            #print(e)
            return e
    return True

def pretty_log_func(func, title):
    #print("*"*40)
    bln_func = func()
    if bln_func: #print(f"{title} successfully created")
    else:
        pass
        #print(f"{title} not created")
    #print("*"*40)

def bootstrap_vault():
    #print("*"*80)
    #print("Initializing Vault")
    pretty_log_func(bootstrap_common_titles, title='Person Title')
    pretty_log_func(func=bootstrap_address_types, title='Address Types')
    pretty_log_func(func=bootstrap_bank_types, title='Bank Types')
    pretty_log_func(func=bootstrap_contact_types, title='Contact Types')
    pretty_log_func(func=bootstrap_identity_types, title='Identity Types')
    pretty_log_func(func=bootstrap_gender_types, title='Gender Types')
    #print("All Vault types Bootstrapped (or not, maybe?)")
    #print("*"*80)

