# -*- coding: utf-8 -*-
"""Member controller module"""

from tg import predicates, require
from tg import expose, redirect, validate, flash, url, request

from tg.i18n import ugettext as _
from tg.i18n import lazy_ugettext as l_

from rocket.model import *

from sqlalchemy import func, desc, asc

from rocket.lib.tg_utils import *
from rocket.lib.base import BaseController
import rocket.lib.vault_utils as vault

LIMIT = 20

class MemberController(BaseController):

    def __init__(self, *args, **kwargs):
        self.address_type_list = vault.get_address_type_list()
        self.contact_type_list = vault.get_contact_type_list()
        self.identity_type_list = vault.get_identity_type_list()
        self.bankaccount_type_list = vault.get_bankaccount_type_list()
        self.person_title_type_list = vault.get_person_title_type_list()
        self.person_gender_type_list = vault.get_person_gender_type_list()

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def index(self, *args, **kwargs):
        html = self.get_active_tbl_member_html(*args, **kwargs)
        javascript = self.get_javascript_tbl_member_onload()
        title = _("Members")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_tbl_member_html(self, *args, **kwargs):
        usernow = request.identity['user']
        selectbox_products = kwargs.get('selectbox_products', '')

        dbase_query = self.get_active_tbl_member_list(*args, **kwargs)
        outputlist = []
        for member in dbase_query:
            person = {}
            person_id = member.person_id
            print(person_id)
            person = vault.get_person_by_id(person_id)
            print(person)
            identity = vault.get_person_identity_by_id(person_id)
            print(identity)
            identity_number = identity.get('number')
            print(identity_number)
            contact = vault.get_person_contact_by_person_id(person_id)

            outputlist.append({
                'idnumber': f"<div class='member_edit' member_id='{member.id}'>{identity_number}</div>",
                'name': person.get('firstname', ''),
                'surname': person.get('surname', ''),
                'mobile': contact.get('value'),
                             })
        dbcolumnlist=[
                'idnumber',
                'name',
                'surname',
                'mobile',
                    ]
        theadlist=[
                _('ID Number'),
                _('First Name'),
                _('Surname'),
                _('Mobile Number'),
                ]
        tdclasslist = [
                'action_link',
                '',
                '',
                'text-right',
        ]
        tbl_membertable = build_html_table(outputlist, dbcolumnlist, theadlist, "tbl_member_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{_('Members')}</h4>
                        </div>
        """
        if not selectbox_products:
            html+="""
                        <div class="col-md-6 text-right">
                            <button id="create_new_member" class="btn btn-primary ml-auto">{_('Create a new Member')}</button>
                        </div>
            """
        else:
            html+="""
                        <div class="col-md-6 text-right">
                            <button id="create_new_policy" class="btn btn-primary ml-auto">{_('Create a new Policy')}</button>
                        </div>
            """
        html+=f"""
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input type="text" class="form-control search" name="searchphrase" placeholder="{_('Search by ID Number, Name or Surname')}">
                        </div>
                        <div class="col-md-8">
                            <button class="btn btn-primary action_search">{_('Search')}</button>
                            <button class="btn btn-primary">{_('Reset')}</button>
                            {selectbox_products}
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {tbl_membertable}
                    </div>
                </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_javascript_tbl_member_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_member").click(function(){
            $.redirect('/members/new_member');
        });
        $(".tbl_member_edit").click(function(){
            var data = {tbl_member_id : $(this).attr('tbl_member_id')};
            $.redirect('/members/edit_tbl_member', data);
        });
        """
        return javascript

    @expose()
    def get_active_tbl_member_list(self, *args, **kwargs):
        searchphrase = kwargs.get('searchphrase', None)

        tbl_member_person_id = kwargs.get('tbl_member_person_id', None)
        register_date_start = kwargs.get('register_date_start', None)
        register_date_end = kwargs.get('register_date_end', None)
        tbl_member_external_id = kwargs.get('tbl_member_external_id', None)

        if tbl_member_person_id:
            dbase_query = DBSession.query(Member). \
		    filter(Member.tbl_member_person_id==tbl_member_person_id). \
                        filter(Member.active==1). \
		    order_by(desc(Member.person_id)).limit(LIMIT)
        if register_date_start:
            if not register_date_end: register_date_end = datetime.date(datetime.now())
            dbase_query = DBSession.query(Member). \
			filter(Member.register_date>=register_date_start). \
			filter(Member.register_date<=register_date_end). \
                        filter(Member.active==1). \
			order_by(desc(Member.person_id)).limit(LIMIT)
        if tbl_member_external_id:
            dbase_query = DBSession.query(Member). \
		    filter(Member.tbl_member_external_id==tbl_member_external_id). \
                        filter(Member.active==1). \
		    order_by(desc(Member.person_id)).limit(LIMIT)
        else:
            dbase_query = DBSession.query(Member). \
                filter(Member.active==1). \
                order_by(desc(Member.person_id)). \
                limit(LIMIT)
        return dbase_query

    @expose('rocket.templates.generic')
    def new_member(self, *args, **kwargs):
        title = _("New Member")
        dropdown_title = self.get_selectbox_person_title_type()
        print(dropdown_title)
        dropdown_identity_type = self.get_selectbox_identity_type()
        dropdown_gender = self.get_selectbox_gender_type()
        dropdown_language = self.get_selectbox_language()
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card ">
                    <div class="card-header d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{_('New Member')}</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button class="btn btn-primary ml-auto action_back members_back">{_('Back to Members List')}</button>
                        </div>
                    </div>
                    <div class="card-body ">
                        <form id="form_new_tbl_member">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required>{_('Title')}</label>
                                        <div class="col-md-9">
                                            {dropdown_title}
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required>{_('First Name')}</label>
                                        <div class="col-md-9">
                                            <input type="text" name='name' class="form-control" required="true" maxlength='50'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required>{_('Surname')}</label>
                                        <div class="col-md-9">
                                            <input type="text" name='surname' class="form-control" required="true" maxlength='50'>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required>{_('Identity Type')}</label>
                                        <div class="col-md-9">
                                            {dropdown_identity_type}
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required>{_('ID Number')}</label>
                                        <div class="col-md-9">
                                            <input class="form-control" type="text" name="number" required="true" maxlength='50'>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required>{_('Gender')}</label>
                                        <div class="col-md-9">
                                            {dropdown_gender}
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required>{_('Language')}</label>
                                        <div class="col-md-9">
                                            {dropdown_language}
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required>{_('Birthday')}</label>
                                        <div class="col-md-9">
                                            <input type="text" class="form-control" name="date_of_birth" id="date_of_birth">
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label required">{_('Register Date')}</label>
                                        <div class="col-md-9">
                                            <input type="text" name='register_date' id='register_date' class="form-control">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required>{_('Mobile')}</label>
                                        <div class="col-md-9">
                                            <input type="text" name='mobile' class="form-control" required="true">
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label">{_('Comment')}</label>
                                        <div class="col-md-9">
                                            <textarea type="text" name="comment" class="form-control" rows="4" maxlength='5000'></textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="card ">
                    <div class="card-body">
                        <button id="btn_save_new_member" class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary members_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """

        createDatepicker('#date_of_birth');
        createDatepicker('#register_date');

        setFormValidation('#form_new_tbl_member');

        $('#btn_save_new_member').click(function(){
             var valid = FormIsValid("#form_new_tbl_member");
             if(valid){

                var formserial = $('#form_new_tbl_member').serialize();
                console.log(formserial);

                $.post('/members/save_new_memberobj?', formserial, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $.redirect('/members/index');
                    };
                    return false;
                });
             }
        });
        $('.members_back').click(function(){
            $.redirect('/members/index');
        });
        """
        return dict(title=title, html=html, javascript=javascript)

    def get_selectbox_person_title_type(self, *args, **kwargs):
        kwargs['outputlist'] = self.person_title_type_list
        kwargs['id'] = 'person_title_type_id'
        return create_selectbox_html(**kwargs)

    def get_selectbox_identity_type(self, *args, **kwargs):
        kwargs['outputlist'] = self.identity_type_list
        kwargs['id'] = 'identity_type_id'
        return create_selectbox_html(**kwargs)

    def get_selectbox_gender_type(self, *args, **kwargs):
        kwargs['outputlist'] = self.person_gender_type_list
        kwargs['id'] = 'person_gender_type_id'
        return create_selectbox_html(**kwargs)

    def get_selectbox_language(self, *args, **kwargs):
        language_list = []
        kwargs['outputlist'] = language_list
        return create_selectbox_html(**kwargs)

    @expose()
    def save_new_memberobj(self, *args, **kwargs):

        member_dict = {}

        dict_person = {
            'surname' : kwargs.get('surname'),
            'firstname' : kwargs.get('name'),
            'preferred_name' : kwargs.get('name'),
            'person_gender_type_id' : kwargs.get('person_gender_type_id'),
            'person_title_type_id' : kwargs.get('person_title_type_id'),
            'date_of_birth' : kwargs.get('date_of_birth'),
            'language_id' : kwargs.get('language_id'),
        }

        member_dict.update({'person':dict_person})
        usernow = request.identity['user']
        member_dict['person']['added_by'] = usernow.id

        dict_person_identity = {
            'identity_type_id' : kwargs.get('identity_type_id'),
            'number' : kwargs.get('number'),
        }
        member_dict.update({'identity':dict_person_identity})

        contact_type_mobile = 1

        dict_person_contact = {
            'contact_type_id' : contact_type_mobile,
            'value' : kwargs.get('mobile'),
        }
        member_dict.update({'contact':dict_person_contact})

        dict_member = {
            'register_date' : kwargs.get('register_date'),
        }

        vault_person = vault.save_new_vault_person(**member_dict)
        person_id = vault_person.get('person_id')

        member_dict.update(vault_person)
        dict_member['person_id'] = person_id

        print(vault_person)
        member_id = self.save_new_member(**dict_member)
        print(member_id)
        if not member_id: return json.dumps({'success' : False})

        dict_member_comment = {
            'member_id' : member_id,
            'comment' : kwargs.get('comment'),
        }
        self.save_new_member_comment(**dict_member_comment)

        return json.dumps({'success' : True})

    @expose()
    def save_new_member(self, *args, **kwargs):
        print(kwargs)
        usernow = request.identity['user']
        this = Member()
        this.person_id = kwargs.get('person_id', None)
        this.register_date = sane_date(kwargs.get('register_date', None))
        this.external_id = kwargs.get('external_id', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        print(this.id)
        return this.id

    @expose()
    def save_new_member_comment(self, *args, **kwargs):
        usernow = request.identity['user']
        this = MemberComment()
        this.member_id = kwargs.get('member_id', None)
        this.comment = kwargs.get('comment', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return this.id

    def save_new_person(self, *args, **kwargs):
        print(dict_person)
        return True

    def get_person_title_list(self):
        person_title_list = []
        return person_title_list
