# -*- coding: utf-8 -*-
"""KYC controller module"""

import qrcode, hashlib, base64

from tg import predicates, expose, require, redirect, validate, \
        flash, url, request, response, predicates

from calmerchant_app.model import *
from calmerchant_app.lib.base import BaseController
from calmerchant_app.lib.tg_utils import *
from calmerchant_app.lib.tg_decorators import time_it, CustomNotAnonymous
from calmerchant_app.lib.gateway_utils import *

from calmerchant_app.controllers.common import CommonController

COMMON = CommonController()

FILENAME = os.path.abspath(resource_filename('calmerchant_app', 'public'))
PUBLIC_DIRNAME = os.path.join(FILENAME)
IMAGES_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'img')

class KYCController(BaseController):
    
    @require(CustomNotAnonymous())
    @expose('calmerchant_app.templates.generic')
    def index(self, *args, **kwargs):
        kyc_table_card = self.get_kyc_limits_card()
        kyc_form = self.get_kyc_registration_card()
        html=f"""
        <div class="row">
            {kyc_form}
            {kyc_table_card}
        </div>
        """
        javascript = ""
        return dict(title="KYC Limits | Calabash", html=html, javascript=javascript)

    def get_kyc_htmltbl(self, *args, **kwargs):
        dbase_query = [
            {'type': 'Daily', 'min': 'R 0.00', 'max': 'R 10,000.00'},
            {'type': 'Monthly Card', 'min': 'R 0.00', 'max': 'R 25,000.00'},
            {'type': 'Monthly Account', 'min': 'R 0.00', 'max': 'R 25,000.00'},
            {'type': 'Monthly Total', 'min': 'R 0.00', 'max': 'R 50,000.00'},
        ]
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'limit': item.get('type', None),
                'min': item.get('min', None),
                'max': item.get('max', None),
                })
        dbcolumnlist=[
                'limit',
                'min',
                'max',
                ]
        theadlist=[
                'Limit',
                'Min',
                'Max',
                ]
        tdclasslist = [
                '',
                'text-right w-25p',
                'text-right w-25p',
                ]
        table_options = """
        <script>
        $(document).ready(function(){
            $('#kyc_table').DataTable({
                "dom": 't',
                "scrollY": "470px",
                "scrollCollapse": true,
                "paging": false
            });
        });
        </script>
        """
        return build_html_datatable(outputlist, dbcolumnlist, theadlist, "kyc_table", tdclasslist) + table_options

    def get_kyc_limits_card(self, *args, **kwargs):
        kyc_table = self.get_kyc_htmltbl()
        html = f"""
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title">KYC Limits</h4>
                    </div>
                    <div class="card-body pb-0">
                        {kyc_table}
                    </div>
                    <div class="card-footer">
                        <small class="text-muted">Please note: Once your identity is verified and the application process if complete, these limits will apply.</small>
                    </div>
                </div>
            </div>
        """
        return html

    def get_kyc_registration_card(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        selected_merchant_type = usernow.merchant_ownership_type_id if usernow.merchant_ownership_type_id else COMMON.get_type_id(MerchantType, 'Sole Proprietor (Private Individual)')
        kyc_registration_form = self.get_registration_form(**{'merchant_ownership_type_id': selected_merchant_type})
        merchant_type = COMMON.get_selectbox_merchant_type(**{'id': 'merchant_ownership_type_id', 'required': True, 'selected': selected_merchant_type})
        html = f"""
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title">Complete Registration Process</h4>
                    </div>
                    <div class="card-body">
                        <div class="form-group ">
                            <label class="" for="merchant_ownership_type_id" required="">Merchant Type</label>
                            {merchant_type}
                        </div>
                        <div id="regFormDiv">
                            {kyc_registration_form}
                        </div>
                    </div>
                </div>
            </div>
        """
        javascript = """
        <script>
            $('#merchant_ownership_type_id').change(function(){
                var kwargs = {
                    'merchant_ownership_type_id': $('option:selected', this).val()
                }
                console.log(kwargs);
                $('#regFormDiv').load('/kyc/get_registration_form', kwargs, function(data){
                    return;
                });
            })
        </script>
        """
        return html + javascript

    @expose()
    def get_registration_form(self, *args, **kwargs):
        merchant_ownership_type_id = kwargs.get('merchant_ownership_type_id', None)
        if not merchant_ownership_type_id: 
            print('DEBUG GET REGISTRATION FORM: merchant_ownership_type_id not present in kwargs.')
            return self.get_individual_kyc_reg_form()
        if str_to_int(merchant_ownership_type_id) == COMMON.get_type_id(MerchantType, 'Sole Proprietor (Private Individual)'):
            return self.get_individual_kyc_reg_form(**kwargs)
        return self.get_company_kyc_reg_form(**kwargs)

    def get_individual_kyc_reg_form(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        id_no_dict = {
            'input_wrapper_class': '',
            'label_attrs': 'required',
            'input_id': 'identity_number',
            'label_val': 'Identity number',
            'input_attrs': 'required',
            'input_val': f''
            }
        address1_dict = {
            'wrapper_class': 'row col-md-6',
            'label_attrs': 'required',
            'input_id': 'address_line1',
            'label_val': 'Physical address line 1',
            'input_attrs': 'required',
            'input_val': f'value="{usernow.address_line1}"' if usernow.address_line1 else ''
            }
        address2_dict = {
            'wrapper_class': 'row col-md-6',
            'input_id': 'address_line2',
            'label_val': 'Physical address line 2',
            'input_val': f'value="{usernow.address_line2}"' if usernow.address_line2 else ''
            }
        address_city_dict = {
            'wrapper_class': 'row col-md-6',
            'label_attrs': 'required',
            'input_id': 'address_city',
            'label_val': 'City',
            'input_attrs': 'required',
            'input_val': f'value="{usernow.address_city}"' if usernow.address_city else ''
            }
        address_province_dict = {
            'wrapper_class': 'row col-md-6',
            'label_attrs': 'required',
            'input_id': 'address_province',
            'label_val': 'Province',
            'input_attrs': 'required',
            'input_val': f'value="{usernow.address_province}"' if usernow.address_province else ''
            }
        address_postal_code_dict = {
            'wrapper_class': 'row col-md-6',
            'label_attrs': 'required',
            'input_id': 'address_postal_code',
            'label_val': 'Postal code',
            'input_attrs': 'required',
            'input_val': f'value="{usernow.address_postal_code}"' if usernow.address_postal_code else ''
            }
        photo_file_dict = {
            'input_wrapper_class': '',
            'label_attrs': 'required',
            'label_val': 'Clear photo of yourself (selfie)',
            'input_type': 'custom',
            'input_field': create_fileinput_html(**{'input_id': 'photo', 'include_js': False})
            }
        address_file_dict = {
            'input_wrapper_class': '',
            'label_attrs': 'required',
            'label_val': 'Proof of address (Not older than 6 months)',
            'input_type': 'custom',
            'input_field': create_fileinput_html(**{'input_id': 'address', 'include_js': False})
            }
        account_file_dict = {
            'input_wrapper_class': '',
            'label_attrs': 'required',
            'label_val': 'Proof of bank account (Not older than 6 months & bank account must be in the name of the company)',
            'input_attrs': 'required',
            'input_type': 'custom',
            'input_field': create_fileinput_html(**{'input_id': 'account', 'include_js': False})
            }
        document_file_dict = {
            'input_wrapper_class': '',
            'label_attrs': 'required',
            'label_val': 'Certified copy of Id',
            'input_attrs': 'required',
            'input_type': 'custom',
            'input_field': create_fileinput_html(**{'input_id': 'document', 'include_js': False})
            }
        action_dict = {
            'input_wrapper_class': 'text-right',
            'input_type': 'custom',
            'input_field': '<button type="button" id="submitBtn" class="btn btn-info ">Submit</button>'
            }
        params_list = [
                id_no_dict,
                address1_dict,
                address2_dict,
                address_city_dict,
                address_province_dict,
                address_postal_code_dict,
                photo_file_dict,
                address_file_dict,
                document_file_dict,
                account_file_dict,
                action_dict
                ]
        javascript = """
        <script>
            var kycForm = $('#kyc_form');
            setFormValidation(kycForm);
            $('#submitBtn').click(function(e){
                e.preventDefault();
                var valid = FormIsValid(kycForm);
                if(valid){
                    var form = $('#kyc_form')[0];
                    var data = new FormData(form);
                    data.append('merchant_ownership_type_id', $('#merchant_ownership_type_id option:selected').val());
                    $.ajax({
                        type: "POST",
                        enctype: 'multipart/form-data',
                        url: "/kyc/submit_kyc_individual_registration",
                        data: data,
                        processData: false,
                        contentType: false,
                        cache: false,
                        timeout: 600000,
                        success: function (data) {
                            var result = JSON.parse(data);
                            if(result.success === true){
                                console.log('data', data);
                            } else {
                                showNotification(result.status, result.message)
                            }
                        },
                        error: function (e) {
                            console.log("ERROR : ", e);
                        },
                        xhr: function() {
                            $('#dialogdiv').load('/kyc/progress_dialog', function(data){
                                return false;
                            });
                            var xhr = $.ajaxSettings.xhr();
                            xhr.upload.onprogress = function(e) {
                                var progressBar = $('.progress-bar');
                                var valNow = Math.floor(e.loaded / e.total *100);
                                progressBar.css('width', valNow + '%')
                                    .attr('aria-valuenow', valNow)
                                    .text('Uploading ' + valNow + '%');
                            }
                            xhr.upload.onloadend = function(e) {
                                $('#progressModal').modal('hide');
                            }
                            return xhr;
                        }
                    });
                }
            });
            
            $(document).on('change','input[type="file"]', function(e){
                var thisId = $(this).attr('id');
                var result = validateFile(thisId, 5);

                var firstFile = e.target.files[0];
                var fileName = 'Choose file...'
                if (firstFile !== undefined){
                    fileName = e.target.files[0].name;
                }
                $('label[for="'+ thisId +'"]').text(fileName);
                return false;
            });
        </script>
        """
        return build_html_form('kyc_form', params_list) + javascript

    @expose()
    def progress_dialog(self, *args, **kwargs):
        html = f"""
        <div id="progressModal" class="modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Progress</h5>
                    </div>
                    <div class="modal-body">
                        <div class="progress" style="height: 20px;">
                            <div class="progress-bar bg-success" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button id="modalCancelBtn" type="button" data-dismiss="modal" class="btn btn-primary">Cancel</button>

                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
            $('#progressModal').modal({'backdrop': 'static'});
        </script>
     	"""
        return html + javascript

    @expose()
    def submit_kyc_individual_registration(self, *args, **kwargs):
        key_list = [
            'identity_number',
            'address_line1',
            'address_city',
            'address_province',
            'address_postal_code',
        ]
        result = kwargs_valitator(key_list, **kwargs)
        if not result.get('success'):
            return json.dumps({'success': 'false', 'message': result.get('message'), 'status': 'danger'})
        
        usernow = request.identity.get('user', {})
        kwargs['username'] = usernow.myimali_username
        kwargs['email'] = usernow.email

        success = self.update_user(**kwargs)
        if not success:
            return json.dumps({'success': False, 'message': 'Could not update user.', 'status': 'danger'})

        id_no = kwargs.get('identity_number', None)
        now = datetime.now()
        file_id = now.strftime("%Y%m%d%H%M%S")
        
        binary_keys = ['photo', 'address', 'document', 'account']
        
        for bk in binary_keys:
            file_obj = kwargs.pop(bk, None)
            encoding = self.get_file_encoding(file_obj)
            if not encoding:
                return json.dumps({
                    'success': False, 
                    'message': f'We could not process the {bk} file, please make sure that it is a valid file.', 
                    'status': 'danger'
                })
            
            filename = self.get_filename(file_obj, file_id, id_no, bk)
            
            kwargs[f'{bk}_b64'] = encoding
            kwargs[f'{bk}_filename'] = filename
        this = kyc_merchant(kwargs)
        success = this.get('success', None)
        if not success:
            message = this.get('data', 'Something went wrong while processing this request, please try again.')
            return json.dumps({'success': False, 'message': message.title(), 'status': 'danger'})
        return json.dumps({
            'success': True, 
            'message': 'Your registration has been submitted, we will inform you as soon as your account has been activated.', 
            'status':'success'
        })

    @expose()
    def submit_kyc_company_registration(self, *args, **kwargs):
        key_list = [
            'company_name',
            'trading_name',
            'store_name',
            'merchant_industry_id',
            'registration_number',
            'identity_number',
            'address_line1',
            'address_city',
            'address_province',
            'address_postal_code',
        ]
        result = kwargs_valitator(key_list, **kwargs)
        if not result.get('success'):
            return json.dumps({'success': False, 'message': result.get('message'), 'status': 'danger'})
        
        usernow = request.identity.get('user', {})
        kwargs['username'] = usernow.myimali_username
        kwargs['email'] = usernow.email

        success = self.update_user(**kwargs)
        if not success:
            return json.dumps({'success': False, 'message': 'Could not update user.', 'status': 'danger'})

        reg_no = kwargs.get('registration_number', None)
        now = datetime.now()
        file_id = now.strftime("%Y%m%d%H%M%S")

        binary_keys = ['address', 'photo', 'account', 'document', 'vat', 'registration']
        
        encoding = ''
        filename = ''
        for bk in binary_keys:
            fail_message = f'We could not process the {bk} file, please make sure that it is a valid file.'
            file_obj = kwargs.pop(bk, None)

            if isinstance(file_obj, list):
                enc_list = []
                filename_list = []
                for item in file_obj:
                    this_enc = self.get_file_encoding(item)
                    if not this_enc:
                        return json.dumps({'success': False, 'message': fail_message, 'status': 'danger'})
                    enc_list.append(this_enc)
                    this_filename = self.get_filename(item, file_id, reg_no, bk)
                    filename_list.append(this_filename)

                encoding = enc_list
                filename = filename_list

            else:
                encoding = self.get_file_encoding(file_obj)
                if not encoding:
                    return json.dumps({'success': False, 'message': fail_message, 'status': 'danger'})
                filename = self.get_filename(file_obj, file_id, reg_no, bk)
            
            kwargs[f'{bk}_b64'] = encoding
            kwargs[f'{bk}_filename'] = filename
        
        this = kyc_merchant(kwargs)
        success = this.get('success', None)
        if not success:
            message = this.get('data', 'Something went wrong while processing this request, please try again.')
            return json.dumps({'success': False, 'message': message.title(), 'status': 'danger'})
        
        return json.dumps({
            'success': True, 
            'message': 'Your registration has been submitted, we will inform you as soon as your account has been activated.', 
            'status': 'success'
        })

    def update_user(self, *args, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            return False

        user = User.by_myimali_username(username)
        if not user:
            return False

        user.email = kwargs.get('email', None)
        user.merchant_ownership_type_id = kwargs.get('merchant_ownership_type_id', None)
        user.merchant_industry_id = kwargs.get('merchant_industry_id', None)
        user.company_name = kwargs.get('company_name', '')
        user.trading_name = kwargs.get('trading_name', '')
        user.store_name = kwargs.get('store_name', '')
        user.registration_number = kwargs.get('registration_number', '')
        user.address_line1 = kwargs.get('address_line1', '')
        user.address_line2 = kwargs.get('address_line2', '')
        user.address_city = kwargs.get('address_city', '')
        user.address_province = kwargs.get('address_province', '')
        user.address_postal_code = kwargs.get('address_postal_code', '')
        DBSession.flush()
        print()
        print('update_user')
        print(kwargs)
        print()
        return True

    def get_filename(self, file_obj, file_id=None, client_id=None, file_type=None, *args, **kwargs):
        filename = ''
        if not hasattr(file_obj, 'file'): return None
        filename += f'{file_id}' if file_id else ''
        filename += f'_{client_id}' if client_id else ''
        filename += f'_{file_type}' if file_type else ''
        file_ext = os.path.splitext(file_obj.filename)
        filename += file_ext[1]
        return filename

    def get_file_encoding(self, file_obj, *args, **kwargs):
        if not hasattr(file_obj, 'file'): return None
        new_file = file_obj.file.read()
        return base64.b64encode(new_file).decode('utf-8')

    def get_company_kyc_reg_form(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        company_name_dict = {
            'wrapper_class': 'row col-md-6',
            'label_attrs': 'required',
            'input_id': 'company_name',
            'label_val': 'Company Name',
            'input_attrs': 'required',
            'input_val': f'value="{usernow.company_name}"' if usernow.company_name else ''
            }
        trading_name_dict = {
            'wrapper_class': 'row col-md-6',
            'label_attrs': 'required',
            'input_id': 'trading_name',
            'label_val': 'Tranding Name',
            'input_attrs': 'required',
            'input_val': f'value="{usernow.trading_name}"' if usernow.trading_name else ''
            }
        store_name_dict = {
            'wrapper_class': 'row col-md-6',
            'label_attrs': 'required',
            'input_id': 'store_name',
            'label_val': 'Store Name',
            'input_attrs': 'required',
            'input_val': f'value="{usernow.store_name}"' if usernow.store_name else ''
            }

        industry_id_dict = {
            'wrapper_class': 'row col-md-6',
            'label_attrs': 'required',
            'input_id': 'merchant_industry_id',
            'label_val': 'Industry',
            'input_attrs': 'required',
            'input_type': 'custom',
            'input_field': COMMON.get_selectbox_merchant_industry_type(**{'id': 'merchant_industry_id', 'required': True, 'selected': usernow.merchant_industry_id})
            }
        reg_no_dict = {
            'wrapper_class': 'row col-md-6',
            'label_attrs': 'required',
            'input_id': 'registration_number',
            'label_val': 'Registration Number',
            'input_attrs': 'required',
            'input_val': f'value="{usernow.registration_number}"' if usernow.registration_number else ''
            }
        address1_dict = {
            'wrapper_class': 'row col-md-6',
            'label_attrs': 'required',
            'input_id': 'address_line1',
            'label_val': 'Physical address line 1',
            'input_attrs': 'required',
            'input_val': f'value="{usernow.address_line1}"' if usernow.address_line1 else ''
            }
        address2_dict = {
            'wrapper_class': 'row col-md-6',
            'input_id': 'address_line2',
            'label_val': 'Physical address line 2',
            'input_val': f'value="{usernow.address_line2}"' if usernow.address_line2 else ''
            }
        address_city_dict = {
            'wrapper_class': 'row col-md-6',
            'label_attrs': 'required',
            'input_id': 'address_city',
            'label_val': 'City',
            'input_attrs': 'required',
            'input_val': f'value="{usernow.address_city}"' if usernow.address_city else ''
            }
        address_province_dict = {
            'wrapper_class': 'row col-md-6',
            'label_attrs': 'required',
            'input_id': 'address_province',
            'label_val': 'Province',
            'input_attrs': 'required',
            'input_val': f'value="{usernow.address_province}"' if usernow.address_province else ''
            }
        address_postal_code_dict = {
            'wrapper_class': 'row col-md-6',
            'label_attrs': 'required',
            'input_id': 'address_postal_code',
            'label_val': 'Postal code',
            'input_attrs': 'required',
            'input_val': f'value="{usernow.address_postal_code}"' if usernow.address_postal_code else ''
            }
        id_no_dict = {
            'input_wrapper_class': '',
            'label_attrs': 'required',
            'input_id': 'identity_number',
            'label_val': 'Main Signatory Identity number',
            'input_attrs': 'required',
            'input_val': f''
            }
        widget_dict = {
            'input_type': 'widget',
            'widget': self.get_multi_doc_input()
        }
        photo_file_dict = {
            'input_wrapper_class': '',
            'label_attrs': 'required',
            'label_val': 'Clear photo of yourself (selfie)',
            'input_type': 'custom',
            'input_field': create_fileinput_html(**{'input_id': 'photo', 'include_js': False})
        }
        address_file_dict = {
            'input_wrapper_class': '',
            'label_attrs': 'required',
            'label_val': 'Proof of address (Not older than 6 months)',
            'input_type': 'custom',
            'input_field': create_fileinput_html(**{'input_id': 'address', 'include_js': False})
            }
        account_file_dict = {
            'input_wrapper_class': '',
            'label_attrs': 'required',
            'label_val': 'Proof of Bank Account (Not older than 6 months & Bank account must be in the name of the company)',
            'input_attrs': 'required',
            'input_type': 'custom',
            'input_field': create_fileinput_html(**{'input_id': 'account', 'include_js': False})
            }
        vat_file_dict = {
            'wrapper_class': 'row col-md-6',
            'label_attrs': 'required',
            'label_val': 'Certified copy of original VAT Registration Certificate (If applicable)',
            'input_type': 'custom',
            'input_field': create_fileinput_html(**{'input_id': 'vat', 'include_js': False})
            }
        registration_file_dict = {
            'wrapper_class': 'row col-md-6',
            'label_attrs': 'required',
            'label_val': 'Certified copy of original registration documents',
            'input_attrs': 'required',
            'input_type': 'custom',
            'input_field': f'''
                <div class="input-group mb-3">
                    <div class="custom-file">
                        <input type="file" class="custom-file-input" name="registration" id="registration" required>
                        <label class="custom-file-label" for="registration">Choose file</label>
                    </div>
                </div>
            '''
            }
        action_dict = {
            'input_wrapper_class': 'text-right',
            'input_type': 'custom',
            'input_field': '<button type="button" id="submitBtn" class="btn btn-info ">Submit</button>'
            }
        params_list = [
            company_name_dict,
            trading_name_dict,
            store_name_dict,
            reg_no_dict,
            industry_id_dict,
            address1_dict,
            address2_dict,
            address_city_dict,
            address_province_dict,
            address_postal_code_dict,
            id_no_dict,
            widget_dict,
            photo_file_dict,
            address_file_dict,
            account_file_dict,
            vat_file_dict,
            registration_file_dict,
            action_dict
            ]
        javascript = """
        <script>
            var kycForm = $('#kyc_form');
            setFormValidation(kycForm);
            $('#submitBtn').click(function(e){
                e.preventDefault();
                var valid = FormIsValid(kycForm);
                if(valid){
                    var form = $('#kyc_form')[0];
                    var data = new FormData(form);
                    data.append('merchant_ownership_type_id', $('#merchant_ownership_type_id option:selected').val());
                    $.ajax({
                        type: "POST",
                        enctype: 'multipart/form-data',
                        url: "/kyc/submit_kyc_company_registration",
                        data: data,
                        processData: false,
                        contentType: false,
                        cache: false,
                        timeout: 600000,
                        success: function (data) {
                            var result = JSON.parse(data);
                            if(result.success === true){
                                console.log('data', data);
                                showNotification(result.status, result.message);
                            } else {
                                showNotification(result.status, result.message);
                            }
                            return false;
                        },
                        error: function (e) {
                            console.log("ERROR : ", e);
                        },
                        xhr: function() {
                            $('#dialogdiv').load('/kyc/progress_dialog', function(data){
                                return false;
                            });
                            var xhr = $.ajaxSettings.xhr();
                            xhr.upload.onprogress = function(e) {
                                var progressBar = $('.progress-bar');
                                var valNow = Math.floor(e.loaded / e.total * 100);
                                progressBar.css('width', valNow + '%')
                                    .attr('aria-valuenow', valNow)
                                    .text('Uploading ' + valNow + '%');
                            }
                            xhr.upload.onloadend = function(e) {
                                $('#progressModal').modal('hide');
                            }
                            return xhr;
                        }
                    });
                }
            });

            
            $(document).on('change','input[type="file"]', function(e){
                var thisId = $(this).attr('id');
                var result = validateFile(thisId, 5);

                var firstFile = e.target.files[0];
                var fileName = 'Choose file...'
                if (firstFile !== undefined){
                    fileName = e.target.files[0].name;
                }
                $('label[for="'+ thisId +'"]').text(fileName);
                return;
            });
            $(document).on('click', 'span.removeBtn', function(e){
                e.preventDefault();
                var containerId = $(this).data('parent');
                $('#'+containerId).slideUp('slow');
                $('#'+containerId+' input[type="file"]').attr('disabled', 'disabled');
                return;
            })
        </script>
        """
        return build_html_form('kyc_form', params_list) + javascript

    def get_multi_doc_input(self, *args, **kwargs):
        html = f"""
            <div id="idDocDiv">
                <div class="form-group">
                    <div class="d-flex justify-content-between">
                        <label class="" for="" required="">Certified copy of Id of all current Company Directors</label>
                        <label id="addBtn" class="display_link text-danger">Add another</label>
                    </div>
                    <div class="input-group mb-3">
                        <div class="custom-file">
                            <input type="file" class="custom-file-input" name="document" id="document" required="">
                            <label class="custom-file-label" for="document">Choose file</label>
                        </div>
                    </div>
                </div>
            </div>
        """
        javascript = """
        <script>
            var counter = 1
            $('#addBtn').click(function(){
                var input = `
                    <div id="container_${counter}" style="display:none;">
                        <div class="input-group mb-3">
                            <div class="custom-file">
                                <input type="file" class="custom-file-input" name="document" id="document_${counter}" required>
                                <label class="custom-file-label" for="document_${counter}">Add another director ID...</label>
                            </div>
                            <div class="input-group-append">
                                <span class="input-group-text removeBtn" data-parent="container_${counter}">
                                    <i class="fas fa-times text-danger"></i>
                                </span>
                            </div>
                        </div>
                    </div>
                `
                $('#idDocDiv').append(input);
                $('#container_'+counter).slideDown('slow');
                counter += 1
            });
        </script>
        """
        return html + javascript    
