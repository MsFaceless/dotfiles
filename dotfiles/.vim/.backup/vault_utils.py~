#!/bin/python

import requests

from dotenv import dotenv_values

env_vars = dotenv_values()
BASE_URL = env_vars.get('VAULT_BASE_URL', None)
BASE_URL = f"{BASE_URL}/calabash"

HEADERS = env_vars.get('HEADERS', None)
HEADERS = {'DeToken': HEADERS}

def confirm_entity_person(params=None):
    return post_to_url('confirm_entity_person', params)

def create_calabash_person(params=None):
    return post_to_url('create_calabash_person', params)

def create_calabash_organisation(params=None):
    return post_to_url('create_calabash_organisation', params)

def update_eiffel_student(params=None):
    return post_to_url('update_eiffel_student', params)

def sync_myimali_data(params=None):
    return post_to_url('sync_myimali_data', params)

def activate_campus_student(params=None):
    return post_to_url('activate_campus_student', params)

def update_identity_by_identity_id(params=None):
    return post_to_url('update_identity_by_identity_id', params)

def check_student_number_exists(params=None):
    return post_to_url('check_student_number_exists', params)

def check_mobile_number_exists(params=None):
    return post_to_url('check_mobile_number_exists', params)

def check_identity_student_number_match(params=None):
    return post_to_url('check_identity_student_number_match', params)

def check_passport_student_number_match(params=None):
    return post_to_url('check_passport_student_number_match', params)

def get_entity_by_mobile(params=None):
    return get_from_url('get_entity_by_mobile', params)

def get_entity_by_identity_number(params=None):
    return get_from_url('get_entity_by_identity_number', params)

def get_entity_by_passport_number(params=None):
    return get_from_url('get_entity_by_passport_number', params)

def get_entity_object_by_id(params=None):
    return get_from_url('get_entity_object_by_id', params)

def get_person_identity_types(params=None):
    return get_from_url('get_person_identity_types', params)

def post_to_url(url='', params=None):
    if not url:
        return {}
    try:
        r = requests.post(f"{BASE_URL}/{url}", json=params)
    except requests.exceptions.ConnectionError:
        return {}
    try:
        result = r.json()
    except Exception as e:
        print(e)
        result = {}
    return result

def get_from_url(url='', params={}):
    if not url: return {}
    print(f"{BASE_URL}/{url}")
    try:
        r = requests.get(f"{BASE_URL}/{url}", params=params)
    except requests.exceptions.ConnectionError:
        print('ConnectionError')
        return {}
    try:
        result = r.json()
    except Exception as e:
        print(e)
        result = {}
    return result
