#!/bin/python
""" NetcashApiGateway """

import logging
import requests
from dotenv import dotenv_values

ENV_VARS = dotenv_values()
KEY = ENV_VARS.get('NETCASH_KEY', None)
TOKEN = ENV_VARS.get('NETCASH_TOKEN', None)
BASE_URL = ENV_VARS.get('NETCASH_BASE_URL', None)

PAYMENT_KEY_PREFIX = 'qrjunct10n-'

LOGGER = logging.getLogger(__name__)

class NetcashApiGateway:
    """ NetcashApiGateway """

    def __repr__(self):
        return f'<NetcashApiGateway: base_url={self.base_url}>'

    def __init__(self, **kwargs):
        self.payment_key = kwargs.get('payment_key', KEY)
        self.base_url = kwargs.get('base_url', BASE_URL)
        self.merchant_token = kwargs.get('merchant_token', TOKEN)

    def get_transaction_id(self, *args, **kwargs):
        """ Get unique transaction_id """

        headers = {'API' : self.payment_key}

        url = 'https://payments-dot-my-imali-vas.appspot.com/payments/GetTransactionId'
        try:
            req = requests.get(url, headers=headers)
        except requests.exceptions.ConnectionError:
            LOGGER.warning(f'{url} failed due to ConnectionError')
            return False

        result = req.json()
        success = result.get('success', False)
        if not success:
            return False

        transaction_id = result.get('transactionId', None)
        if not transaction_id:
            return False
        return transaction_id

    def dynamic_qr_with_variable_amount(self, *args, **kwargs):
        """ Get qrcode url """
        token = kwargs.get('token', None)
        if not token:
            LOGGER.warning('no token')
            return {}

        transaction_id = self.get_transaction_id()
        if not transaction_id:
            LOGGER.warning('no transaction_id')
            return {}


        reference = kwargs.get('reference', None)
        if not reference:
            LOGGER.warning('no reference')
            return {}

        amount_in_rands = kwargs.get('amount_in_rands', None)
        transaction_type = kwargs.get('transaction_type', 'Topup') # Topup or Sale

        url = f'{self.base_url}'
        url += f'MerchantToken={token}'
        url += f'&P2={transaction_id}'
        if amount_in_rands or amount_in_rands == 0.00:
            url += f'&Amount={amount_in_rands}'
        url += f'&Extra1={PAYMENT_KEY_PREFIX}{self.payment_key}'
        url += f'&Extra2={transaction_type}'
        url += f'&Extra3={reference}'
        return url

    def static_qr(self, *args, **kwargs):
        """ Get qrcode url """
        token = kwargs.get('token', None)
        if not token:
            LOGGER.warning('no token')
            return {}

        reference = kwargs.get('reference', None)
        if not reference:
            LOGGER.warning('no reference')
            return {}

        transaction_type = kwargs.get('transaction_type', 'Sale') # Topup or Sale

        url = f'{self.base_url}'
        url += f'MerchantToken={token}'
        url += f'&Extra1={PAYMENT_KEY_PREFIX}{self.payment_key}'
        url += f'&Extra2={transaction_type}'
        url += f'&Extra3={reference}'
        return url

if __name__ == "__main__":

    n = NetcashApiGateway()
    print(n)
