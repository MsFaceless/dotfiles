# -*- coding: utf-8 -*-
"""Policy controller module"""

import logging
from webob.static import FileApp
from pkg_resources import resource_filename

from tg import predicates, require, expose, request, redirect, use_wsgi_app, response
from tg.i18n import ugettext as _
from tg.i18n import lazy_ugettext as l_

from rocket.model import *

from rocket.lib.tg_utils import *
from rocket.lib.base import BaseController
from rocket.lib.type_utils import TypeDictionary
from rocket.lib.tg_generic_reportlab import PDFCreator, Paragraph

from rocket.controllers.common import CommonController
from rocket.controllers.product import ProductController

from sqlalchemy import func, desc, asc, or_, and_

LOGGER = logging.getLogger(__name__)

TYPEUTIL = TypeDictionary()
COMMON = CommonController()
PRODUCT = ProductController()

FILENAME = os.path.abspath(resource_filename('rocket', 'public'))
PUBLIC_DIRNAME = os.path.join(FILENAME)
PDF_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'pdf')

DBQUERY_LIMIT = 15
POLICY_NUMBER_MAX_LENGTH = 10

PRICE_TYPE_RATE_TABLE = TYPEUTIL.get_id_of_name('benefit_price_type', 'rate_table')
PRICE_TYPE_FIXED = TYPEUTIL.get_id_of_name('benefit_price_type', 'fixed')

BUSINESS = TYPEUTIL.get_id_of_name('benefit_asset_type', 'business')
EMPLOYEE = TYPEUTIL.get_id_of_name('benefit_asset_type', 'employee')
LANDLORD = TYPEUTIL.get_id_of_name('benefit_asset_type', 'landlord')
PROPERTY = TYPEUTIL.get_id_of_name('benefit_asset_type', 'property')
VEHICLE = TYPEUTIL.get_id_of_name('benefit_asset_type', 'vehicle')

PERSON = TYPEUTIL.get_id_of_name('entity_type', 'person')
ORGANISATION = TYPEUTIL.get_id_of_name('entity_type', 'organisation')

MINIMUM_UNKNOWN = 1
MAXIMUM_UNKNOWN = 999999

QUOTE = TYPEUTIL.get_id_of_name('policy_status_type', 'quote')
MATURED = TYPEUTIL.get_id_of_name('policy_status_type', 'matured')
REJECTED = TYPEUTIL.get_id_of_name('policy_status_type', 'rejected')
PRE_QUOTE = TYPEUTIL.get_id_of_name('policy_status_type', 'pre_quote')

SEARCHKEY_POLICY = 'Policy_SearchKeyword'

PRINCIPAL_TYPE = TYPEUTIL.get_id_of_name('benefit_insured_life_relationship_type', 'principal')

class PolicyController(BaseController):

    @expose()
    def _default(self, *args, **kwargs):
        return 'This page is not available.'

###############################################################################
# Policy - List
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def index(self, *args, **kwargs):
        htmltbl = self.get_policies_table(*args, **kwargs)
        searchphrase = COMMON.get_searchphrase(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                 <h4 class="card-title">{_('Policy Management')}</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_policy" class="btn btn-primary ml-auto">Create New Policy</button>
                            </div>
                        </div>
                        <div class="row d-flex align-items-center">
                            <div class="col-md-4 d-flex">
                                <input id='search' type="text" class="form-control mr-2 search" name="searchphrase" placeholder="Search by Code or Description" value='{searchphrase}'>
                            </div>
                            <div class="col-md-4 pl-0">
                                <button id='btn_search' class="btn btn-primary action_search">Search</button>
                                <button id='btn_reset' class="btn btn-primary">Reset</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div id='div_policy_table' data-prequote="{PRE_QUOTE}" data-quote="{QUOTE}" class="table-responsive">
                            {htmltbl}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        $("#create_new_policy").click(function(){
            $.redirect('/policy/new');
        });
        $('#btn_search').click(function(){
            var searchphrase = $('#search').val();
            var kwargs = {
                'searchphrase': searchphrase,
            }
            $('#div_policy_table').load('/policy/get_policies_table', kwargs, function(data){
                return false;
            });
        })
        $('#btn_reset').click(function(){
            var kwargs = {
                'reset': 'true',
            }
            $('#search').val('').focus();
            $('#div_policy_table').load('/policy/get_policies_table', kwargs, function(data){
                return false;
            });
        });

        """
        title = _("Policy Management")
        return dict(title=title, html=html, javascript=javascript)

    def get_policies_list(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_POLICY
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()

        if searchphrase:
            success_list = []
            search_dbase_query = DBSession.query(Policy, Product). \
                filter(Policy.bln_active == True). \
                filter(Product.id == Policy.product_id). \
                order_by(Policy.added.desc()).all()
            for pol, prod in search_dbase_query:
                policy_payer = self.get_name_by_entity_id(pol.policy_payer_entity_id).lower()
                policy_owner = self.get_name_by_entity_id(pol.policy_owner_entity_id).lower()
                if policy_owner == 'not set':
                    policy_owner = ''
                if policy_payer == 'not set':
                    policy_payer = ''
                policy_number = pol.policy_number
                product_code = prod.code
                product_name = prod.name

                search_string = f"{policy_payer}|{policy_owner}|{policy_number}|{product_code}|{product_name}"

                if searchphrase in search_string:
                    success_list.append(pol.id)

            dbase_query = DBSession.query(Policy). \
                filter(Policy.id.in_(success_list)). \
                limit(DBQUERY_LIMIT)
        else:
            dbase_query = DBSession.query(Policy). \
                filter(Policy.bln_active == True). \
                order_by(Policy.added.desc()). \
                limit(DBQUERY_LIMIT)
        return dbase_query

    @expose()
    def get_policies_table(self, *args, **kwargs):
        dbase_query = []
        dbase_query = self.get_policies_list(**kwargs)
        outputlist = []
        for item in dbase_query:

            product = Product.by_id(item.product_id)
            if not product:
                continue

            state = PolicyStatus.by_attr_first('policy_id', item.id)
            if not state:
                continue

            # state.policy_status_type_id = MATURED
            # DBSession.flush()
            # print(state, state.policy_status_type_id)

            action_button = ''
            policy_number = f"""
                <div class='edit policy_quote_edit action_link' data-policy_id='{item.id}' data-policy_status_type_id='{state.policy_status_type_id}'>
                    {item.policy_number}
                </div>
                """
            if state.policy_status_type_id == REJECTED:
                policy_number = f"""
                <div class="edit" data-policy_id="{item.id}" data-policy_status_type_id="{state.policy_status_type_id}">
                    {item.policy_number}
                </div>
                """
            if state.policy_status_type_id == PRE_QUOTE:
                policy_number = f"""
                <div class='edit policy_edit action_link' data-policy_id='{item.id}' data-policy_status_type_id='{state.policy_status_type_id}'>
                    {item.policy_number}
                </div>
                """


            action_button = f"""<button data-policy_id='{item.id}' data-policy_status_type_id='{state.policy_status_type_id}' class="btn btn-primary btn_remove">Remove</button>"""

            if item.policy_payer_entity_id == item.policy_owner_entity_id:
                policy_owner = policy_payer = self.get_name_by_entity_id(item.policy_payer_entity_id)
            else:
                policy_payer = self.get_name_by_entity_id(item.policy_payer_entity_id)
                policy_owner = self.get_name_by_entity_id(item.policy_owner_entity_id)

            user = User.by_id(item.added_by)
            name = f'({product.code}) {product.name}'
            policy_status_name = TYPEUTIL.get_pretty_name('policy_status_type', state.policy_status_type_id)

            outputlist.append({
                'policy_number': policy_number,
                'policy_payer': policy_payer,
                'policy_owner': policy_owner,
                'product' : name,
                'state': policy_status_name,
                'added': item.added,
                'added_by': user.name,
                'actions': action_button,
            })
        dbcolumnlist = [
            'policy_number',
            'policy_payer',
            'policy_owner',
            'product',
            'state',
            'added',
            'added_by',
            'actions',
        ]
        theadlist = [
            'Policy Number',
            'Policy Holder',
            'Policy Owner',
            'Product',
            'State',
            'Added',
            'Added By',
            '',
        ]
        tdclasslist = [
            '',
            '',
            '',
            '',
            '',
            '',
            'text-right',
            'action_link text-right',
        ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "policy_table", tdclasslist)

        javascript = """
        <script src=''>
            var status_data = $('#div_policy_table').data();
            $(".policy_edit, .policy_quote_edit").click(function(){
                var kwargs = $(this).data();
                if (kwargs.policy_status_type_id == status_data.prequote){
                    $.redirect('/policy/new', kwargs);
                } else if (kwargs.policy_status_type_id == status_data.quote){
                    $.redirect('/policy/application_form', kwargs);
                } else {
                    $.redirect('/policy/management', kwargs);
                }
            });
            $('.btn_remove').click(function(){
                var kwargs = $(this).data();
                $.post('/policy/remove_policy?', kwargs, function(data){
                    $.redirect('/policy');
                });
            });
        </script>
        """
        return htmltbl + javascript

    @expose()
    def remove_policy(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('remove_policy: No policy_id in kwargs')
            return ''
        else:
            policy = Policy.by_id(policy_id)
            if not policy:
                log.warning(f'remove_policy: No active policy by id {policy_id}')
                return ''
            policy.bln_active = False
            DBSession.flush()
            return ''

    def get_name_by_entity_id(self, entity_id=None, *args, **kwargs):
        if not entity_id:
            log.warning('get_name_by_entity_id: No entity_id in args or entity_id passed in had a value of None')
            return 'Not Set'

        entity_owner = Entity.by_id(entity_id)
        if entity_owner.entity_type_id == PERSON:
            policy_owner = EntityPerson.by_attr_first('entity_id', entity_id)
            if policy_owner:
                name = policy_owner.firstname
                surname = policy_owner.surname
                return f"{name} {surname}"

        if entity_owner.entity_type_id == ORGANISATION:
            entity_organisation = EntityOrganisation.by_attr_first('entity_id', entity_id)
            if entity_organisation:
                return f"({entity_organisation.code}) {entity_organisation.name}"

        return 'Not Set'

###############################################################################
# Policy - New
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def new(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            policy_id = self.confirm_policy_exists()

        policy = Policy.by_id(policy_id)
        if not policy:
            log.warning('policy/new: Policy could not be found for policy_id provided')
            redirect('/policy')

        product_id = kwargs.get('product_id', None)
        if not product_id:
            kwargs['product_id'] = product_id = policy.product_id
        selectbox_product = self.get_selectbox_product(**kwargs)

        html = f"""
        <div class="row sticky">
            <div class="card pb-3">
                <div id="newPolicyHeader" data-policy_id="{policy_id}" class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-4">
                            <h4 class="card-title">Policy: {policy.policy_number}</h4>
                        </div>
                        <div class="col-md-4 text-left" id="premium_total">
                        </div>
                        <div class="col-md-4 text-right">
                            <button class="btn btn-secondary ml-auto" id="policy_quote" data-product_id='{product_id}' data-policy_id='{policy_id}'>Show Quote</button>
                            <button class="btn btn-primary ml-auto" id="policy_back" data-product_id='{product_id}' data-policy_id='{policy_id}'>Back to Policies</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="card pb-3">
                <div class="card-header">
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <h4 class="card-title">Product</h4>
                        </div>
                        <div class="col-md-4 text-left">
                            {selectbox_product}
                        </div>
                        <div class="col-md-4 text-right">
                            <button id='btn_summary' class="btn btn-primary ml-auto btn_product_summary">Summary</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id='div_compulsory_benefits'></div>
        <div id='div_optional_benefits_card'></div>
        """
        javascript = """
        $('#policy_back').click(function(){
            $.redirect('/policy');
        });
        $('#policy_quote').click(function(){
            var kwargs = $(this).data();
            $('#dialogdiv').load('/policy/get_modal_policy_quote?', kwargs, function(data){
                return false;
            });
        });
        $("#btn_summary").click(function(){
            var kwargs = 'product_id='+$('#product_id option:selected').val();
            $('#dialogdiv').load('/policy/get_modal_product_summary?', kwargs, function(data){
                return false;
            });
        });
        $('#product_id').change(function(){
            var policy_id = $('#policy_back').data('policy_id');
            var product_id = $('#product_id option:selected').val();
            var kwargs = 'product_id=' + product_id + '&policy_id=' + policy_id;

            $.post('/policy/confirm_policy_exists?', kwargs, function(policy_id){

                $('#policy_back').data('policy_id', policy_id);
                $('#policy_back').data('product_id', product_id);
                var kwargs = 'product_id=' + product_id + '&policy_id=' + policy_id;


                $('#div_compulsory_benefits').load('/policy/get_compulsory_benefits_html?', kwargs, function(data){
                    $('#div_optional_benefits_card').load('/policy/get_optional_benefits_card?', kwargs, function(data){
                        return false;
                    });
                    return false;
                });
            });
        });
        $('#product_id').trigger('change');
        """
        title = _("New Policy")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_compulsory_benefits_html(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''

        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        kwargs['benefit_title'] = 'Compulsory Life Benefits'
        kwargs['form'] = self.get_life_compulsory_benefit_forms(**kwargs)
        kwargs['table'] = self.get_compulsory_quote_life_benefit_table(**kwargs)
        life_benefits_card = self.get_benefit_card(**kwargs)
        non_life_benefits_card = self.get_non_life_quote_compulsory_benefit_forms(**kwargs)
        html = f"""
        <div id="contentDiv">
            {life_benefits_card}
            {non_life_benefits_card}
        </div>
        """
        javascript = """
        <script src=''>
            var kwargs = $('#newPolicyHeader').data();
            $('#premium_total').load('/policy/get_premium_total_html', kwargs, function(data){
                return false;
            });
        </script>
        """
        return html

# Data Setup
    def get_life_benefit_data(self, policy_id=None, compulsory=True, *args, **kwargs):
        dbase_query = DBSession.query(PolicyBenefit, PolicyBenefitInsuredLife, Benefit). \
            join(PolicyBenefitInsuredLife, PolicyBenefitInsuredLife.policy_benefit_id == PolicyBenefit.id).\
            join(Benefit, Benefit.id == PolicyBenefit.product_benefit_id).\
            filter(PolicyBenefit.policy_id == policy_id)

        if compulsory:
            dbase_query = dbase_query.filter(or_(
                Benefit.is_main_benefit == True,
                Benefit.is_compulsory == True,
            ))
        else:
            dbase_query = dbase_query.filter(and_(
                Benefit.is_main_benefit == False,
                Benefit.is_compulsory == False,
            ))

        dbase_query = dbase_query.filter(PolicyBenefit.bln_active == True). \
            order_by(PolicyBenefitInsuredLife.relationship_type_id, PolicyBenefit.id).\
            all()
        return dbase_query

    def get_life_policy_benefits(self, policy_id=None, compulsory=False, *args, **kwargs):
        if not policy_id:
            log.warning('get_life_policy_benefits: No policy_id in kwargs')
            return []

        dbase_query = DBSession.query(PolicyBenefit).\
            join(Benefit, Benefit.id == PolicyBenefit.product_benefit_id)

        if compulsory:
            dbase_query = dbase_query.filter(or_(
                Benefit.is_main_benefit == True,
                Benefit.is_compulsory == True,
            ))
        else:
            dbase_query = dbase_query.filter(and_(
                Benefit.is_main_benefit == False,
                Benefit.is_compulsory == False,
            ))

        dbase_query = dbase_query.filter(PolicyBenefit.policy_id == policy_id).\
            filter(Benefit.is_life == True).\
            filter(Benefit.bln_active == True).\
            order_by(PolicyBenefit.id).\
            all()

        return dbase_query

    def get_non_life_product_benefit_data(self, product_id=None, compulsory=True, *args, **kwargs):
        if not product_id:
            log.warning('get_non_life_application_compulsory_benefit_forms: No product_id in kwargs')
            return []

        dbase_query = DBSession.query(Benefit, BenefitInsuredNonLife). \
            join(BenefitInsuredNonLife, BenefitInsuredNonLife.benefit_id == Benefit.id).\
            filter(Benefit.product_id == product_id)

        if compulsory:
            dbase_query = dbase_query.filter(or_(
                Benefit.is_main_benefit == True,
                Benefit.is_compulsory == True,
            ))
        else:
            dbase_query = dbase_query.filter(and_(
                Benefit.is_main_benefit == False,
                Benefit.is_compulsory == False,
            ))

        dbase_query = dbase_query. \
            filter(Benefit.is_life == False). \
            filter(Benefit.cover_and_exclusion_id != None). \
            filter(Benefit.bln_active == True). \
            order_by(BenefitInsuredNonLife.benefit_asset_type_id).\
            all()
        return dbase_query

    def get_policy_benefit_non_life_business_data(self, policy_id=None, compulsory=True, *args, **kwargs):
        dbase_query = DBSession.query(PolicyBenefit, PolicyBenefitInsuredAssetBusiness, Benefit). \
            join(Benefit, Benefit.id == PolicyBenefit.product_benefit_id).\
            join(PolicyBenefitInsuredAsset, PolicyBenefitInsuredAsset.policy_benefit_id == PolicyBenefit.id).\
            join(PolicyBenefitInsuredAssetBusiness, PolicyBenefitInsuredAssetBusiness.policy_benefit_insured_asset_id == PolicyBenefitInsuredAsset.id).\
            filter(PolicyBenefit.policy_id == policy_id)

        if compulsory:
            dbase_query = dbase_query.filter(or_(
                Benefit.is_main_benefit == True,
                Benefit.is_compulsory == True,
            ))
        else:
            dbase_query = dbase_query.filter(and_(
                Benefit.is_main_benefit == False,
                Benefit.is_compulsory == False,
            ))

        dbase_query = dbase_query.filter(Benefit.is_life == False). \
            filter(PolicyBenefit.bln_active == True). \
            order_by(PolicyBenefit.id).\
            all()
        return dbase_query

    def get_policy_benefit_non_life_employee_data(self, policy_id=None, compulsory=True, *args, **kwargs):
        dbase_query = DBSession.query(PolicyBenefit, PolicyBenefitInsuredAssetEmployee, Benefit). \
            join(Benefit, Benefit.id == PolicyBenefit.product_benefit_id).\
            join(PolicyBenefitInsuredAsset, PolicyBenefitInsuredAsset.policy_benefit_id == PolicyBenefit.id).\
            join(PolicyBenefitInsuredAssetEmployee, PolicyBenefitInsuredAssetEmployee.policy_benefit_insured_asset_id == PolicyBenefitInsuredAsset.id).\
            filter(PolicyBenefit.policy_id == policy_id)

        if compulsory:
            dbase_query = dbase_query.filter(or_(
                Benefit.is_main_benefit == True,
                Benefit.is_compulsory == True,
            ))
        else:
            dbase_query = dbase_query.filter(and_(
                Benefit.is_main_benefit == False,
                Benefit.is_compulsory == False,
            ))

        dbase_query = dbase_query.filter(PolicyBenefit.bln_active == True). \
            order_by(PolicyBenefit.id).\
            all()
        return dbase_query

    def get_policy_benefit_non_life_landlord_data(self, policy_id=None, compulsory=True, *args, **kwargs):
        dbase_query = DBSession.query(PolicyBenefit, PolicyBenefitInsuredAssetLandlord, Benefit). \
            join(Benefit, Benefit.id == PolicyBenefit.product_benefit_id).\
            join(PolicyBenefitInsuredAsset, PolicyBenefitInsuredAsset.policy_benefit_id == PolicyBenefit.id).\
            join(PolicyBenefitInsuredAssetLandlord, PolicyBenefitInsuredAssetLandlord.policy_benefit_insured_asset_id == PolicyBenefitInsuredAsset.id).\
            filter(PolicyBenefit.policy_id == policy_id)

        if compulsory:
            dbase_query = dbase_query.filter(or_(
                Benefit.is_main_benefit == True,
                Benefit.is_compulsory == True,
            ))
        else:
            dbase_query = dbase_query.filter(and_(
                Benefit.is_main_benefit == False,
                Benefit.is_compulsory == False,
            ))

        dbase_query = dbase_query.filter(Benefit.is_life == False). \
            filter(PolicyBenefit.bln_active == True). \
            order_by(PolicyBenefit.id).\
            all()
        return dbase_query

    def get_policy_benefit_non_life_property_data(self, policy_id=None, compulsory=True, *args, **kwargs):
        dbase_query = DBSession.query(PolicyBenefit, PolicyBenefitInsuredAssetProperty, Benefit). \
            join(Benefit, Benefit.id == PolicyBenefit.product_benefit_id).\
            join(PolicyBenefitInsuredAsset, PolicyBenefitInsuredAsset.policy_benefit_id == PolicyBenefit.id).\
            join(PolicyBenefitInsuredAssetProperty, PolicyBenefitInsuredAssetProperty.policy_benefit_insured_asset_id == PolicyBenefitInsuredAsset.id).\
            filter(PolicyBenefit.policy_id == policy_id)

        if compulsory:
            dbase_query = dbase_query.filter(or_(
                Benefit.is_main_benefit == True,
                Benefit.is_compulsory == True,
            ))
        else:
            dbase_query = dbase_query.filter(and_(
                Benefit.is_main_benefit == False,
                Benefit.is_compulsory == False,
            ))

        dbase_query = dbase_query.filter(Benefit.is_life == False). \
            filter(PolicyBenefit.bln_active == True). \
            order_by(PolicyBenefit.id).\
            all()
        return dbase_query

    def get_policy_benefit_non_life_vehicle_data(self, policy_id=None, compulsory=True, *args, **kwargs):
        dbase_query = DBSession.query(PolicyBenefit, PolicyBenefitInsuredAssetVehicle, Benefit). \
            join(Benefit, Benefit.id == PolicyBenefit.product_benefit_id).\
            join(PolicyBenefitInsuredAsset, PolicyBenefitInsuredAsset.policy_benefit_id == PolicyBenefit.id).\
            join(PolicyBenefitInsuredAssetVehicle, PolicyBenefitInsuredAssetVehicle.policy_benefit_insured_asset_id == PolicyBenefitInsuredAsset.id).\
            filter(PolicyBenefit.policy_id == policy_id)

        if compulsory:
            dbase_query = dbase_query.filter(or_(
                Benefit.is_main_benefit == True,
                Benefit.is_compulsory == True,
            ))
        else:
            dbase_query = dbase_query.filter(and_(
                Benefit.is_main_benefit == False,
                Benefit.is_compulsory == False,
            ))

        dbase_query = dbase_query.filter(Benefit.is_life == False). \
            filter(PolicyBenefit.bln_active == True). \
            order_by(PolicyBenefit.id).\
            all()
        return dbase_query

# Compulsory benefits

    def get_compulsory_quote_life_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_compulsory_quote_life_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_life_benefit_data(policy_id, compulsory=True)
        return self.get_life_quote_benefit_table(dbase_query)

# Compulsory Individual Life

    def get_life_quote_benefit_table(self, dbase_query=[], *args, **kwargs):
        if not dbase_query:
            return ''

        outputlist = []
        for item in dbase_query:
            benefit = item.Benefit

            insured = item.PolicyBenefitInsuredLife

            policy_benefit = item.PolicyBenefit

            premium, sum_insured = self.get_benefit_premium_html(policy_benefit, benefit, policy_benefit.policy_id)

            sane_dob = date_to_str(insured.date_of_birth, dateformat='%d-%m-%Y')
            action = ''
            if not benefit.is_compulsory and not benefit.is_main_benefit:
                action = f"""<button type="button" class="btn btn-primary remove_optional_policy_benefit"
                    data-policy_benefit_id="{policy_benefit.id}" data-policy_id="{policy_benefit.policy_id}" data-product_id="{benefit.product_id}">Remove</button>
                """
            outputlist.append({
            'benefit': benefit.name,
            'date_of_birth': sane_dob,
            'sum_insured': sum_insured,
            'premium': premium,
            'action': action,
        })
        dbcolumnlist=[
            'benefit',
            'date_of_birth',
            'sum_insured',
            'premium',
            'action',
        ]
        theadlist=[
            'Benefit',
            'Date of Birth',
            'Sum Insured',
            'Premium',
            '',
        ]
        tdclasslist = [
            'w-25',
            '',
            'w-15',
            'w-10',
            'w-10 text-right',
        ]

        if not outputlist:
            return ''
        javascript = """
        <script src=''>
            $('.remove_optional_policy_benefit').click(function(){
                var kwargs = $(this).data();
                $.post('/policy/delete_policy_benefit_record?', kwargs, function(data){
                    $('#div_optional_benefits_card').load('/policy/get_optional_benefits_card?', kwargs, function(data){
                        return false;
                    });
                    return false;
                });
            });
        </script>
        """
        return build_html_table(outputlist, dbcolumnlist, theadlist, f"benefit_table", tdclasslist) + javascript

    def get_life_compulsory_benefit_forms(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_life_compulsory_benefit_forms: No policy_id in kwargs')
            return ''

        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_life_compulsory_benefit_forms: No product_id in kwargs')
            return ''

        dbase_query = DBSession.query(Benefit, BenefitInsuredLife). \
            join(BenefitInsuredLife, BenefitInsuredLife.benefit_id == Benefit.id).\
            filter(Benefit.product_id == product_id). \
            filter(or_(
                Benefit.is_main_benefit == True,
                Benefit.is_compulsory == True,
            )). \
            filter(Benefit.is_life == True). \
            filter(Benefit.bln_active == True). \
            order_by(BenefitInsuredLife.benefit_insured_life_relationship_type_id.desc()).\
            all()

        relation_list = []
        for item in dbase_query:
            relation_type_id = item.BenefitInsuredLife.benefit_insured_life_relationship_type_id
            if relation_type_id not in relation_list:
                relation_list.append(relation_type_id)

        card = ""
        for relation_type_id in relation_list:
            relationship = TYPEUTIL.get_pretty_name('benefit_insured_life_relationship_type', relation_type_id)
            print(relationship, relation_type_id)

            form_added = False
            for data in dbase_query:
                if form_added:
                    continue

                benefit_insured_life = data.BenefitInsuredLife
                if not relation_type_id == benefit_insured_life.benefit_insured_life_relationship_type_id:
                    continue

                policy_benefit = DBSession.query(PolicyBenefit).\
                    filter(PolicyBenefit.policy_id == policy_id).\
                    filter(PolicyBenefit.product_benefit_id == data.Benefit.id).\
                    filter(PolicyBenefit.bln_active == True).\
                    first()

                form_id = kwargs.get('form_id', f'comp_indiv_form_{data.Benefit.id}')
                if not policy_benefit:
                    card += f'<div class="my-3"><h6>Life Benefit - {relationship} Insured</h6><hr>'
                    card += self.get_entity_person_insured_quote_form(**{
                        'form_id': form_id,
                        'policy_id': policy_id,
                        'product_benefit_id': data.Benefit.id,
                        'product_id': product_id,
                    })
                    card += '</div>'
                    form_added = True
        return card

    @expose()
    def save_individual_insured(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('save_individual_insured: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy', 'status': 'danger'})

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('save_individual_insured: No product_benefit_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a benefit', 'status': 'danger'})

        date_of_birth = kwargs.get('date_of_birth', None)
        if not date_of_birth:
            log.warning('save_individual_insured: No date_of_birth in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'Date of birth field needs to be completed', 'status': 'danger'})

        benefit = Benefit.by_id(product_benefit_id)
        if not benefit:
            log.warning('save_individual_insured: Benefit could not be found for product_benefit_id provided')
            return json.dumps({'success': False, 'message': 'We could not identify the benefit from the data supplied', 'status': 'danger'})

        ben_insured_life = BenefitInsuredLife.by_attr_first('benefit_id', benefit.id)

        if benefit.is_compulsory or benefit.is_main_benefit:
            comp_benefits = DBSession.query(Benefit). \
                filter(Benefit.product_id == benefit.product_id). \
                filter(or_(
                    Benefit.is_main_benefit == True,
                    Benefit.is_compulsory == True,
                )). \
                filter(Benefit.is_life == True). \
                filter(Benefit.bln_active == True). \
                all()

            for cb in comp_benefits:
                this_ben_insured_life = BenefitInsuredLife.by_attr_first('benefit_id', cb.id)
                if ben_insured_life.benefit_insured_life_relationship_type_id == this_ben_insured_life.benefit_insured_life_relationship_type_id:
                    kwargs['benefit'] = cb
                    result = self.create_policy_benefit_insured_life(**kwargs)
                    if not result.get('success'):
                        return json.dumps(result)
        else :
            kwargs['benefit'] = benefit
            opt_result = self.create_policy_benefit_insured_life(**kwargs)
            if not opt_result.get('success'):
                return json.dumps(opt_result)

        return json.dumps({'success': True, 'message': 'Individual saved', 'status': 'success'})

    @expose()
    def get_entity_person_insured_quote_form(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_entity_person_insured_quote_form_inputs: No policy_id in kwargs')
            return ''

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('get_entity_person_insured_quote_form_inputs: No product_benefit_id in kwargs')
            return ''

        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_entity_person_insured_quote_form_inputs: No product_id in kwargs')
            return ''

        entity_person = kwargs.get('entity_person', None)

        form_id = kwargs.get('form_id', f'form_insured')

        hidden_policy_dict = {
            'input_type': 'widget',
            'widget': get_hidden_input(**{'id': 'policy_id', 'value': policy_id})
            }
        hidden_product_benefit_dict = {
            'input_type': 'widget',
            'widget': get_hidden_input(**{'id': 'product_benefit_id', 'value': product_benefit_id})
            }

        first_name = entity_person.firstname if entity_person else ''
        first_name_dict = {
            'input_wrapper_class': 'col',
            'label_attrs': 'required',
            'input_id': 'firstname',
            'label_val': _('First Name'),
            'input_attrs': 'required maxlength="50"',
            'input_val': f'value="{first_name}"'
            }
        surname = entity_person.surname if entity_person else ''
        surname_dict = {
            'input_wrapper_class': 'col',
            'label_attrs': 'required',
            'input_id': 'surname',
            'label_val': _('Surname'),
            'input_attrs': 'required maxlength="50"',
            'input_val': f'value="{surname}"'
            }
        date_of_birth = entity_person.date_of_birth if entity_person else ''
        dob_dict = {
            'label_attrs': 'required',
            'input_id': 'date_of_birth',
            'label_val': _('Date of Birth'),
            'input_class': 'date_field',
            'input_attrs': 'required',
            'input_val': f'value="{date_of_birth}"'
            }
        action_button_text = kwargs.get('action_button_text', 'Add Insured')
        action_post_target = kwargs.get('action_post_target', '/policy/save_individual_insured')
        action_refresh_target = kwargs.get('action_refresh_target', '/policy/get_compulsory_benefits_html')
        action_refresh_container = kwargs.get('action_refresh_container', 'div_compulsory_benefits')
        action_dict = {
            'input_type': 'widget',
            'widget': f"""
                <div>
                    <button type="button" id="saveBtn_{product_benefit_id}"
                        data-form="{form_id}"
                        data-post_target="{action_post_target}"
                        data-refresh_target="{action_refresh_target}"
                        data-refresh_container="{action_refresh_container}"
                        data-policy_id="{policy_id}"
                        data-product_benefit_id="{product_benefit_id}"
                        data-product_id="{product_id}"
                        class="btn btn-primary mt-0">{action_button_text}
                    </button>
                </div>
            """
            }
        extra_content = kwargs.get('extra_content', '')
        extra_dict = {
            'input_type': 'widget',
            'widget': extra_content
            }
        params_list = [
            hidden_policy_dict,
            hidden_product_benefit_dict,
            # first_name_dict,
            # surname_dict,
            dob_dict,
            action_dict,
            extra_dict
        ]
        if entity_person:
            entity_person_id_dict = {
				'input_id': 'id',
                'input_type': 'hidden',
                'input_val': f'value="{entity_person.id}"'
			}
            params_list.append(entity_person_id_dict)
        javascript = f"""
        <script src=''>
            var benefitId = {product_benefit_id};
        """
        javascript += """
            $('#saveBtn_'+benefitId).click(function(){
                var kwargs = $(this).data();
                var individualForm = $('#' + kwargs.form)
                setFormValidation(individualForm);
                var valid = FormIsValid(individualForm);
                if (valid){
                    var formserial = getFormData(individualForm);
                    $.post(kwargs.post_target, formserial, function(data){
                        var result = JSON.parse(data);
                        if (result.success === true){
                            $('#'+kwargs.refresh_container).load(kwargs.refresh_target, kwargs, function(params){
                                $('#div_optional_benefits_card').load('/policy/get_optional_benefits_card?', kwargs, function(data){
                                    return false;
                                });
                            });
                            return false;
                        } else {
                            showNotification(result.status, result.message);
                            return false;
                        }
                    });
                }
            });
            createDatepicker('.date_field');
        </script>
        """
        form_class = kwargs.get('form_class', 'd-flex justify-content-between')
        return build_html_form(form_id, params_list, form_class) + javascript

    def create_policy_benefit_insured_life(self, *args, **kwargs):
        usernow = request.identity.get('user', {})

        benefit = kwargs.get('benefit', None)
        if not benefit:
            log.warning('create_policy_benefit_insured_life: Benefit could not be found for product_benefit_id provided')
            return {'success': False, 'message': 'We could not identify the benefit from the data supplied', 'status': 'danger'}

        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('create_policy_benefit_insured_life: No policy_id in kwargs')
            return {'success': False, 'message': 'Please select a policy', 'status': 'danger'}

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('create_policy_benefit_insured_life: No product_benefit_id in kwargs')
            return {'success': False, 'message': 'Please select a benefit', 'status': 'danger'}

        date_of_birth = kwargs.get('date_of_birth', None)
        if not date_of_birth:
            log.warning('create_policy_benefit_insured_life: No date_of_birth in kwargs/formserial')
            return {'success': False, 'message': 'Date of birth field needs to be completed', 'status': 'danger'}


        benefit_insured_life = BenefitInsuredLife.by_attr_first('benefit_id', product_benefit_id)
        if not benefit_insured_life:
            log.warning('save_individual_insured: BenefitInsuredLife could not be found for product_benefit_id provided')
            return {'success': False, 'message': 'We could not identify the benefit from the data supplied', 'status': 'danger'}

        result = self.validate_benefits(**{
            'policy_id': policy_id,
            'date_of_birth': date_of_birth,
            'relationship_type_id': benefit_insured_life.benefit_insured_life_relationship_type_id,
            'is_compulsory': benefit.is_compulsory,
            'is_life': benefit.is_life,
        })
        if not result.get('success'):
            return result

        sane_dob = str_to_date(date_of_birth)

        policy_benefit = self.create_policy_benefit(policy_id, benefit)

        this = PolicyBenefitInsuredLife()
        this.policy_benefit_id = policy_benefit.id
        this.relationship_type_id = benefit_insured_life.benefit_insured_life_relationship_type_id
        this.date_of_birth = sane_dob
        this.added = datetime.now()
        this.added_by = usernow.id
        this.bln_active = True
        DBSession.add(this)
        DBSession.flush()
        return {'success': True, 'data': this.id}

# Non Life Setup

    def get_non_life_quote_compulsory_benefit_forms(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_non_life_quote_compulsory_benefit_forms: No policy_id in kwargs')
            return ''

        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_non_life_quote_compulsory_benefit_forms: No product_id in kwargs')
            return ''

        dbase_query = DBSession.query(Benefit, BenefitInsuredNonLife). \
            join(BenefitInsuredNonLife, BenefitInsuredNonLife.benefit_id == Benefit.id).\
            filter(Benefit.product_id == product_id). \
            filter(or_(
                Benefit.is_main_benefit == True,
                Benefit.is_compulsory == True,
            )). \
            filter(Benefit.is_life == False). \
            filter(Benefit.bln_active == True). \
            order_by(BenefitInsuredNonLife.benefit_asset_type_id).\
            all()

        kwargs['benefit_title'] = 'Compulsory Non Life Benefit'

        return self.get_non_life_benefits(dbase_query, **kwargs)

    def get_non_life_benefits(self, dbase_query=None, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_non_life_quote_compulsory_benefit_forms: No policy_id in kwargs')
            return ''

        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_non_life_quote_compulsory_benefit_forms: No product_id in kwargs')
            return ''

        benefit_title = kwargs.get('benefit_title', '')
        compulsory = kwargs.get('compulsory', True)
        form_id_title = 'comp' if compulsory else 'opt'
        html = ""
        for item in dbase_query:
            if not item.Benefit.cover_and_exclusion_id:
                continue
            print()
            print(item)
            print()
            asset_type_id = item.BenefitInsuredNonLife.benefit_asset_type_id
            benefit_type = TYPEUTIL.get_pretty_name('benefit_asset_type', asset_type_id)

            kwargs['product_benefit_id'] = item.Benefit.id

            params = {
                'policy_id': policy_id,
                'product_benefit_id': item.Benefit.id,
                'product_id': product_id,
                'benefit_title': f'{benefit_title} - {benefit_type}',
            }

            if asset_type_id == BUSINESS:
                kwargs['action_button_text'] = 'Add Business'
                kwargs['action_post_target'] = '/policy/save_business'
                kwargs['form_id'] = f'{form_id_title}_form_insured_business'
                params['form'] = self.get_asset_business_quote_form(**kwargs)
                if compulsory:
                    params['table'] = self.get_non_life_quote_compulsory_business_benefit_table(**kwargs)
                else:
                    params['table'] = self.get_non_life_quote_optional_business_benefit_table(**kwargs)
                html += self.get_benefit_card(**params)

            elif asset_type_id == EMPLOYEE:
                kwargs['action_button_text'] = 'Add Employee'
                kwargs['action_post_target'] = '/policy/save_quote_asset_employee'
                kwargs['form_id'] = f'{form_id_title}_employee_form'
                params['form'] = self.get_entity_person_insured_quote_form(**kwargs)
                if compulsory:
                    params['table'] = self.get_non_life_quote_compulsory_employee_benefit_table(**kwargs)
                else:
                    params['table'] = self.get_non_life_quote_optional_employee_benefit_table(**kwargs)
                html += self.get_benefit_card(**params)

            elif asset_type_id == PROPERTY:
                kwargs['action_button_text'] = 'Add Property'
                kwargs['action_post_target'] = '/policy/save_property'
                kwargs['form_id'] = f'{form_id_title}_form_insured_property'
                params['form'] = self.get_asset_property_quote_form(**kwargs)
                if compulsory:
                    params['table'] = self.get_non_life_quote_compulsory_property_benefit_table(**kwargs)
                else:
                    params['table'] = self.get_non_life_quote_optional_property_benefit_table(**kwargs)
                html += self.get_benefit_card(**params)

            elif asset_type_id == VEHICLE:
                kwargs['action_button_text'] = 'Add Vehicle'
                kwargs['action_post_target'] = '/policy/save_vehicle'
                kwargs['form_id'] = f'{form_id_title}_form_insured_vehicle'
                params['form'] = self.get_asset_vehicle_quote_form(**kwargs)
                if compulsory:
                    params['table'] = self.get_non_life_quote_compulsory_vehicle_benefit_table(**kwargs)
                else:
                    params['table'] = self.get_non_life_quote_optional_vehicle_benefit_table(**kwargs)
                html += self.get_benefit_card(**params)

            elif asset_type_id == LANDLORD:
                kwargs['action_button_text'] = 'Add Landlord'
                kwargs['action_post_target'] = '/policy/save_landlord'
                kwargs['form_id'] = f'{form_id_title}_form_insured_landlord'
                params['form'] = self.get_asset_landlord_quote_form(**kwargs)
                if compulsory:
                    params['table'] = self.get_non_life_quote_compulsory_landlord_benefit_table(**kwargs)
                else:
                    params['table'] = self.get_non_life_quote_optional_landlord_benefit_table(**kwargs)
                html += self.get_benefit_card(**params)

        return html

    def get_benefit_card(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_benefit_card: No policy_id in kwargs')
            return ''

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('get_benefit_card: No product_benefit_id in kwargs')

        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_benefit_card: No product_id in kwargs')
            return ''

        benefit_title = kwargs.get('benefit_title', '')
        if not benefit_title:
            log.warning('get_benefit_card: No benefit_title in kwargs')
            return ''

        form_html = ''
        form = kwargs.get('form', None)
        if form:
            form_html = f"""
            <div class="my-3">
                <hr>
                {form}
            </div>
            """
        table = kwargs.get('table', '')
        if not form and not table:
            return ''
        html = f"""
        <div class="row">
            <div class="card pb-3">
                <div class="card-header">
                    <div class="row d-flex align-items-center">
                        <div class="col-md-6">
                            <h4 class="card-title">{benefit_title}</h4>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    {form_html}
                    {table}
                </div>
            </div>
        </div>
        """
        return html

# Compulsory Non Life Asset - Business

    def get_non_life_quote_compulsory_business_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_compulsory_quote_life_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_business_data(policy_id, compulsory=True)
        return self.get_non_life_quote_business_benefit_table(dbase_query)

    def get_non_life_quote_business_benefit_table(self, dbase_query=[], *args, **kwargs):
        if not dbase_query:
            return ''

        outputlist = []
        for item in dbase_query:
            benefit = item.Benefit

            insured = item.PolicyBenefitInsuredAssetBusiness

            policy_benefit = item.PolicyBenefit

            premium, sum_insured = self.get_benefit_premium_html(policy_benefit, benefit, policy_benefit.policy_id)

            action = ''
            if not benefit.is_compulsory and not benefit.is_main_benefit:
                action = f"""<button type="button" class="btn btn-primary remove_optional_policy_benefit"
                    data-policy_benefit_id="{policy_benefit.id}" data-policy_id="{policy_benefit.policy_id}" data-product_id="{benefit.product_id}">Remove</button>
                """
            outputlist.append({
            'benefit': benefit.name,
            'turnover': get_currency_by_locale(insured.turnover, cents=False),
            'activity': insured.activity,
            'sum_insured': sum_insured,
            'premium': premium,
            'action': action,
        })
        dbcolumnlist=[
            'benefit',
            'turnover',
            'activity',
            'sum_insured',
            'premium',
            'action',
        ]
        theadlist=[
            'Benefit',
            'Turnover',
            'Activity',
            'Sum Insured',
            'Premium',
            '',
        ]
        tdclasslist = [
            'w-25',
            '',
            '',
            'w-15',
            'w-10',
            'w-10 text-right',
        ]

        if not outputlist:
            return ''
        javascript = """
        <script src=''>
            $('.remove_optional_policy_benefit').click(function(){
                var kwargs = $(this).data();
                $.post('/policy/delete_policy_benefit_record?', kwargs, function(data){
                    $('#div_optional_benefits_card').load('/policy/get_optional_benefits_card?', kwargs, function(data){
                        return false;
                    });
                    return false;
                });
            });
        </script>
        """
        return build_html_table(outputlist, dbcolumnlist, theadlist, f"benefit_table", tdclasslist) + javascript

    def get_asset_business_quote_form(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_asset_business_quote_form_inputs: No policy_id in kwargs')
            return ''

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('get_asset_business_quote_form_inputs: No product_benefit_id in kwargs')
            return ''

        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_asset_business_quote_form_inputs: No product_id in kwargs')
            return ''

        form_id = kwargs.get('form_id', 'form_insured_business')

        hidden_policy_dict = {
            'input_type': 'widget',
            'widget': get_hidden_input(**{'id': 'policy_id', 'value': policy_id})
            }
        hidden_product_benefit_dict = {
            'input_type': 'widget',
            'widget': get_hidden_input(**{'id': 'product_benefit_id', 'value': product_benefit_id})
            }

        turnover_dict = {
            'input_wrapper_class': 'col',
            'label_attrs': 'required',
            'input_id': 'turnover',
            'label_val': _('Turnover'),
            'input_attrs': 'required',
            'input_type': 'number',
            }
        activity_dict = {
            'input_wrapper_class': 'col',
            'label_attrs': 'required',
            'input_id': 'activity',
            'label_val': _('Activity'),
            'input_attrs': 'required maxlength="50"',
            }
        action_button_text = kwargs.get('action_button_text', 'Add Business')
        action_post_target = kwargs.get('action_post_target', '/policy/save_business')
        action_refresh_target = kwargs.get('action_refresh_target', '/policy/get_compulsory_benefits_html')
        action_refresh_container = kwargs.get('action_refresh_container', 'div_compulsory_benefits')
        action_dict = {
            'input_type': 'widget',
            'widget': f"""
                <div>
                    <button type="button" id="saveBtn_{product_benefit_id}"
                        data-form="{form_id}"
                        data-post_target="{action_post_target}"
                        data-refresh_target="{action_refresh_target}"
                        data-refresh_container="{action_refresh_container}"
                        data-policy_id="{policy_id}"
                        data-product_benefit_id="{product_benefit_id}"
                        data-product_id="{product_id}"
                        class="btn btn-primary mt-0">{action_button_text}
                    </button>
                </div>
            """
            }
        extra_content = kwargs.get('extra_content', '')
        extra_dict = {
            'input_type': 'widget',
            'widget': extra_content
            }
        params_list = [
            hidden_policy_dict,
            hidden_product_benefit_dict,
            turnover_dict,
            activity_dict,
            action_dict,
            extra_dict,
        ]
        javascript = f"""
        <script src=''>
            var benefitId = {product_benefit_id};
        """
        javascript += """
            $('#saveBtn_'+benefitId).click(function(){
                var kwargs = $(this).data();
                var individualForm = $('#' + kwargs.form)
                setFormValidation(individualForm);
                var valid = FormIsValid(individualForm);
                if (valid){
                    var formserial = getFormData(individualForm);
                    $.post(kwargs.post_target, formserial, function(data){
                        var result = JSON.parse(data);
                        if (result.success === true){
                            $('#'+kwargs.refresh_container).load(kwargs.refresh_target, kwargs, function(params){
                                $('#div_optional_benefits_card').load('/policy/get_optional_benefits_card?', kwargs, function(data){
                                    return false;
                                });
                            });
                            return false;
                        } else {
                            showNotification(result.status, result.message);
                            return false;
                        }
                    });
                }
            });
            createDatepicker('.date_field');
        </script>
        """
        form_class = kwargs.get('form_class', 'd-flex')
        return build_html_form(form_id, params_list, form_class) + javascript

    @expose()
    def save_business(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('save_individual_insured: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy', 'status': 'danger'})

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('save_individual_insured: No product_benefit_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a benefit', 'status': 'danger'})

        turnover = kwargs.get('turnover', None)
        if not turnover:
            log.warning('save_individual_insured: No turnover in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'Turnover field needs to be completed', 'status': 'danger'})

        activity = kwargs.get('activity', None)
        if not activity:
            log.warning('save_individual_insured: No activity in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'Activity field needs to be completed', 'status': 'danger'})

        benefit = Benefit.by_id(product_benefit_id)
        if not benefit:
            log.warning('save_individual_insured: Benefit could not be found for product_benefit_id provided')
            return json.dumps({'success': False, 'message': 'We could not identify the benefit from the data supplied', 'status': 'danger'})

        ben_insured_non_life = BenefitInsuredNonLife.by_attr_first('benefit_id', benefit.id)
        kwargs['benefit'] = benefit
        result = self.create_policy_benefit_insured_asset_business(**kwargs)
        return json.dumps({'success': True, 'message': 'Save successful', 'status': 'success'})

    def create_policy_benefit_insured_asset_business(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        benefit = kwargs.get('benefit', None)
        if not benefit:
            log.warning('create_policy_benefit_insured_life: Benefit could not be found for product_benefit_id provided')
            return json.dumps({'success': False, 'message': 'We could not identify the benefit from the data supplied', 'status': 'danger'})

        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('create_policy_benefit_insured_life: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy', 'status': 'danger'})

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('create_policy_benefit_insured_life: No product_benefit_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a benefit', 'status': 'danger'})

        turnover = kwargs.get('turnover', None)
        if not turnover:
            log.warning('save_individual_insured: No turnover in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'Turnover field needs to be completed', 'status': 'danger'})

        activity = kwargs.get('activity', None)
        if not activity:
            log.warning('save_individual_insured: No activity in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'Activity field needs to be completed', 'status': 'danger'})

        policy_benefit = self.create_policy_benefit(policy_id, benefit)

        kwargs['policy_benefit'] = policy_benefit
        result = self.save_policy_benefit_insured_business(**kwargs)
        if not result:
            return {'success': False, 'message': 'Could not create the business'}
        return {'success': True}

    def save_policy_benefit_insured_business(self, *args, **kwargs):
        policy_benefit = kwargs.get('policy_benefit', None)
        if not policy_benefit:
            log.warning('save_policy_benefit_insured_business: No policy_benefit in kwargs')
            return False

        benefit = kwargs.get('benefit', None)
        if not benefit:
            log.warning('save_policy_benefit_insured_business: No benefit in kwargs')
            return False

        item = PolicyBenefitInsuredAsset.by_attr_first('policy_benefit_id', policy_benefit.id)
        if not item:
            item = PolicyBenefitInsuredAsset()
            item.policy_benefit_id = policy_benefit.id
            item.asset_type_id = BUSINESS
            DBSession.add(item)
            DBSession.flush()

        # IMPORTANT TJAART: This needs to be handled
        rate_table_line_item_id = None

        asset = PolicyBenefitInsuredAssetBusiness.by_attr_first('policy_benefit_insured_asset_id', item.id)
        if asset:
            asset.rate_table_line_item_business_id = rate_table_line_item_id
            DBSession.flush()

        else:
            asset = PolicyBenefitInsuredAssetBusiness()
            asset.policy_benefit_insured_asset_id = item.id
            asset.rate_table_line_item_business_id = rate_table_line_item_id
            asset.turnover = kwargs.get('turnover', None)
            asset.activity = kwargs.get('activity', None)
            DBSession.add(asset)
            DBSession.flush()
        return True

# Compulsory Non Life Asset - Employee

    def get_non_life_quote_compulsory_employee_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_compulsory_quote_life_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_employee_data(policy_id, compulsory=True)
        return self.get_non_life_quote_employee_benefit_table(dbase_query)

    def get_non_life_quote_employee_benefit_table(self, dbase_query=[], *args, **kwargs):
        if not dbase_query:
            return ''

        outputlist = []
        for item in dbase_query:
            benefit = item.Benefit

            insured = item.PolicyBenefitInsuredAssetEmployee

            policy_benefit = item.PolicyBenefit

            premium, sum_insured = self.get_benefit_premium_html(policy_benefit, benefit, policy_benefit.policy_id)

            sane_dob = date_to_str(insured.date_of_birth, dateformat='%d-%m-%Y')
            action = ''
            if not benefit.is_compulsory and not benefit.is_main_benefit:
                action = f"""<button type="button" class="btn btn-primary remove_optional_policy_benefit"
                    data-policy_benefit_id="{policy_benefit.id}" data-policy_id="{policy_benefit.policy_id}" data-product_id="{benefit.product_id}">Remove</button>
                """
            outputlist.append({
            'benefit': benefit.name,
            'date_of_birth': sane_dob,
            'sum_insured': sum_insured,
            'premium': premium,
            'action': action,
        })
        dbcolumnlist=[
            'benefit',
            'date_of_birth',
            'sum_insured',
            'premium',
            'action',
        ]
        theadlist=[
            'Benefit',
            'Date of Birth',
            'Sum Insured',
            'Premium',
            '',
        ]
        tdclasslist = [
            'w-25',
            '',
            'w-15',
            'w-10',
            'w-10 text-right',
        ]

        if not outputlist:
            return ''
        javascript = """
        <script src=''>
            $('.remove_optional_policy_benefit').click(function(){
                var kwargs = $(this).data();
                $.post('/policy/delete_policy_benefit_record?', kwargs, function(data){
                    $('#div_optional_benefits_card').load('/policy/get_optional_benefits_card?', kwargs, function(data){
                        return false;
                    });
                    return false;
                });
            });
        </script>
        """
        return build_html_table(outputlist, dbcolumnlist, theadlist, f"benefit_table", tdclasslist) + javascript

    @expose()
    def save_quote_asset_employee(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('save_quote_asset_employee: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy', 'status': 'danger'})

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('save_quote_asset_employee: No product_benefit_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a benefit', 'status': 'danger'})

        date_of_birth = kwargs.get('date_of_birth', None)
        if not date_of_birth:
            log.warning('save_quote_asset_employee: No date_of_birth in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'Date of birth field needs to be completed', 'status': 'danger'})

        benefit = Benefit.by_id(product_benefit_id)
        if not benefit:
            log.warning('save_quote_asset_employee: Benefit could not be found for product_benefit_id provided')
            return json.dumps({'success': False, 'message': 'We could not identify the benefit from the data supplied', 'status': 'danger'})

        ben_insured_non_life = BenefitInsuredNonLife.by_attr_first('benefit_id', benefit.id)
        kwargs['benefit'] = benefit
        result = self.create_policy_benefit_insured_asset_employee(**kwargs)
        return json.dumps({'success': True, 'message': 'Save successful', 'status': 'success'})

    def create_policy_benefit_insured_asset_employee(self, *args, **kwargs):
        usernow = request.identity.get('user', {})

        benefit = kwargs.get('benefit', None)
        if not benefit:
            log.warning('create_policy_benefit_insured_life: Benefit could not be found for product_benefit_id provided')
            return json.dumps({'success': False, 'message': 'We could not identify the benefit from the data supplied', 'status': 'danger'})

        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('create_policy_benefit_insured_life: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy', 'status': 'danger'})

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('create_policy_benefit_insured_life: No product_benefit_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a benefit', 'status': 'danger'})

        date_of_birth = kwargs.get('date_of_birth', None)
        if not date_of_birth:
            log.warning('create_policy_benefit_insured_life: No date_of_birth in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'Date of birth field needs to be completed', 'status': 'danger'})

        policy_benefit = self.create_policy_benefit(policy_id, benefit)

        kwargs['policy_benefit'] = policy_benefit
        kwargs['date_of_birth'] = str_to_date(date_of_birth)
        result = self.save_policy_benefit_insured_employee(**kwargs)
        if not result:
            return {'success': False, 'message': 'Could not create the employee'}
        return {'success': True}

    def save_policy_benefit_insured_employee(self, *args, **kwargs):
        policy_benefit = kwargs.get('policy_benefit', None)
        if not policy_benefit:
            log.warning('save_policy_benefit_insured_employee: No policy_benefit in kwargs')
            return False

        benefit = kwargs.get('benefit', None)
        if not benefit:
            log.warning('save_policy_benefit_insured_employee: No benefit in kwargs')
            return False

        date_of_birth = kwargs.get('date_of_birth', None)
        if not date_of_birth:
            log.warning('save_policy_benefit_insured_employee: No date_of_birth in kwargs')
            return False

        # IMPORTANT TJAART: This needs to be handled
        rate_table_line_item_id = None

        item = PolicyBenefitInsuredAsset.by_attr_first('policy_benefit_id', policy_benefit.id)
        if not item:
            item = PolicyBenefitInsuredAsset()
            item.policy_benefit_id = policy_benefit.id
            item.asset_type_id = EMPLOYEE
            DBSession.add(item)
            DBSession.flush()

        asset = PolicyBenefitInsuredAssetEmployee.by_attr_first('policy_benefit_insured_asset_id', item.id)
        if asset:
            asset.rate_table_line_item_employee_id = rate_table_line_item_id
            DBSession.flush()

        else:
            asset = PolicyBenefitInsuredAssetEmployee()
            asset.policy_benefit_insured_asset_id = item.id
            asset.rate_table_line_item_employee_id = rate_table_line_item_id
            asset.date_of_birth = date_of_birth
            DBSession.add(asset)
            DBSession.flush()
        return True

# Compulsory Non Life Asset - Property

    def get_non_life_quote_compulsory_property_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_non_life_quote_compulsory_property_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_property_data(policy_id, compulsory=True)
        return self.get_non_life_quote_property_benefit_table(dbase_query)

    def get_non_life_quote_property_benefit_table(self, dbase_query=[], application=False, *args, **kwargs):
        if not dbase_query:
            return ''

        outputlist = []
        for item in dbase_query:
            benefit = item.Benefit

            insured = item.PolicyBenefitInsuredAssetProperty

            policy_benefit = item.PolicyBenefit

            premium, sum_insured = self.get_benefit_premium_html(policy_benefit, benefit, policy_benefit.policy_id)

            action = ''
            if not benefit.is_compulsory and not benefit.is_main_benefit and not application:
                action = f"""<button type="button" class="btn btn-primary remove_optional_policy_benefit"
                    data-policy_benefit_id="{policy_benefit.id}" data-policy_id="{policy_benefit.policy_id}" data-product_id="{benefit.product_id}">Remove</button>
                """
            outputlist.append({
            'benefit': benefit.name,
            'turnover': get_currency_by_locale(insured.turnover, cents=False),
            'property_address': insured.property_address,
            'sum_insured': sum_insured,
            'premium': premium,
            'action': action,
        })
        dbcolumnlist=[
            'benefit',
            'turnover',
            'property_address',
            'sum_insured',
            'premium',
            'action',
        ]
        theadlist=[
            'Benefit',
            'Turnover',
            'Address',
            'Sum Insured',
            'Premium',
            '',
        ]
        tdclasslist = [
            'w-25',
            '',
            '',
            'w-15',
            'w-10',
            'w-10 text-right',
        ]

        if not outputlist:
            return ''
        javascript = """
        <script src=''>
            $('.remove_optional_policy_benefit').click(function(){
                var kwargs = $(this).data();
                $.post('/policy/delete_policy_benefit_record?', kwargs, function(data){
                    $('#div_optional_benefits_card').load('/policy/get_optional_benefits_card?', kwargs, function(data){
                        return false;
                    });
                    return false;
                });
            });
        </script>
        """
        return build_html_table(outputlist, dbcolumnlist, theadlist, f"benefit_table", tdclasslist) + javascript

    def get_asset_property_quote_form(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_asset_property_quote_form: No policy_id in kwargs')
            return ''

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('get_asset_property_quote_form: No product_benefit_id in kwargs')
            return ''

        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_asset_property_quote_form: No product_id in kwargs')
            return ''

        form_id = kwargs.get('form_id', 'form_insured_property')

        hidden_policy_dict = {
            'input_type': 'widget',
            'widget': get_hidden_input(**{'id': 'policy_id', 'value': policy_id})
            }
        hidden_product_benefit_dict = {
            'input_type': 'widget',
            'widget': get_hidden_input(**{'id': 'product_benefit_id', 'value': product_benefit_id})
            }

        turnover_dict = {
            'input_wrapper_class': 'col',
            'label_attrs': 'required',
            'input_id': 'turnover',
            'label_val': _('Turnover'),
            'input_attrs': 'required',
            }
        property_address_dict = {
            'input_wrapper_class': 'col',
            'label_attrs': 'required',
            'input_id': 'property_address',
            'label_val': _('Property Address'),
            'input_attrs': 'required maxlength="200"',
            }
        action_button_text = kwargs.get('action_button_text', 'Add Property')
        action_post_target = kwargs.get('action_post_target', '/policy/save_property')
        action_refresh_target = kwargs.get('action_refresh_target', '/policy/get_compulsory_benefits_html')
        action_refresh_container = kwargs.get('action_refresh_container', 'div_compulsory_benefits')
        action_dict = {
            'input_type': 'widget',
            'widget': f"""
                <div>
                    <button type="button" id="saveBtn_{product_benefit_id}"
                        data-form="{form_id}"
                        data-post_target="{action_post_target}"
                        data-refresh_target="{action_refresh_target}"
                        data-refresh_container="{action_refresh_container}"
                        data-policy_id="{policy_id}"
                        data-product_benefit_id="{product_benefit_id}"
                        data-product_id="{product_id}"
                        class="btn btn-primary mt-0">{action_button_text}
                    </button>
                </div>
            """
            }
        extra_content = kwargs.get('extra_content', '')
        extra_dict = {
            'input_type': 'widget',
            'widget': extra_content
            }
        params_list = [
            hidden_policy_dict,
            hidden_product_benefit_dict,
            turnover_dict,
            property_address_dict,
            action_dict,
            extra_dict,
        ]
        javascript = f"""
        <script src=''>
            var benefitId = {product_benefit_id};
        """
        javascript += """
            $('#saveBtn_'+benefitId).click(function(){
                var kwargs = $(this).data();
                var individualForm = $('#' + kwargs.form)
                setFormValidation(individualForm);
                var valid = FormIsValid(individualForm);
                if (valid){
                    var formserial = getFormData(individualForm);
                    $.post(kwargs.post_target, formserial, function(data){
                        var result = JSON.parse(data);
                        if (result.success === true){
                            $('#'+kwargs.refresh_container).load(kwargs.refresh_target, kwargs, function(params){
                                $('#div_optional_benefits_card').load('/policy/get_optional_benefits_card?', kwargs, function(data){
                                    return false;
                                });
                            });
                            return false;
                        } else {
                            showNotification(result.status, result.message);
                            return false;
                        }
                    });
                }
            });
            createDatepicker('.date_field');
        </script>
        """
        form_class = kwargs.get('form_class', 'd-flex')
        return build_html_form(form_id, params_list, form_class) + javascript

    @expose()
    def save_property(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('save_individual_insured: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy', 'status': 'danger'})

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('save_individual_insured: No product_benefit_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a benefit', 'status': 'danger'})

        turnover = kwargs.get('turnover', None)
        if not turnover:
            log.warning('save_individual_insured: No turnover in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'Turnover field needs to be completed', 'status': 'danger'})

        property_address = kwargs.get('property_address', None)
        if not property_address:
            log.warning('save_individual_insured: No property_address in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'Property Address field needs to be completed', 'status': 'danger'})

        benefit = Benefit.by_id(product_benefit_id)
        if not benefit:
            log.warning('save_individual_insured: Benefit could not be found for product_benefit_id provided')
            return json.dumps({'success': False, 'message': 'We could not identify the benefit from the data supplied', 'status': 'danger'})

        ben_insured_non_life = BenefitInsuredNonLife.by_attr_first('benefit_id', benefit.id)
        kwargs['benefit'] = benefit
        result = self.create_policy_benefit_insured_asset_property(**kwargs)
        return json.dumps({'success': True, 'message': 'Save successful', 'status': 'success'})

    def create_policy_benefit_insured_asset_property(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        benefit = kwargs.get('benefit', None)
        if not benefit:
            log.warning('create_policy_benefit_insured_life: Benefit could not be found for product_benefit_id provided')
            return json.dumps({'success': False, 'message': 'We could not identify the benefit from the data supplied', 'status': 'danger'})

        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('create_policy_benefit_insured_life: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy', 'status': 'danger'})

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('create_policy_benefit_insured_life: No product_benefit_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a benefit', 'status': 'danger'})

        turnover = kwargs.get('turnover', None)
        if not turnover:
            log.warning('save_individual_insured: No turnover in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'Turnover field needs to be completed', 'status': 'danger'})

        property_address = kwargs.get('property_address', None)
        if not property_address:
            log.warning('save_individual_insured: No property_address in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'Property Address field needs to be completed', 'status': 'danger'})

        policy_benefit = self.create_policy_benefit(policy_id, benefit)

        kwargs['policy_benefit'] = policy_benefit
        result = self.save_policy_benefit_insured_property(**kwargs)
        if not result:
            return {'success': False, 'message': 'Could not create the vehicle'}
        return {'success': True}

    def save_policy_benefit_insured_property(self, *args, **kwargs):
        policy_benefit = kwargs.get('policy_benefit', None)
        if not policy_benefit:
            log.warning('save_policy_benefit_insured_property: No policy_benefit in kwargs')
            return False

        benefit = kwargs.get('benefit', None)
        if not benefit:
            log.warning('save_policy_benefit_insured_property: No benefit in kwargs')
            return False

        item = PolicyBenefitInsuredAsset.by_attr_first('policy_benefit_id', policy_benefit.id)
        if not item:
            item = PolicyBenefitInsuredAsset()
            item.policy_benefit_id = policy_benefit.id
            item.asset_type_id = PROPERTY
            DBSession.add(item)
            DBSession.flush()

        # IMPORTANT TJAART: This needs to be handles=d
        rate_table_line_item_id = None

        asset = PolicyBenefitInsuredAssetProperty.by_attr_first('policy_benefit_insured_asset_id', item.id)
        if asset:
            asset.rate_table_line_item_property_id = rate_table_line_item_id
            DBSession.flush()

        else:
            asset = PolicyBenefitInsuredAssetProperty()
            asset.policy_benefit_insured_asset_id = item.id
            asset.rate_table_line_item_property_id = rate_table_line_item_id
            asset.turnover = kwargs.get('turnover', None)
            asset.property_address = kwargs.get('property_address', None)
            DBSession.add(asset)
            DBSession.flush()
        return True

# Compulsory Non Life Asset - Vehicle

    def get_non_life_quote_compulsory_vehicle_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_compulsory_quote_life_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_vehicle_data(policy_id, compulsory=True)
        return self.get_non_life_quote_vehicle_benefit_table(dbase_query)

    def get_non_life_quote_vehicle_benefit_table(self, dbase_query=[], application=False, *args, **kwargs):
        if not dbase_query:
            return ''

        outputlist = []
        for item in dbase_query:
            benefit = item.Benefit

            insured = item.PolicyBenefitInsuredAssetVehicle

            policy_benefit = item.PolicyBenefit

            premium, sum_insured = self.get_benefit_premium_html(policy_benefit, benefit, policy_benefit.policy_id)

            action = ''
            if not benefit.is_compulsory and not benefit.is_main_benefit and not application:
                action = f"""<button type="button" class="btn btn-primary remove_optional_policy_benefit"
                    data-policy_benefit_id="{policy_benefit.id}" data-policy_id="{policy_benefit.policy_id}" data-product_id="{benefit.product_id}">Remove</button>
                """
            outputlist.append({
            'benefit': benefit.name,
            'vin_number': insured.vin_number,
            'registration_number': insured.registration_number,
            'sum_insured': sum_insured,
            'premium': premium,
            'action': action,
        })
        dbcolumnlist=[
            'benefit',
            'vin_number',
            'registration_number',
            'sum_insured',
            'premium',
            'action',
        ]
        theadlist=[
            'Benefit',
            'VIN Number',
            'Reg. Number',
            'Sum Insured',
            'Premium',
            '',
        ]
        tdclasslist = [
            'w-25',
            '',
            '',
            'w-15',
            'w-10',
            'w-10 text-right',
        ]

        if not outputlist:
            return ''
        javascript = """
        <script src=''>
            $('.remove_optional_policy_benefit').click(function(){
                var kwargs = $(this).data();
                $.post('/policy/delete_policy_benefit_record?', kwargs, function(data){
                    $('#div_optional_benefits_card').load('/policy/get_optional_benefits_card?', kwargs, function(data){
                        return false;
                    });
                    return false;
                });
            });
        </script>
        """
        return build_html_table(outputlist, dbcolumnlist, theadlist, f"benefit_table", tdclasslist) + javascript

    def get_asset_vehicle_quote_form(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_asset_business_quote_form_inputs: No policy_id in kwargs')
            return ''

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('get_asset_business_quote_form_inputs: No product_benefit_id in kwargs')
            return ''

        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_asset_business_quote_form_inputs: No product_id in kwargs')
            return ''

        form_id = kwargs.get('form_id', 'form_insured_vehicle')

        hidden_policy_dict = {
            'input_type': 'widget',
            'widget': get_hidden_input(**{'id': 'policy_id', 'value': policy_id})
            }
        hidden_product_benefit_dict = {
            'input_type': 'widget',
            'widget': get_hidden_input(**{'id': 'product_benefit_id', 'value': product_benefit_id})
            }

        vin_dict = {
            'input_wrapper_class': 'col',
            'label_attrs': 'required',
            'input_id': 'vin_number',
            'label_val': _('VIN Number'),
            'input_attrs': 'required',
            }
        reg_dict = {
            'input_wrapper_class': 'col',
            'label_attrs': 'required',
            'input_id': 'registration_number',
            'label_val': _('Registration Number'),
            'input_attrs': 'required maxlength="50"',
            }
        action_button_text = kwargs.get('action_button_text', 'Add Vehicle')
        action_post_target = kwargs.get('action_post_target', '/policy/save_vehicle')
        action_refresh_target = kwargs.get('action_refresh_target', '/policy/get_compulsory_benefits_html')
        action_refresh_container = kwargs.get('action_refresh_container', 'div_compulsory_benefits')
        action_dict = {
            'input_type': 'widget',
            'widget': f"""
                <div>
                    <button type="button" id="saveBtn_{product_benefit_id}"
                        data-form="{form_id}"
                        data-post_target="{action_post_target}"
                        data-refresh_target="{action_refresh_target}"
                        data-refresh_container="{action_refresh_container}"
                        data-policy_id="{policy_id}"
                        data-product_benefit_id="{product_benefit_id}"
                        data-product_id="{product_id}"
                        class="btn btn-primary mt-0">{action_button_text}
                    </button>
                </div>
            """
            }
        extra_content = kwargs.get('extra_content', '')
        extra_dict = {
            'input_type': 'widget',
            'widget': extra_content
            }
        params_list = [
            hidden_policy_dict,
            hidden_product_benefit_dict,
            vin_dict,
            reg_dict,
            action_dict,
            extra_dict,
        ]
        javascript = f"""
        <script src=''>
            var benefitId = {product_benefit_id};
        """
        javascript += """
            $('#saveBtn_'+benefitId).click(function(){
                var kwargs = $(this).data();
                var individualForm = $('#' + kwargs.form)
                setFormValidation(individualForm);
                var valid = FormIsValid(individualForm);
                if (valid){
                    var formserial = getFormData(individualForm);
                    $.post(kwargs.post_target, formserial, function(data){
                        var result = JSON.parse(data);
                        if (result.success === true){
                            $('#'+kwargs.refresh_container).load(kwargs.refresh_target, kwargs, function(params){
                                $('#div_optional_benefits_card').load('/policy/get_optional_benefits_card?', kwargs, function(data){
                                    return false;
                                });
                            });
                            return false;
                        } else {
                            showNotification(result.status, result.message);
                            return false;
                        }
                    });
                }
            });
            createDatepicker('.date_field');
        </script>
        """
        form_class = kwargs.get('form_class', 'd-flex')
        return build_html_form(form_id, params_list, form_class) + javascript

    @expose()
    def save_vehicle(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('save_individual_insured: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy', 'status': 'danger'})

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('save_individual_insured: No product_benefit_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a benefit', 'status': 'danger'})

        vin_number = kwargs.get('vin_number', None)
        if not vin_number:
            log.warning('save_individual_insured: No vin_number in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'VIN Number field needs to be completed', 'status': 'danger'})

        registration_number = kwargs.get('registration_number', None)
        if not registration_number:
            log.warning('save_individual_insured: No registration_number in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'Registration Number field needs to be completed', 'status': 'danger'})

        benefit = Benefit.by_id(product_benefit_id)
        if not benefit:
            log.warning('save_individual_insured: Benefit could not be found for product_benefit_id provided')
            return json.dumps({'success': False, 'message': 'We could not identify the benefit from the data supplied', 'status': 'danger'})

        ben_insured_non_life = BenefitInsuredNonLife.by_attr_first('benefit_id', benefit.id)
        kwargs['benefit'] = benefit
        result = self.create_policy_benefit_insured_asset_vehicle(**kwargs)

        return json.dumps({'success': True, 'message': 'Save successful', 'status': 'success'})

    def create_policy_benefit_insured_asset_vehicle(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        benefit = kwargs.get('benefit', None)
        if not benefit:
            log.warning('create_policy_benefit_insured_life: Benefit could not be found for product_benefit_id provided')
            return json.dumps({'success': False, 'message': 'We could not identify the benefit from the data supplied', 'status': 'danger'})

        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('create_policy_benefit_insured_life: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy', 'status': 'danger'})

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('create_policy_benefit_insured_life: No product_benefit_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a benefit', 'status': 'danger'})

        vin_number = kwargs.get('vin_number', None)
        if not vin_number:
            log.warning('save_individual_insured: No vin_number in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'VIN Number field needs to be completed', 'status': 'danger'})

        registration_number = kwargs.get('registration_number', None)
        if not registration_number:
            log.warning('save_individual_insured: No registration_number in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'Registration Number field needs to be completed', 'status': 'danger'})

        policy_benefit = self.create_policy_benefit(policy_id, benefit)

        kwargs['policy_benefit'] = policy_benefit
        result = self.save_policy_benefit_insured_vehicle(**kwargs)
        if not result:
            return {'success': False, 'message': 'Could not create the vehicle'}
        return {'success': True}

    def save_policy_benefit_insured_vehicle(self, *args, **kwargs):
        policy_benefit = kwargs.get('policy_benefit', None)
        if not policy_benefit:
            log.warning('save_policy_benefit_insured_vehicle: No policy_benefit in kwargs')
            return False

        benefit = kwargs.get('benefit', None)
        if not benefit:
            log.warning('save_policy_benefit_insured_vehicle: No benefit in kwargs')
            return False

        # IMPORTANT TJAART: THIS NEEDS TO BE HANDLED
        rate_table_line_item_id = None

        item = PolicyBenefitInsuredAsset.by_attr_first('policy_benefit_id', policy_benefit.id)
        if not item:
            item = PolicyBenefitInsuredAsset()
            item.policy_benefit_id = policy_benefit.id
            item.asset_type_id = VEHICLE
            DBSession.add(item)
            DBSession.flush()


        line_item = RateTableLineItemVehicle.by_attr_first('id', rate_table_line_item_id)

        asset_vehicle_category_id = line_item.asset_vehicle_category_id if line_item else None

        asset = PolicyBenefitInsuredAssetVehicle.by_attr_first('policy_benefit_insured_asset_id', item.id)
        if asset:
            asset.rate_table_line_item_vehicle_id = rate_table_line_item_id
            asset.asset_vehicle_category_id = asset_vehicle_category_id
            DBSession.flush()

        else:
            asset = PolicyBenefitInsuredAssetVehicle()
            asset.policy_benefit_insured_asset_id = item.id
            asset.rate_table_line_item_vehicle_id = rate_table_line_item_id
            asset.asset_vehicle_category_id = asset_vehicle_category_id
            asset.vin_number = kwargs.get('vin_number', None)
            asset.registration_number = kwargs.get('registration_number', None)
            DBSession.add(asset)
            DBSession.flush()
        return True

    def get_rate_table_selected_vehicle(self, policy_benefit=None, *args, **kwargs):
        if not policy_benefit:
            return ''

        item = PolicyBenefitInsuredAsset.by_attr_first('policy_benefit_id', policy_benefit.id)
        if not item:
            return ''

        asset = PolicyBenefitInsuredAssetVehicle.by_attr_first('policy_benefit_insured_asset_id', item.id)
        if not asset:
            return ''
        return asset.rate_table_line_item_vehicle_id

# Compulsory Non Life Asset - Landlord

    def get_non_life_quote_compulsory_landlord_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_compulsory_quote_life_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_landlord_data(policy_id, compulsory=True)
        return self.get_non_life_quote_landlord_benefit_table(dbase_query)

    def get_non_life_quote_landlord_benefit_table(self, dbase_query=[], application=False, *args, **kwargs):
        if not dbase_query:
            return ''

        outputlist = []
        for item in dbase_query:
            benefit = item.Benefit

            insured = item.PolicyBenefitInsuredAssetLandlord

            policy_benefit = item.PolicyBenefit

            premium, sum_insured = self.get_benefit_premium_html(policy_benefit, benefit, policy_benefit.policy_id)

            action = ''
            if not benefit.is_compulsory and not benefit.is_main_benefit and not application:
                action = f"""<button type="button" class="btn btn-primary remove_optional_policy_benefit"
                    data-policy_benefit_id="{policy_benefit.id}" data-policy_id="{policy_benefit.policy_id}" data-product_id="{benefit.product_id}">Remove</button>
                """
            outputlist.append({
            'benefit': benefit.name,
            'rental_amount': get_currency_by_locale(insured.rental_amount, cents=False),
            'property_address': insured.property_address,
            'sum_insured': sum_insured,
            'premium': premium,
            'action': action,
        })
        dbcolumnlist=[
            'benefit',
            'rental_amount',
            'property_address',
            'sum_insured',
            'premium',
            'action',
        ]
        theadlist=[
            'Benefit',
            'Rental Amount',
            'Property Address',
            'Sum Insured',
            'Premium',
            '',
        ]
        tdclasslist = [
            'w-25',
            '',
            '',
            'w-15',
            'w-10',
            'w-10 text-right',
        ]

        if not outputlist:
            return ''
        javascript = """
        <script src=''>
            $('.remove_optional_policy_benefit').click(function(){
                var kwargs = $(this).data();
                $.post('/policy/delete_policy_benefit_record?', kwargs, function(data){
                    $('#div_optional_benefits_card').load('/policy/get_optional_benefits_card?', kwargs, function(data){
                        return false;
                    });
                    return false;
                });
            });
        </script>
        """
        return build_html_table(outputlist, dbcolumnlist, theadlist, f"benefit_table", tdclasslist) + javascript

    def get_asset_landlord_quote_form(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_asset_business_quote_form_inputs: No policy_id in kwargs')
            return ''

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('get_asset_business_quote_form_inputs: No product_benefit_id in kwargs')
            return ''

        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_asset_business_quote_form_inputs: No product_id in kwargs')
            return ''

        form_id = kwargs.get('form_id', 'form_insured_landlord')

        hidden_policy_dict = {
            'input_type': 'widget',
            'widget': get_hidden_input(**{'id': 'policy_id', 'value': policy_id})
            }
        hidden_product_benefit_dict = {
            'input_type': 'widget',
            'widget': get_hidden_input(**{'id': 'product_benefit_id', 'value': product_benefit_id})
            }

        rental_amount_dict = {
            'input_wrapper_class': 'col',
            'label_attrs': 'required',
            'input_id': 'rental_amount',
            'label_val': _('Rental Amount'),
            'input_attrs': 'required',
            }
        address_dict = {
            'input_wrapper_class': 'col',
            'label_attrs': 'required',
            'input_id': 'property_address',
            'label_val': _('Property Address'),
            'input_attrs': 'required maxlength="200"',
            }
        action_button_text = kwargs.get('action_button_text', 'Add Landlord')
        action_post_target = kwargs.get('action_post_target', '/policy/save_landlord')
        action_refresh_target = kwargs.get('action_refresh_target', '/policy/get_compulsory_benefits_html')
        action_refresh_container = kwargs.get('action_refresh_container', 'div_compulsory_benefits')
        action_dict = {
            'input_type': 'widget',
            'widget': f"""
                <div>
                    <button type="button" id="saveBtn_{product_benefit_id}"
                        data-form="{form_id}"
                        data-post_target="{action_post_target}"
                        data-refresh_target="{action_refresh_target}"
                        data-refresh_container="{action_refresh_container}"
                        data-policy_id="{policy_id}"
                        data-product_benefit_id="{product_benefit_id}"
                        data-product_id="{product_id}"
                        class="btn btn-primary mt-0">{action_button_text}
                    </button>
                </div>
            """
            }
        extra_content = kwargs.get('extra_content', '')
        extra_dict = {
            'input_type': 'widget',
            'widget': extra_content
            }
        params_list = [
            hidden_policy_dict,
            hidden_product_benefit_dict,
            rental_amount_dict,
            address_dict,
            action_dict,
            extra_dict,
        ]
        javascript = f"""
        <script src=''>
            var benefitId = {product_benefit_id};
        """
        javascript += """
            $('#saveBtn_'+benefitId).click(function(){
                var kwargs = $(this).data();
                var individualForm = $('#' + kwargs.form)
                setFormValidation(individualForm);
                var valid = FormIsValid(individualForm);
                if (valid){
                    var formserial = getFormData(individualForm);
                    $.post(kwargs.post_target, formserial, function(data){
                        var result = JSON.parse(data);
                        if (result.success === true){
                            $('#'+kwargs.refresh_container).load(kwargs.refresh_target, kwargs, function(params){
                                $('#div_optional_benefits_card').load('/policy/get_optional_benefits_card?', kwargs, function(data){
                                    return false;
                                });
                            });
                            return false;
                        } else {
                            showNotification(result.status, result.message);
                            return false;
                        }
                    });
                }
            });
            createDatepicker('.date_field');
        </script>
        """
        form_class = kwargs.get('form_class', 'd-flex')
        return build_html_form(form_id, params_list, form_class) + javascript

    @expose()
    def save_landlord(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('save_landlord: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy', 'status': 'danger'})

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('save_landlord: No product_benefit_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a benefit', 'status': 'danger'})

        rental_amount = kwargs.get('rental_amount', None)
        if not rental_amount:
            log.warning('save_landlord: No rental_amount in kwargs')
            return json.dumps({'success': False, 'message': 'Please supply a value for the rental amount field'})

        property_address = kwargs.get('property_address', None)
        if not property_address:
            log.warning('save_landlord: No property_address in kwargs')
            return json.dumps({'success': False, 'message': 'Please supply a value for the property address field'})

        benefit = Benefit.by_id(product_benefit_id)
        if not benefit:
            log.warning('save_landlord: Benefit could not be found for product_benefit_id provided')
            return json.dumps({'success': False, 'message': 'We could not identify the benefit from the data supplied', 'status': 'danger'})

        ben_insured_non_life = BenefitInsuredNonLife.by_attr_first('benefit_id', benefit.id)
        kwargs['benefit'] = benefit
        result = self.create_policy_benefit_insured_asset_landlord(**kwargs)

        return json.dumps({'success': True, 'message': 'Save successful', 'status': 'success'})

    def create_policy_benefit_insured_asset_landlord(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        benefit = kwargs.get('benefit', None)
        if not benefit:
            log.warning('create_policy_benefit_insured_asset_landlord: Benefit could not be found for product_benefit_id provided')
            return json.dumps({'success': False, 'message': 'We could not identify the benefit from the data supplied', 'status': 'danger'})

        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('create_policy_benefit_insured_asset_landlord: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy', 'status': 'danger'})

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('create_policy_benefit_insured_asset_landlord: No product_benefit_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a benefit', 'status': 'danger'})

        rental_amount = kwargs.get('rental_amount', None)
        if not rental_amount:
            log.warning('create_policy_benefit_insured_asset_landlord: No rental_amount in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'Rental Amount field needs to be completed', 'status': 'danger'})

        property_address = kwargs.get('property_address', None)
        if not property_address:
            log.warning('create_policy_benefit_insured_asset_landlord: No property_address in kwargs/formserial')
            return json.dumps({'success': False, 'message': 'Property address field needs to be completed', 'status': 'danger'})

        policy_benefit = self.create_policy_benefit(policy_id, benefit)

        kwargs['policy_benefit'] = policy_benefit
        result = self.save_policy_benefit_insured_landlord(**kwargs)
        if not result:
            return {'success': False, 'message': 'Could not create the landlord'}
        return {'success': True}

    def save_policy_benefit_insured_landlord(self, *args, **kwargs):
        policy_benefit = kwargs.get('policy_benefit', None)
        if not policy_benefit:
            log.warning('save_policy_benefit_insured_landlord: No policy_benefit in kwargs')
            return False

        benefit = kwargs.get('benefit', None)
        if not benefit:
            log.warning('save_policy_benefit_insured_landlord: No benefit in kwargs')
            return False

        rental_amount = kwargs.get('rental_amount', None)
        if not rental_amount:
            log.warning('save_policy_benefit_insured_landlord: No rental_amount in kwargs')
            return False

        property_address = kwargs.get('property_address', None)
        if not property_address:
            log.warning('save_policy_benefit_insured_landlord: No property_address in kwargs')
            return False

        # IMPORTANT TJAART: THIS NEEDS TO BE HANDLED
        rate_table_line_item_id = None

        item = PolicyBenefitInsuredAsset.by_attr_first('policy_benefit_id', policy_benefit.id)
        if not item:
            item = PolicyBenefitInsuredAsset()
            item.policy_benefit_id = policy_benefit.id
            item.asset_type_id = LANDLORD
            DBSession.add(item)
            DBSession.flush()


        line_item = RateTableLineItemLandlord.by_attr_first('id', rate_table_line_item_id)

        asset_landlord_category_id = line_item.asset_landlord_category_id if line_item else None

        asset = PolicyBenefitInsuredAssetLandlord.by_attr_first('policy_benefit_insured_asset_id', item.id)
        if asset:
            asset.rental_amount = rental_amount
            asset.property_address = property_address
            DBSession.flush()

        else:
            asset = PolicyBenefitInsuredAssetLandlord()
            asset.policy_benefit_insured_asset_id = item.id
            asset.rental_amount = rental_amount
            asset.property_address = property_address
            DBSession.add(asset)
            DBSession.flush()
        return True

    def get_rate_table_selected_landlord(self, policy_benefit=None, *args, **kwargs):
        if not policy_benefit:
            return ''

        item = PolicyBenefitInsuredAsset.by_attr_first('policy_benefit_id', policy_benefit.id)
        if not item:
            return ''

        asset = PolicyBenefitInsuredAssetLandlord.by_attr_first('policy_benefit_insured_asset_id', item.id)
        if not asset:
            return ''
        return asset.rate_table_line_item_landlord_id

# Optional Benefits

    @expose()
    def get_optional_benefits_card(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''

        selectbox_benefits = self.get_selectbox_optional_benefits(**kwargs)
        if not selectbox_benefits:
            return ''

        kwargs['benefit_title'] = 'Optional Life Benefits'
        kwargs['form'] = None
        kwargs['table'] = self.get_optional_quote_life_benefit_table(**kwargs)
        life_benefits_card = self.get_benefit_card(**kwargs)
        kwargs['benefit_title'] = 'Optional Non Life Benefits'
        kwargs['compulsory'] = False
        non_life_benefits = self.get_non_life_optional_benefits(**kwargs)
        html = f"""
        <div class="row">
            <div class="card pb-3">
                <div id="optionalBenHeader" policy_id="{policy_id}" class="card-header">
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <h4 class="card-title">Optional Benefits</h4>
                        </div>
                        <div class="col-md-4 text-left">
                            {selectbox_benefits}
                        </div>
                    </div>
                </div>
                <div id="optContentDiv"></div>
            </div>
        </div>
        <div id="optCards">{life_benefits_card}</div>
        <div id="optNonLifeCard">{non_life_benefits}</div>
        """
        javascript = """
        <script src=''>
            var policy_id = $('#optionalBenHeader').attr('policy_id');
            var kwargs = 'policy_id=' + policy_id;

            $('#optional_benefit_id').change(function(){
                var kwargs = {
                    'optional_benefit_id': $(this).val(),
                    'policy_id': policy_id
                }
                $('#optContentDiv').load('/policy/get_optional_individual_insured_benefit_form', kwargs, function(data){
                    return false;
                });
                return false;
            });
            $('#premium_total').load('/policy/get_premium_total_html', kwargs, function(data){
                return false;
            });
        </script>
        """
        return html + javascript

    def get_selectbox_optional_benefits(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''

        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        outputlist = []

        dbase_query = DBSession.query(Benefit). \
                filter(Benefit.product_id == product_id). \
                filter(and_(
                    Benefit.is_main_benefit == False,
                    Benefit.is_compulsory == False,
                )). \
                filter(Benefit.is_life == True). \
                filter(Benefit.bln_active == True). \
                order_by(Benefit.id.asc()). \
                all()
        if not dbase_query:
            return ''

        for item in dbase_query:
            if not item.name:
                continue
            outputdict = {
                'id' : item.id,
                'name' : item.name,
            }

            if not item.is_life:
                outputlist.append(outputdict)
                continue

            policy_benefit_count = DBSession.query(PolicyBenefit). \
                    filter(PolicyBenefit.policy_id == policy_id). \
                    filter(PolicyBenefit.product_benefit_id == item.id). \
                    filter(PolicyBenefit.bln_active == True). \
                    value(func.count(PolicyBenefit.id))
            if not policy_benefit_count:
                policy_benefit_count = 0

            assured_life = BenefitInsuredLife.by_attr_first('benefit_id', item.id)
            if int(assured_life.maximum_lives) > int(policy_benefit_count):
                outputlist.append(outputdict)

        kwargs['id'] = 'optional_benefit_id'
        kwargs['outputlist'] = outputlist
        return create_selectbox_html(**kwargs)

    def get_optional_quote_life_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_optional_quote_life_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_life_benefit_data(policy_id, compulsory=False)

        return self.get_life_quote_benefit_table(dbase_query)

    @expose()
    def get_optional_individual_insured_benefit_form(self, *args, **kwargs):
        optional_benefit_id = kwargs.get('optional_benefit_id', None)
        if not optional_benefit_id:
            log.warning('get_optional_individual_insured_benefit_form: No optional_benefit_id in kwargs')
            return ''

        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_optional_individual_insured_benefit_form: No policy_id in kwargs')
            return ''

        benefit_query = DBSession.query(Benefit, BenefitInsuredLife).\
            join(BenefitInsuredLife, BenefitInsuredLife.benefit_id == Benefit.id).\
            filter(Benefit.id == optional_benefit_id).\
            filter(Benefit.bln_active == True).\
            first()

        if not benefit_query:
            return ''

        relationship_type_id = benefit_query.BenefitInsuredLife.benefit_insured_life_relationship_type_id

        relationship_text = TYPEUTIL.get_pretty_name('benefit_insured_life_relationship_type', relationship_type_id)

        insured_query = DBSession.query(PolicyBenefit, PolicyBenefitInsuredLife).\
            join(PolicyBenefitInsuredLife, PolicyBenefitInsuredLife.policy_benefit_id == PolicyBenefit.id).\
            filter(PolicyBenefit.policy_id == policy_id).\
            filter(PolicyBenefitInsuredLife.relationship_type_id == relationship_type_id).\
            group_by(PolicyBenefitInsuredLife.date_of_birth).\
            all()

        existing_insured_html = ""
        extra_content = ""
        for item in insured_query:
            policy_benefit_exists = DBSession.query(PolicyBenefitInsuredLife).\
                filter(PolicyBenefitInsuredLife.policy_benefit_id == item.PolicyBenefit.id).\
                filter(PolicyBenefitInsuredLife.date_of_birth == item.PolicyBenefitInsuredLife.date_of_birth).\
                filter(PolicyBenefitInsuredLife.bln_active == True).\
                first()
            if policy_benefit_exists:
                continue

            sane_dob = date_to_str(item.PolicyBenefitInsuredLife.date_of_birth, dateformat='%d-%m-%Y')
            existing_insured_html += f'<span class="action_link mr-2 existingDOB">{sane_dob}</span>'

            if len(dob_list) > 0:
                extra_content = f"""
                    <span class="mx-3">OR Choose from existing {relationship_text.lower()}</span>
                    {existing_insured_html}
                """

        new_insured_html = self.get_entity_person_insured_quote_form(**{
            'policy_id': policy_id,
            'product_benefit_id': optional_benefit_id,
            'product_id': benefit_query.Benefit.product_id,
            'extra_content': extra_content,
            'form_class': 'd-flex align-items-center',
            'action_post_target': '/policy/save_individual_insured',
            'action_refresh_target': '/policy/get_optional_benefits_card',
            'action_refresh_container': 'div_optional_benefits_card'
        })
        html = f"""
        <div class="card-body">
            <div class="row">
                <div class="col-md-12">
                    <h6>Add a {relationship_text}</h6>
                    <hr>
                    {new_insured_html}
                </div>
            </div>
        </div>
        """
        javascript = """
        <script src=''>
            $('.existingDOB').click(function(){
                var thisDate = $(this).text();
                $('#date_of_birth').val(thisDate);
                return false;
            });
        </script>
        """
        return html + javascript

# Optional Non Life Benefits

    def get_non_life_optional_benefits(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_non_life_quote_compulsory_benefit_forms: No policy_id in kwargs')
            return ''

        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_non_life_quote_compulsory_benefit_forms: No product_id in kwargs')
            return ''

        dbase_query = DBSession.query(Benefit, BenefitInsuredNonLife). \
            join(BenefitInsuredNonLife, BenefitInsuredNonLife.benefit_id == Benefit.id).\
            filter(Benefit.product_id == product_id). \
            filter(and_(
                Benefit.is_main_benefit == False,
                Benefit.is_compulsory == False,
            )). \
            filter(Benefit.is_life == False). \
            filter(Benefit.bln_active == True). \
            order_by(BenefitInsuredNonLife.benefit_asset_type_id).\
            all()

        return self.get_non_life_benefits(dbase_query, **kwargs)

    def get_non_life_quote_optional_business_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_compulsory_quote_life_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_business_data(policy_id, compulsory=False)
        return self.get_non_life_quote_business_benefit_table(dbase_query)

    def get_non_life_quote_optional_employee_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_compulsory_quote_life_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_employee_data(policy_id, compulsory=False)
        return self.get_non_life_quote_employee_benefit_table(dbase_query)

    def get_non_life_quote_optional_property_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_non_life_quote_compulsory_property_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_property_data(policy_id, compulsory=False)
        return self.get_non_life_quote_property_benefit_table(dbase_query)

    def get_non_life_quote_optional_vehicle_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_compulsory_quote_life_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_vehicle_data(policy_id, compulsory=False)
        return self.get_non_life_quote_vehicle_benefit_table(dbase_query)

    def get_non_life_quote_optional_landlord_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_compulsory_quote_life_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_landlord_data(policy_id, compulsory=False)
        return self.get_non_life_quote_landlord_benefit_table(dbase_query)

# Policy Utilities

    def get_policy_rate_table_change_javascript(self, *args, **kwargs):
        javascript = """
        <script src=''>
        $('.selectpicker.rate_table_item').change(function(){

            var this_selectbox = $(this);
            var benefit_id = $(this).attr('benefit_id');
            var policy_benefit_id = $(this).attr('policy_benefit_id');
            var selected = $(this).find(':selected').val();
            var policy_id = $('#policy_back').attr('policy_id');
            var kwargs = 'benefit_id=' + benefit_id + '&rate_table_line_item_id=' + selected + '&policy_id=' + policy_id + '&policy_benefit_id=' + policy_benefit_id;

            $.get('/policy/get_rate_table_premium_sum_insured_html', kwargs, function(data){
                var result = JSON.parse(data);

                if(result.success){

                    this_selectbox.parent().parent().siblings('.premium').empty().append(result.premium);
                    this_selectbox.parent().parent().siblings('.sum_insured').empty().append(result.sum_insured);

                    if(result.javascript){
                        this_selectbox.parent().parent().siblings('.premium').append(result.javascript);
                    };

                }else{
                    this_selectbox.parent().parent().siblings('.premium').empty();
                    this_selectbox.parent().parent().siblings('.sum_insured').empty();

                };
                return false;
            });
        });
        $('.selectpicker.rate_table_item').trigger('change');
        </script>
        """
        return javascript

    def get_policy_benefit_html(self, policy_benefit=None, policy=None, benefit=None, *args, **kwargs):
        if not policy or not benefit:
            return ''

        premium, sum_insured = self.get_benefit_premium_html(policy_benefit, benefit, policy.id)

        html = ''
        if benefit.benefit_price_type_id == PRICE_TYPE_RATE_TABLE:
            html = f"""
            <div class="row d-flex">
                <div class="col-md-4">
                    <label class="col-md-12 col-form-label">{_('Rate Table')}</label>
                    {premium}
                </div>
                <div class="col-md-4 premium">
                </div>
                <div class="col-md-4 sum_insured">
                </div>
            </div>
            """

        if benefit.benefit_price_type_id == PRICE_TYPE_FIXED:
            html = f"""
            <div class="row d-flex">
                <div class="col-md-6">
                    <label class="col-md-12 col-form-label">{_('Premium')}</label>
                    <div class="col-md-12 premium">
                        {premium}
                    </div>
                </div>
                <div class="col-md-6">
                    <label class="col-md-12 col-form-label">{_('Sum Insured')}</label>
                    <div class="col-md-12 sum_insured">
                        {sum_insured}
                    </div>
                </div>
            </div>
            """

        return html

    def confirm_policy_benefit_exists(self, policy_id=None, benefit=None, *args, **kwargs):
        usernow = request.identity.get('user', {})

        if not policy_id or not benefit:
            return False

        if not benefit.cover_and_exclusion_id:
            return False

        policy_benefit = DBSession.query(PolicyBenefit). \
            filter(PolicyBenefit.policy_id == policy_id). \
            filter(PolicyBenefit.product_benefit_id == benefit.id). \
            first()

        if not policy_benefit:
            policy_benefit = self.create_policy_benefit(policy_id, benefit)

        return policy_benefit

    def create_policy_benefit(self, policy_id=None, benefit=None, *args, **kwargs):
        if not policy_id or not benefit:
            return False
        usernow = request.identity.get('user', {})
        is_compulsory = True if benefit.is_compulsory or benefit.is_main_benefit else False

        policy_benefit = PolicyBenefit()
        policy_benefit.policy_id = policy_id
        policy_benefit.product_benefit_id = benefit.id
        policy_benefit.cover_and_exclusion_id = benefit.cover_and_exclusion_id
        policy_benefit.is_compulsory = is_compulsory
        policy_benefit.added_by = usernow.id
        DBSession.add(policy_benefit)
        DBSession.flush()

        active_type_id = TYPEUTIL.get_id_of_name('policy_benefit_status_type', 'active')
        policy_benefit_status = PolicyBenefitStatus()
        policy_benefit_status.policy_benefit_id = policy_benefit.id
        policy_benefit_status.policy_benefit_status_type_id = active_type_id
        policy_benefit_status.date_set = datetime.now()
        DBSession.add(policy_benefit_status)
        DBSession.flush()

        return policy_benefit

    def get_rate_table_line_items_life(self, rate_table_id=None, *args, **kwargs):
        outputlist = []
        dbase_query = RateTableLineItemLife.by_attr_all('rate_table_id', rate_table_id)
        for item in dbase_query:

            gender = ''
            if item.gender_type_id:
                gender = TYPEUTIL.get_pretty_name('entity_person_gender_type', item.gender_type_id)
                gender = f"{gender}:"

            name = f'{gender} {item.minimum_age} to {item.maximum_age}'

            outputlist.append({
                'id' : item.id,
                'name' : name,
            })

        return outputlist

    def get_rate_table_line_items_turnover(self, rate_table_id=None, *args, **kwargs):
        outputlist = []
        dbase_query = RateTableLineItemTurnover.by_attr_all('rate_table_id', rate_table_id)
        for item in dbase_query:
            amount = get_currency_by_locale(item.amount, cents=False)
            minimum_turnover = get_currency_by_locale(item.minimum_turnover, cents=False)
            maximum_turnover = get_currency_by_locale(item.maximum_turnover, cents=False)

            name = f'{amount}: {minimum_turnover} - {maximum_turnover}'
            outputlist.append({
                'id' : item.id,
                'name' : name,
            })
        return outputlist

    def get_rate_table_line_items_employee(self, rate_table_id=None, *args, **kwargs):
        outputlist = []
        dbase_query = RateTableLineItemEmployee.by_attr_all('rate_table_id', rate_table_id)
        for item in dbase_query:
            name = f'From {item.minimum_employees} to {item.maximum_employees} employees'
            outputlist.append({
                'id' : item.id,
                'name' : name,
            })
        return outputlist

    def get_rate_table_line_items_vehicle(self, rate_table_id=None, *args, **kwargs):
        outputlist = []
        dbase_query = RateTableLineItemVehicle.by_attr_all('rate_table_id', rate_table_id)
        for item in dbase_query:
            outputlist.append({
                'id' : item.id,
                'name' : item.description,
            })
        return outputlist

    def get_rate_table_selected_business(self, policy_benefit=None, *args, **kwargs):
        if not policy_benefit:
            return ''

        item = PolicyBenefitInsuredAsset.by_attr_first('policy_benefit_id', policy_benefit.id)
        if not item:
            return ''

        asset = PolicyBenefitInsuredAssetBusiness.by_attr_first('policy_benefit_insured_asset_id', item.id)
        if not asset:
            return ''
        return asset.rate_table_line_item_business_id

    def get_rate_table_selected_employee(self, policy_benefit=None, *args, **kwargs):
        if not policy_benefit:
            return ''

        item = PolicyBenefitInsuredAsset.by_attr_first('policy_benefit_id', policy_benefit.id)
        if not item:
            return ''

        asset = PolicyBenefitInsuredAssetEmployee.by_attr_first('policy_benefit_insured_asset_id', item.id)
        if not asset:
            return ''
        return asset.rate_table_line_item_employee_id

    def get_rate_table_selected_property(self, policy_benefit=None, *args, **kwargs):
        if not policy_benefit:
            return ''

        item = PolicyBenefitInsuredAsset.by_attr_first('policy_benefit_id', policy_benefit.id)
        if not item:
            return ''

        asset = PolicyBenefitInsuredAssetProperty.by_attr_first('policy_benefit_insured_asset_id', item.id)
        if not asset:
            return ''
        return asset.rate_table_line_item_property_id

    def get_benefit_premium_rate_table_html(self, policy_benefit=None, item=None, policy_id=None, *args, **kwargs):
        if not item:
            return '', ''

        selected = ''
        outputlist = []
        if item.is_life:
            insured = PolicyBenefitInsuredLife.by_attr_first('policy_benefit_id', policy_benefit.id)
            if insured and insured.rate_table_line_item_life_id:
                selected = insured.rate_table_line_item_life_id
            outputlist = self.get_rate_table_line_items_life(benefit.rate_table_id)

        else:
            rate = RateTable.by_id(benefit.rate_table_id)

            if rate.benefit_asset_type_id == BUSINESS:
                selected = self.get_rate_table_selected_business(policy_benefit)
                outputlist = self.get_rate_table_line_items_turnover(benefit_rate_table.rate_table_id)

            if rate.benefit_asset_type_id == EMPLOYEE:
                selected = self.get_rate_table_selected_employee(policy_benefit)
                outputlist = self.get_rate_table_line_items_employee(benefit_rate_table.rate_table_id)

            if rate.benefit_asset_type_id == PROPERTY:
                selected = self.get_rate_table_selected_property(policy_benefit)
                outputlist = self.get_rate_table_line_items_turnover(benefit_rate_table.rate_table_id)

            if rate.benefit_asset_type_id == VEHICLE:
                selected = self.get_rate_table_selected_vehicle(policy_benefit)
                outputlist = self.get_rate_table_line_items_vehicle(benefit_rate_table.rate_table_id)

        kwargs['selected'] = selected
        kwargs['outputlist'] = outputlist
        kwargs['class_names'] = 'rate_table_item'
        kwargs['attributes'] = f'benefit_id="{item.id}" policy_benefit_id="{policy_benefit.id}"'
        kwargs['id'] = f'rate_table_benefit_id_{item.id}'
        premium_selectbox = create_selectbox_html(**kwargs)
        return premium_selectbox, ''

    def get_benefit_premium_fixed_html(self, policy_benefit=None, item=None, policy_id=None, *args, **kwargs):
        empty = get_currency_by_locale(0)
        if not item or not policy_id:
            return empty, empty

        premium = get_currency_by_locale(item.premium, cents=False)
        sum_insured = get_currency_by_locale(item.sum_insured, cents=False)

        kwargs['benefit_id'] = item.id
        kwargs['policy_id'] = policy_id
        kwargs['premium'] = item.premium
        kwargs['sum_insured'] = item.sum_insured
        kwargs['policy_benefit_id'] = policy_benefit.id
        self.update_policy_benefit_price(**kwargs)
        return premium, sum_insured

    def get_benefit_premium_html(self, policy_benefit=None, benefit=None, policy_id=None, *args, **kwargs):
        if not benefit or not policy_id:
            return '', ''

        if benefit.benefit_price_type_id == PRICE_TYPE_RATE_TABLE:
            return self.get_benefit_premium_rate_table_html(policy_benefit, benefit, policy_id)

        if benefit.benefit_price_type_id == PRICE_TYPE_FIXED:
            return self.get_benefit_premium_fixed_html(policy_benefit, benefit, policy_id)

        return '', ''

    @expose()
    def update_policy_benefit_price(self, *args, **kwargs):
        outputdict = {'success' : False}
        premium = kwargs.get('premium', None)
        policy_id = kwargs.get('policy_id', None)
        benefit_id = kwargs.get('benefit_id', None)
        sum_insured = kwargs.get('sum_insured', None)
        policy_benefit_id = kwargs.get('policy_benefit_id', None)

        if not policy_id or not benefit_id or not policy_benefit_id:
            return json.dumps(outputdict)

        policy_benefit = PolicyBenefit.by_id(policy_benefit_id)
        if not policy_benefit:
            return json.dumps(outputdict)

        if not premium and not sum_insured:
            policy_benefit.premium = 0
            policy_benefit.sum_insured = 0

        else:
            if not policy_benefit.premium or not float(policy_benefit.premium) == float(premium):
                policy_benefit.premium = premium

            if not policy_benefit.sum_insured or not float(policy_benefit.sum_insured) == float(sum_insured):
                policy_benefit.sum_insured = sum_insured

        DBSession.flush()
        outputdict['success'] = True
        return json.dumps(outputdict)

    def get_selectbox_product(self, *args, **kwargs):
        dbase_query = Product.get_all('code', active=True)
        kwargs['id'] = 'product_id'
        kwargs['selected'] = kwargs.get('product_id', '')
        kwargs['outputlist'] = [{'name': f'({m.code}) {m.name}', 'id': m.id} for m in dbase_query]
        return create_selectbox_html(**kwargs)

    @expose()
    def get_rate_table_premium_sum_insured_html(self, *args, **kwargs):
        outputdict = {'success' : False}

        policy_id = kwargs.get('policy_id', None)
        benefit_id = kwargs.get('benefit_id', None)
        policy_benefit_id = kwargs.get('policy_benefit_id', None)
        if not benefit_id:
            return json.dumps(outputdict)

        rate_table_line_item_id = kwargs.get('rate_table_line_item_id', None)
        if rate_table_line_item_id == '0':
            return json.dumps(outputdict)
        if not rate_table_line_item_id:
            return json.dumps(outputdict)

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return json.dumps(outputdict)

        policy_benefit = PolicyBenefit.by_id(policy_benefit_id)
        if not policy_benefit:
            return json.dumps(outputdict)

        if benefit.is_life:
            self.save_policy_benefit_insured_life(policy_benefit, rate_table_line_item_id)
            return self.get_rate_table_premium_sum_insured_life_html(policy_id, policy_benefit, benefit_id, rate_table_line_item_id)

        else:
            rate = RateTable.by_id(benefit.rate_table_id)

            kwargs['benefit'] = benefit
            kwargs['policy_benefit'] = policy_benefit
            kwargs['rate_table_line_item_id'] = rate_table_line_item_id

            if rate.benefit_asset_type_id == BUSINESS:
                self.save_policy_benefit_insured_business(**kwargs)
                return self.get_rate_table_premium_sum_insured_turnover_html(policy_id, policy_benefit, benefit_id, rate_table_line_item_id)

            if rate.benefit_asset_type_id == EMPLOYEE:
                self.save_policy_benefit_insured_employee(**kwargs)
                return self.get_rate_table_premium_sum_insured_employee_html(policy_id, policy_benefit, benefit_id, rate_table_line_item_id)

            if rate.benefit_asset_type_id == PROPERTY:
                self.save_policy_benefit_insured_property(**kwargs)
                return self.get_rate_table_premium_sum_insured_turnover_html(policy_id, policy_benefit, benefit_id, rate_table_line_item_id)

            if rate.benefit_asset_type_id == VEHICLE:
                self.save_policy_benefit_insured_vehicle(**kwargs)
                return self.get_rate_table_premium_sum_insured_vehicle_html(policy_id, policy_benefit, benefit_id, rate_table_line_item_id)

        return json.dumps(outputdict)

    def save_policy_benefit_insured_life(self, policy_benefit=None, rate_table_line_item_id=None, *args, **kwargs):
        if not policy_benefit or not rate_table_line_item_id:
            return False

        item = PolicyBenefitInsuredLife.by_attr_first('policy_benefit_id', policy_benefit.id)
        if item:
            item.rate_table_line_item_life_id = rate_table_line_item_id
            DBSession.flush()

        else:
            item = PolicyBenefitInsuredLife()
            item.policy_benefit_id = policy_benefit.id
            item.rate_table_line_item_life_id = rate_table_line_item_id
            DBSession.add(item)
            DBSession.flush()
        return True

    def get_rate_table_premium_sum_insured_life_html(self, policy_id=None, policy_benefit=None, benefit_id=None, rate_table_line_item_id=None, *args, **kwargs):
        outputdict = {'success' : False}
        if not benefit_id:
            return json.dumps(outputdict)
        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return json.dumps(outputdict)
        if not rate_table_line_item_id:
            return json.dumps(outputdict)

        item = RateTableLineItemLife.by_id(rate_table_line_item_id)
        if not item:
            return json.dumps(outputdict)

        rate_table = RateTable.by_id(item.rate_table_id)
        rate_table_base_value = RateTableBaseValue.by_attr_first('rate_table_id', rate_table.id)

        minimum_premium, maximum_premium = MINIMUM_UNKNOWN, MAXIMUM_UNKNOWN
        if benefit.has_premium_limits:
            premium_limit = BenefitPremiumLimit.by_attr_first('benefit_id', benefit_id)
            if premium_limit:
                minimum_premium = premium_limit.minimum_premium
                maximum_premium = premium_limit.maximum_premium

        minimum_sum_insured, maximum_sum_insured = MINIMUM_UNKNOWN, MAXIMUM_UNKNOWN
        if benefit.has_sum_insured_limits:
            sum_insured_limit = BenefitSumInsuredLimit.by_attr_first('benefit_id', benefit_id)
            if sum_insured_limit:
                minimum_sum_insured = sum_insured_limit.minimum_sum_insured
                maximum_sum_insured = sum_insured_limit.maximum_sum_insured

        current_premium = (minimum_premium + maximum_premium) / 2
        current_sum_insured = (minimum_sum_insured + maximum_sum_insured) / 2
        if policy_benefit:
            if policy_benefit.premium:
                current_premium = policy_benefit.premium
            if policy_benefit.sum_insured:
                current_sum_insured = policy_benefit.sum_insured

        premium_slider_id = f'slider_premium_{rate_table_line_item_id}_{benefit_id}'
        premium = get_slider_html(slider_id=premium_slider_id, min_val=float(minimum_premium), max_val=float(maximum_premium), cur_val=float(current_premium))
        premium = f"""
        <label class="col-md-12 col-form-label">{_('Premium')}</label>
        {premium}
        """

        sum_insured_slider_id = f'slider_sum_insured_{rate_table_line_item_id}_{benefit_id}'
        sum_insured = get_slider_html(slider_id=sum_insured_slider_id, min_val=float(minimum_sum_insured), max_val=float(maximum_sum_insured), cur_val=float(current_sum_insured))
        sum_insured = f"""
        <label class="col-md-12 col-form-label">{_('Sum Insured')}</label>
        {sum_insured}
        """

        javascript = f"""
        <script src=''>
            var benefit_id = {benefit_id};
            var rate_factor = {item.rate_factor};
            var policy_benefit_id = {policy_benefit.id};
            var base_value = {rate_table_base_value.base_value};
            var policy_id = $('#policy_back').attr('policy_id');
            var premium_slider{policy_benefit.id} = document.getElementById('{premium_slider_id}');
            var sum_insured_slider{policy_benefit.id} = document.getElementById('{sum_insured_slider_id}');

            premium_slider{policy_benefit.id}.noUiSlider.on('change', function () {{
                var current_premium = premium_slider{policy_benefit.id}.noUiSlider.get();
                var calc_sum_insured = current_premium * base_value / rate_factor;
                sum_insured_slider{policy_benefit.id}.noUiSlider.set(calc_sum_insured);

                console.log('Current premium ', current_premium, ' calculated sum_insured ', calc_sum_insured);

                var kwargs = 'policy_id='+policy_id+'&benefit_id='+benefit_id+'&premium='+current_premium+'&sum_insured='+calc_sum_insured+'&policy_benefit_id='+policy_benefit_id;
                $.post('/policy/update_policy_benefit_price?', kwargs, function(data){{
                    $('#premium_total').load('/policy/get_premium_total_html', kwargs, function(data){{
                        return false;
                    }});
                    return false;
                }});
            }});
            sum_insured_slider{policy_benefit.id}.noUiSlider.on('change', function () {{
                var current_sum_insured = sum_insured_slider{policy_benefit.id}.noUiSlider.get();
                var calc_premium = (current_sum_insured * rate_factor) / base_value;
                premium_slider{policy_benefit.id}.noUiSlider.set(calc_premium);

                console.log('Current sum_insured ', current_sum_insured, ' calculated premium ', calc_premium);

                var kwargs = 'policy_id='+policy_id+'&benefit_id='+benefit_id+'&premium='+calc_premium+'&sum_insured='+current_sum_insured+'&policy_benefit_id='+policy_benefit_id;
                $.post('/policy/update_policy_benefit_price?', kwargs, function(data){{
                    $('#premium_total').load('/policy/get_premium_total_html', kwargs, function(data){{
                        return false;
                    }});
                    return false;
                }});
            }});
        </script>
        """

        outputdict['success'] = True
        outputdict['premium'] = premium
        outputdict['sum_insured'] = sum_insured
        outputdict['javascript'] = javascript
        return json.dumps(outputdict)

    def get_rate_table_premium_sum_insured_turnover_html(self, policy_id=None, policy_benefit=None, benefit_id=None, rate_table_line_item_id=None, *args, **kwargs):
        outputdict = {'success' : False}
        if not benefit_id:
            return json.dumps(outputdict)

        premium = sum_insured = 0;
        premium_html = sum_insured_html = '';
        if rate_table_line_item_id:
            item = RateTableLineItemTurnover.by_id(rate_table_line_item_id)
            if item:
                premium = item.amount
                sum_insured = item.sum_insured
                premium_html = get_currency_by_locale(item.amount, cents=False)
                sum_insured_html = get_currency_by_locale(item.sum_insured, cents=False)

        javascript = f"""
        <script src=''>
            var premium = {premium};
            var benefit_id = {benefit_id};
            var sum_insured = {sum_insured};
            var policy_benefit_id = {policy_benefit.id};
            var policy_id = $('#policy_back').attr('policy_id');
        """
        javascript += """
            var kwargs = 'policy_id='+policy_id+'&benefit_id='+benefit_id+'&premium='+premium+'&sum_insured='+sum_insured+'&policy_benefit_id='+policy_benefit_id;
            $.post('/policy/update_policy_benefit_price?', kwargs, function(data){
                $('#premium_total').load('/policy/get_premium_total_html', kwargs, function(data){
                    return false;
                });
                return false;
            });
        </script>
        """

        outputdict['success'] = True
        outputdict['premium'] = premium_html
        outputdict['sum_insured'] = sum_insured_html
        outputdict['javascript'] = javascript
        return json.dumps(outputdict)

    def get_rate_table_premium_sum_insured_vehicle_html(self, policy_id=None, policy_benefit=None, benefit_id=None, rate_table_line_item_id=None, *args, **kwargs):
        outputdict = {'success' : False}
        if not benefit_id:
            return json.dumps(outputdict)

        average_premium = average_sum_insured = 0
        premium_html = sum_insured_html = '';
        if rate_table_line_item_id:
            item = RateTableLineItemVehicle.by_id(rate_table_line_item_id)
            if item:
                insured_amount = get_currency_by_locale(item.insured_amount, cents=False)
                uninsured_amount = get_currency_by_locale(item.uninsured_amount, cents=False)
                third_party_amount = get_currency_by_locale(item.third_party_amount, cents=False)
                average_premium = (item.insured_amount + item.uninsured_amount + item.third_party_amount) / 3
                average_premium_html = get_currency_by_locale(average_premium, cents=False)

                insured_sum_insured = get_currency_by_locale(item.insured_sum_insured, cents=False)
                uninsured_sum_insured = get_currency_by_locale(item.uninsured_sum_insured, cents=False)
                third_party_sum_insured = get_currency_by_locale(item.third_party_sum_insured, cents=False)
                average_sum_insured = (item.insured_sum_insured + item.uninsured_sum_insured + item.third_party_sum_insured) / 3
                average_sum_insured_html = get_currency_by_locale(average_sum_insured, cents=False)

                premium_html = f"""
                Insured: {insured_amount} <br/>
                Uninsured: {uninsured_amount} <br/>
                Third Party: {third_party_amount} <br/>
                Average: {average_premium_html}
                """
                sum_insured_html = f"""
                Insured: {insured_sum_insured} <br/>
                Uninsured: {uninsured_sum_insured} <br/>
                Third Party: {third_party_sum_insured} <br/>
                Average: {average_sum_insured_html}
                """

        javascript = f"""
        <script src=''>
            var benefit_id = {benefit_id};
            var average_premium = {average_premium};
            var policy_benefit_id = {policy_benefit.id};
            var average_sum_insured = {average_sum_insured};
            var policy_id = $('#policy_back').attr('policy_id');
        """
        javascript += """
            var kwargs = 'policy_id='+policy_id+'&benefit_id='+benefit_id+'&premium='+average_premium+'&sum_insured='+average_sum_insured+'&policy_benefit_id='+policy_benefit_id;
            $.post('/policy/update_policy_benefit_price?', kwargs, function(data){
                $('#premium_total').load('/policy/get_premium_total_html', kwargs, function(data){
                    return false;
                });
                return false;
            });
        </script>
        """

        outputdict['success'] = True
        outputdict['premium'] = premium_html.strip()
        outputdict['sum_insured'] = sum_insured_html.strip()
        outputdict['javascript'] = javascript
        return json.dumps(outputdict)

    def get_rate_table_premium_sum_insured_employee_html(self, policy_id=None, policy_benefit=None, benefit_id=None, rate_table_line_item_id=None, *args, **kwargs):
        outputdict = {'success' : False}
        if not benefit_id:
            return json.dumps(outputdict)

        premium = sum_insured = 0;
        premium_html = sum_insured_html = '';
        if rate_table_line_item_id:
            item = RateTableLineItemEmployee.by_id(rate_table_line_item_id)
            if item:
                premium = item.amount
                sum_insured = item.sum_insured
                premium_html = get_currency_by_locale(item.amount, cents=False)
                sum_insured_html = get_currency_by_locale(item.sum_insured, cents=False)

        javascript = f"""
        <script src=''>
            var premium = {premium};
            var benefit_id = {benefit_id};
            var sum_insured = {sum_insured};
            var policy_benefit_id = {policy_benefit.id};
            var policy_id = $('#policy_back').attr('policy_id');
        """
        javascript += """
            var kwargs = 'policy_id='+policy_id+'&benefit_id='+benefit_id+'&premium='+premium+'&sum_insured='+sum_insured+'&policy_benefit_id='+policy_benefit_id;
            $.post('/policy/update_policy_benefit_price?', kwargs, function(data){
                $('#premium_total').load('/policy/get_premium_total_html', kwargs, function(data){
                    return false;
                });
                return false;
            });
        </script>
        """

        outputdict['success'] = True
        outputdict['premium'] = premium_html
        outputdict['sum_insured'] = sum_insured_html
        outputdict['javascript'] = javascript
        return json.dumps(outputdict)

    @expose()
    def get_premium_total_html(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''
        premium = 0
        dbase_query = PolicyBenefit.by_attr_all('policy_id', policy_id)
        for item in dbase_query:
            if item.premium:
                premium += item.premium
        premium = get_currency_by_locale(premium, cents=False)
        html = f"""
        <h4 class="card-title">
            Premium: {premium}
        </h4>
        """
        return html

    @expose()
    def confirm_policy_exists(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        policy_id = kwargs.get('policy_id', None)

        product = Product.latest_entry()
        if not product:
            return ''

        product_id = kwargs.get('product_id', product.id)

        if policy_id:
            this = Policy.by_id(policy_id)
            if not int(this.product_id) == int(product_id):
                this.product_id = product_id
                DBSession.flush()
                self.delete_policy_child_records(this.id)

        else:
            policy_number = self.get_unique_policy_number(product_id)
            this = Policy()
            this.product_id = product_id
            this.policy_number = policy_number
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()

            status = PolicyStatus()
            status.policy_id = this.id
            status.policy_status_type_id = PRE_QUOTE
            status.date_set = datetime.now()
            status.current_status = True
            status.added_by = usernow.id
            DBSession.add(status)
            DBSession.flush()

        return str(this.id)

    def delete_policy_child_records(self, policy_id=None, *args, **kwargs):
        if not policy_id:
            return False

        dbase_query = PolicyBenefit.by_attr_all('policy_id', policy_id)
        for benefit in dbase_query:

            lives = PolicyBenefitInsuredLife.by_attr_all('policy_benefit_id', benefit.id)
            for life in lives:
                DBSession.delete(life)
                DBSession.flush()

            assets = PolicyBenefitInsuredAsset.by_attr_all('policy_benefit_id', benefit.id)
            for asset in assets:

                vehicles = PolicyBenefitInsuredAssetVehicle.by_attr_all('policy_benefit_insured_asset_id', asset.id)
                for item in vehicles:
                    DBSession.delete(item)
                    DBSession.flush()

                businesses = PolicyBenefitInsuredAssetBusiness.by_attr_all('policy_benefit_insured_asset_id', asset.id)
                for item in businesses:
                    DBSession.delete(item)
                    DBSession.flush()

                properties = PolicyBenefitInsuredAssetProperty.by_attr_all('policy_benefit_insured_asset_id', asset.id)
                for item in properties:
                    DBSession.delete(item)
                    DBSession.flush()

                employees = PolicyBenefitInsuredAssetEmployee.by_attr_all('policy_benefit_insured_asset_id', asset.id)
                for item in properties:
                    DBSession.delete(item)
                    DBSession.flush()

                DBSession.delete(asset)
                DBSession.flush()

            # Placeholder for other cascading deletes
            DBSession.delete(benefit)
            DBSession.flush()

        return True

    @expose()
    def delete_policy_benefit_record(self, *args, **kwargs):
        policy_benefit_id = kwargs.get('policy_benefit_id', None)
        if not policy_benefit_id:
            return ''

        policy_benefit = PolicyBenefit.by_id(policy_benefit_id)
        if not policy_benefit:
            return ''

        DBSession.delete(policy_benefit)
        DBSession.flush()
        return ''

    @expose()
    def get_modal_product_summary(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        product = Product.by_id(product_id)
        if not product:
            return ''

        summary = PRODUCT.product_summary(**kwargs)
        html = f"""
        <div class="modal fade" id="dialog_product_summary" tabindex="-1" role="dialog" aria-labelledby="myproduct_summaryLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">Product Name: {product.name}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_product_summary'>
                            {summary}
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-outline-primary product_summary_back">Close</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script src=''>
            setFormValidation('#form_product_summary');
            $('.product_summary_back').click(function(){
                $('#dialog_product_summary').modal('hide');
            });
            $('#dialog_product_summary').modal();
        </script>
        """
        return html + javascript

    def get_unique_policy_number(self, product_id=None, *args, **kwargs):
        number = ''
        if product_id:
            product = Product.by_id(product_id)
            if product and product.policy_number_prefix:
                number = product.policy_number_prefix

        number += datetime.now().strftime("%y%m%d%H%M%S")
        policy_number = number[-POLICY_NUMBER_MAX_LENGTH:]
        exists = Policy.by_attr_first('policy_number', policy_number)
        if exists:
            return self.get_unique_policy_number(product_id)
        return policy_number

    @expose()
    def get_modal_policy_quote(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''

        policy = Policy.by_id(policy_id)
        if not policy:
            return ''

        inner_html = ''
        policy_premium = policy_sum_insured = 0
        dbase_query = PolicyBenefit.by_attr_all('policy_id', policy_id)
        for item in dbase_query:
            benefit = Benefit.by_id(item.product_benefit_id)
            if not benefit:
                continue

            premium = get_currency_by_locale(item.premium, cents=False)
            sum_insured = get_currency_by_locale(item.sum_insured, cents=False)

            if item.premium:
                policy_premium += item.premium
            if item.sum_insured:
                policy_sum_insured += item.sum_insured

            inner_html += f"""
            <div class="row d-flex">
                <div class="col-md-4">
                    <b>
                        {benefit.name}
                    </b>
                </div>
                <div class="col-md-4">
                    Premium: {premium}
                </div>
                <div class="col-md-4">
                    Sum Insured: {sum_insured}
                </div>
            </div>
            """

        policy_premium = get_currency_by_locale(policy_premium, cents=False)
        policy_sum_insured = get_currency_by_locale(policy_sum_insured, cents=False)
        inner_html += f"""
        <div class="row d-flex">
            <div class="col-md-4">
                <b>
                    Total
                </b>
            </div>
            <div class="col-md-4">
                Premium: {policy_premium}
            </div>
            <div class="col-md-4">
                Sum Insured: {policy_sum_insured}
            </div>
        </div>
        """

        html = f"""
        <div class="modal fade" id="dialog_policy_quote" tabindex="-1" role="dialog" aria-labelledby="dialog_policy_quote" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">Policy Quotation for {policy.policy_number}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        {inner_html}
                    </div>
                    <div class="modal-footer">
                        <button id="close" class="btn btn-secondary ml-auto" policy_id='{policy_id}'>Close</button>
                        <button id="download" class="btn btn-primary ml-auto" policy_id='{policy_id}'>Download</button>
                        <button id="reject" class="btn btn-primary ml-auto" policy_id='{policy_id}'>Reject</button>
                        <button id="accept" class="btn btn-primary ml-auto" policy_id='{policy_id}'>Accept</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script src=''>
            $('#dialog_policy_quote').modal();

            $('#close').click(function(){
                $('#dialog_policy_quote').modal('hide');
            });

            $('#download').click(function(){
                var kwargs = 'policy_id=' + $(this).attr('policy_id');
                var href_with_formserial = '/policy/policy_quote_download?' + kwargs;
                $.get(href_with_formserial, function(data){
                    window.location = href_with_formserial;
                    return false;
                });
            });

            $('#reject').click(function(){
                var kwargs = 'policy_id=' + $(this).attr('policy_id');
                $.post('/policy/policy_quote_reject?', kwargs, function(data){
                    $.redirect('/policy');
                    return false;
                });
            });

            $('#accept').click(function(){

                var policy_id = $(this).attr('policy_id');
                var kwargs = {'policy_id' : policy_id};

                $.post('/policy/policy_quote_accept?', kwargs, function(data){
                    $.redirect('/policy/application_form', kwargs);
                    return false;
                });
            });

        </script>
        """
        return html + javascript

    @expose()
    def policy_quote_download(self, *args, **kwargs):
        usernow = request.identity.get('user', {})

        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''
        policy = Policy.by_id(policy_id)
        datename = str(datetime.now()).split(' ')[0]
        filename = f"Policy {policy.policy_number} Quotation {datename}.pdf"
        filepath = os.path.join(PDF_DIRNAME, filename)
        pdffile = PDFCreator(**{'filename': filepath})
        headers = [
            'Name',
            'Premium',
            'Sum Insured',
        ]
        headerwidths = [
            300,
            100,
            100,
        ]
        outputlist = []
        policy_premium = policy_sum_insured = 0
        dbase_query = PolicyBenefit.by_attr_all('policy_id', policy_id)
        for item in dbase_query:
            benefit = Benefit.by_id(item.product_benefit_id)
            premium = get_currency_by_locale(item.premium, cents=False)
            sum_insured = get_currency_by_locale(item.sum_insured, cents=False)

            if item.premium:
                policy_premium += item.premium
            if item.sum_insured:
                policy_sum_insured += item.sum_insured

            outputlist.append((
                Paragraph(f'{benefit.name}', pdffile.styleNormal),
                Paragraph(f'{premium}', pdffile.styleNormal),
                Paragraph(f'{sum_insured}', pdffile.styleNormal),
            ))

        policy_premium = get_currency_by_locale(policy_premium, cents=False)
        policy_sum_insured = get_currency_by_locale(policy_sum_insured, cents=False)
        outputlist.append((
            Paragraph('Total', pdffile.styleNormal),
            Paragraph(f'{policy_premium}', pdffile.styleNormal),
            Paragraph(f'{policy_sum_insured}', pdffile.styleNormal),
        ))

        userdata = {
            'header': f'Policy {policy.policy_number} Quotation',
            'right1_header': 'Date Printed', 'right1_content': str(datename),
        }
        pdffile.CreatePDF_Table_Portrait(userdata, outputlist, headers, headerwidths)

        response.headers["Content-Type"] = 'application/pdf'
        response.headers["Content-Disposition"] = 'attachment; filename="' + filename + '"'
        filecontent = FileApp(filepath)
        return use_wsgi_app(filecontent)

    @expose()
    def policy_quote_reject(self, *args, **kwargs):
        usernow = request.identity.get('user', {})

        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''

        dbase_query = PolicyStatus.by_attr_all('policy_id', policy_id)
        for status in dbase_query:
            status.current_status = False
            DBSession.flush()

        status = PolicyStatus()
        status.policy_id = policy_id
        status.policy_status_type_id = REJECTED
        status.date_set = datetime.now()
        status.current_status = True
        status.added_by = usernow.id
        DBSession.add(status)
        DBSession.flush()
        return ''

    @expose()
    def policy_quote_accept(self, *args, **kwargs):
        usernow = request.identity.get('user', {})

        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''

        dbase_query = PolicyStatus.by_attr_all('policy_id', policy_id)
        for status in dbase_query:
            status.current_status = False
            DBSession.flush()

        status = PolicyStatus()
        status.policy_id = policy_id
        status.policy_status_type_id = QUOTE
        status.date_set = datetime.now()
        status.current_status = True
        status.added_by = usernow.id
        DBSession.add(status)
        DBSession.flush()
        return ''

###############################################################################
# Policy - Application form
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def application_form(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        kwargs['policy_id'] = policy_id
        policy = Policy.by_id(policy_id)
        product = Product.by_id(policy.product_id)

        response = self.get_total_premium(policy_id)
        if not response.get('success'):
            log.warning(f'application_form.index: Could not calculate a total premium for policy_id: {policy_id}')

        total_premium = response.get('data', 0)

        tab_list = [
            {'tab_id':'principal_member_tab', 'title': 'Principal Member', 'target_url': '/policy/get_principal_member_html'},
            {'tab_id':'benefits_tab', 'title': 'Benefits', 'target_url': '/policy/get_benefits_html'},
            {'tab_id':'payment_tab', 'title': 'Payment details', 'target_url': '/policy/get_payment_details'},
        ]
        nav_items = ""
        for i, tab in enumerate(tab_list):
            title = tab.get('title', None)
            target_url = tab.get('target_url', None)
            active = 'active' if i == 0 else ''
            tab_id = tab.get('tab_id', None)
            nav_items += f"""
                <li class="nav-item">
                    <div id="{tab_id}" class="nav-link {active}" data-toggle="tab" data-target-url="{target_url}" role="tablist">
                        {title}
                    </div>
                </li>
            """
        html = f"""
            <div class="row sticky-top">
                <div class="col-md-12">
                    <div class="card pb-2">
                        <div class="card-header">
                            <div class="row d-flex">
                                <div class="col-md-6">
                                    <h4 class="card-title">{_('Policy')}: {policy.policy_number}</h4>
                                </div>
                                <div class="col-md-6 text-right">
                                    <h4 class="card-title">{_('Total Premium')}: { total_premium}</h4>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <ul id="tabsHeader" class="nav nav-pills nav-pills-primary mb-4" role="tablist" data-policy_id="{policy_id}">
                                {nav_items}
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <div id="contentDiv" class="tab-content tab-space pt-0">
            </div>
        """
        javascript = """
            var contentDiv = $('#contentDiv');
            $('.nav-link').click(function(){
                var targetUrl = $(this).data('targetUrl');
                var kwargs = $('#tabsHeader').data();
                contentDiv.load(targetUrl, kwargs, function(e){
                    return false;
                })
            });
            $('.nav-link').first().click();
        """
        title = _("Application Form")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_principal_member_html(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_principal_member_html: No policy_id in kwargs')
            return ''

        kwargs['form_id'] = 'principal_member_form'

        policy = Policy.by_id(policy_id)
        entity_person = EntityPerson.by_attr_first('entity_id', policy.policy_owner_entity_id)

        principal_member_html = COMMON.get_new_person_form(**kwargs)
        if entity_person:
            kwargs['entity_person_id'] = entity_person.id
            principal_member_html = COMMON.get_edit_person_form(**kwargs)

        found_entity_person_id = kwargs.get('found_entity_person_id', None)
        if found_entity_person_id:
            kwargs['entity_person_id'] = found_entity_person_id
            principal_member_html = COMMON.get_edit_person_form(**kwargs)

        kwargs['show_save'] = False
        address_html = COMMON.get_person_address_html(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div id="principalHeader" class="card-header">
                        <h4 class="card-title">Principal Member</h4>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div id="mainMemberDiv">
                            {principal_member_html}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="addressDiv">
            {address_html}
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <div class="col-md-12 text-right">
                            <button id="saveBtn" type="button" class="btn btn-primary">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script src=''>
            $('#saveBtn').click(function(){
                var principal_member_form = $('#principal_member_form');
                var form_postal_address = $('#form_postal_address');
                var form_street_address = $('#form_street_address');

                setFormValidation(principal_member_form);
                setFormValidation(form_postal_address);
                setFormValidation(form_street_address);

                var principal_member_form_valid = FormIsValid(principal_member_form);
                var form_postal_address_valid = FormIsValid(form_postal_address);
                var form_street_address_valid = FormIsValid(form_street_address);

                if( principal_member_form_valid &&
                    form_postal_address_valid &&
                    form_street_address_valid
                ){
                    var formserial = new Object;
                    formserial['principal_member_form'] = getFormData(principal_member_form);
                    formserial['form_postal_address'] = getFormData(form_postal_address);
                    formserial['form_street_address'] = getFormData(form_street_address);
                    formserial['policy_id'] = $('#tabsHeader').data('policy_id');

                    var formdata = {data: JSON.stringify(formserial)};
                    console.log(formserial);
                    $.post('/policy/save_principal_member', formdata, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $('#benefits_tab').click();
                        } else {
                            showNotification(result.status, result.message);
                        }
                        return false;
                    });
                }
            });

            var idNumber = $('#number');

            var idType = $('#identity_type_id');
            var saidType = $(identity_type_id).data('saidId');
            var saidLength = $(identity_type_id).data('length');
            var kwargs = {
                'policy_id': $('#tabsHeader').data('policy_id')
            }
            idNumber.on('keyup', function(){
                if ((idNumber.val().length >= saidLength) && (parseInt($('#identity_type_id option:selected').val()) === saidType)){
                    var params = {
                        'identity_type_id': idType.val(),
                        'identity_number': idNumber.val()
                    }
                    $.post('/members/check_member_exists', params, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            kwargs['found_entity_person_id'] = result.data;
                            $('#contentDiv').load('/policy/get_principal_member_html', kwargs, function(){
                                return false;
                            });
                        } else {
                            kwargs['id_number'] = idNumber.val();
                            $('#mainMemberDiv').load('/policy/get_new_main_member_form', kwargs, function(){
                                return false;
                            });
                        }
                        return false;
                    });

                    var id_kwargs = 'identity_type_id=' + $('#identity_type_id option:selected').val()
                    id_kwargs += '&value=' + $(this).val();
                    $.post('/members/check_identity_number?', id_kwargs, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $('#date_of_birth').val(result.date_of_birth);
                            $('#entity_person_gender_type_id').val(result.gender).change();

                        };
                        return false;
                    });
                }
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_new_main_member_form(self, *args, **kwargs):
        print('get_new_main_member_form: kwargs', kwargs)
        kwargs['form_id'] = 'principal_member_form'
        id_number = kwargs.get('id_number', None)
        id_data = f'data-id_number="{id_number}"' if id_number else ''
        form = COMMON.get_new_person_form(**kwargs)
        kwargs['show_save'] = False
        address_html = COMMON.get_person_address_html(**kwargs)
        html = f"""
            <div id="formHeader" {id_data}>
                {form}
            </div>
        """
        javascript = """
        <script src=''>
            var idInput = $('#number');
            var typedId = $('#formHeader').data('id_number');
            idInput.val(typedId);
            var kwargs = {'show_save': false};
            $('#addressDiv').load('/common/get_person_address_html', kwargs, function(data){
                kwargs['identity_type_id'] = $('#identity_type_id option:selected').val();
                kwargs['value'] = typedId;
                $.post('/members/check_identity_number?', kwargs, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $('#date_of_birth').val(result.date_of_birth);
                        $('#entity_person_gender_type_id').val(result.gender).change();
                        idInput.focus();
                        return false;
                    };
                    return false;
                });
                return false;
            });

        </script>
        """
        return html + javascript

    def get_total_premium(self, policy_id=None, *args, **kwargs):
        if not policy_id:
            return {'success': False, 'message': 'Policy Id not present in args'}

        benefits = PolicyBenefit.by_attr_all('policy_id', policy_id)
        total_premium = 0
        for ben in benefits:
            if ben.premium:
                total_premium += ben.premium

        total_premium = get_currency_by_locale(total_premium * 100)
        return {'success': True, 'data': total_premium}

    @expose()
    def save_principal_member(self, *args, **kwargs):
        print('save_principal_member', kwargs)
        data = json.loads(kwargs.get('data', {}))
        if not data:
            log.warning('save_principal_member: No data key in formserial')
            return json.dumps({'success': False, 'message': 'There is not data to save', 'status': 'danger'})

        policy_id = data.get('policy_id', None)
        if not policy_id:
            log.error('save_principal_member: Trying to save a Principal Member without selecting a policy_id')
            return json.dumps({'success': False, 'message': 'Please select a policy before trying to add a Principal Member', 'status': 'danger'})

        principal_member_form = data.get('principal_member_form', {})

        date_of_birth = principal_member_form.get('date_of_birth', None)
        if not date_of_birth:
            log.warning('save_principal_member: No date of birth present in principal_member_form kwargs')
            return json.dumps({'success': False, 'message': 'Please supply a date of birth', 'status': 'danger'})

        policy_benefits = DBSession.query(PolicyBenefit, Benefit, PolicyBenefitInsuredLife).\
            join(Benefit, Benefit.id == PolicyBenefit.product_benefit_id).\
            join(PolicyBenefitInsuredLife, PolicyBenefitInsuredLife.policy_benefit_id == PolicyBenefit.id).\
            filter(PolicyBenefit.policy_id == policy_id).\
            filter(Benefit.is_life == True).\
            filter(PolicyBenefitInsuredLife.relationship_type_id == PRINCIPAL_TYPE).\
            all()
            # filter(or_(
            #     Benefit.is_main_benefit == True,
            #     Benefit.is_compulsory == True,
            # )). \

        for item in policy_benefits:
            sane_dob = str_to_date(date_of_birth)
            print(item.PolicyBenefitInsuredLife.date_of_birth)
            print(sane_dob)
            if not item.PolicyBenefitInsuredLife.date_of_birth ==  sane_dob.date():
                return json.dumps({'success': False, 'message': 'Date of birth on quote differs from application form', 'status': 'danger'})

            if not item.PolicyBenefitInsuredLife.relationship_type_id == PRINCIPAL_TYPE:
                continue

            validate_age = self.validate_benefit_min_max_age(item.Benefit.id, date_of_birth)
            if not validate_age.get('success'):
                message = validate_age.get('message', 'Principal Member age failed minimum criteria or max lives allocated to benefit')
                log.info(f'validate_benefits: {message}')
                return json.dumps({'success': False, 'message': message, 'status': 'danger'})

        entity_person_id = principal_member_form.get('entity_person_id', None)
        entity_id = None
        if not entity_person_id:
            result = self.save_new_principal_member(**data)
            if not result.get('success'):
                return json.dumps({'success': False, 'message': 'Could not create Principal member', 'status': 'danger'})

            entity_id = result.get('entity_id', None)
            entity_person_id = result.get('entity_person_id', None)

        else:
            result = self.save_edit_principal_member(**data)
            print(result)
            if not result.get('success'):
                return json.dumps({'success': False, 'message': 'Could not update Principal member', 'status': 'danger'})

            entity_id = result.get('entity_id', None)

        ownership_result = self.update_policy_ownership(**{
            'policy_id': policy_id,
            'entity_id': entity_id
        })

        for ben in policy_benefits:
            this = ben.PolicyBenefitInsuredLife
            this.entity_person_id = entity_person_id
            DBSession.flush()

        principal_member_ben_result = self.set_principal_member_optional_life_benefits_beneficiary(**{
            'policy_id': policy_id,
            'entity_id': entity_id,
            'date_of_birth': date_of_birth,
            'entity_person_id': entity_person_id,
            'is_compulsory': False
        })
        return json.dumps({'success': True})

    @expose()
    def save_new_principal_member(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('save_new_principal_member: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'No policy selected.', 'status': 'danger'})

        principal_member_form = kwargs.get('principal_member_form', {})
        postal_address_form = kwargs.get('form_postal_address', {})
        street_address_form = kwargs.get('form_street_address', {})

        entity_id = COMMON.save_new_personobj(**principal_member_form)
        if not entity_id:
            log.warning('save_new_principal_member: COMMON.save_new_personobj result failed')
            return json.dumps({'success': False, 'message': 'Could not create the member', 'status': 'danger'})

        entity_person = EntityPerson.by_attr_first('entity_id', entity_id)

        postal_address_form['entity_person_id'] = entity_person.id
        postal_address_id = COMMON.save_person_address(**postal_address_form)

        street_address_form['entity_person_id'] = entity_person.id
        street_address_id = COMMON.save_person_address(**street_address_form)

        return {'success': True, 'entity_id': entity_id, 'entity_person_id': entity_person.id}

    def save_edit_principal_member(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('save_edit_principal_member: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'No policy selected.', 'status': 'danger'})

        principal_member_form = kwargs.get('principal_member_form', {})
        postal_address_form = kwargs.get('form_postal_address', {})
        street_address_form = kwargs.get('form_street_address', {})

        result = COMMON.save_edit_personobj(**principal_member_form)
        if not result:
            log.warning('save_edit_principal_member: result failed')
            return {'success': False, 'message': 'Could not update the member', 'status': 'danger'}

        entity_person_id = principal_member_form.get('entity_person_id', None)

        postal_address_form['entity_person_id'] = entity_person_id
        postal_address_id = COMMON.save_person_address(**postal_address_form)

        street_address_form['entity_person_id'] = entity_person_id
        street_address_id = COMMON.save_person_address(**street_address_form)

        entity_person = EntityPerson.by_id(entity_person_id)
        return {'success': True, 'entity_id': entity_person.entity_id, 'entity_person_id': entity_person.id}

    def update_life_benefits(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('update_life_benefits: No policy_id in kwargs')
            return {'success': False}

        is_compulsory = kwargs.get('is_compulsory', True)

        life_benefits = self.get_life_policy_benefits(policy_id, compulsory=is_compulsory)

        date_of_birth = kwargs.get('date_of_birth', None)
        entity_person_id = kwargs.get('entity_person_id', None)

        for clb in life_benefits:
            params = {
                'policy_benefit_id': clb.id,
                'entity_person_id': entity_person_id,
                'relationship_type_id': PRINCIPAL_TYPE,
                'date_of_birth': date_of_birth
            }
            result = self.save_policy_benefit_insured(**params)
        return {'success': True}

    def set_principal_member_optional_life_benefits_beneficiary(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('set_principal_member_optional_life_benefits_beneficiary: No policy_id in kwargs')
            return {'success': False}

        entity_id = kwargs.get('entity_id', None)
        if not entity_id:
            log.warning('set_principal_member_optional_life_benefits_beneficiary: No entity_id in kwargs')
            return {'success': False}

        opt_life_policy_benefits = self.get_life_policy_benefits(policy_id)

        for item in opt_life_policy_benefits:
            kwargs['policy_benefit_id'] = item.id
            kwargs['share_of_sum_insured_percentage'] = 100
            kwargs['notify'] = False
            kwargs['relationship_type_id'] = PRINCIPAL_TYPE

            beneficiary_exists = DBSession.query(PolicyBenefitBeneficiary).\
                filter(PolicyBenefitBeneficiary.policy_benefit_id == item.id).\
                filter(PolicyBenefitBeneficiary.entity_id == entity_id).\
                filter(PolicyBenefitBeneficiary.bln_active == True).\
                first()

            if beneficiary_exists:
                return {'success': True}

            result = self.save_new_policy_benefit_beneficiary(**kwargs)
            if not result.get('success'):
                return result
        return {'success': True}

    def save_new_policy_benefit_beneficiary(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        policy_benefit_id = kwargs.get('policy_benefit_id', None)
        if not policy_benefit_id:
            log.warning('save_new_policy_benefit_beneficiary: No policy_benefit_id in kwargs')
            return {'success': False}

        entity_id = kwargs.get('entity_id', None)
        if not entity_id:
            log.warning('save_new_policy_benefit_beneficiary: No entity_id in kwargs')
            return {'success': False}

        share_of_sum_insured_percentage = kwargs.get('share_of_sum_insured_percentage', None)
        if not share_of_sum_insured_percentage:
            log.warning('save_new_policy_benefit_beneficiary: No share_of_sum_insured_percentage in kwargs')
            return {'success': False}

        notify = kwargs.get('notify', False)

        relationship_type_id = kwargs.get('relationship_type_id', None)
        if not relationship_type_id:
            log.warning('save_new_policy_benefit_beneficiary: No relationship_type_id in kwargs')
            return {'success': False}

        this = PolicyBenefitBeneficiary()
        this.policy_benefit_id = policy_benefit_id
        this.entity_id = entity_id
        this.share_of_sum_insured_percentage = share_of_sum_insured_percentage
        this.notify = notify
        this.relationship_type_id = relationship_type_id
        this.added_by = usernow.id
        this.added = datetime.now()
        this.bln_active = True
        DBSession.add(this)
        DBSession.flush()
        return {'success': True, 'data': this.id}

    def save_policy_benefit_insured(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        policy_benefit_id = kwargs.get('policy_benefit_id', None)
        if not policy_benefit_id:
            log.warning('save_policy_benefit_insured: No policy_benefit_id in kwargs')
            return {'success': False, 'message': 'Please supply a policy_benefit_id'}

        entity_person_id = kwargs.get('entity_person_id', None)
        if not entity_person_id:
            log.warning('save_policy_benefit_insured: No entity_person_id in kwargs')
            return {'success': False, 'message': 'Please supply a entity_person_id'}

        relationship_type_id = kwargs.get('relationship_type_id', None)
        if not relationship_type_id:
            log.warning('save_policy_benefit_insured: No relationship_type_id in kwargs')
            return {'success': False, 'message': 'Please supply a relationship_type_id'}

        date_of_birth = kwargs.get('date_of_birth', None)
        if not date_of_birth:
            log.warning('save_policy_benefit_insured: No date_of_birth in kwargs')
            return {'success': False, 'message': 'Please supply a date_of_birth'}

        sane_dob = str_to_date(date_of_birth)

        policy_benefit = PolicyBenefit.by_id(policy_benefit_id)
        result = self.validate_benefit_min_max_age(policy_benefit.product_benefit_id, date_of_birth)
        if not result.get('success'):
            return result

        benefit = Benefit.by_id(policy_benefit.product_benefit_id)
        result = self.validate_benefit_assured_max(policy_benefit.policy_id, benefit.id)

        if not result.get('success'):
            pol_ben = PolicyBenefitInsuredLife.by_attr_first('policy_benefit_id', policy_benefit_id)
            pol_ben.entity_person_id = entity_person_id
            pol_ben.date_of_birth = sane_dob
            DBSession.flush()
            return {'success': True, 'data': pol_ben.id}

        this = PolicyBenefitInsuredLife()
        this.policy_benefit_id = policy_benefit_id
        this.entity_person_id = entity_person_id
        this.relationship_type_id = relationship_type_id
        this.date_of_birth = sane_dob
        this.added_by = usernow.id
        this.added = datetime.now()
        this.bln_active = True
        DBSession.add(this)
        DBSession.flush()
        return {'success': True, 'data': this.id}

    def update_policy_ownership(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        entity_id = kwargs.get('entity_id', None)
        if not policy_id or not entity_id:
            log.warning('update_policy_ownership: No policy_id or entity_id in kwargs')
            return {'success': False}

        policy = Policy.by_id(policy_id)
        policy.policy_owner_entity_id = entity_id
        policy.policy_payer_entity_id = entity_id
        DBSession.flush()
        return {'success': True}

# Applications - Benefits tab

    @expose()
    def get_benefits_html(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_benefits_html: No policy_id in kwargs')
            return ''

        life_benefits_card = self.get_compulsory_application_life_benefits_html(**kwargs)

        policy = Policy.by_id(policy_id)
        kwargs['product_id'] = policy.product_id
        non_life_compulsory_benefits_card = self.get_non_life_application_compulsory_benefit_forms(**kwargs)

        kwargs['benefit_title'] = f'Optional Life Benefits'
        opt_life_benefits_card = self.get_optional_application_life_benefits_html(**kwargs)

        non_life_optional_benefits_card = self.get_non_life_application_optional_benefit_forms(**kwargs)
        html = f"""
            <div id="benefitContentDiv" class="col-md-12">
                {life_benefits_card}
                {non_life_compulsory_benefits_card}
                {opt_life_benefits_card}
                {non_life_optional_benefits_card}
            </div>
        """
        javascript = """
        <script src=''>
            $(function () {
                $('[data-toggle="popover"]').popover();
            });
        </script>
        """
        return html + javascript

# Compulsory Application Life benefits

    def get_compulsory_application_life_benefits_html(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_compulsory_application_life_benefits_html: No policy_id in kwargs')
            return ''

        policy = Policy.by_id(policy_id)

        dbase_query = self.get_life_benefit_data(policy_id, compulsory=True)

        benefit_count = len(dbase_query)
        insured_count = 0
        [insured_count := insured_count + 1 for dq in dbase_query if dq.PolicyBenefitInsuredLife.entity_person_id]
        indicator = self.get_indicator_html(insured_count, benefit_count, 'Insureds')

        kwargs['product_id'] = policy.product_id
        kwargs['benefit_title'] = f'Compulsory Life Benefits {indicator}'
        kwargs['table'] = self.get_compulsory_application_life_benefit_table(**kwargs)
        return self.get_benefit_card(**kwargs)

    def get_compulsory_application_life_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_compulsory_application_life_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_life_benefit_data(policy_id, compulsory=True)
        return self.get_life_application_benefit_table(dbase_query, compulsory=True)

    def get_life_application_benefit_table(self, dbase_query=[], compulsory=True, *args, **kwargs):
        if not dbase_query:
            return ''
        compulsory = 'comp' if compulsory else 'opt'
        outputlist = []
        for item in dbase_query:
            benefit = item.Benefit

            insured = item.PolicyBenefitInsuredLife
            insured_life = EntityPerson.by_id(insured.entity_person_id)
            full_name = f'{insured_life.firstname} {insured_life.surname}' if insured_life else ''
            policy_benefit = item.PolicyBenefit

            premium, sum_insured = self.get_benefit_premium_html(policy_benefit, benefit, policy_benefit.policy_id)

            sane_dob = date_to_str(insured.date_of_birth, dateformat='%d-%m-%Y')
            refresh_container = kwargs.get('refresh_container', 'insuredFormDiv')
            if not insured.entity_person_id:
                sane_dob = f"""
                    <div class="action_link text-danger updateLife" data-policy_benefit_id="{policy_benefit.id}"
                        data-product_benefit_id="{benefit.id}" data-policy_id="{policy_benefit.policy_id}"
                        data-policy_benefit_insured_life_id="{insured.id}" data-refresh_container="{refresh_container}"
                        data-table_name="{compulsory}_life_table">{sane_dob}</div>
                """
            action = ''
            # if not benefit.is_compulsory and not benefit.is_main_benefit:
            #     action = f"""<button type="button" class="btn btn-primary editLife" data-policy_benefit_id="{policy_benefit.id}"
            #       data-policy_id="{policy_benefit.policy_id}"  data-product_id="{benefit.product_id}" data-policy_benefit_insured_life_id="{insured.id}"
            #       data-refresh_container="{refresh_container}">Edit</button>
            #     """
            outputlist.append({
            'benefit': benefit.name,
            'full_name': full_name,
            'date_of_birth': sane_dob,
            'sum_insured': sum_insured,
            'premium': premium,
            'action': action,
        })
        dbcolumnlist=[
            'benefit',
            'full_name',
            'date_of_birth',
            'sum_insured',
            'premium',
            'action',
        ]
        theadlist=[
            'Benefit',
            'Name',
            'Date of Birth',
            'Sum Insured',
            'Premium',
            '',
        ]
        tdclasslist = [
            'w-20',
            '',
            '',
            'w-15',
            'w-10',
            'w-10 text-right',
        ]

        if not outputlist:
            return ''
        table = build_html_table(outputlist, dbcolumnlist, theadlist, f"{compulsory}_life_table", tdclasslist)
        html = f"""
            {table}
            <div id="{refresh_container}" style="display:none;"></div>
        """
        javascript = """
        <script src=''>
            $('.updateLife').click(function(){
                var btnData = $(this).data();
                $('#' + btnData.table_name + ' tr').removeClass('bg-light font-weight-bold');
                $(this).closest('tr').addClass('bg-light font-weight-bold');
                var container = $('#' + btnData.refresh_container);
                container.load('/policy/get_insured_life_form?', btnData, function(data){
                    container.slideDown('slow');
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_insured_life_form(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_insured_life_form: No policy_id in kwargs')
            return ''

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('get_insured_life_form: No product_benefit_id in kwargs')
            return ''

        policy_benefit_id = kwargs.get('policy_benefit_id', None)
        if not policy_benefit_id:
            log.warning('get_insured_life_form: No policy_benefit_id in kwargs')

        policy_benefit_insured_life_id = kwargs.get('policy_benefit_insured_life_id', None)
        if not policy_benefit_insured_life_id:
            log.warning('get_insured_life_form: No policy_benefit_insured_life_id in kwargs')

        form_id = f'benefit_form_{policy_benefit_id}'
        kwargs['form_id'] = form_id
        form_inputs = COMMON.get_person_form_inputs(**kwargs)
        html = f"""
            <div id="formDiv{policy_benefit_id}">
                <form id="benefitForm{policy_benefit_id}" class="d-flex flex-wrap">
                    {form_inputs}
                </form>
            </div>
            <div class="col-md-12 text-right">
                <button type="button" class="btn btn-outline-primary cancelBtn" data-target="benefitDiv{policy_benefit_id}"
                    data-policy_id="{policy_id}" data-product_benefit_id="{product_benefit_id}"
                    data-policy_benefit_id="{policy_benefit_id}">Cancel</button>

                <button type="button" class="btn btn-primary saveBtn" data-target="benefitDiv{policy_benefit_id}"
                    data-policy_id="{policy_id}" data-product_benefit_id="{product_benefit_id}"
                    data-policy_benefit_id="{policy_benefit_id}"
                    data-policy_benefit_insured_life_id="{policy_benefit_insured_life_id}">Save</button>
            </div>
        """
        javascript = f"""
        <script src=''>
            var policyBenefitId = '{policy_benefit_id}';
        """
        javascript += """
            var containerDiv = $('#formDiv' + policyBenefitId);
            var benefit_form = $('#benefitForm' + policyBenefitId);
            setFormValidation(benefit_form);
            $('.saveBtn[data-target="benefitDiv'+ policyBenefitId +'"]').click(function(){
                var btnData = $(this).data();
                var benefit_form_valid = FormIsValid(benefit_form);
                if (benefit_form_valid){
                    var formserial = getFormData(benefit_form);
                    $.extend(formserial, btnData);
                    $.post('/policy/save_benefit_life_assured', formserial, function(data){
                        var result = JSON.parse(data);
                        if (result.success === true){
                            $('#contentDiv').load('/policy/get_benefits_html', btnData, function(d){
                                return false;
                            });
                        } else {
                            showNotification(result.status, result.message)
                        }
                    });
                }
            });

            var idNumber = $('#number');
            var idType = $('#identity_type_id');
            var saidType = $(identity_type_id).data('saidId');
            var saidLength = $(identity_type_id).data('length');

            idNumber.on('keyup', function(){
                if ((idNumber.val().length >= saidLength) && (parseInt($('#identity_type_id option:selected').val()) === saidType)){
                    var params = {
                        'identity_type_id': idType.val(),
                        'identity_number': idNumber.val()
                    }
                    $.post('/members/check_member_exists', params, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            var kwargs = {
                                'entity_person_id': result.data,
                                'form_id': 'benefitForm' + policyBenefitId
                            }
                            $(containerDiv).load('/common/get_edit_person_form', kwargs, function(){
                                benefit_form = $('#benefitForm' + policyBenefitId);
                                setFormValidation(benefit_form);
                                return false;
                            });
                        }
                        return false;
                    });
                }
            });

            $('.cancelBtn').click(function(){
                var data = $(this).data();
                $('#contentDiv').load('/policy/get_benefits_html', data, function(d){
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def save_benefit_life_assured(self, *args, **kwargs):
        policy_benefit_id = kwargs.get('policy_benefit_id', None)
        if not policy_benefit_id:
            log.warning('save_benefit_life_assured: No policy_benefit_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy benefit to add this assured to', 'status': 'danger'})

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('save_benefit_life_assured: No product_benefit_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a product benefit to add this assured to', 'status': 'danger'})

        policy_benefit_insured_life_id = kwargs.get('policy_benefit_insured_life_id', None)
        if not policy_benefit_insured_life_id:
            log.warning('save_benefit_life_assured: No policy_benefit_insured_life_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a life assured update', 'status': 'danger'})

        date_of_birth = kwargs.get('date_of_birth', None)
        if not date_of_birth:
            log.warning('save_benefit_life_assured: No date_of_birth in kwargs')

        insured_life = PolicyBenefitInsuredLife.by_id(policy_benefit_insured_life_id)
        if not insured_life.date_of_birth == (str_to_date(date_of_birth)).date():
            return json.dumps({'success': False, 'message': 'Date of birth on quote differs from application form', 'status': 'danger'})

        res = self.validate_benefit_min_max_age(product_benefit_id, date_of_birth)
        if not res.get('success'):
            message = res.get('message', 'The member that you are trying to add does not qualify due to age criteria')
            return json.dumps({'success': False, 'message': message, 'status': 'danger'})

        entity_person_id = kwargs.get('entity_person_id', None)
        if not entity_person_id:
            log.info('save_benefit_life_assured: Saving new entity_person')
            entity_id = COMMON.save_new_personobj(**kwargs)
            entity_person = EntityPerson.by_attr_first('entity_id', entity_id)
            entity_person_id = entity_person.id

        insured_life.entity_person_id = entity_person_id
        DBSession.flush()

        return json.dumps({'success': True, 'message': 'Life insured saved', 'status': 'success'})

# Compulsory Application Non Life Benefits

    def get_non_life_application_compulsory_benefit_forms(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_non_life_application_compulsory_benefit_forms: No policy_id in kwargs')
            return ''

        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_non_life_application_compulsory_benefit_forms: No product_id in kwargs')
            return ''

        dbase_query = self.get_non_life_product_benefit_data(product_id, compulsory=True)
        kwargs['benefit_title'] = 'Compulsory Non Life Benefit'
        return self.get_non_life_application_benefits(dbase_query, **kwargs)

    def get_non_life_application_benefits(self, dbase_query=None, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_non_life_application_benefits: No policy_id in kwargs')
            return ''

        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_non_life_application_benefits: No product_id in kwargs')
            return ''

        benefit_title = kwargs.get('benefit_title', '')
        compulsory = kwargs.get('compulsory', True)
        form_id_title = 'comp' if compulsory else 'opt'
        html = ""
        for item in dbase_query:
            asset_type_id = item.BenefitInsuredNonLife.benefit_asset_type_id
            benefit_type = TYPEUTIL.get_pretty_name('benefit_asset_type', asset_type_id)

            kwargs['product_benefit_id'] = item.Benefit.id

            params = {
                'policy_id': policy_id,
                'product_benefit_id': item.Benefit.id,
                'product_id': product_id,
                'benefit_title': f'{benefit_title} - {benefit_type}',
            }

            if asset_type_id == BUSINESS:
                data = self.get_policy_benefit_non_life_business_data(policy_id, compulsory=True)
                if len(data) < 1:
                    continue
                kwargs['action_button_text'] = 'Add Business'
                kwargs['action_post_target'] = '/policy/save_business'
                kwargs['form_id'] = f'{form_id_title}_form_insured_business'

                indicator = self.get_application_business_benefit_indicator(policy_id, compulsory)
                params['benefit_title'] = f'{benefit_title} - {benefit_type} {indicator}'

                if compulsory:
                    params['table'] = self.get_non_life_application_compulsory_business_benefit_table(**kwargs)
                else:
                    params['table'] = self.get_non_life_application_optional_business_benefit_table(**kwargs)
                html += self.get_benefit_card(**params)

            elif asset_type_id == EMPLOYEE:
                data = self.get_policy_benefit_non_life_employee_data(policy_id, compulsory=True)
                if len(data) < 1:
                    continue
                kwargs['action_button_text'] = 'Add Employee'
                kwargs['action_post_target'] = '/policy/save_quote_asset_employee'
                kwargs['form_id'] = f'{form_id_title}_employee_form'

                indicator = self.get_application_employee_benefit_indicator(policy_id, compulsory)
                params['benefit_title'] = f'{benefit_title} - {benefit_type} {indicator}'

                if compulsory:
                    params['table'] = self.get_non_life_application_compulsory_employee_benefit_table(**kwargs)
                else:
                    params['table'] = self.get_non_life_application_optional_employee_benefit_table(**kwargs)
                html += self.get_benefit_card(**params)

            elif asset_type_id == PROPERTY:
                data = self.get_policy_benefit_non_life_property_data(policy_id, compulsory=True)
                if len(data) < 1:
                    continue
                kwargs['action_button_text'] = 'Add Property'
                kwargs['action_post_target'] = '/policy/save_property'
                kwargs['form_id'] = f'{form_id_title}_form_insured_property'

                indicator = self.get_application_property_benefit_indicator(policy_id, compulsory)
                params['benefit_title'] = f'{benefit_title} - {benefit_type} {indicator}'

                if compulsory:
                    params['table'] = self.get_non_life_application_property_benefit_table(**kwargs)
                else:
                    params['table'] = self.get_non_life_application_property_benefit_table(**kwargs)
                html += self.get_benefit_card(**params)

            elif asset_type_id == VEHICLE:
                data = self.get_policy_benefit_non_life_vehicle_data(policy_id, compulsory=True)
                if len(data) < 1:
                    continue
                kwargs['action_button_text'] = 'Add Vehicle'
                kwargs['action_post_target'] = '/policy/save_vehicle'
                kwargs['form_id'] = f'{form_id_title}_form_insured_vehicle'

                indicator = self.get_application_vehicle_benefit_indicator(policy_id, compulsory)
                params['benefit_title'] = f'{benefit_title} - {benefit_type} {indicator}'

                if compulsory:
                    params['table'] = self.get_non_life_application_vehicle_benefit_table(**kwargs)
                else:
                    params['table'] = self.get_non_life_application_vehicle_benefit_table(**kwargs)
                html += self.get_benefit_card(**params)

            elif asset_type_id == LANDLORD:
                data = self.get_policy_benefit_non_life_landlord_data(policy_id, compulsory=True)
                if len(data) < 1:
                    continue
                kwargs['action_button_text'] = 'Add Landlord'
                kwargs['action_post_target'] = '/policy/save_landlord'
                kwargs['form_id'] = f'{form_id_title}_form_insured_landlord'

                indicator = self.get_application_landlord_benefit_indicator(policy_id, compulsory)
                params['benefit_title'] = f'{benefit_title} - {benefit_type} {indicator}'

                if compulsory:
                    params['table'] = self.get_non_life_application_landlord_benefit_table(**kwargs)
                else:
                    params['table'] = self.get_non_life_application_landlord_benefit_table(**kwargs)
                html += self.get_benefit_card(**params)

        return html

    def get_application_business_benefit_indicator(self, policy_id=None, compulsory=True, *args, **kwargs):
        if not policy_id:
            return ''

        dbase_query = self.get_policy_benefit_non_life_business_data(policy_id, compulsory)
        benefit_count = len(dbase_query)
        insured_count = 0
        [insured_count := insured_count + 1 for dq in dbase_query if dq.PolicyBenefitInsuredAssetBusiness.business_organisation_id]
        return self.get_indicator_html(insured_count, benefit_count, 'Business')

    def get_application_employee_benefit_indicator(self, policy_id, compulsory=True, *args, **kwargs):
        if not policy_id:
            return ''

        dbase_query = self.get_policy_benefit_non_life_employee_data(policy_id, compulsory)
        benefit_count = len(dbase_query)
        insured_count = 0
        [insured_count := insured_count + 1 for dq in dbase_query if dq.PolicyBenefitInsuredAssetEmployee.entity_person_id]
        return self.get_indicator_html(insured_count, benefit_count, 'Employees')

    def get_application_property_benefit_indicator(self, policy_id, compulsory=True, *args, **kwargs):
        if not policy_id:
            return ''

        dbase_query = self.get_policy_benefit_non_life_property_data(policy_id, compulsory)
        benefit_count = len(dbase_query)
        insured_count = 0
        [insured_count := insured_count + 1 for dq in dbase_query if dq.PolicyBenefitInsuredAssetProperty.property_address]
        return self.get_indicator_html(insured_count, benefit_count, 'Properties')

    def get_application_vehicle_benefit_indicator(self, policy_id, compulsory=True, *args, **kwargs):
        if not policy_id:
            return ''

        dbase_query = self.get_policy_benefit_non_life_vehicle_data(policy_id, compulsory)
        benefit_count = len(dbase_query)
        insured_count = 0
        [insured_count := insured_count + 1 for dq in dbase_query if dq.PolicyBenefitInsuredAssetVehicle.registration_number]
        return self.get_indicator_html(insured_count, benefit_count, 'Vehicles')

    def get_application_landlord_benefit_indicator(self, policy_id, compulsory=True, *args, **kwargs):
        if not policy_id:
            return ''

        dbase_query = self.get_policy_benefit_non_life_landlord_data(policy_id, compulsory)
        benefit_count = len(dbase_query)
        insured_count = 0
        [insured_count := insured_count + 1 for dq in dbase_query if dq.PolicyBenefitInsuredAssetLandlord.rental_amount]
        return self.get_indicator_html(insured_count, benefit_count, 'Landlords')

    def get_indicator_html(self, insured_count=0, benefit_count=0, popover_label='Items', *args, **kwargs):
        if insured_count == benefit_count:
            return f'''
                <i id="indicatorIcon" class="fas fa-check-circle text-success"
                    data-toggle="popover" data-trigger="hover" title="Complete"
                    data-content="{insured_count}/{benefit_count} {popover_label} loaded">
                </i>
            '''
        else:
            return f'''
                <i id="indicatorIcon" class="fas fa-info-circle text-danger"
                    data-toggle="popover" data-trigger="hover" title="Incomplete"
                    data-content="{insured_count}/{benefit_count} {popover_label} loaded">
                </i>
            '''

# Compulsory Application Non Life Asset Business

    def get_non_life_application_compulsory_business_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_compulsory_quote_life_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_business_data(policy_id, compulsory=True)
        return self.get_non_life_application_business_benefit_table(dbase_query)

    def get_non_life_application_business_benefit_table(self, dbase_query=[], compulsory=True, *args, **kwargs):
        if not dbase_query:
            return ''

        tag = 'comp' if compulsory else 'opt'
        outputlist = []
        for item in dbase_query:
            benefit = item.Benefit

            insured = item.PolicyBenefitInsuredAssetBusiness

            policy_benefit = item.PolicyBenefit

            premium, sum_insured = self.get_benefit_premium_html(policy_benefit, benefit, policy_benefit.policy_id)
            error = f"""
                <span class="action_link text-danger updateBusiness" data-policy_benefit_id="{policy_benefit.id}"
                    data-policy_id="{policy_benefit.policy_id}" data-product_id="{benefit.product_id}"
                    data-product_benefit_id="{benefit.id}" data-policy_benefit_insured_asset_business_id="{insured.id}"
                    data-form="{tag}_businessFormDiv">
                    Not Set
                </span>
            """
            action = ''
            name = error
            tax_number = error
            registration_number = error
            if not insured.business_organisation_id:
                action = ''
                # action = f"""
                #     <button type="button" class="btn btn-danger updateBusiness" data-policy_benefit_id="{policy_benefit.id}"
                #         data-policy_id="{policy_benefit.policy_id}" data-product_id="{benefit.product_id}"
                #         data-product_benefit_id="{benefit.id}" data-policy_benefit_insured_asset_business_id="{insured.id}"
                #         data-form="{tag}_businessFormDiv">
                #         Update
                #     </button>
                # """
            else:
                org = EntityOrganisation.by_id(insured.business_organisation_id)
                name = org.name
                tax_number = org.tax_number
                registration_number = org.registration_number
                # action = f"""
                #     <button type="button" class="btn btn-warning editBusiness" data-policy_benefit_id="{policy_benefit.id}"
                #         data-policy_id="{policy_benefit.policy_id}" data-product_id="{benefit.product_id}"
                #         data-product_benefit_id="{benefit.id}" data-entity_organisation_id="{org.id}"
                #         data-policy_benefit_insured_asset_business_id="{insured.id}"
                #         data-form="{tag}_businessFormDiv">
                #         Edit
                #     </button>
                # """
            outputlist.append({
            'name': name,
            'tax_number': tax_number,
            'registration_number': registration_number,
            'sum_insured': sum_insured,
            'premium': premium,
            'action': action,
        })
        dbcolumnlist=[
            'name',
            'tax_number',
            'registration_number',
            'sum_insured',
            'premium',
            'action',
        ]
        theadlist=[
            'Name',
            'Tax Number',
            'Registration Number',
            'Sum Insured',
            'Premium',
            '',
        ]
        tdclasslist = [
            'w-25',
            '',
            '',
            'w-15',
            'w-10',
            'w-10 text-right',
        ]

        if not outputlist:
            return ''
        table = build_html_table(outputlist, dbcolumnlist, theadlist, f"benefit_table", tdclasslist)
        html = f"""
            {table}
            <div id="{tag}_businessFormDiv" style="display:none;"></div>
        """
        javascript = """
        <script src=''>
            $('.updateBusiness').click(function(){
                $(this).parent('#benefit_table tr').removeClass('bg-light font-weight-bold');
                $(this).closest('tr').addClass('bg-light font-weight-bold');
                var btnData = $(this).data();
                var businessFormDiv = $('#' + btnData.form);
                businessFormDiv.load('/policy/get_asset_business_application_form?', btnData, function(data){
                    businessFormDiv.slideDown('slow');
                    return false;
                });
            });
            $('.editBusiness').click(function(){
                var btnData = $(this).data();
                var businessFormDiv = $('#' + btnData.form);
                businessFormDiv.load('/policy/get_edit_asset_business_application_form?', btnData, function(data){
                    businessFormDiv.slideDown('slow');
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_edit_asset_business_application_form(self, *args, **kwargs):
        entity_organisation_id = kwargs.get('entity_organisation_id', None)
        if not entity_organisation_id:
            log.warning('get_asset_business_quote_form_inputs: No entity_organisation_id in kwargs')
            return ''

        kwargs['entity_org'] = EntityOrganisation.by_id(entity_organisation_id)
        return self.get_asset_business_application_form(**kwargs)

    @expose()
    def get_asset_business_application_form(self, *args, **kwargs):
        entity_org = kwargs.get('entity_org', None)

        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_asset_business_application_form: No policy_id in kwargs')
            return ''

        policy_benefit_insured_asset_business_id = kwargs.get('policy_benefit_insured_asset_business_id', None)
        if not policy_benefit_insured_asset_business_id:
            log.warning('get_asset_business_quote_form_inputs: No policy_benefit_insured_asset_business_id in kwargs')
            return ''

        form_id = kwargs.get('form_id', 'form_insured_business')

        hidden_asset_business_dict = {
            'input_type': 'widget',
            'widget': get_hidden_input(**{'id': 'policy_benefit_insured_asset_business_id', 'value': policy_benefit_insured_asset_business_id})
            }

        selected_organisation_type = kwargs.get('entity_organisation_type_id', None) if not entity_org else entity_org.entity_organisation_type_id
        selectbox_organisation_type_dict = {
            'label_attrs': 'required',
            'input_id': 'entity_organisation_type_id',
            'label_val': _('Organisation type'),
            'input_attrs': 'required',
            'input_type': 'custom',
            'input_field': self.get_selectbox_entity_organisation_type(**{'selected': selected_organisation_type})
            }
        code = entity_org.code if entity_org else ''
        code_dict = {
            'label_attrs': 'required',
            'input_id': 'code',
            'label_val': _('Code'),
            'input_attrs': 'required maxlength="200"',
            'input_val': f'value="{code}"'
            }
        name = entity_org.name if entity_org else ''
        name_dict = {
            'label_attrs': 'required',
            'input_id': 'name',
            'label_val': _('Name'),
            'input_attrs': 'required maxlength="200"',
            'input_val': f'value="{name}"'
            }
        tax_number = entity_org.tax_number if entity_org else ''
        tax_number_dict = {
            'label_attrs': 'required',
            'input_id': 'tax_number',
            'label_val': _('Tax Number'),
            'input_attrs': 'required maxlength="200"',
            'input_val': f'value="{tax_number}"'
            }
        registration_number = entity_org.registration_number if entity_org else ''
        registration_number_dict = {
            'label_attrs': 'required',
            'input_id': 'registration_number',
            'label_val': _('Registration Number'),
            'input_attrs': 'required maxlength="200"',
            'input_val': f'value="{registration_number}"'
            }
        action_dict = {
            'input_type': 'widget',
            'widget': f"""
                <div class="col-md-12 text-right">
                    <button type="button" id="saveBusinessBtn"
                        data-form="{form_id}" data-policy_id="{policy_id}" class="btn btn-primary mt-0">Save Business
                    </button>
                </div>
            """
            }
        params_list = [
            hidden_asset_business_dict,
            selectbox_organisation_type_dict,
            code_dict,
            name_dict,
            tax_number_dict,
            registration_number_dict,
            action_dict,
        ]
        entity_id = kwargs.get('entity_id', None)
        if entity_id:
            params_list.append({
                'input_type': 'widget',
                'widget': get_hidden_input(**{'id': 'entity_id', 'value': entity_id})
                })

        javascript = """
        <script src=''>
            $('#saveBusinessBtn').click(function(){
                var kwargs = $(this).data();
                var businessForm = $('#' + kwargs.form)
                setFormValidation(businessForm);
                var valid = FormIsValid(businessForm);
                if (valid){
                    var formserial = getFormData(businessForm);
                    $.post('/policy/save_business_application', formserial, function(data){
                        var result = JSON.parse(data);
                        if (result.success === true){
                            $('#contentDiv').load('/policy/get_benefits_html', kwargs, function(d){
                                return false;
                            });
                            return false;
                        } else {
                            showNotification(result.status, result.message);
                            return false;
                        }
                    });
                }
            });
        </script>
        """
        form_class = kwargs.get('form_class', 'd-flex flex-wrap')
        return build_html_form(form_id, params_list, form_class) + javascript

    def get_selectbox_entity_organisation_type(self, *args, **kwargs):
        dbase_query = EntityOrganisationType.get_all('name')
        kwargs['active'] = True
        kwargs['id'] = 'entity_organisation_type_id'
        kwargs['outputlist'] = [{'name': m.name, 'id': m.id} for m in dbase_query]
        return create_selectbox_html(**kwargs)

    @expose()
    def save_business_application(self, *args, **kwargs):
        policy_benefit_insured_asset_business_id = kwargs.get('policy_benefit_insured_asset_business_id', None)
        if not policy_benefit_insured_asset_business_id:
            log.warning('save_business_application: No policy_benefit_insured_asset_business_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a business asset', 'status': 'danger'})

        entity_organisation_type_id = kwargs.get('entity_organisation_type_id', None)
        if not entity_organisation_type_id:
            log.warning('save_business_application: No entity_organisation_type_id in kwargs')
            return json.dumps({'success': False, 'message': 'Organisation type field cannot be empty', 'status': 'danger'})

        code = kwargs.get('code', None)
        if not code:
            log.warning('save_business_application: No code in kwargs')
            return json.dumps({'success': False, 'message': 'Code field cannot be empty', 'status': 'danger'})

        name = kwargs.get('name', None)
        if not name:
            log.warning('save_business_application: No name in kwargs')
            return json.dumps({'success': False, 'message': 'Name field cannot be empty', 'status': 'danger'})

        tax_number = kwargs.get('tax_number', None)
        if not tax_number:
            log.warning('save_business_application: No tax_number in kwargs')
            return json.dumps({'success': False, 'message': 'Tax Number field cannot be empty', 'status': 'danger'})

        registration_number = kwargs.get('registration_number', None)
        if not registration_number:
            log.warning('save_business_application: No registration_number in kwargs')
            return json.dumps({'success': False, 'message': 'Registration number field cannot be empty', 'status': 'danger'})

        entity_id = kwargs.get('entity_id', None)
        if not entity_id:
            log.warning('save_business_application: No entity_id in kwargs')

        ent_org = None
        if entity_id:
            ent_org = EntityOrganisation.by_attr_first('entity_id', entity_id)
        else:
            ent_org = DBSession.query(EntityOrganisation).\
            filter(EntityOrganisation.tax_number == tax_number.strip()).\
            filter(EntityOrganisation.registration_number == registration_number.strip()).\
            filter(EntityOrganisation.bln_active == True).\
            first()

        entity_organisation_id = None
        if not ent_org:
            if not entity_id:
                entity_id = COMMON.save_new_entity(**{
                    'entity_type_id': ORGANISATION
                })

            kwargs['entity_id'] = entity_id
            entity_organisation_id = COMMON.save_new_entity_organisation(**kwargs)
        else:
            entity_organisation_id = ent_org.id
            kwargs['entity_organisation_id'] = entity_organisation_id
            result = COMMON.save_edit_entity_organisation(**kwargs)

        business_asset = PolicyBenefitInsuredAssetBusiness.by_id(policy_benefit_insured_asset_business_id)
        if not business_asset:
            return json.dumps({'success': False, 'message': 'Could not update the business asset benefit', 'status': 'danger'})

        business_asset.business_organisation_id = entity_organisation_id
        DBSession.flush()

        return json.dumps({'success': True, 'message': 'Success!', 'status': 'success'})

# Compulsory Application Non Life Asset Employee

    def get_non_life_application_compulsory_employee_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_compulsory_quote_life_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_employee_data(policy_id, compulsory=True)
        return self.get_non_life_application_employee_benefit_table(dbase_query)

    def get_non_life_application_employee_benefit_table(self, dbase_query=[], compulsory=True, *args, **kwargs):
        if not dbase_query:
            return ''

        comp = 'comp' if compulsory else 'opt'
        contentDiv = f'{comp}EmployeeFormDiv'
        outputlist = []
        for item in dbase_query:
            benefit = item.Benefit

            insured = item.PolicyBenefitInsuredAssetEmployee

            policy_benefit = item.PolicyBenefit

            premium, sum_insured = self.get_benefit_premium_html(policy_benefit, benefit, policy_benefit.policy_id)

            sane_dob = date_to_str(insured.date_of_birth, dateformat='%d-%m-%Y')
            if not insured.entity_person_id:
                sane_dob = f"""
                    <div class="action_link text-danger updateEmployee" data-policy_benefit_id="{policy_benefit.id}"
                        data-policy_id="{policy_benefit.policy_id}" data-product_id="{benefit.product_id}"
                        data-product_benefit_id="{benefit.id}" data-policy_benefit_insured_asset_employee_id="{insured.id}"
                        data-form="{contentDiv}" data-table_name="{comp}_employee_table">
                        {sane_dob}
                    </div>
                """
            action = ''
            outputlist.append({
            'benefit': benefit.name,
            'date_of_birth': sane_dob,
            'sum_insured': sum_insured,
            'premium': premium,
            'action': action,
        })
        dbcolumnlist=[
            'benefit',
            'date_of_birth',
            'sum_insured',
            'premium',
            'action',
        ]
        theadlist=[
            'Benefit',
            'Date of Birth',
            'Sum Insured',
            'Premium',
            '',
        ]
        tdclasslist = [
            'w-25',
            '',
            'w-15',
            'w-10',
            'w-10 text-right',
        ]

        if not outputlist:
            return ''
        table = build_html_table(outputlist, dbcolumnlist, theadlist, f"{comp}_employee_table", tdclasslist)
        html = f"""
            {table}
            <div id="{contentDiv}" style="display:none;"></div>
        """
        javascript = """
        <script src=''>
            $('.updateEmployee').click(function(){
                var btnData = $(this).data();
                $('#' + btnData.table_name + ' tr').removeClass('bg-light font-weight-bold');
                $(this).closest('tr').addClass('bg-light font-weight-bold');
                var employeeFormDiv = $('#' + btnData.form);
                employeeFormDiv.load('/policy/get_new_non_life_application_employee_form?', btnData, function(data){
                    employeeFormDiv.slideDown('slow');
                    return false;
                });
            });
            $('.editEmployee').click(function(){
                var btnData = $(this).data();
                var employeeFormDiv = $('#' + btnData.form);
                employeeFormDiv.load('/policy/get_new_non_life_application_employee_form?', btnData, function(data){
                    employeeFormDiv.slideDown('slow');
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_new_non_life_application_employee_form(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_insured_life_form: No policy_id in kwargs')
            return ''

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('get_insured_life_form: No product_benefit_id in kwargs')
            return ''

        policy_benefit_id = kwargs.get('policy_benefit_id', None)
        if not policy_benefit_id:
            log.warning('get_insured_life_form: No policy_benefit_id in kwargs')

        policy_benefit_insured_asset_employee_id = kwargs.get('policy_benefit_insured_asset_employee_id', None)
        if not policy_benefit_insured_asset_employee_id:
            log.warning('get_insured_life_form: No policy_benefit_insured_asset_employee_id in kwargs')

        form_id = f'benefit_form_{policy_benefit_id}'
        kwargs['form_id'] = form_id
        form_inputs = COMMON.get_person_form_inputs(**kwargs)
        html = f"""
            <div id="formDiv{policy_benefit_id}">
                <form id="benefitForm{policy_benefit_id}" class="d-flex flex-wrap">
                    {form_inputs}
                </form>
            </div>
            <div class="col-md-12 text-right">
                <button type="button" class="btn btn-outline-primary cancelBtn" data-target="benefitDiv{policy_benefit_id}"
                    data-policy_id="{policy_id}" data-product_benefit_id="{product_benefit_id}"
                    data-policy_benefit_id="{policy_benefit_id}">Cancel</button>

                <button type="button" class="btn btn-primary saveBtn" data-target="benefitDiv{policy_benefit_id}"
                    data-policy_id="{policy_id}" data-product_benefit_id="{product_benefit_id}"
                    data-policy_benefit_id="{policy_benefit_id}"
                    data-policy_benefit_insured_asset_employee_id="{policy_benefit_insured_asset_employee_id}">Save</button>
            </div>
        """
        javascript = f"""
        <script src=''>
            var policyBenefitId = '{policy_benefit_id}';
        """
        javascript += """
            var containerDiv = $('#formDiv' + policyBenefitId);
            var benefit_form = $('#benefitForm' + policyBenefitId);
            setFormValidation(benefit_form);
            $('.saveBtn[data-target="benefitDiv'+ policyBenefitId +'"]').click(function(){
                var btnData = $(this).data();
                console.log(btnData);
                var benefit_form_valid = FormIsValid(benefit_form);
                if (benefit_form_valid){
                    var formserial = getFormData(benefit_form);
                    $.extend(formserial, btnData);
                    $.post('/policy/save_non_life_application_asset_employee', formserial, function(data){
                        console.log(data);
                        var result = JSON.parse(data);
                        if (result.success === true){
                            $('#contentDiv').load('/policy/get_benefits_html', btnData, function(d){
                                return false;
                            });
                        } else {
                            showNotification(result.status, result.message)
                        }
                    });
                }
            });

            var idNumber = $('#number');
            var idType = $('#identity_type_id');
            var saidType = $(identity_type_id).data('saidId');
            var saidLength = $(identity_type_id).data('length');

            idNumber.on('keyup', function(){
                if ((idNumber.val().length >= saidLength) && (parseInt($('#identity_type_id option:selected').val()) === saidType)){
                    var params = {
                        'identity_type_id': idType.val(),
                        'identity_number': idNumber.val()
                    }
                    $.post('/members/check_member_exists', params, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            var kwargs = {
                                'entity_person_id': result.data,
                                'form_id': 'benefitForm' + policyBenefitId
                            }
                            $(containerDiv).load('/common/get_edit_person_form', kwargs, function(){
                                benefit_form = $('#benefitForm' + policyBenefitId);
                                setFormValidation(benefit_form);
                                return false;
                            });
                        }
                        return false;
                    });
                }
            });

            $('.cancelBtn').click(function(){
                var data = $(this).data();
                $('#contentDiv').load('/policy/get_benefits_html', data, function(d){
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def save_non_life_application_asset_employee(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('save_non_life_application_asset_employee: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy', 'status': 'danger'})

        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            log.warning('save_non_life_application_asset_employee: No product_benefit_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a benefit', 'status': 'danger'})

        policy_benefit_id = kwargs.get('policy_benefit_id', None)
        if not policy_benefit_id:
            log.warning('save_non_life_application_asset_employee: No policy_benefit_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy benefit', 'status': 'danger'})

        policy_benefit_insured_asset_employee_id = kwargs.get('policy_benefit_insured_asset_employee_id', None)
        if not policy_benefit_insured_asset_employee_id:
            log.warning('save_non_life_application_asset_employee: No policy_benefit_insured_asset_employee_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a Employee benefit', 'status': 'danger'})

        date_of_birth = kwargs.get('date_of_birth', None)
        if not date_of_birth:
            log.warning('save_non_life_application_asset_employee: No date_of_birth in kwargs')

        employee_asset = PolicyBenefitInsuredAssetEmployee.by_id(policy_benefit_insured_asset_employee_id)
        if not employee_asset.date_of_birth == (str_to_date(date_of_birth)).date():
            return json.dumps({'success': False, 'message': 'Date of birth on quote differs from application form', 'status': 'danger'})

        res = self.validate_benefit_min_max_age(product_benefit_id, date_of_birth)
        if not res.get('success'):
            message = res.get('message', 'The member that you are trying to add does not qualify due to age criteria')
            return json.dumps({'success': False, 'message': message, 'status': 'danger'})

        entity_person_id = kwargs.get('entity_person_id', None)
        if not entity_person_id:
            log.info('save_non_life_application_asset_employee: Saving new entity_person')
            entity_id = COMMON.save_new_personobj(**kwargs)
            entity_person = EntityPerson.by_attr_first('entity_id', entity_id)
            entity_person_id = entity_person.id

        employee_asset.entity_person_id = entity_person_id
        DBSession.flush()

        return json.dumps({'success': True, 'message': 'Employee saved', 'status': 'success'})

# Optional Application Life Benefits

    def get_optional_application_life_benefits_html(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_optional_application_life_benefits_html: No policy_id in kwargs')
            return ''

        policy = Policy.by_id(policy_id)

        dbase_query = self.get_life_benefit_data(policy_id, compulsory=False)

        benefit_count = len(dbase_query)
        if benefit_count < 1:
            return ''

        insured_count = 0
        [insured_count := insured_count + 1 for dq in dbase_query if dq.PolicyBenefitInsuredLife.entity_person_id]
        indicator = ''
        if insured_count == benefit_count:
            indicator = f'''
                <i id="indicatorIcon" class="fas fa-check-circle text-success"
                    data-toggle="popover" data-trigger="hover" title="Complete"
                    data-content="{insured_count}/{benefit_count} insureds loaded">
                </i>
            '''
        else:
            indicator = f'''
                <i id="indicatorIcon" class="fas fa-info-circle text-danger"
                    data-toggle="popover" data-trigger="hover" title="Incomplete"
                    data-content="{insured_count}/{benefit_count} insureds loaded">
                </i>
            '''

        kwargs['product_id'] = policy.product_id
        kwargs['benefit_title'] = f'Optional Life Benefits {indicator}'
        kwargs['form'] = ''
        kwargs['table'] = self.get_optional_application_life_benefit_table(**kwargs)
        return self.get_benefit_card(**kwargs)

    def get_optional_application_life_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_optional_application_life_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_life_benefit_data(policy_id, compulsory=False)
        kwargs['refresh_container'] = 'optLifeContainerDiv'
        return self.get_life_application_benefit_table(dbase_query, compulsory=False, **kwargs)

# Optional Appplication Non Life
    def get_non_life_application_optional_benefit_forms(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_non_life_application_optional_benefit_forms: No policy_id in kwargs')
            return ''

        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_non_life_application_optional_benefit_forms: No product_id in kwargs')
            return ''

        dbase_query = self.get_non_life_product_benefit_data(product_id, compulsory=False)
        kwargs['benefit_title'] = 'Optional Non Life Benefit'
        kwargs['compulsory'] = False
        return self.get_non_life_application_benefits(dbase_query, **kwargs)

    def get_non_life_application_optional_business_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_compulsory_quote_life_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_business_data(policy_id, compulsory=False)
        return self.get_non_life_application_business_benefit_table(dbase_query, compulsory=False)

    def get_non_life_application_optional_employee_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_non_life_application_optional_employee_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_employee_data(policy_id, compulsory=False)
        return self.get_non_life_application_employee_benefit_table(dbase_query, compulsory=False)

    def get_non_life_application_property_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_non_life_application_optional_property_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_property_data(policy_id, compulsory=False)
        return self.get_non_life_quote_property_benefit_table(dbase_query, application=True)

    def get_non_life_application_vehicle_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_non_life_application_optional_vehicle_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_vehicle_data(policy_id, compulsory=False)
        return self.get_non_life_quote_vehicle_benefit_table(dbase_query, application=True)

    def get_non_life_application_landlord_benefit_table(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_non_life_application_optional_landlord_benefit_table: No policy_id in kwargs')
            return ''

        dbase_query = self.get_policy_benefit_non_life_landlord_data(policy_id, compulsory=False)
        return self.get_non_life_quote_landlord_benefit_table(dbase_query, application=True)

# Application Payment

    @expose()
    def get_payment_details(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_payment_details: No policy_id in kwargs')
            return ''

        policy = Policy.by_id(policy_id)
        bank_account = EntityBankAccount.by_attr_first('entity_id', policy.policy_payer_entity_id)
        if bank_account:
            bank_account = bank_account.__dict__
        else:
            bank_account = {}
        bank_account['bank_form_id'] = 'bank_form'
        bank_account['form_id'] = 'bank_form'
        bank_account['entity_id'] = policy.policy_payer_entity_id
        banking_form = COMMON.get_bank_account_form(**bank_account)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div id="cardHeader" class="card">
                    <div class="card-header d-flex">
                        <div class="col-md-6 px-0">
                            <h4 class="card-title">Payment Details</h4>
                        </div>
                    </div>
                    <div class="card-body">
                        {banking_form}
                        <div class="col-md-12 text-right">
                            <button id="cancelBtn" type="button" class="btn btn-outline-primary">Cancel</button>
                            <button id="saveBtn" type="button" class="btn btn-primary" data-policy_id="{policy_id}">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script src=''>
            var bank_form = $('#bank_form');
            setFormValidation(bank_form);
            $('#saveBtn').click(function(){
                var kwargs = $(this).data();
                var valid = FormIsValid(bank_form);
                if (valid){
                    var formserial = getFormData(bank_form);
                    $.extend(formserial, kwargs);
                    formserial['entity_person_id'] = $('#cardHeader').data('entity_person_id');
                    $.post('/policy/save_payment_details', formserial, function(data){
                        var result = JSON.parse(data);
                        if (result.success === true){
                            $.redirect('/policy/management', kwargs);
                            return false;
                        }
                    });
                }
            });
        </script>
        """
        return html + javascript

    @expose()
    def save_payment_details(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('save_payment_details: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy', 'status': 'danger'})

        result = COMMON.save_person_bank_account(**kwargs)
        result = json.loads(result)
        if not result.get('success'):
            log.warning('save_payment_details: Bank account save did not succeed')
            message = result.get('message', 'We could not save the bank details, please try again later.')
            return json.dumps({'success': False, 'message': message, 'status': 'danger'})
        
        # Remove
        issued_exists = PolicyStatusType.by_attr_first('name', 'issued')
        print('issued_exists', issued_exists)
        if not issued_exists:
            print('inside')
            this = PolicyStatusType()
            this.name = 'issued'
            DBSession.add(this)
            DBSession.flush()
            print(this.id)

        policy_status = PolicyStatus()
        policy_status.policy_id = policy_id
        policy_status.policy_status_type_id = TYPEUTIL.get_id_of_name('policy_status_type', 'quote')
        DBSession.add(policy_status)
        DBSession.flush()
        return json.dumps({'success': True, 'message': 'Saved!', 'status': 'success'})

###############################################################################
# Application Utilities
###############################################################################

    def validate_benefits(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('validate_benefits: No policy_id in kwargs')
            return {'success': False}

        date_of_birth = kwargs.get('date_of_birth', None)
        if not date_of_birth:
            log.warning('validate_benefits: No date_of_birth in kwargs')
            return {'success': False}

        is_compulsory = kwargs.get('is_compulsory', True)
        is_life = kwargs.get('is_life', True)

        policy = Policy.by_id(policy_id)

        benefits = DBSession.query(Benefit, BenefitInsuredLife).\
            join(BenefitInsuredLife, BenefitInsuredLife.benefit_id == Benefit.id).\
            filter(Benefit.product_id == policy.product_id)

        if is_compulsory:
            benefits = benefits.filter(or_(
                Benefit.is_main_benefit == True,
                Benefit.is_compulsory == True,
            ))
        else:
            benefits = benefits.filter(and_(
                Benefit.is_main_benefit == False,
                Benefit.is_compulsory == False,
            ))

        benefits = benefits.filter(Benefit.is_life == is_life).\
            all()

        relationship_type_id = kwargs.get('relationship_type_id', None)

        for ben in benefits:
            benefit_insured_life = ben.BenefitInsuredLife

            if not benefit_insured_life.benefit_insured_life_relationship_type_id == relationship_type_id:
                continue

            validate_age = self.validate_benefit_min_max_age(ben.Benefit.id, date_of_birth)
            if not validate_age.get('success'):
                message = validate_age.get('message', 'Principal Member age failed minimum criteria or max lives allocated to benefit')
                log.info(f'validate_benefits: {message}')
                return {'success': False, 'message': message, 'status': 'danger'}

            max_lives = self.validate_benefit_assured_max(policy_id, ben.Benefit.id)
            if not max_lives.get('success'):
                message = max_lives.get('message', 'Maximum lives reached on one of the compulsory benefit')
                log.info(f'validate_benefits: {message}')
                return {'success': False, 'message': message, 'status': 'danger'}

        return {'success': True}

    def validate_benefit_min_max_age(self, product_benefit_id=None, date_of_birth=None, *args, **kwargs):
        benefit  = Benefit.by_id(product_benefit_id)
        if not benefit:
            log.warning('validate_benefit_min_max_age: No benefit in args')
            return {'success': False, 'message': 'No benefit selected'}

        if not date_of_birth:
            message = 'No date_of_birth in args'
            log.warning(f'validate_benefit_min_max_age: {message}')
            return {'success': False, 'message': message}

        sane_dob = str_to_date(date_of_birth)
        age = calculate_age(sane_dob)

        benefit_insured_life = BenefitInsuredLife.by_attr_first('benefit_id', benefit.id)
        relationship = TYPEUTIL.get_pretty_name('benefit_insured_life_relationship_type', benefit_insured_life.benefit_insured_life_relationship_type_id)
        if age >= benefit_insured_life.maximum_entry_age:
            print(f'age: {age}', f'benefit_insured_life.maximum_entry_age: {benefit_insured_life.maximum_entry_age}')
            return {'success': False, 'message': f'{relationship.title()} age exceeds maximum entry age'}

        if age <= benefit_insured_life.minimum_age:
            return {'success': False, 'message': f'{relationship.title()} age is below minimum entry age'}

        if age >= benefit_insured_life.expiry_age:
            return {'success': False, 'message': f'{relationship.title()} age exceeds expiry age'}

        return {'success': True}

    def validate_benefit_assured_max(self, policy_id=None, product_benefit_id=None, *args, **kwargs):
        if not policy_id:
            log.warning('validate_benefit_assured_max: No policy_id in args')
            return {'success': False}
        if not product_benefit_id:
            log.warning('validate_benefit_assured_max: No product_benefit_id in args')
            return {'success': False}

        benefit_insured_life = BenefitInsuredLife.by_attr_first('benefit_id', product_benefit_id)
        policy_benefit = DBSession.query(PolicyBenefit).\
            filter(PolicyBenefit.policy_id == policy_id).\
            filter(PolicyBenefit.product_benefit_id == product_benefit_id).\
            first()

        if not policy_benefit:
            return {'success': True}

        benefit_insured_count = DBSession.query(PolicyBenefitInsuredLife).\
            join(EntityPerson, EntityPerson.id == PolicyBenefitInsuredLife.entity_person_id).\
            filter(PolicyBenefitInsuredLife.policy_benefit_id == policy_benefit.id).\
            filter(PolicyBenefitInsuredLife.bln_active == True).\
            value(func.count(PolicyBenefitInsuredLife.id))

        if benefit_insured_count >= benefit_insured_life.maximum_lives:
            benefit = Benefit.by_attr_first('id', product_benefit_id)
            return {'success': False, 'message': f'Maximum insured lives count reached on "{benefit.name}" benefit'}

        return {'success': True}

###############################################################################
# Policy - Edit
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def management(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return redirect('/policy/index')

        policy = Policy.by_id(policy_id)
        if not policy:
            return redirect('/policy/index')

        policy_status = PolicyStatus.by_attr_first('policy_id', policy_id)
        if not policy:
            return redirect('/policy/index')

        policy_status_name = TYPEUTIL.get_pretty_name('policy_status_type', policy_status.policy_status_type_id)

        tab_list = [
            {'title': 'Overview', 'target_url': '/policy/get_policy_overview_content'},
            # {'title': 'Benefits', 'target_url': '/policy/get_policy_benefit_content'},
            #{'title': 'History', 'target_url': '/policy/get_policy_history_content'},
            # {'title': 'Transactions', 'target_url': '/policy/get_policy_transaction_content'},
            {'title': 'Documents', 'target_url': '/policy/get_policy_document_content'},
            # {'title': 'Communication', 'target_url': '/policy/get_policy_communication_content'},
            #{'title': 'Miscellaneous', 'target_url': '/policy/get_policy_misc_content'}
        ]
        nav_items = ""
        for i, tab in enumerate(tab_list):
            title = tab.get('title', None)
            target_url = tab.get('target_url', None)
            active = 'active' if i == 0 else ''
            nav_items += f"""
                <li class="nav-item">
                    <div class="nav-link {active}" data-toggle="tab" data-target-url="{target_url}" role="tablist">
                        {title}
                    </div>
                </li>
            """
    
        html = f"""
        <div class="card pb-5">
            <div class="card-header">
                <h4 class="card-title">Policy Number: {policy.policy_number} ({policy_status_name})</h4>
            </div>
            <div class="card-body">
                <ul id="tabsHeader" class="nav nav-pills nav-pills-primary" role="tablist" data-policy_id="{policy_id}">
                    {nav_items}
                </ul>
            </div>
        </div>
        <div id="contentDiv" class="tab-content tab-space pt-1">
        </div>
        """
        javascript = """
        var contentDiv = $('#contentDiv');
        $('.nav-link').click(function(){
            var targetUrl = $(this).data('targetUrl');
            var kwargs = $('#tabsHeader').data();
            contentDiv.load(targetUrl, kwargs, function(e){
                return false;
            })
        });
        $('.nav-link').first().click();
        """
        title = _(f"Policy Management for {policy.policy_number}")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_policy_overview_content(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''

        policy = Policy.by_id(policy_id)
        if not policy:
            return ''

        owner_entity_person = EntityPerson.by_attr_first('entity_id', policy.policy_owner_entity_id)
        payer_entity_person = EntityPerson.by_attr_first('entity_id', policy.policy_payer_entity_id)

        card = ''
        if policy.policy_payer_entity_id == policy.policy_owner_entity_id:
            policy_owner = policy_payer = COMMON.get_member_view_items(**{'entity_person_id': payer_entity_person.id})
            card += COMMON.get_person_card(_('Owner'), policy_owner)
            card += COMMON.get_person_card(_('Payer'), policy_payer)
            
        else:
            policy_payer = COMMON.get_member_view_items(**{'entity_person_id': payer_entity_person.id})
            policy_owner = COMMON.get_member_view_items(**{'entity_person_id': owner_entity_person.id})
            card += COMMON.get_person_card(_('Owner'), policy_owner)
            card += COMMON.get_person_card(_('Payer'), policy_payer)            

        benefit_content = self.get_policy_benefit_content(**{'policy_id': policy_id})
        html = f"""
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        {card}
                    </div>
                </div>
            </div>
            {benefit_content}
        """
        javascript = """
        <script src=''>
        
        </script>
        """
        return html + javascript

    @expose()
    def get_policy_benefit_content(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''

        inner_html = self.get_policy_management_benefit_htmltbl(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12 ml-auto mr-auto">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('Policy Benefits')}</h4>
                            </div>
                            <div class="col-md-6 text-right">
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-lg-6" id="div_benefit_list" policy_id='{policy_id}'>
                                {inner_html}
                            </div>
                            <div class="col-lg-6" id="div_benefit_content">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script src=''>
            $(".open_benefit").click(function(){
                $('#policy_mgmt_benefit_htmltbl tr').removeClass('bg-light font-weight-bold');
                $(this).closest('tr').addClass('bg-light font-weight-bold');
                var kwargs = $(this).data();
                $('#div_benefit_content').load('/policy/show_policy_management_benefit_htmltbl?', kwargs, function(data){
                    return false;
                });
            });
            $('.open_benefit:eq(0)').trigger('click');
        </script>
        """
        return html + javascript

    @expose()
    def show_policy_management_benefit_htmltbl(self, *args, **kwargs):
        policy_benefit_id = kwargs.get('policy_benefit_id', None)
        if not policy_benefit_id:
            return ''

        dbase_query = DBSession.query(PolicyBenefit, Benefit).\
            join(Benefit, Benefit.id == PolicyBenefit.product_benefit_id).\
            filter(PolicyBenefit.id == policy_benefit_id).\
            filter(PolicyBenefit.bln_active == True).\
            first()

        insured_html = ''
        insured_accord = ''
        expanded = True
        if dbase_query.Benefit.is_life:
            expanded = False
            insured_accord = self.get_benefit_life_insured_accord_item(**{'policy_benefit_id': policy_benefit_id})
        else :
            expanded = False
            benefit_non_life = BenefitInsuredNonLife.by_attr_first('benefit_id', dbase_query.Benefit.id)
            if not benefit_non_life:
                return ''
            
            asset = DBSession.query(PolicyBenefitInsuredAsset).\
                filter(PolicyBenefitInsuredAsset.policy_benefit_id == policy_benefit_id).\
                filter(PolicyBenefitInsuredAsset.bln_active == True).\
                first()

            if benefit_non_life.benefit_asset_type_id == BUSINESS:
                insured_accord = self.get_benefit_non_life_business_asset_accord_item(**{'policy_benefit_insured_asset_id': asset.id})

            elif benefit_non_life.benefit_asset_type_id == EMPLOYEE:
                insured_accord = self.get_benefit_non_life_employee_asset_accord_item(**{'policy_benefit_insured_asset_id': asset.id})

            elif benefit_non_life.benefit_asset_type_id == LANDLORD:
                insured_accord = self.get_benefit_non_life_landlord_asset_accord_item(**{'policy_benefit_insured_asset_id': asset.id})

            elif benefit_non_life.benefit_asset_type_id == PROPERTY:
                insured_accord = self.get_benefit_non_life_property_asset_accord_item(**{'policy_benefit_insured_asset_id': asset.id})

            elif benefit_non_life.benefit_asset_type_id == VEHICLE:
                insured_accord = self.get_benefit_non_life_vehicle_asset_accord_item(**{'policy_benefit_insured_asset_id': asset.id})

        summary = PRODUCT.get_benefit_summary(**{'benefit_id': dbase_query.PolicyBenefit.product_benefit_id})
        summary_accord = get_accordion_item(**{
            'expanded': expanded,
            'div': 'div_summary',
            'name': 'Benefit Summary',
            'heading': 'heading_summary',
            'collapse': 'collapse_summary',
            'content': summary,
        })
        html = f"""
            <div id="accordion" role="tablist" aria-multiselectable="false" class="card-collapse">
                {insured_accord}
                {summary_accord}
            </div>
        """
        return html

    def get_benefit_life_insured_accord_item(self, *args, **kwargs):
        policy_benefit_id = kwargs.get('policy_benefit_id', None)
        insured = PolicyBenefitInsuredLife.by_attr_first('policy_benefit_id', policy_benefit_id)
        insured_html = self.get_individual_accord_values(**{'entity_person_id': insured.entity_person_id})
        return get_accordion_item(**{
            'expanded': True,
            'container_class': 'mb-0',
            'div': 'div_insured',
            'name': 'Insured details',
            'heading': 'heading_insured',
            'collapse': 'collapse_insured',
            'content': insured_html,
        })

    def get_individual_accord_values(self, *args, **kwargs):
        entity_person_id = kwargs.get('entity_person_id', None)
        if not entity_person_id:
            log.warning('get_individual_accord_values: No entity_person_id in kwargs')
            return ''
        person_dict = COMMON.get_edit_person_form_data(**{'entity_person_id': entity_person_id})
        entity_id = person_dict.get('entity_id', '')

        entity_person_title_text = person_dict.get('entity_person_title_text', '')
        firstname = person_dict.get('firstname', '')
        surname = person_dict.get('surname', '')
        title = f'{entity_person_title_text} ' if entity_person_title_text else ''
        fullname = f'{title}{firstname} {surname}'

        vals_list = [
            ('Insured:', fullname),
            ('Gender:', person_dict.get('entity_person_gender_type_text', '')),
            ('Date of Birth:', person_dict.get('date_of_birth', '')),
            ('Identity Number:', person_dict.get('identity_number', '')),
            ('Identity Type:', person_dict.get('identity_type_text', '')),
            ('Language:', person_dict.get('language_text', '')),
            ('Mobile:', person_dict.get('mobile', '')),
        ]

        insured_html = ''
        for title, val in vals_list:
            insured_html += f"""
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>{title}</b>
                    </div>
                    <div class="col-md-7">
                        {val}
                    </div>
                </div>
            """
        return insured_html

    def get_benefit_non_life_business_asset_accord_item(self, *args, **kwargs):
        policy_benefit_insured_asset_id = kwargs.get('policy_benefit_insured_asset_id', None)
        if not policy_benefit_insured_asset_id:
            log.warning('get_benefit_non_life_business_asset_accord_item: No policy_benefit_insured_asset_id in kwargs')
            return ''

        business_asset = PolicyBenefitInsuredAssetBusiness.by_attr_first('policy_benefit_insured_asset_id', policy_benefit_insured_asset_id)

        vals_list = [
            ('Turnover:', business_asset.turnover),
            ('Activity:', business_asset.activity),
        ]
        business_html = ''
        for title, val in vals_list:
            business_html += f"""
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>{title}</b>
                    </div>
                    <div class="col-md-7">
                        {val}
                    </div>
                </div>
            """
        return get_accordion_item(**{
            'expanded': True,
            'container_class': 'mb-0',
            'div': 'div_business',
            'name': 'Business details',
            'heading': 'heading_business',
            'collapse': 'collapse_business',
            'content': business_html,
        })

    def get_benefit_non_life_employee_asset_accord_item(self, *args, **kwargs):
        policy_benefit_insured_asset_id = kwargs.get('policy_benefit_insured_asset_id', None)
        if not policy_benefit_insured_asset_id:
            log.warning('get_benefit_non_life_employee_asset_accord_item: No policy_benefit_insured_asset_id in kwargs')
            return ''

        employee_asset = PolicyBenefitInsuredAssetEmployee.by_attr_first('policy_benefit_insured_asset_id', policy_benefit_insured_asset_id)
        employee_html = self.get_individual_accord_values(**{'entity_person_id': employee_asset.entity_person_id})

        return get_accordion_item(**{
            'expanded': True,
            'container_class': 'mb-0',
            'div': 'div_employee',
            'name': 'Employee details',
            'heading': 'heading_employee',
            'collapse': 'collapse_employee',
            'content': employee_html,
        })

    def get_benefit_non_life_landlord_asset_accord_item(self, *args, **kwargs):
        policy_benefit_insured_asset_id = kwargs.get('policy_benefit_insured_asset_id', None)
        if not policy_benefit_insured_asset_id:
            log.warning('get_benefit_non_life_landlord_asset_accord_item: No policy_benefit_insured_asset_id in kwargs')
            return ''

        landlord_asset = PolicyBenefitInsuredAssetLandlord.by_attr_first('policy_benefit_insured_asset_id', policy_benefit_insured_asset_id)

        vals_list = [
            ('Rental Amount:', landlord_asset.rental_amount),
            ('Property Address:', landlord_asset.property_address),
        ]
        landlord_html = ''
        for title, val in vals_list:
            landlord_html += f"""
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>{title}</b>
                    </div>
                    <div class="col-md-7">
                        {val}
                    </div>
                </div>
            """
        return get_accordion_item(**{
            'expanded': True,
            'container_class': 'mb-0',
            'div': 'div_landlord',
            'name': 'Landlord details',
            'heading': 'heading_landlord',
            'collapse': 'collapse_landlord',
            'content': landlord_html,
        })

    def get_benefit_non_life_property_asset_accord_item(self, *args, **kwargs):
        policy_benefit_insured_asset_id = kwargs.get('policy_benefit_insured_asset_id', None)
        if not policy_benefit_insured_asset_id:
            log.warning('get_benefit_non_life_property_asset_accord_item: No policy_benefit_insured_asset_id in kwargs')
            return ''

        property_asset = PolicyBenefitInsuredAssetProperty.by_attr_first('policy_benefit_insured_asset_id', policy_benefit_insured_asset_id)

        vals_list = [
            ('Turnover:', property_asset.turnover),
            ('Property Address:', property_asset.property_address),
        ]
        property_html = ''
        for title, val in vals_list:
            property_html += f"""
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>{title}</b>
                    </div>
                    <div class="col-md-7">
                        {val}
                    </div>
                </div>
            """
        return get_accordion_item(**{
            'expanded': True,
            'container_class': 'mb-0',
            'div': 'div_property',
            'name': 'Property details',
            'heading': 'heading_property',
            'collapse': 'collapse_property',
            'content': property_html,
        })

    def get_benefit_non_life_vehicle_asset_accord_item(self, *args, **kwargs):
        policy_benefit_insured_asset_id = kwargs.get('policy_benefit_insured_asset_id', None)
        if not policy_benefit_insured_asset_id:
            log.warning('get_benefit_non_life_vehicle_asset_accord_item: No policy_benefit_insured_asset_id in kwargs')
            return ''

        vehicle_asset = PolicyBenefitInsuredAssetVehicle.by_attr_first('policy_benefit_insured_asset_id', policy_benefit_insured_asset_id)

        vals_list = [
            ('VIN Number:', vehicle_asset.vin_number),
            ('Registration Number:', vehicle_asset.registration_number),
        ]
        vehicle_html = ''
        for title, val in vals_list:
            vehicle_html += f"""
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>{title}</b>
                    </div>
                    <div class="col-md-7">
                        {val}
                    </div>
                </div>
            """
        return get_accordion_item(**{
            'expanded': True,
            'container_class': 'mb-0',
            'div': 'div_vehicle',
            'name': 'Vehicle details',
            'heading': 'heading_vehicle',
            'collapse': 'collapse_vehicle',
            'content': vehicle_html,
        })

    def get_policy_management_benefit_htmltbl(self, *args, **kwargs):
        if not request.identity:
            return ''
        usernow = request.identity.get('user', None)

        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''

        outputlist = []

        dbase_query = PolicyBenefit.by_attr_all('policy_id', policy_id)
        """
        # REMOVE
        if not dbase_query:
            import random
            policy = Policy.by_id(policy_id)
            benefits = Benefit.by_attr_all('product_id', policy.product_id)
            for ben in benefits:
                for i in range(3):
                    choice = random.choice(range(10, 100))
                    is_compulsory = True if i %2 == 0 else False
                    pb = PolicyBenefit()
                    pb.policy_id = policy_id
                    pb.product_benefit_id = ben.id
                    pb.cover_and_exclusion_id = 1
                    pb.premium = choice
                    pb.sum_insured = choice * 1000
                    pb.is_compulsory = is_compulsory
                    DBSession.add(pb)
                    DBSession.flush()
            dbase_query = PolicyBenefit.by_attr_all('policy_id', policy_id)
        """

        for item in dbase_query:
            ben = Benefit.by_id(item.product_benefit_id)
            outputlist.append({
                'id' : item.id,
                'name' : ben.name,
                'premium' : get_currency_by_locale(item.premium, cents=False),
                'sum_insured' : get_currency_by_locale(item.sum_insured, cents=False),
                'open': f"<div class='action_link open_benefit' data-policy_benefit_id='{item.id}'>open</div>",
            })
        dbcolumnlist=[
                'id',
                'name',
                'premium',
                'sum_insured',
                'open',
        ]
        theadlist=[
                'ID',
                'Name',
                'Premium',
                'Sum Insured',
                '',
        ]
        tdclasslist = [
                '',
                '',
                'text-right',
                'text-right',
                'text-right',
        ]
        return build_html_table(outputlist, dbcolumnlist, theadlist, "policy_mgmt_benefit_htmltbl", tdclasslist)

    @expose()
    def get_policy_history_content(self, *args, **kwargs):
        print()
        print('get_policy_history_content', kwargs)
        print()
        html = f"""
            <h4>get_policy_history_content</h4>
        """
        javascript = """
        <script src=''>

        </script>
        """
        return html + javascript

    @expose()
    def get_policy_transaction_content(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_policy_transaction_content: No policy_id in kwargs')
            return ''

        inner_html = self.get_policy_transactions_html(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12 ml-auto mr-auto">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('Policy Transactions')}</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_transaction" class="btn btn-primary ml-auto" data-policy_id="{policy_id}">Create New Transaction</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div id="transactionDiv" class="card-body">
                        {inner_html}    
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script src=''>
            $("#create_new_transaction").click(function(){
                var kwargs = $(this).data();
                $('#dialogdiv').load('/policy/get_modal_transaction?', kwargs, function(data){
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_modal_transaction(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('get_modal_transaction: No policy_id in kwargs')
            return ''

        transaction_id = kwargs.get('transaction_id', None)
        transaction = None
        hidden_input = ''
        if transaction_id:
            transaction = Transaction.by_id(transaction_id)
            hidden_input = get_hidden_input(**{'id': 'transaction_id', 'value': transaction_id})
        entity_id = transaction.entity_id if transaction else ''
        transaction_type_id = transaction.transaction_type_id if transaction else None
        select = COMMON.get_selectbox_transaction_type(transaction_type_id)
        transaction_state_type_id = transaction.transaction_state_type_id if transaction else ''
        amount = transaction.amount if transaction else ''
        html = f"""
        <div class="modal fade" id="dialog_transaction" tabindex="-1" role="dialog" aria-labelledby="mytransactionLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">New Transaction</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_transaction'>
                            {hidden_input}
                            <input id="policy_id" name="policy_id" value="{policy_id}" hidden>
                            <input id="entity_id" name="entity_id" value="{entity_id}" hidden>
                            <input id="transaction_state_type_id" name="transaction_state_type_id" value="{transaction_state_type_id}" hidden>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="transaction_type_id">Transaction type</label>
                                    <div class="col-md-9">
                                        {select}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="amount">Amount</label>
                                    <div class="col-md-9">
                                        <input id="amount" value="{amount}" type="text" name="amount" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id="save_transaction" class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script src=''>
            var form_id = '#form_transaction';
            setFormValidation(form_id);
            $('#save_transaction').click(function(){
                 var valid = FormIsValid(form_id);
                 if(valid){
                    var formserial = $(form_id).serialize();
                    $.post('/policy/save_transaction?', formserial, function(data){
                        $('#transactionDiv').load('/policy/get_policy_transactions_html', formserial, function(){
                            $('#dialog_transaction').modal('hide');
                            return false;
                        });
                    });
                 }
            });
            $('#dialog_transaction').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_transaction(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            log.warning('save_transaction: No policy_id in kwargs')
            return json.dumps({'success': False, 'message': 'Please select a policy', 'status': 'danger'})
        
        policy = Policy.by_id(policy_id)
        if not policy:
            log.warning(f'save_transaction: Could not find Policy for policy_id: {policy_id}')
            return json.dumps({'success': False, 'message': 'Could not find specified policy, please try again', 'status': 'danger'})

        transaction_id = kwargs.get('transaction_id', None)
        if not transaction_id:
            this = Transaction()
            this.entity_id = policy.policy_payer_entity_id
            this.transaction_type_id = kwargs.get('transaction_type_id', None)
            this.amount = kwargs.get('amount', None)
            this.transaction_state_type_id = TYPEUTIL.get_id_of_name('transaction_state_type', 'pending')
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
        else:
            this = Transaction.by_id(transaction_id)
            if not this: return 'false'
            this.entity_id = policy.policy_payer_entity_id
            this.transaction_type_id = kwargs.get('transaction_type_id', None)
            this.amount = kwargs.get('amount', None)
            this.transaction_state_type_id = TYPEUTIL.get_id_of_name('transaction_state_type', 'pending')
            DBSession.flush()
        return json.dumps({'success': True, 'message': 'Transaction saved', 'status': 'success'})

    @expose()
    def get_policy_transactions_html(self, *args, **kwargs):
        if not request.identity:
            return ''
        usernow = request.identity.get('user', None)

        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''

        dbase_query = PremiumDue.by_attr_all('policy_id', policy_id)
        """
        # REMOVE
        if not dbase_query:
            AWAITING = TYPEUTIL.get_id_of_name('premium_due_settlement_state_type', 'awaiting_settlement')
            for i in range(10):
                the_date = datetime.date(datetime.now() + timedelta(days = 30 * i))
                due = PremiumDue()
                due.policy_id = policy_id
                due.premium_due_date = the_date
                due.premium_due_settlement_state_id = AWAITING
                DBSession.add(due)
                DBSession.flush()
            dbase_query = PremiumDue.by_attr_all('policy_id', policy_id)
        """

        outputlist = []
        for item in dbase_query:
            state = TYPEUTIL.get_pretty_name('premium_due_settlement_state_type', item.premium_due_settlement_state_id)
            outputlist.append({
                'id' : policy_id,
                'premium_due_date' : item.premium_due_date,
                'premium_due_settlement_state_id' : state,
                'amount' : get_currency_by_locale(0),
            })
        dbcolumnlist=[
                'id',
                'premium_due_date',
                'premium_due_settlement_state_id',
                'amount',
        ]
        theadlist=[
                'Policy ID',
                'Due Date',
                'State',
                'Amount',
        ]
        tdclasslist = [
                '',
                '',
                '',
                'text-right',
        ]
        return build_html_table(outputlist, dbcolumnlist, theadlist, "policy_transaction_htmltbl", tdclasslist)

    @expose()
    def get_policy_document_content(self, *args, **kwargs):
        inner_html = self.get_policy_drawer_html(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12 ml-auto mr-auto">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('Member Documents')}</h4>
                            </div>
                            <div class="col-md-6 text-right">
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                    </div>
                </div>
            </div>
        </div>
        {inner_html}
        """
        return html

    def get_policy_drawer_html(self, *args, **kwargs):
        if not request.identity:
            return ''
        usernow = request.identity.get('user', None)

        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''

        cabinet = Cabinet.by_attr_first('name', 'Policy')
        if not cabinet:
            cabinet = Cabinet()
            cabinet.name = 'Policy'
            cabinet.description = 'Policy Cabinet'
            DBSession.add(cabinet)
            DBSession.flush()

        drawer = DBSession.query(Drawer). \
                filter(Drawer.cabinet_id == cabinet.id). \
                filter(Drawer.name == policy_id). \
                first()
        if not drawer:
            drawer = Drawer()
            drawer.cabinet_id = cabinet.id
            drawer.name = policy_id
            DBSession.add(drawer)
            DBSession.flush()

        user_link = DBSession.query(DrawerUserLink). \
                filter(DrawerUserLink.drawer_id == drawer.id). \
                filter(DrawerUserLink.user_id == usernow.id). \
                first()
        if not user_link:
            user_link = DrawerUserLink()
            user_link.drawer_id = drawer.id
            user_link.user_id = usernow.id
            DBSession.add(user_link)
            DBSession.flush()

        link = DBSession.query(DrawerPolicyLink). \
                filter(DrawerPolicyLink.drawer_id == drawer.id). \
                filter(DrawerPolicyLink.policy_id == policy_id). \
                first()
        if not link:
            link = DrawerPolicyLink()
            link.drawer_id = drawer.id
            link.policy_id = policy_id
            DBSession.add(link)
            DBSession.flush()

        html = f"""
        <div class="row">
            <div class="col-md-4" id="div_show_drawer_list" cabinet_id='{cabinet.id}'>
            </div>
            <div class="col-md-8" id="div_show_file_list" drawer_id='{drawer.id}'>
            </div>
        </div>
        """
        javascript = """
        <script src=''>
            var kwargs = 'drawer_id=' + $('#div_show_file_list').attr('drawer_id');
            kwargs += '&cabinet_id=' + $('#div_show_drawer_list').attr('cabinet_id');

            $('#div_show_drawer_list').load('/media/show_drawer_list_for_cabinet', kwargs, function(data){
                return false;
            });
            $('#div_show_file_list').load('/media/show_file_list_for_drawer?', kwargs, function(data){
                return false;
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_policy_communication_content(self, *args, **kwargs):
        print()
        print('get_policy_communication_content', kwargs)
        print()
        html = f"""
            <h4>get_policy_communication_content</h4>
        """
        javascript = """
        <script src=''>

        </script>
        """
        return html + javascript

    @expose()
    def get_policy_misc_content(self, *args, **kwargs):
        print()
        print('get_policy_misc_content', kwargs)
        print()
        html = f"""
            <h4>get_policy_misc_content</h4>
        """
        javascript = """
        <script src=''>

        </script>
        """
        return html + javascript

