# -*- coding: utf-8 -*-

"""My_account controller module"""

import os
import json
import math
import logging
import requests

from datetime import datetime, timedelta
from sqlalchemy import func, desc, asc, or_
from pkg_resources import resource_filename
from tg import expose, require, request, redirect

from eiffel_front.model import *

from eiffel_front.lib.tg_utils import *
from eiffel_front.lib.tg_decorators import *
from eiffel_front.lib.base import BaseController
from eiffel_front.lib.tgfileuploader import FileUploader

import eiffel_front.lib.gateway_utils as GATEWAY

from eiffel_front.controllers.chat import ChatController
from eiffel_front.controllers.common import CommonController

FILENAME = os.path.abspath(resource_filename('eiffel_front', 'public'))
PUBLIC_DIRNAME = os.path.join(FILENAME)
IMAGES_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'img')
STUDENT_IMG_DIRNAME = os.path.join(IMAGES_DIRNAME, 'students')
POSTS_IMG_DIRNAME = os.path.join(IMAGES_DIRNAME, 'posts')

COMMON = CommonController()
CHAT = ChatController()

PAGINATION_MAX = 5
DBASE_QUERY_LIMIT = 5

FEATURED_AD_PRICE_IN_RANDS = 20
FEATURED_AD_EXPIRY_IN_DAYS = 7
POST_EXPIRY_IN_DAYS = 14
EXPIRY_REMINDER_IN_DAYS = 2

MOBILE_BREAK_WIDTH = 680
PRICE_LIMIT = 999999

STATUS_ID_PENDING = COMMON.get_status_id(SaleStatus, 'pending')
STATUS_ID_REJECTED = COMMON.get_status_id(SaleStatus, 'rejected')
STATUS_ID_FAILED = COMMON.get_status_id(SaleStatus, 'failed')
STATUS_ID_SOLD = COMMON.get_status_id(SaleStatus, 'sold')

LOGGER = logging.getLogger(__name__)

class AccountController(BaseController):
    # Uncomment this line if your controller requires an authenticated user
    # allow_only = CustomNotAnonymous()

    @require(CustomNotAnonymous())
    @expose('eiffel_front.templates.2_col_med_right')
    def index(self, *args, **kwargs):
        COMMON.update_all_category_counts()
        left_col = self.get_left_col()
        right_col = f"""
        <div class="user_info_div"></div>
        """
        javascript = """
        $('.user_info_div').load('/my_account/get_user_info_html');
        $('#mainNav .nav-item').removeClass('active');
        $('#myAccountLink').addClass('active');
        """
        return dict(title='My Account', left_col=left_col, right_col=right_col, javascript=javascript)

    @expose()
    def get_left_col(self, *args, **kwargs):
        if not request.identity:
            redirect('/login')
        html = f"""
        <div class="profile_div"></div>
        <div class="profile_menu_div"></div>
        """
        javascript = """
        <script>
            $('.profile_div').load('/my_account/get_student_profile_html?');
            $('.profile_menu_div').load('/my_account/get_profile_menu_html?');
        </script>
        """
        return html + javascript

    @expose()
    def get_student_profile_html(self, *args, **kwargs):
        if not request.identity:
            redirect('/login')
        usernow = request.identity.get('user', {})
        student = Student.by_id(usernow.id)
        if not student: return ""

        filepath = COMMON.get_student_filepath(student.filepath)
        star_rating = COMMON.get_star_rating_display(**{'student_id': student.id})
        html = f"""
        <div id="profile_div">
            <div class="widget user-dashboard-profile">
                <div class="profile_pic_container" data-toggle="popover"
                    data-placement="top"
                    data-trigger="hover"
                    data-content="Only .jpg, .jpeg, .png and gif images smaller than 2MB will be accepted.">
                    <div class="profile-thumb"><img alt="" class="rounded-circle" src="{filepath}"></div>
                    <input type="file" id="myFile" name="file" accept=".jpg, .jpeg, .png and gif" class="profile_thumb_overlay">
                </div>
                <h5 class="text-center mt-3">{student.display_name}</h5>
                <div class="d-flex justify-content-center">
                    <span class="mr-2 p">Your rating: </span> {star_rating}
                </div>
                <p class="mt-1">Joined on: {usernow.added.strftime('%b %d, %Y')}</p>
            </div>
        </div>
        """
        javascript = """
        <script>
        var myFile = $('#myFile');
        $(myFile).on('change', function(){
            if (Validate() === 'true'){
                $('#myFile').upload('/my_account/upload_student_profile_pic', function(data){
                    if (data.success === 'true'){
                        $('#profile_div').load('/my_account/get_student_profile_html');
                    } else if (data.success === 'false'){
                        showNotification(data.status, data.message);
                    }
                    return 'false';
                });
            }
        });
        $('[data-toggle="popover"]').popover();
        function Validate(){
            var image =document.getElementById("myFile").value;
            if(image!=''){
                var checkimg = image.toLowerCase();
                if (!checkimg.match(/(\.jpg|\.png|\.jpeg|\.gif)$/)){
                    showNotification(
                        "danger",
                        "The selected file's filetype is incorrect.<br/>" +
                        "Please select a file with .jpg, .jpeg, .png or .gif file extension."
                    );
                    return false;
                }
                var img = document.getElementById("myFile");
                if(img.files[0].size >  2097152){
                    showNotification('danger', 'The selected file is larger than 2MB.  Please select a smaller file.');
                    return false;
                }
                return true;
            }
        }
        </script>
        """
        return html + javascript

    @expose()
    def upload_student_profile_pic(self, *args, **kwargs):
        if not request.identity:
            redirect('/login')
        usernow = request.identity.get('user', {})
        user = Student.by_id(usernow.id)
        this = kwargs.get('file', None)
        if this.bytes_read < 1:
            return json.dumps({'success': 'false', 'message': 'Please select a file', 'status': 'danger'})
        if this.bytes_read > 2097152:
            return json.dumps({
                'success': 'false',
                'message': 'Please upload an image that is smaller than 2MB.',
            })
        filename, ext = os.path.splitext(this.filename)
        allowed_exts = ['.jpg', '.jpeg', '.png', '.gif']
        if not ext in allowed_exts:
            return json.dumps({
                'success': 'false',
                'message': 'Please upload an image of type .jpg, .jpeg, .png or .gif.',
            })
        file_upload = json.loads(self.handle_file_upload(**kwargs))
        user.filepath = file_upload.get('name', '')
        DBSession.flush()
        return json.dumps({'success': 'true'})

    @expose()
    def get_profile_menu_html(self, *args, **kwargs):
        unreads = json.loads(self.get_unread_notifications())

        #chat_count = "" if unreads.get('chats') < 1 else unreads.get('chats')
        chats = str_to_int(unreads.get('chats', 0))
        chat_count = ''
        if chats and chats < 1:
            chat_count = chats

        #notification_count = "" if unreads.get('notifications') < 1 else unreads.get('notifications')
        notifications = str_to_int(unreads.get('notifications', 0))
        notification_count = ''
        if notifications and notifications < 1:
            notification_count = notifications

        html = f"""
        <div class="widget user-dashboard-menu">
            <ul>
                <li id="my_account">
                    <a href="/my_account/">
                        <i class="fa fa-user"></i> Edit Profile
                    </a>
                </li>
                <li id="create_ad">
                    <a href="/my_account/create_ad">
                        <i class="fa fa-plus-square"></i> Create Ad
                    </a>
                </li>
                <li id="my_ads">
                    <a href="/my_account/my_ads">
                        <i class="fa fa-list-ul"></i> My Ads
                    </a>
                </li>
                <li id="pending_purchases">
                <a href="/my_account/pending_purchases">
                <i class="fa fa-shopping-cart"></i> My Purchases
                        <span class="badge badge-pill badge-danger order_badge"></span>
                    </a>
                </li>
                <li id="direct_message">
                   <a href="/my_account/direct_message">
                     <i class="fa fa-envelope"></i> Direct Message
                        <span class="badge badge-pill badge-danger chat_badge">{chat_count}</span>
                    </a>
                </li>
                <li id="sales">
                    <a href="/my_account/sales">
                        <i class="fa fa-credit-card"></i>My Sales
                    </a>
                </li>
                <li id="logout">
                    <a href="/logout_handler">
                        <i class="fa fa-cog"></i> Logout
                    </a>
                </li>
            </ul>
        </div>
        """
        javascript = """
        <script>
            $('#mainNav .nav-item').removeClass('active');
            $('#myAccountLink').addClass('active');
            $(document).on('notification-counts-changed', function() {
                var notification_count = $('#notificationCounts').data('notifications');
                var count = (notification_count === 0) ? "" : notification_count;
                if (count){
                    $('.notification_badge').text(count).addClass('flash');
                } else {
                    $('.notification_badge').text("").removeClass('flash');
                };
                return false;
            });
            $(document).on('chat-counts-changed', function() {
                var notification_count = $('#notificationCounts').data('chats');
                var count = (notification_count === 0) ? "" : notification_count;
                if (count){
                    $('.chat_badge').text(count).addClass('flash');
                    if($('#chatContacts')){
                        var kwargs = 'selected_contact='+$('.chat_list.active').attr('from_student');
                        $('#chatContacts').load('/my_account/get_chats_html?', kwargs , function(data){
                            return false;
                        });
                    };
                } else {
                    $('.chat_badge').text("").removeClass('flash');
                    var kwargs = 'selected_contact='+$('.chat_list.active').attr('from_student');
                    $('#chatContacts').load('/my_account/get_chats_html?', kwargs , function(data){
                        return false;
                    });
                };
                return false;
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_user_info_html(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        student = Student.by_id(usernow.id)
        if not student: return 'No Student Record found'

        alternate_email = getattr(student, 'alternate_email', None)
        alt_email = ''
        if alternate_email:
            alt_email = student.alternate_email

        name = getattr(student, 'name', None)
        student_name = ''
        if name:
            student_name = student.name

        email = getattr(student, 'email', None)
        student_email = ''
        if email:
            student_email = student.email

        surname = getattr(student, 'surname', None)
        student_surname = ''
        if surname:
            student_surname = student.surname

        mobile = getattr(student, 'mobile', None)
        student_mobile = ''
        if mobile:
            student_mobile = student.mobile

        identity_number = getattr(student, 'identity_number', None)
        student_identity_number = ''
        if identity_number:
            student_identity_number = student.identity_number

        html = f"""
            <div class="widget personal-info">
                <h3 class="widget-header user">Edit Personal Information</h3>
                <form id="form_profile" class="d-flex flex-wrap">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>First Name</label>
                            <div>{student_name}</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Last Name</label>
                            <div>{student_surname}</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Known As</label>
                            <input name="preferred_name" class="form-control" type="text" value="{student.display_name}"/>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Identity Number</label>
                            <div class="mt-3">{student_identity_number}</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Email Address</label>
                            <div>{student_email}</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Student Number</label>
                            <div>{student.student_number}</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Alternate Email Address</label>
                            <input name="alternate_email" class="form-control" type="email" value="{alt_email}"/>
                            <small class="text_primary">Please note that your email will be delivered to both email addresses.</small>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Mobile Number</label>
                            <input name="mobile" required class="form-control" type="number" value="{student_mobile}"/>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="form-group">
                            <label>About Me</label>
                            <textarea name="about" class="form-control" type="text">{student.about}</textarea>
                        </div>
                    </div>
                </form>
                <div class="col-md-12">
                    <div class="btn btn-transparent profile_save">Save My Changes</div>
                </div>
            </div>
            <div class="widget change-password mt-4">
                <h3 class="widget-header user">Edit Password</h3>
                <form id="form_passwords">
                    <div class="form-group">
                        <label>Current Password</label>
                        <input id="currentPassword" class="form-control" autocomplete="current-password" user_id="{student.id}" type="password">
                    </div>
                    <div class="form-group">
                        <label>New Password</label>
                        <input id="newPassword" class="form-control" autocomplete="new-password" type="password" disabled>
                    </div>
                    <div class="input-group form-group">
                        <span class="policy_text">
                            <b>Password should </b>
                            <ul>
                                <li id="length">
                                    be at least 10 characters long
                                    <i class="material-icons success green hidden">check_circle</i>
                                    <i class="material-icons error red hidden">error</i>
                                </li>
                                <li id="uppercase">
                                    contain at least one uppercase character
                                    <i class="material-icons success green hidden">check_circle</i>
                                    <i class="material-icons error red hidden">error</i>
                                </li>
                                <li id="special">
                                    contain at least one special character
                                    <i class="material-icons success green hidden">check_circle</i>
                                    <i class="material-icons error red hidden">error</i>
                                </li>
                                <li id="digit">
                                    contain at least one digit
                                    <i class="material-icons success green hidden">check_circle</i>
                                    <i class="material-icons error red hidden">error</i>
                                </li>
                            </ul>
                        </span>
                    </div>
                    <div class="form-group">
                        <label>Confirm New Password</label>
                        <input id="confirmPassword" class="form-control" autocomplete="new-password" type="password" disabled>
                    </div>
                    <button id="btnChangePassword" class="btn btn-transparent" user_id={student.id} disabled>Change Password</button>
                </form>
            </div>
        """
        javascript = """
        <script>
        var currentPassword = $('#currentPassword');
        currentPassword.on('keyup', function(){
            if(currentPassword.val().length >= 10){
                var password =  currentPassword.val();
                if (password == "") {
                    currentPassword.addClass('invalid')
                    .removeClass('valid');
                    $('#newPassword, #confirmPassword').attr('disabled', 'disabled');
                    $('#passwordMatch').remove();
                    if (!$('#emptyPassword').length) {
                        currentPassword.after("<div id='emptyPassword' class='feedback invalid'>This field should not be empty. If you can't " +
                        "remember your current password, please <span id='forgotPassword' class='display_link invalid'><b>click here</b></span> to reset your password.</div>"
                        );
                    };
                    return false;
                };
                var kwargs = 'password='+password;
                kwargs += '&user_id='+currentPassword.attr('user_id');
                $.post('/useraccess/password_exists', kwargs, function(data){
                    currentPassword.addClass('valid')
                    .removeClass('invalid');
                    $('#emptyPassword').remove();
                    $('#newPassword, #confirmPassword').removeAttr('disabled');
                    return false;
                });
            }
        });
        var pass1 = $('#newPassword');
        var pass2 = $('#confirmPassword');
        pass1.change(function(){
            var kwargs = 'password='+$(this).val();
            $.get('/useraccess/validate_password?', kwargs, function(data){
                var response = JSON.parse(data);
                var errors = response.errorlist;

                checkErrors('uppercase', errors);
                checkErrors('digit', errors);
                checkErrors('special', errors);
                checkErrors('length', errors);

                return false;
            });
        });
        var changePassBtn = $('#btnChangePassword');
        pass2.on('keyup', function(){
            if(pass1.val().length <= pass2.val().length){
                if(pass1.val() === pass2.val()){
                    pass2.addClass('valid')
                    .removeClass('invalid');
                    $('#confirmInvalid').remove();
                    changePassBtn.removeAttr('disabled');
                    return false;
                } else {
                    pass2.addClass('invalid')
                    .removeClass('valid');
                    if (!$('#confirmInvalid').length) {
                        pass2.after("<div id='confirmInvalid' class='feedback invalid'><b> Oops! </b>Passwords don't match.</div>");
                        return false;
                    };
                };
            } else {
                changePassBtn.attr('disabled', 'disabled');
            };
        });
        $('#btnChangePassword').click(function(){
            var new_password  = pass1.val();
            var confirm_password  = pass2.val();
            if(new_password === confirm_password){
                var kwargs = 'password='+confirm_password;
                kwargs += '&user_id='+$(this).attr('user_id');
                $.post('/useraccess/reset_password?', kwargs, function(data){
                    if(data==='true'){
                        $.redirect('/my_account/');
                        return false
                    }
                });
            };
            return false;
        });
        var form_profile = "#form_profile";
        setFormValidation(form_profile);
        $('.profile_save').on('click', function(){
            var valid = FormIsValid(form_profile);
            if(valid){
                var formserial = getFormData(form_profile);
                $.post('/my_account/update_student_profile?', formserial, function(data){
                    var result = JSON.parse(data);
                    if(result.success === 'true'){
                        showNotification(result.status, result.message);
                        $.redirect('/my_account/');
                    };
                    return false;
                });
            }
        });
        </script>
        """
        return html + javascript

    @expose()
    def handle_file_upload(self, *args, **kwargs):
        img_dir = kwargs.get('img_dir', STUDENT_IMG_DIRNAME)
        usernow = request.identity.get('user', {})
        kwargs['user_id'] = usernow.id
        kwargs['upload_dir'] = img_dir
        kwargs['size_limit'] = 2097152 # 2 MB
        kwargs['allowed_extensions'] = ['.jpg', '.jpeg', '.png', '.gif']
        uploader = FileUploader(**kwargs)
        return uploader.handle_file_upload()

    @expose()
    def handle_post_upload(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        kwargs['user_id'] = usernow.id
        kwargs['upload_dir'] = POSTS_IMG_DIRNAME
        kwargs['size_limit'] = 2097152  # 2 MB
        kwargs['allowed_extensions'] = ['.jpg', '.jpeg', '.png', '.gif']
        uploader = FileUploader(**kwargs)
        return uploader.handle_file_upload()

    @expose()
    def update_student_profile(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        data = {
            'entity_id': usernow.entity_id,
            'preferred_name': kwargs.get('preferred_name', usernow.display_name),
            'mobile': kwargs.get('mobile', None),
            'email': kwargs.get('alternate_email', None)
        }
        result = GATEWAY.update_eiffel_student(data)

        success = result.get('success', False)
        if not success:
            return json.dumps({'success': 'false', 'message': 'Your profile could not be saved, please check the values carefully and try again', 'status': 'danger'})

        student_update_success = self.update_session_usernow()
        if not student_update_success:
            return json.dumps({'success': 'false', 'message': 'Your profile could not be saved, please check the values carefully and try again', 'status': 'danger'})

        return json.dumps({'success': 'true', 'message': 'Your profile has been successfully updated.', 'status': 'success'})

    @require(CustomNotAnonymous())
    @expose('eiffel_front.templates.2_col_med_right')
    def create_ad(self, *args, **kwargs):
        if not request.identity:
            redirect('/login', {'came_from': '/my_account/create_ad'})
        kwargs['post'] = Post()
        create_ad = self.get_post_form_html(**kwargs)
        left_col = self.get_left_col()
        right_col = f"""
        <div id="post_div">
            {create_ad}
        </div>
        """
        javascript = """
        $('#mainNav .nav-item').removeClass('active');
        $('#myAccountLink').addClass('active');
        """
        return dict(title='Create Ad', left_col=left_col, right_col=right_col, javascript=javascript)

    @require(CustomNotAnonymous())
    @expose('eiffel_front.templates.2_col_med_right')
    def edit_ad(self, *args, **kwargs):
        ad_id = kwargs.get('id', None)
        if not ad_id:
            redirect('/my_account/create_ad')

        kwargs['post'] = Post.by_id(ad_id)
        kwargs['title'] = 'Edit Ad'
        edit_ad = self.get_post_form_html(**kwargs)
        left_col = self.get_left_col()
        right_col = f"""
        <div id="post_div">
            {edit_ad}
        </div>
        """
        javascript = ""
        return dict(title='Edit Ad', left_col=left_col, right_col=right_col, javascript=javascript)

    @expose()
    def repost_ad(self, *args, **kwargs):
        post_id = str_to_int(kwargs.get('post_id', None))
        if not post_id:
            return json.dumps({'success': 'false', 'message': 'Please select a valid post', 'status': 'danger'})

        this = Post.by_id(post_id)
        this.updated = datetime.now()
        DBSession.flush()
        return json.dumps({'success': 'true', 'message': f'This post will be active for another {POST_EXPIRY_IN_DAYS} days' , 'status': 'success'})

    @expose()
    def get_post_form_html(self, *args, **kwargs):
        post = kwargs.get('post', {})
        if not post.id:
            post.title = ""
            post.desc = ""
            post.price = ""
            post.isbn = ""
            post.bln_allow_offer = 1
            post.category_id = ""
            post.subcategory_id = ""
            post.bln_featured_ad = 0
            post.location_id = ""
            hidden_input = ""
        else:
            hidden_input = f"<input id='post_id' name='post_id' type='text' value='{post.id}' hidden>"

        title = kwargs.get('title', "Create Ad")

        selectbox_categories = self.get_selectbox_categories(**{
                'id': 'category_id',
                'required': True,
                'selected': post.category_id
        })

        selectbox_subcategories = self.get_selectbox_subcategories(**{
                'id': 'subcategory_id',
                'category_id': post.category_id,
                'required': True,
                'selected': post.subcategory_id
        })

        selectbox_safetyzones = self.get_selectbox_location(**{
                'id': 'location_id',
                'selected': post.location_id
        })

        checked = 'checked' if post.bln_allow_offer else ''

        safety_zone_map = COMMON.get_safety_zone_map(**{'location_id': post.location_id})
        safety_tips = COMMON.get_disclaimer_html()

        price = ''
        if post.price:
            price = float(post.price / 100)
            price = '{:.2f}'.format(price)

        html = f"""
        <div class="widget personal-info">
            <h3 class="widget-header user">{title}</h3>
            <div id="notification" class="alert hidden" role="alert"></div>
            <form id="form-ad" class="dropzone d-flex flex-wrap" action='/my_account/save_post?'>
                <div class="col-md-12">
                    <div class="form-group">
                        <label>Ad Title</label>
                        {hidden_input}
                        <input id="title" name="title" class="form-control" type="text" maxlength="100" value="{post.title}" required="true">
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Category</label>
                        {selectbox_categories}
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Sub Category</label>
                        <div class="subcat_container">
                            {selectbox_subcategories}
                        </div>
                    </div>
                </div>
                <div class="col-md-6 mr-auto">
                    <div id="bln_book_container" class="form-group mb-0">
                        <input class="ml-2" type="checkbox" id="bln_book" >
                        <label for="bln_book" class="ml-2">This item is a book.</label>
                    </div>
                </div>
                <div class="col-md-6 isbn_number">
                    <div class="form-group">
                        <label>ISBN</label>
                        <input id="isbn" name="isbn" class="form-control" type="text" value="{post.isbn}" required="true">
                    </div>
                </div>
                <div class="col-md-12 mt-2">
                    <div class="form-group mb-0">
                        <label>Description</label>
                        <textarea id="desc" name="desc" class="form-control" cols="80" rows="8" maxlength="4096" required="true">{post.desc}</textarea>
                    </div>
                </div>
                <div class="col-md-12 mt-4">
                    <div class="form-group">
                        <label>Upload Images (Drop files here or click to upload.)</label>
                        <div id="uploader_div" class="preview_container">
                            <!-- <div id="previewInner" class="d-flex align-items-center justify-content-center" style="height: 100px;">
                                <span class="text-muted">Drop files here or click to upload.</span>
                            </div> -->
                        </div>
                        <p class="mt-2">Please take care to ensure that the image is in focus and that the item on display can clearly be
                        identified.  Images should be smaller than 2MB in size.  The only filetypes allowed are .jpg, .jpeg, .gif and .png</p>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Price</label>
                        <input id='price' name="price" class="form-control" min="0" max="{PRICE_LIMIT}" type="number" value="{price}" required="true">
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group pt-5">
                        <input class="ml-2" type="checkbox" name="bln_allow_offer" id="bln_allow_offer" {checked}>
                        <label for="bln_allow_offer" class="ml-2">Allow Offers?</label>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="form-group">
                        <label>Safety Zone</label>
                        {selectbox_safetyzones}
                    </div>
                </div>
            </form>
            <div id="safetyZoneMapDiv">
                {safety_zone_map}
            </div>
            <div id="safetyTipsAlert" class="alert alert-danger-translucent ml-15 mr-15 mt-3" role="alert">
                <h5 class="alert-heading">Safety Tips</h5>
                {safety_tips}
                <hr>
                <div class="form-group mb-0">
                    <input class="ml-2" type="checkbox" id="bln_ack_safety_tips">
                    <label for="bln_ack_safety_tips" class="ml-2"><b>I have read and accept the safety tips</b></label>
                </div>
            </div>
            <div class="row justify-content-center">
        """
        button_width = 'col-md-6'
        if not post.id or post.post_status_id == COMMON.get_post_status_id('preview'):
            button_width = 'col-md-4'
            html += f"""
                <div class="{button_width} col-sm-12">
                    <button class="btn btn-primary col-12 savePost" data-status="preview" data-featured="false" disabled>Preview Ad</button>
                </div>
        """
        html += f"""
                <div class="{button_width} col-sm-12">
                    <button class="btn btn-primary col-12 savePost" data-status="active" data-featured="false" disabled>Post Ad (Free)</button>
                </div>
        """
        featured_start_date = post.featured_start_date if post.featured_start_date else datetime.now() + timedelta(days=(FEATURED_AD_EXPIRY_IN_DAYS))
        premium_remind_date = datetime.now() + timedelta(days=(FEATURED_AD_EXPIRY_IN_DAYS-EXPIRY_REMINDER_IN_DAYS))
        if featured_start_date > premium_remind_date:

            featured_ad_price = FEATURED_AD_PRICE_IN_RANDS
            this = FeaturedAdPrice.latest_entry()
            if this and this.price:
                featured_ad_price = this.price
            featured_ad_price = get_currency_by_locale(featured_ad_price, cents=False)

            html += f"""
                <div class="{button_width} col-sm-12 text-left">
                    <button class="btn btn-warning col-12 savePost" data-status="active" data-featured="true" disabled>Post Featured Ad</button><br/>
                    <ul class="styled_list">
                        <li class="subtext"><small>Ads will be featured for {FEATURED_AD_EXPIRY_IN_DAYS} days</small></li>
                        <li class="subtext"><small>Featured ads cost only {featured_ad_price}</small></li>
                        <li class="subtext"><small>Featured ads display on the front page and at the top of search results</small></li>
                        <li class="subtext"><small>Featured ad amount is not refundable</small></li>
                    </ul>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
        var form_ad = $('#form-ad');
        setFormValidation(form_ad);
        var isFeatured = false;
        var postStatus = 'active';

        Dropzone.options.formAd = {

            maxFiles: 9,
            parallelUploads: 9,

            addRemoveLinks: true,
            dictRemoveFile: '<i class="fa fa-times-circle text-danger" aria-hidden="true" style="font-size: 30px"></i>',
            uploadMultiple: true,
            autoProcessQueue: false,

            acceptedFiles: 'image/*',
            clickable: '#uploader_div',
            previewsContainer: '#uploader_div',

            init: function(){
                var myDropzone = this;

                this.on('removedfile', function(file){
                    var kwargs = {
                        "img_id": file.id
                    }
                    $.post('/my_account/delete_post_image', kwargs , function(data){
                        return 'false';
                    });
                });

                var kwargs = 'post_id='+$('#post_id').val();
                $.get('/my_account/get_post_images', kwargs, function(result){
                    var data = JSON.parse(result);
                    $.each(data, function(i, item){
                        let mockFile = {id: item.id, name : item.name, size: 12345};
                        myDropzone.emit("addedfile", mockFile);
                        myDropzone.options.thumbnail.call(myDropzone, mockFile, '/img/posts/'+item.name);
                        myDropzone.emit("complete", mockFile);
                    });

                });

                $('.savePost').click(function(e){
                    e.preventDefault();
                    e.stopPropagation();
                    var _this = e.currentTarget;
                    isFeatured = $(_this).data('featured');
                    postStatus = $(_this).data('status');
                    var new_files = myDropzone.getQueuedFiles().length;
                    if(new_files > 0){

                        myDropzone.processQueue();

                    }else{

                        var formserial = getFormData('#form-ad');
                        formserial['post_status'] = postStatus;
                        $.post('/my_account/save_post?', formserial, function(data){
                            var result = JSON.parse(data);
                            if(result.success === 'true'){
                                handle_redirect(result, isFeatured);
                            } else {
                                showNotification(result.status, result.message);
                            }
                        });
                    };
                });

                this.on('sendingmultiple', function(file, xhr, formData){
                    formData.append('post_status', postStatus);
                });

                this.on("successmultiple", function(files, response) {
                    var result = JSON.parse(response);
                    if(result.success === 'true'){
                        handle_redirect(result, isFeatured);
                    } else {
                        showNotification(result.status, result.message);
                    }
                });

                this.on("complete", function(file) {
                    var removeBtn = $(".dz-remove");
                    $(removeBtn).html("<div><span data-id='"+file.id+"' class='remove_image fa fa-times-circle text-danger' style='font-size: 30px'></span></div>");
                    $(removeBtn).data('id', file.id);
                });
            },
        };

        $('#category_id').change(function(){
            var kwargs = 'id=subcategory_id';
            kwargs += '&required=true';
            kwargs += '&category_id='+$('#category_id option:selected').val();
            $('.subcat_container').load('/my_account/get_selectbox_subcategories?', kwargs, function(data){
                return false;
            });
        });
        $('#bln_book').change(function() {
            if(this.checked) {
                $('.isbn_number').slideDown(400);
                $('#isbn_field').attr('disabled', false).focus();
            } else {
                $('.isbn_number').slideUp(400);
                $('#isbn_field').attr('disabled', true).blur();
            }
        });
        $('#location_id').change(function() {
            var location = $('#location_id');
            var kwargs = {
                'location_id': $(location_id).val(),
            }
            $('#safetyZoneMapDiv').load('/common/get_safety_zone_map', kwargs, function(data){
                return false;
            });
        });
        if($('#isbn').val()){
            $('#bln_book').prop('checked', true);
            $('#bln_book_container').css('padding-top', '35px');
        } else {
            $('#bln_book').prop('checked', false);
            $('.isbn_number').hide();
        };
        $('#bln_ack_safety_tips').change(function(){
            if(this.checked){
                $('.savePost').removeAttr('disabled', 'disabled');
                $('#safetyTipsAlert').removeClass('alert-danger-translucent')
                    .addClass('alert-success-translucent');
            } else {
                $('.savePost').attr('disabled', 'disabled');
                $('#safetyTipsAlert').addClass('alert-danger-translucent')
                    .removeClass('alert-success-translucent');
            };
        });
        function handle_redirect(result, isFeatured){
            if(result.success === 'true'){
                if (isFeatured){
                    var kwargs = {
                        'post_id': result.data,
                        'notification_id': result.notification_id,
                    }
                    $('#dialogdiv').load('/my_account/featured_ad_modal', kwargs, function(data){
                        return false;
                    });
                } else {
                    $.redirect('/posts?id='+result.data);
                };
            };
        };

        $('#uploader_div').click(function(){
            $('#previewInner').remove();
        });
        </script>
        """
        return html + javascript

    @expose()
    def get_post_images(self, *args, **kwargs):
        post_id = kwargs.get('post_id', None)
        images = PostImage.by_attr_all('post_id', post_id)
        outputlist = []
        for i in images:
            outputlist.append({
                'id' : i.id,
                'name' : i.filepath,
                })
        return json.dumps(outputlist)

    @expose()
    def featured_ad_modal(self, *args, **kwargs):
        post_id = str_to_int(kwargs.get('post_id', None))
        response = self.create_eiffel_corp_premium_ad_payment_notification()
        data = response.get('data', {})
        notification_id = data.get('notification_id', None)
        print(f'02 - notification_id arrived from save post, notification_id: {notification_id}')
        html = f"""
        <div id="featuredAdModal" data-notification-id="{notification_id}" data-post-id="{post_id}" class="modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Waiting for payment</h5>
                    </div>
                    <div class="modal-body">
                        <div class="loader my-5">
                            <span class="dot dot_1"></span>
                            <span class="dot dot_2"></span>
                            <span class="dot dot_3"></span>
                            <span class="dot dot_4"></span>
                        </div>
                        <h6>Please open your CΛLΛBΛSH app to process this transaction.</h6>
                    </div>
                    <div class="modal-footer">
                        <button id="cancelButton" type="button" class="btn btn-primary">Cancel</button>

                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
            var pendingPayment = true;
            var featuredAdModal = $('#featuredAdModal');
            var notificationId = $(featuredAdModal).data('notificationId');
            var postId = $(featuredAdModal).data('postId');
            var checkPaymentNotification = setInterval(checkPaymentNotification, 5000);

            function checkPaymentNotification(){
                var kwargs = {
                    'notification_id': notificationId,
                    'post_id': postId,
                }
                $.get('/my_account/check_has_notifications', kwargs, function(data){
                    var result = JSON.parse(data);

                    if (result.success === 'true' && result.paid === 'true'){

                        $('.modal-body').html('<h3 class="text-center my-3">Success</h3><p class="text-center my-3">'+result.message+'</p>');
                        $('.modal-footer').html('<a href="/posts?id='+postId+'" class="btn btn-primary">View Ad</a>');
                        pendingPayment = false;
                        clearInterval(checkPaymentNotification);

                    } else if (result.success === 'true' && result.declined === 'true'){

                        $('.modal-body').html('<h3 class="text-center my-3">Failed</h3><p class="text-center my-3">'+result.message+'</p>');
                        pendingPayment = false;
                        $('.modal-footer').html('<a href="/posts?id='+postId+'" class="btn btn-primary">View Ad</a>');
                        clearInterval(checkPaymentNotification);
                    }
                });
            };

            $('#cancelButton').click(function(){
                clearInterval(checkPaymentNotification);
                $('#featuredAdModal').modal('hide');
            });
            $('#featuredAdModal').modal({'backdrop': 'static'});
        </script>
     	"""
        return html + javascript

    @expose()
    def save_post(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        post_id = kwargs.get('post_id', None)
        price = kwargs.get('price', 0)

        if not price:
            return json.dumps({'success': 'false',
                               'message': 'Price field cannot be empty.',
                               'status': 'danger'})

        price = str_to_float(price)
        if (price > PRICE_LIMIT) or (price <= 0):
            return json.dumps({'success': 'false',
                               'message': f'The price for any item must be between {get_currency_by_locale(0)} and {get_currency_by_locale(PRICE_LIMIT)}.',
                               'status': 'danger'})

        if post_id:
            post_id = self.update_existing_post(**kwargs)
            feedback = 'updated'

        else:
            post_id = self.create_new_post(**kwargs)
            feedback = 'created'

        title = kwargs.get('title', '')
        return json.dumps({'success': 'true',
                           'data': post_id,
                           'message': f'Post: "{title}" has successfully been {feedback}.',
                           'status': 'success'})

    def create_eiffel_corp_premium_ad_payment_notification(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        student = Student.by_id(usernow.id)
        amount = FEATURED_AD_PRICE_IN_RANDS
        if not amount: return None

        # As per JP: 30 June 2020
        message = 'You are about to post a featured ad.'

        params = {'entity_id' : student.entity_id, 'amount' : amount, 'message' : message, }
        return GATEWAY.create_eiffel_corp_premium_ad_payment_notification(params)

    @expose()
    def check_has_notifications(self, *args, **kwargs):
        post_id = kwargs.get('post_id', None)
        if not post_id:
            LOGGER.info('DEBUG: check_has_notifications NO incoming post_id')
            return json.dumps({'success': 'false', 'paid': 'false'})

        notification_id = str_to_int(kwargs.get('notification_id', None))
        if not notification_id:
            LOGGER.info(' DEBUG: check_has_notifications NO incoming notification_id')
            return json.dumps({'success': 'false', 'paid': 'false'})

        usernow = request.identity.get('user', {})
        student = Student.by_id(usernow.id)
        result = GATEWAY.check_has_notifications(student.entity_id)
        if not result:
            return json.dumps({'success': 'false', 'paid': 'false'})

        success = result.get('success', False)
        if success:

            notifications_list = GATEWAY.get_notifications_list(student.entity_id)
            seen_list = notifications_list.get('seen', [])
            if not seen_list:
                return json.dumps({'success': 'false', 'paid': 'false'})

            for item in seen_list:
                actioned_notification_id = str_to_int(item.get('actioned_notification_id', None))
                message = item.get('message', None)
                if actioned_notification_id == notification_id:
                    if 'successfully' in message.lower():
                        update_post = self.update_featured_post(**{'post_id': post_id})
                        return json.dumps({'success': 'true', 'paid': 'true', 'message': message})
                    else:
                        return json.dumps({'success': 'true', 'declined': 'true', 'message': message})

            unseen_list = result.get('unseen', [])
        return json.dumps({'success': 'false'})

    def update_featured_post(self, *args, **kwargs):
        LOGGER.info('DEBUG: update_featured_post kwargs', kwargs)
        post_id = kwargs.get('post_id', None)
        if not post_id:
            LOGGER.info('DEBUG: update_featured_post no post_id received')
            return False
        this = Post.by_id(post_id)
        this.bln_featured_ad = True
        this.featured_start_date = datetime.now()
        DBSession.flush()
        return True


    @expose()
    def create_new_post(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        post_status = kwargs.pop('post_status', 'active')
        LOGGER.info(f'post_status: {post_status}')
        post = Post()
        post.added_by = usernow.id
        post.category_id = kwargs.pop('category_id', None)
        post.subcategory_id = kwargs.pop('subcategory_id', None)
        post.title = kwargs.pop('title', None)
        post.desc = kwargs.pop('desc', None)

        price = kwargs.pop('price', None)
        price = str_to_float(price)
        price = price * 100
        post.price = price

        post.isbn = kwargs.pop('isbn', None)
        post.location_id = str_to_int(kwargs.pop('location_id', None))
        post.post_status_id = COMMON.get_post_status_id(post_status)
        post.updated = datetime.now()
        allow_offers = kwargs.pop('bln_allow_offer', None)
        post.bln_allow_offer = True if allow_offers == 'on' else False
        post.bln_featured_ad = False
        post.featured_start_date = None
        DBSession.add(post)
        DBSession.flush()
        LOGGER.info(f'Post save kwargs: {kwargs}')
        for key, value in kwargs.items():
            if 'file' in key:
                adv_img_success = self.upload_post_images(**{'files': value, 'post_id': post.id})
        return post.id

    @expose()
    def update_existing_post(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        ad_id = kwargs.pop('post_id', None)
        if not ad_id:
            return False
        post = Post.by_id(ad_id)
        post.added_by = usernow.id
        post.category_id = kwargs.pop('category_id', None)
        post.subcategory_id = kwargs.pop('subcategory_id', None)
        post.title = kwargs.pop('title', None)
        post.desc = kwargs.pop('desc', None)

        price = kwargs.pop('price', None)
        price = str_to_float(price)
        price = price * 100
        post.price = price

        post.isbn = kwargs.pop('isbn', None)
        post.location_id = str_to_int(kwargs.pop('location_id', None))
        post.post_status_id = COMMON.get_post_status_id('active')
        post.updated = datetime.now()
        allow_offers = kwargs.pop('bln_allow_offer', None)
        post.bln_allow_offer = True if allow_offers == 'on' else False
        featured = kwargs.pop('bln_featured_ad', None)
        if featured:
            post.bln_featured_ad = True
            post.featured_start_date = datetime.date(datetime.now())
        else:
            post.bln_featured_ad = False
            post.featured_start_date = None
        DBSession.flush()
        LOGGER.info(f'Post save kwargs: {kwargs}')
        for key, value in kwargs.items():
            if 'file' in key:
                adv_img_success = self.upload_post_images(**{'files': value, 'post_id': post.id})
        return post.id

    @expose()
    def upload_post_images(self, *args, **kwargs):
        post_id = kwargs.get('post_id', None)
        files = kwargs.get('files', None)
        file_upload = ""
        if isinstance(files, list):
            for file in files:
                file_upload = json.loads(self.handle_file_upload(**{'file': file, 'img_dir': POSTS_IMG_DIRNAME}))
                if file_upload.get('success'):
                    filepath = file_upload.get('name', '')
                    post_img_id = self.save_post_image(**{'post_id': post_id, 'filepath': filepath})
        else:
            file_upload = json.loads(self.handle_file_upload(**{'file': files, 'img_dir': POSTS_IMG_DIRNAME}))
            if file_upload.get('success'):
                filepath = file_upload.get('name', '')
                post_img_id = self.save_post_image(**{'post_id': post_id, 'filepath': filepath})
        return True

    @expose()
    def save_post_image(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        this = PostImage()
        this.added_by = usernow.id
        this.post_id = kwargs.get('post_id', None)
        this.filepath = kwargs.get('filepath', '')
        DBSession.add(this)
        DBSession.flush()
        return True

    @expose()
    def delete_post_image(self, *args, **kwargs):
        post_image_id = kwargs.get('img_id', None)
        if not post_image_id:
            return json.dumps({'success': 'false'})
        post_image = PostImage.by_id(post_image_id)
        imgfile = os.path.join(POSTS_IMG_DIRNAME, str(post_image.filepath))
        if os.path.isfile(imgfile):
            os.remove(imgfile)
        DBSession.delete(post_image)
        DBSession.flush()
        return json.dumps({'success' : 'true'})

    @expose()
    def update_post_status_deactivated(self, *args, **kwargs):
        if not request.identity:
            redirect('/login')

        post_id = kwargs.get('post_id', None)
        if not post_id:
            return json.dumps({'success': 'false', 'message': 'We could not deactivate this post.  Please try again later', 'status': 'danger'})

        this = Post.by_id(post_id)
        this.post_status_id = COMMON.get_post_status_id('deactivated')
        this.active = True
        DBSession.flush()
        kwargs['post_title'] = this.title
        self.update_post_status_deactivated_orders(**kwargs)
        COMMON.update_category_count(**{'category_id': this.category_id})
        return json.dumps({'success': 'true', 'message': f'"{this.desc}" was successfully deactivated.', 'status': 'success'})

    def update_post_status_deactivated_orders(self, *args, **kwargs):
        post_id = kwargs.get('post_id', None)
        if not post_id:
            return False
        post_title = kwargs.get('post_title', '')
        dbase_query = DBSession.query(Order). \
            filter(Order.post_id == post_id). \
            filter(Order.order_status_id == COMMON.get_order_status_id('active')). \
            filter(Order.active == True). \
            all()
        for order in dbase_query:
            order.order_status_id = COMMON.get_order_status_id('declined')
            order.updated = datetime.now()
            DBSession.flush()
            params = {
                'from_student': order.added_by,
                'message': f"<b>Automated Message</b><br> Your offer on '{post_title}' has been declined, because the post was deactivated."
            }
            CHAT.send_message(**params)
        return True

    @expose()
    def get_selectbox_categories(self, *args, **kwargs):
        dbase_query = DBSession.query(Category). \
                filter(Category.active == True). \
                order_by(Category.title.asc()). \
                all()
        kwargs['outputlist'] = [{'name': m.title, 'id': m.id} for m in dbase_query]
        return create_selectbox_html(**kwargs)

    @expose()
    def get_selectbox_subcategories(self, *args, **kwargs):
        dbase_query = DBSession.query(Subcategory). \
                filter(Subcategory.category_id==kwargs.get('category_id', None)). \
                filter(Subcategory.active == True). \
                order_by(Subcategory.title.asc()). \
                all()
        kwargs['outputlist'] = [{'name': m.title, 'id': m.id} for m in dbase_query]
        return create_selectbox_html(**kwargs)

    @expose()
    def get_selectbox_location(self, *args, **kwargs):
        dbase_query = DBSession.query(SafetyZones). \
                filter(SafetyZones.active == True). \
                order_by(SafetyZones.desc.asc()). \
                all()
        kwargs['case_sensitive'] = True
        kwargs['outputlist'] = [{'name' : m.desc, 'id' : m.location_id} for m in dbase_query]
        return create_selectbox_html(**kwargs)

    @require(CustomNotAnonymous())
    @expose('eiffel_front.templates.2_col_med_right')
    def my_ads(self, *args, **kwargs):
        left_col = self.get_left_col()
        right_col = f"""
        <div class="my_ads_container"></div>
        """
        javascript = """
        $('.my_ads_container').load('/my_account/get_my_ads_html');
        $('#mainNav .nav-item').removeClass('active');
        $('#myAccountLink').addClass('active');
        """
        return dict(title='My Ads', left_col=left_col, right_col=right_col, javascript=javascript)

    @time_it
    def get_ads_pagination_buttons_from_query(self, querylist=None, start=None, *args, **kwargs):

        # No dbase_query so return empty
        if not querylist: return ''

        # The list is shorter than the limit so return empty
        if not len(querylist) > DBASE_QUERY_LIMIT: return ''

        pagination_html = ""

        current_idx = None
        chunklist = [querylist[i : i + DBASE_QUERY_LIMIT] for i in range(0, len(querylist), DBASE_QUERY_LIMIT)]
        chunkidlist = [[int(x.id) for x in chunk] for chunk in chunklist]

        if len(chunklist) > PAGINATION_MAX and not start:
            chunklist = chunklist[: PAGINATION_MAX]

        if len(chunklist) > PAGINATION_MAX and start:
            current_idx = [chunkidlist.index(chunk) for chunk in chunkidlist if int(start) in chunk][0]

            if current_idx == 0:
                chunklist = chunklist[: PAGINATION_MAX]

            start_idx = math.ceil(current_idx - (PAGINATION_MAX / 2))
            if start_idx < 0:
                start_idx = 0

            end_idx = start_idx + PAGINATION_MAX
            if end_idx > len(chunklist):
                end_idx = len(chunklist)
                start_idx = end_idx - PAGINATION_MAX

        for n, chunk in enumerate(chunklist):
            chunkidlist = [int(x.id) for x in chunk]

            selected = ''
            if start and int(start) in chunkidlist:
                selected = 'active'
            if not start and n == 0:
                selected = 'active'

            if current_idx:
                if n >= start_idx and n < end_idx:
                    pagination_html += f"""
                    <button start='{max(chunkidlist)}' type="button"
                            class="btn_paginate_my_ads btn btn-success {selected}"> {n + 1}
                    </button>
                    """
            else:
                pagination_html += f"""
                <button start='{max(chunkidlist)}' type="button"
                        class="btn_paginate_my_ads btn btn-success {selected}"> {n + 1}
                </button>
                """
        return pagination_html

    @expose()
    def get_my_ads_html(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        dbase_query = DBSession.query(Post.id). \
            filter(Post.added_by == usernow.id). \
            filter(Post.post_status_id != COMMON.get_post_status_id('sold')). \
            filter(Post.post_status_id != COMMON.get_post_status_id('deactivated')). \
            filter(Post.active == True). \
            order_by(desc(Post.id))
        query_page = paginate(dbase_query)
        total_pages = query_page.get('pages', 1)
        pagination = set_pagination_html()
        html = f"""
        <div class="widget dashboard-container my-adslist">
            <h3 class="widget-header">My Ads</h3>
            <div id="tableDiv" data-total-pages="{total_pages}" data-refresh-target="/my_account/get_my_ads_htmltbl" data-limit="5"></div>
            {pagination}
        </div>
        """
        javascript = """
        <script>
            var kwargs = {'width': $(window).width()}
            $('#tableDiv').load('/my_account/get_my_ads_htmltbl', kwargs);

            $(document).on('click', '.update_post_status_deactivated', function(){
                kwargs['post_id'] = $(this).attr('post_id');
                $.post('/my_account/update_post_status_deactivated?', kwargs, function(data){
                    var result = JSON.parse(data);
                    if(result.success === 'true'){
                        $('#tableDiv').load('/my_account/get_my_ads_htmltbl', kwargs);
                    }
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_my_ads_htmltbl(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        dbase_query = DBSession.query(Post). \
            filter(Post.added_by == usernow.id). \
            filter(Post.post_status_id != COMMON.get_post_status_id('sold')). \
            filter(Post.post_status_id != COMMON.get_post_status_id('deactivated')). \
            filter(Post.active == True). \
            order_by(desc(Post.id))
        items_per_page = str_to_int(kwargs.get('limit', 10))
        current_page = str_to_int(kwargs.get('page', 1))
        page_show = str_to_int(kwargs.get('pageShow', 5))
        this = paginate(dbase_query, current_page, items_per_page)
        width = str_to_int(kwargs.get('width', MOBILE_BREAK_WIDTH))
        if width < MOBILE_BREAK_WIDTH:
            return self.get_posts_cards(this.get('items', []))
        return self.get_posts_html_tbl(this.get('items', []))

    @require(CustomNotAnonymous())
    @expose('eiffel_front.templates.2_col_med_right')
    def pending_purchases(self, *args, **kwargs):
        left_col = self.get_left_col()
        right_col = f"""
        <div class="orders_div"></div>
        """
        javascript = """
        var kwargs = {'width': $(window).width()};
        $('.orders_div').load('/my_account/get_pending_purchases_html', kwargs);
        """
        return dict(title='Pending Purchases', left_col=left_col, right_col=right_col, javascript=javascript)

    def get_my_mobile_ads(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        dbase_query = DBSession.query(Post.id). \
            filter(Post.added_by == usernow.id). \
            filter(Post.post_status_id != COMMON.get_post_status_id('sold')). \
            filter(Post.post_status_id != COMMON.get_post_status_id('deactivated')). \
            filter(Post.active == True). \
            order_by(desc(Post.id))
        query_page = paginate(query)
        pagination = set_pagination_html(**{'table_wrapper_id': '#tableDiv'})
        total_pages = query_page.get('pages', 1)
        html = f"""
        <div class="widget dashboard-container my-adslist">
            <h3 class="widget-header">My Ads</h3>
            <div id="tableDiv" data-total-pages="{total_pages}" data-refresh-target="/test/get_user_table"></div>
            {pagination}
        </div>
        """
        javascript = """
        <script>
            $('#tableDiv').load('/my_account/get_my_ads_htmltbl');

            $(document).on('click', '.update_post_status_deactivated', function(){
                kwargs['post_id'] = $(this).attr('post_id');
                $.post('/my_account/update_post_status_deactivated?', kwargs, function(data){
                    var result = JSON.parse(data);
                    if(result.success === 'true'){
                        $('#tableDiv').load('/my_account/get_my_ads_htmltbl', kwargs);
                    }
                });
            });
        </script>
        """
        return html + javascript



    @expose()
    def get_pending_purchases_html(self, *args, **kwargs):
        width = str_to_int(kwargs.get('width', MOBILE_BREAK_WIDTH))
        if width < MOBILE_BREAK_WIDTH:
            return self.get_mobile_pending_purchases()
        status_ordered = COMMON.get_order_status_id('active')
        pending_orders = self.get_pending_orders_tbl(**{'status': status_ordered, 'actions_type': 'pending_orders'})
        status_sold = COMMON.get_order_status_id('sold')
        purchased_orders = self.get_orders_by_status_tbl(**{'status': status_sold, 'actions_type': 'purchased_orders'})
        html = f"""
        <div class="widget dashboard-container my-pending-orders">
            <h3 class="widget-header">Pending Purchases</h3>
            {pending_orders}
        </div>
        <div class="widget dashboard-container my-purchase-history">
            <h3 class="widget-header">Purchase History</h3>
            {purchased_orders}
        </div>
        """
        javascript = """
        <script>
            $('.cancel_order').click(function(){
                var kwargs = 'order_id='+$(this).attr('order_id');
                $.post('/my_account/cancel_buyer_order?', kwargs, function(data){
                    var result = JSON.parse(data);
                    if(result.success === 'true'){
                        $.redirect('/my_account/pending_purchases');
                    }
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_pending_orders_tbl(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        active_ordered = COMMON.get_order_status_id('active')
        declined_ordered = COMMON.get_order_status_id('declined')

        orders_list = DBSession.query(Order). \
            filter(Order.buyer_id == usernow.id). \
            filter(or_(
                Order.order_status_id == active_ordered,
                Order.order_status_id == declined_ordered,
            )). \
            filter(Order.active == True). \
            order_by(desc(Order.added)). \
            all()
        if not orders_list: return "No items to show"
        outputlist = []
        actions_type = kwargs.get('actions_type', 'my_ads')
        for item in orders_list:
            item_post = Post.by_id(item.post_id)
            order_status = OrderStatus.by_id(item.order_status_id)
            status = order_status.status.title() if order_status else ""
            colour = order_status.colour if order_status else "fff"
            category = Category.by_id(item_post.category_id)
            post_image = PostImage.by_attr_all('post_id', item_post.id)
            filepath = '/img/placeholder_img.jpg'
            if post_image:
                filepath = os.path.join('/img/posts', post_image[0].filepath)
            product_title = f"""
            <h6 class="title"><a href="/posts?id={item_post.id}">{item_post.title}</a></h6>
            <span class="add-id">
                <strong>Ad ID: </strong>
                {item_post.id}
            </span>
            <span>
                <strong>Posted on: </strong>
                {item.added.strftime('%b %d, %Y')}
            </span>
            <span class="status active" style="color: #{colour};"><strong>Status: </strong>{status}</span>
            """
            actions = f"""
            <div>
                <ul class="list-inline">
                    <li class="list-inline-item">
                        <a class="action_icon view" href="/posts?id={item_post.id}">
                            <i class="fa fa-eye"></i>
                        </a>
                    </li>
                    <li class="list-inline-item">
                        <div class="action_icon delete cancel_order" order_id="{item.id}">
                            <i class="fa fa-trash"></i>
                        </div>
                    </li>
                </ul>
            </div>
            """
            outputlist.append({
                'image': f"<img alt='image description' height='auto' src='{filepath}'>",
                'title': product_title,
                'category': f"<span class='categories'><a href='/posts/search?id={category.id}'>{category.title}</a></span>",
                'action': actions,
                             })
        dbcolumnlist=[
                'image',
                'title',
                'category',
                'action',
                    ]
        theadlist=[
                'Image',
                'Product Title',
                'Category',
                'Action',
                ]
        tdclasslist=[
                'product-thumb',
                'product-details',
                'product-category',
                'tbl_actions pl-0 pr-0',
        ]
        return build_html_table(outputlist, dbcolumnlist, theadlist, "pending_orders_table", tdclasslist)

    def get_mobile_pending_purchases(self, *args, **kwargs):
        status_ordered = COMMON.get_order_status_id('active')
        pending_orders = self.get_mobile_pending_orders(**{'status': status_ordered, 'actions_type': 'pending_orders'})
        status_sold = COMMON.get_order_status_id('sold')
        purchased_orders = self.get_mobile_orders_by_status(**{'status': status_sold, 'actions_type': 'purchased_orders'})
        html = f"""
        <div class="widget dashboard-container my-pending-orders">
            <h3 class="widget-header">Pending Purchases</h3>
            {pending_orders}
        </div>
        <div class="widget dashboard-container my-purchase-history">
            <h3 class="widget-header">Purchase History</h3>
            {purchased_orders}
        </div>
        """
        javascript = """
        <script>
            $('.cancel_order').click(function(){
                var kwargs = 'order_id='+$(this).attr('order_id');
                $.post('/my_account/cancel_buyer_order?', kwargs, function(data){
                    var result = JSON.parse(data);
                    if(result.success === 'true'){
                        $.redirect('/my_account/pending_purchases');
                    }
                });
            });
        </script>
        """
        return html + javascript

    def get_mobile_orders_by_status(self, *args, **kwargs):
        status_id = kwargs.get('status', None)
        if not status_id:
            return "No items to show"
        usernow = request.identity.get('user', {})
        orders_list = DBSession.query(Order). \
            filter(Order.buyer_id == usernow.id). \
            filter(Order.order_status_id == status_id). \
            filter(Order.active == True). \
            order_by(desc(Order.added)). \
            all()
        if not orders_list: return "No items to show"
        actions_type = kwargs.get('actions_type', 'pending_orders')
        html = ''
        for order in orders_list:
            post = Post.by_id(order.post_id)
            if not post:
                continue
            actions = self.get_table_actions(**{'post_id': order.post_id, 'actions_type': actions_type})
            html += self.get_card_post_item(post, actions)
        javascript = """
        <script>
            $('.delete_sold_order').click(function(){
                var kwargs = {'order_id': $(this).attr('order_id')}
                $.post('/my_account/remove_buyer_order', kwargs, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $.redirect('/my_account/pending_purchases');
                    }
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def remove_buyer_order(self, *args, **kwargs):
        order_id = kwargs.get('order_id', None)
        if not order_id:
            print('DEBUG REMOVE BUYER ORDER: order_id not present in kwargs')
            return json.dumps({'success': False, 'message': 'Please select an order to remove.', 'status': 'danger'})
        order = DBSession.query(Order). \
            filter(Order.id == order_id). \
            first()
        if not order:
            print('DEBUG REMOVE BUYER ORDER: Order not found for order_id provided')
            return json.dumps({'success': False, 'message': 'Please select an order to remove', 'status': 'danger'})
        order.buyer_active = False
        order.order_status_id = COMMON.get_order_status_id('Cancelled')
        order.updated = datetime.now()
        DBSession.flush()
        return json.dumps({'success': True, 'message': 'Order successfully updated', 'status': 'danger'})


    def get_mobile_pending_orders(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        active_ordered = COMMON.get_order_status_id('active')
        declined_ordered = COMMON.get_order_status_id('declined')

        orders_list = DBSession.query(Order). \
            filter(Order.buyer_id == usernow.id). \
            filter(or_(
                Order.order_status_id == active_ordered,
                Order.order_status_id == declined_ordered,
            )). \
            filter(Order.active == True). \
            order_by(desc(Order.added)). \
            all()
        if not orders_list: return "No items to show"
        actions_type = kwargs.get('actions_type', 'my_ads')
        html = ''
        for item in orders_list:
            item_post = Post.by_id(item.post_id)
            actions = f"""
                <ul class="list-inline">
                    <li class="list-inline-item">
                        <a class="action_icon view" href="/posts?id={item_post.id}">
                            <i class="fa fa-eye"></i>
                        </a>
                    </li>
                    <li class="list-inline-item">
                        <div class="action_icon delete cancel_order" order_id="{item.id}">
                            <i class="fa fa-trash"></i>
                        </div>
                    </li>
                </ul>
            """
            html += self.get_card_post_item(item_post, actions)
        return html

    @expose()
    def cancel_buyer_order(self, *args, **kwargs):
        order_id = kwargs.get('order_id', None)
        if not order_id:
            return json.dumps({'success' : 'false'})
        this = Order.by_id(order_id)
        this.order_status_id = COMMON.get_order_status_id('cancelled')
        this.buyer_active = False
        this.seller_unread = True
        this.updated = datetime.now()
        DBSession.flush()
        return json.dumps({'success' : 'true'})

    @expose()
    def get_orders_by_status_tbl(self, *args, **kwargs):
        status_id = kwargs.get('status', None)
        if not status_id:
            return "No items to show"
        usernow = request.identity.get('user', {})
        orders_list = DBSession.query(Order). \
            filter(Order.buyer_id == usernow.id). \
            filter(Order.order_status_id == status_id). \
            filter(Order.active == True). \
            order_by(desc(Order.added)). \
            all()
        if not orders_list: return "No items to show"
        post_list = []
        for order in orders_list:
            post = Post.by_id(order.post_id)
            if not post:
                continue
            post_list.append(post)
        actions_type = kwargs.get('actions_type', 'pending_orders')
        return self.get_posts_html_tbl(post_list, **{'actions_type': actions_type})

    def check_sale_notification(self, item=None, *args, **kwargs):
        if not item:
            return None
        message = item.get('message', None)
        actioned_notification_id = item.get('actioned_notification_id', None)
        sale_exists = DBSession.query(Sale). \
                filter(Sale.sale_status_id == STATUS_ID_PENDING). \
                filter(Sale.notification_id == actioned_notification_id). \
                first()
        if not sale_exists:
            return None

        if 'cancelled' in str(message.lower()):
            sale_exists.sale_status_id = STATUS_ID_REJECTED
            DBSession.flush()

        if 'failed' in str(message.lower()):
            sale_exists.sale_status_id = STATUS_ID_FAILED
            DBSession.flush()

        if 'received' in str(message.lower()):
            sale_exists.sale_status_id = STATUS_ID_SOLD
            DBSession.flush()

        order = Order.by_id(sale_exists.order_id)
        if not order:
            return None
        return order.post_id

    def check_open_rating_modal(self, *args, **kwargs):
        usernow = request.identity.get('user', {})

        result = GATEWAY.get_notifications_list(usernow.entity_id)
        success = result.get('success', False)
        if not success:
            return None

        seen = result.get('seen', [])
        for item in seen:
            post_id = self.check_sale_notification(item)
            if post_id:
                return post_id

        unseen = result.get('unseen', [])
        for item in unseen:
            post_id = self.check_sale_notification(item)
            if post_id:
                return post_id

        return None

    @expose()
    def get_unread_notifications(self, *args, **kwargs):
        usernow = request.identity.get('user', {})

        result = GATEWAY.check_has_notifications(usernow.entity_id)
        success = result.get('success', False)

        rating_post_id = None
        notification_count = 0
        if success:
            notification_count = str_to_int(result.get('data', 0))
            if notification_count > 0:
                result = GATEWAY.get_notifications_list(usernow.entity_id)
                success = result.get('success', False)
                if success:
                    unseen = result.get('unseen', [])
                    notification_count = len(unseen)

            rating_post_id = self.check_open_rating_modal()

        chat_count = CHAT.check_unread_messages()
        outputdict = {
                'notification_count' : notification_count,
                'chat_count' : chat_count,
                'rating_post_id' : rating_post_id,
        }
        return json.dumps(outputdict)

    def get_unread_order_count(self, *args, **kwargs):
        if not request.identity:
            redirect('/login')
        usernow = request.identity.get('user', {})
        student = Student.by_id(usernow.id)
        return DBSession.query(Order). \
            filter(Order.seller_id == student.id). \
            filter(Order.seller_unread == True). \
            filter(Order.active == True). \
            value(func.count(Order.id))

    @require(CustomNotAnonymous())
    @expose('eiffel_front.templates.2_col_med_right')
    def sales(self, *args, **kwargs):
        left_col = self.get_left_col()
        right_col = f"""
        <div id="salesOffersDiv" class="mb-30"></div>
        <div id="salesDiv"></div>
        """
        javascript = """
        var kwargs = {'width': $(window).width()};
        $('#salesOffersDiv').load('/my_account/get_sales_offers', kwargs);
        $('#salesDiv').load('/my_account/get_sales_overview', kwargs);
        $('#mainNav .nav-item').removeClass('active');
        $('#myAccountLink').addClass('active');
        """
        return dict(title='Sales', left_col=left_col, right_col=right_col, javascript=javascript)

    @expose()
    def update_sales_offer_status(self, *args, **kwargs):
        status_id = str_to_int(kwargs.get('status_id', None))
        if not status_id:
            return json.dumps({'success' : 'false'})
        order_id = str_to_int(kwargs.get('order_id', None))
        if not order_id:
            return json.dumps({'success' : 'false'})
        this = Order.by_id(order_id)
        this.order_status_id = status_id
        this.updated = datetime.now()
        DBSession.flush()
        post_item = Post.by_id(this.post_id)
        if status_id == COMMON.get_order_status_id('declined'):
            params = {
                'recipient_id': this.added_by,
                'message': f"Your offer on '{post_item.title}' has been declined."
            }
            CHAT.send_message(**params)
        if status_id == COMMON.get_order_status_id('sold'):
            message = f"Automated Message: Your offer on '{post_item.title}' has been accepted, please refer to the Calabash mobile app for payment."
            params = {
                'recipient_id': this.added_by,
                'message' : message,
            }
            CHAT.send_message(**params)
        return json.dumps({'success' : 'true'})

    def handle_sale(self, *args, **kwargs):
        usernow = request.identity.get('user', {})

        order_id = kwargs.get('order_id', None)
        if not order_id:
            return False

        notification_id = kwargs.get('notification_id', None)
        if not notification_id:
            return False

        order_notification = Sale()
        order_notification.order_id = order_id
        order_notification.notification_id = notification_id
        order_notification.sale_status_id = STATUS_ID_PENDING
        order_notification.added_by = usernow.id
        DBSession.add(order_notification)
        DBSession.flush()
        return True

    def get_safetytips_subtext(self, *args, **kwargs):
        dbase_query = SafetyTips.get_all()
        if not dbase_query: return ''
        safety_tips = f"<br/><small><b>Safety Tips</b>  "
        for tip in dbase_query:
            safety_tips += f"{tip.desc} "
        safety_tips += "</small>"
        return safety_tips

    @expose()
    def get_sales_offers_table(self, *args, **kwargs):
        post_id = kwargs.get('post_id', None)
        if not post_id:
            return ""
        outputlist = []
        dbase_query = DBSession.query(Order). \
            filter(Order.post_id == post_id). \
            filter(Order.seller_active == True). \
            order_by(desc(Order.updated)). \
            all()
        record_count = len(dbase_query)
        sold_status = COMMON.get_order_status_id('sold')
        decline_status = COMMON.get_order_status_id('declined')
        for item in dbase_query:
            buyer = Student.by_id(item.buyer_id)

            filepath = f"/img/students/{buyer.filepath}" if not buyer.filepath == None else "/img/nouserimage.svg"
            star_rating = COMMON.get_star_rating(**{'student_id': item.buyer_id})
            buyer_name = f"""
                <div class="chat_img mr-2 ml-2"><img class="rounded-circle chat_profile_pic" src="{filepath}"></div>
                <div>
                    <a class="display_link" href="/my_account/direct_message?selected_contact={item.buyer_id}"><strong>{buyer.display_name}</strong> <i class="fa fa-comments-o" aria-hidden="true"></i></a></br>
                    {star_rating}
                </div>
            """
            order_status = OrderStatus.by_id(item.order_status_id)
            actions = ""
            if order_status.id == COMMON.get_order_status_id('active'):
                actions = f"""
                    <button type="button" class="btn btn-success btn-sm offerBtn"
                        post_id="{item.post_id}" order_id="{item.id}" status_id="{sold_status}">Sold
                    </button>
                """
            elif order_status.id == (COMMON.get_order_status_id('cancelled')) or (COMMON.get_order_status_id('declined')):
                actions = f"""
                    <button type="button" class="btn btn-danger btn-sm removeOffer"
                        post_id="{item.post_id}" order_id="{item.id}">Remove
                    </button>
                """
            outputlist.append({
                'buyer_id' : buyer_name,
                'offer_amount' : get_currency_by_locale(item.offer_amount),
                'added' : item.added.strftime('%b %d, %Y'),
                'status' : f'<span class="status active" style="color: #{order_status.colour};">{order_status.status}</span>',
                'actions' : actions,
                             })
        dbcolumnlist=[
                'buyer_id',
                'offer_amount',
                'added',
                'status',
                'actions',
                    ]
        theadlist=[
                'Buyer',
                'Offer',
                'Offer Date',
                'Status',
                'Actions',
                ]
        tdclasslist = [
            'd-flex',
            'text-center',
            'text-center',
            'text-center',
            'text-center',
            ]
        rowclass = "order_row"
        javascript = """
        <script>
            $('.offerBtn').click(function(e){
                e.preventDefault();
                var status_id = $(this).attr('status_id');
                var kwargs = {
                    'post_id': $(this).attr('post_id'),
                    'order_id': $(this).attr('order_id'),
                    'status_id': status_id
                };
                var salesOfferTableDiv = $(this).closest('.salesOfferTableDiv');
                $.post('/my_account/update_sales_offer_status?', kwargs, function(data){
                    var result = JSON.parse(data);
                    if(result.success === 'true'){
                        salesOfferTableDiv.load('/my_account/get_sales_offers_table?', kwargs , function(data){
                            return false;
                        });
                        if(status_id === '4'){
                            kwargs['came_from'] = '/my_account/sales';
                            $('#dialogdiv').load('/my_account/get_rating_modal', kwargs, function(data){
                                return false;
                            });
                        };
                    }
                });
                return false;
            });
            $('.removeOffer').click(function(){
                var kwargs = {
                    'post_id': $(this).attr('post_id'),
                    'order_id': $(this).attr('order_id'),
                    'status_id': $(this).attr('status_id')
                };
                $.post('/my_account/remove_seller_offer?', kwargs, function(data){
                    var result = JSON.parse(data);
                    if(result.success === 'true'){
                        $('#salesOffersDiv').load('/my_account/get_sales_offers');
                    }
                    return false;
                });
            });
        </script>
        """
        return build_html_table(outputlist, dbcolumnlist, theadlist, f"offer_table", tdclasslist, rowclass) + javascript

    @expose()
    def get_sold_offers_table(self, *args, **kwargs):
        post_id = kwargs.get('post_id', None)
        if not post_id:
            return ""
        outputlist = []
        dbase_query = DBSession.query(Order). \
            filter(Order.post_id == post_id). \
            filter(Order.order_status_id == COMMON.get_order_status_id('sold')). \
            filter(Order.seller_active == True). \
            filter(Order.active == True). \
            order_by(desc(Order.updated)). \
            all()
        record_count = len(dbase_query)
        sold_status = COMMON.get_order_status_id('sold')
        decline_status = COMMON.get_order_status_id('declined')
        for item in dbase_query:
            buyer = Student.by_id(item.buyer_id)
            filepath = f"/img/students/{buyer.filepath}" if not buyer.filepath == None else "/img/nouserimage.svg"
            star_rating = COMMON.get_star_rating(**{'student_id': item.buyer_id})
            buyer_name = f"""
                <div class="chat_img mr-2 ml-2"><img class="rounded-circle chat_profile_pic" src="{filepath}"></div>
                <div>
                    <a class="display_link" href="/my_account/direct_message?selected_contact={item.buyer_id}"><strong>{buyer.display_name}</strong> <i class="fa fa-comments-o" aria-hidden="true"></i></a></br>
                    {star_rating}
                </div>
            """
            order_status = OrderStatus.by_id(item.order_status_id)
            actions = ""
            if order_status.id == COMMON.get_order_status_id('active'):
                actions = f"""
                    <button type="button" class="btn btn-success btn-sm offerBtn"
                        post_id="{item.post_id}" order_id="{item.id}" status_id="{sold_status}">Accept
                    </button>

                    <button type="button" class="btn btn-danger btn-sm offerBtn"
                        post_id="{item.post_id}" order_id="{item.id}" status_id="{decline_status}">Decline
                    </button>
                """
            elif order_status.id == (COMMON.get_order_status_id('cancelled')) or (COMMON.get_order_status_id('declined')):
                actions = f"""
                    <button type="button" class="btn btn-danger btn-sm removeOffer"
                        post_id="{item.post_id}" order_id="{item.id}">Remove
                    </button>
                """
            outputlist.append({
                'buyer_id' : buyer_name,
                'offer_amount' : get_currency_by_locale(item.offer_amount),
                'added' : item.added.strftime('%b %d, %Y'),
                'status' : f'<span class="status active" style="color: #{order_status.colour};">{order_status.status}</span>',
                'actions' : actions,
                             })
        dbcolumnlist=[
                'buyer_id',
                'offer_amount',
                'added',
                'status',
                'actions',
                    ]
        theadlist=[
                'Buyer',
                'Offer',
                'Offer Date',
                'Status',
                'Actions',
                ]
        tdclasslist = [
            'd-flex',
            'text-center',
            'text-center',
            'text-center',
            'text-center',
            ]
        rowclass = "order_row"
        javascript = """
        <script>
            $('.offerBtn').click(function(e){
                e.preventDefault();
                var status_id = $(this).attr('status_id');
                var kwargs = {
                    'post_id': $(this).attr('post_id'),
                    'order_id': $(this).attr('order_id'),
                    'status_id': status_id
                };
                var salesOfferTableDiv = $(this).closest('.soldOfferTableDiv');
                $.post('/my_account/update_sales_offer_status?', kwargs, function(data){
                    var result = JSON.parse(data);
                    if(result.success === 'true'){
                        salesOfferTableDiv.load('/my_account/get_sales_offers_table?', kwargs , function(data){
                            return false;
                        });
                        return false;
                    }
                    return false;
                });
                return false;
            });
            $('.offerBtn[status_id=4]').click(function(){
                var kwargs = {
                    'post_id': $(this).attr('post_id'),
                };
                $('#dialogdiv').load('/my_account/accept_offer_options_modal', kwargs, function(data){
                    return false;
                });
            });
            $('.removeOffer').click(function(){
                var kwargs = {
                    'post_id': $(this).attr('post_id'),
                    'order_id': $(this).attr('order_id'),
                    'status_id': $(this).attr('status_id')
                };
                $.post('/my_account/remove_seller_offer?', kwargs, function(data){
                    var result = JSON.parse(data);
                    if(result.success === 'true'){
                        $('#salesOffersDiv').load('/my_account/get_sales_offers');
                    }
                    return false;
                });
            });
        </script>
        """
        return build_html_table(outputlist, dbcolumnlist, theadlist, f"offer_table", tdclasslist, rowclass) + javascript

    @expose()
    def remove_seller_offer(self, *args, **kwargs):
        order_id = kwargs.get('order_id', None)
        if not order_id:
            return json.dumps({'success' : 'false'})
        this = Order.by_id(order_id)
        this.seller_active = False
        this.seller_unread = False
        this.updated = datetime.now()
        return json.dumps({'success' : 'true'})

    def create_eiffel_make_sale_notifications(self, *args, **kwargs):
        post_id = kwargs.get('post_id', None)
        if not post_id:
            return False

        post = Post.by_id(post_id)
        if not post:
            return False

        order = Order.by_attr_first('post_id', post_id)
        if not order:
            return False

        if not order.buyer_id or not order.seller_id:
            return False

        buyer = Student.by_id(order.buyer_id)
        seller = Student.by_id(order.seller_id)

        message = f'You have made an offer for {post.title} to {seller.formal_name}.'
        params = {'from_entity_id' : seller.entity_id,
                                'to_entity_id' : buyer.entity_id,
                                'amount' : order.offer_amount,
                                'message' : message, }
        notification = GATEWAY.create_eiffel_seller_to_buyer_sale_notification(params)
        success = notification.get('success', False)
        if not success:
            False
        notification_id = str_to_int(notification.get('data', ''))

        success = self.handle_sale(**{'order_id': order.id, 'notification_id' : notification_id})
        if not success:
            return False

        return True

    @expose()
    def accept_offer_options_modal(self, *args, **kwargs):
        post_id = kwargs.get('post_id', None)
        result = self.create_eiffel_make_sale_notifications(**kwargs)
        html = f"""
        <div id="offerOptionsModal" class="modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Ad options</h5>
                    </div>
                    <div class="modal-body">
                        <h6>Would you like to deactivate this ad?</h6>
                    </div>
                    <div class="modal-footer">
                        <button type="button" id="btn_update_post_status_deactivated" class="btn btn-primary" post_id={post_id}>Deactivate this ad</button>
                        <button type="button" id="refreshBtn" class="btn btn-outline-primary">Keep it active</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
            $('#btn_update_post_status_deactivated').click(function(){
                var kwargs = 'post_id='+$(this).attr('post_id')
                $.post('/my_account/update_post_status_deactivated', kwargs, function(data){
                    var result = JSON.parse(data);
                    if(result.success === 'true'){
                        $.redirect('/my_account/sales');
                    }
                    return false;
                });
            });
            $('#refreshBtn').click(function(){
                $.redirect('/my_account/sales');
            });
            $('#offerOptionsModal').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def get_posts_html_tbl(self, posts_list, **kwargs):
        if not posts_list: return "No items to show"
        outputlist = []
        actions_type = kwargs.get('actions_type', 'my_ads')
        for item in posts_list:
            post_status = PostStatus.by_id(item.post_status_id)
            status = post_status.status.title() if post_status else ""
            colour = post_status.colour if post_status else "fff"
            category = Category.by_id(item.category_id)
            post_image = PostImage.by_attr_all('post_id', item.id)
            filepath = '/img/placeholder_img.jpg'
            if post_image:
                filepath = os.path.join('/img/posts', post_image[0].filepath)
            product_title = f"""
            <h6 class="title"><a href="/posts?id={item.id}">{item.title}</a></h6>
            <span class="add-id">
                <strong>Ad ID: </strong>
                {item.id}
            </span>
            <span>
                <strong>Posted on: </strong>
                {item.added.strftime('%b %d, %Y')}
            </span>
            <span class="status active" style="color: #{colour};"><strong>Status: </strong>{status}</span>
            """
            actions = self.get_table_actions(**{'post_id': item.id, 'actions_type': actions_type})
            outputlist.append({
                'image': f"<img alt='image description' height='auto' src='{filepath}'>",
                'title': product_title,
                'category': f"<span class='categories'><a href='/posts/search?id={category.id}'>{category.title}</a></span>",
                'action': actions,
                    })
        dbcolumnlist=[
                'image',
                'title',
                'category',
                'action',
        ]
        theadlist=[
                'Image',
                'Product Title',
                'Category',
                'Action',
        ]
        tdclasslist=[
                'product-thumb',
                'product-details',
                'product-category',
                'tbl_actions pl-0 pr-0',
        ]
        return build_html_table(outputlist, dbcolumnlist, theadlist, "my_ads_table", tdclasslist)

    def get_posts_cards(self, posts_list=None, *args, **kwargs):
        if not posts_list: return ''
        actions_type = kwargs.get('actions_type', 'my_ads')
        html = ''
        for item in posts_list:
            actions = self.get_table_actions(**{'post_id': item.id, 'actions_type': actions_type})
            html += self.get_card_post_item(item, actions)
        return html


    def get_table_actions(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        student_id = Student.by_id(usernow.id)
        post_id = kwargs.get('post_id', None)
        if not post_id:
            return ""
        actions_type = kwargs.get('actions_type', None)
        if not actions_type:
            return ""
        if actions_type == 'my_ads' or actions_type == 'my_sales' :
            return self.get_my_ads_actions(**{'post_id': post_id})
        elif actions_type == 'pending_orders':
            return self.get_pending_orders_actions(**{'post_id': post_id})
        elif actions_type == 'purchased_orders':
            return self.get_purchased_orders_actions(**{'post_id': post_id})

    def get_my_ads_actions(self, *args, **kwargs):
        post_id = kwargs.get('post_id', None)
        if not post_id:
            return ""
        return f"""
            <ul class="list-inline">
                <li class="list-inline-item">
                    <a class="action_icon view" href="/posts?id={post_id}">
                        <i class="fa fa-eye"></i>
                    </a>
                </li>
                <li class="list-inline-item">
                    <a class="action_icon edit" href="/my_account/edit_ad?id={post_id}">
                        <i class="fa fa-pencil"></i>
                    </a>
                </li>
                <li class="list-inline-item">
                    <div class="action_icon delete update_post_status_deactivated" post_id="{post_id}">
                        <i class="fa fa-trash"></i>
                    </div>
                </li>
            </ul>
        """

    def get_pending_orders_actions(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        student = Student.by_id(usernow.id)
        post_id = kwargs.get('post_id', None)
        if not post_id:
            return ""
        order_item = DBSession.query(Order). \
            filter(Order.buyer_id == student.id). \
            filter(Order.post_id == post_id). \
            filter(Order.order_status_id == COMMON.get_order_status_id('active')). \
            filter(Order.active == True). \
            first()
        order_id = order_item.id
        return f"""
            <ul class="list-inline">
                <li class="list-inline-item">
                    <a class="action_icon view" href="/posts?id={post_id}">
                        <i class="fa fa-eye"></i>
                    </a>
                </li>
                <li class="list-inline-item">
                    <div class="action_icon delete cancel_order" order_id="{order_id}">
                        <i class="fa fa-trash"></i>
                    </div>
                </li>
            </ul>
        """

    def get_purchased_orders_actions(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        student = Student.by_id(usernow.id)
        post_id = kwargs.get('post_id', None)
        if not post_id:
            return ""
        order_item = DBSession.query(Order). \
            filter(Order.buyer_id == student.id). \
            filter(Order.post_id == post_id). \
            filter(Order.order_status_id == COMMON.get_order_status_id('sold')). \
            filter(Order.active == True). \
            first()
        order_id = order_item.id
        return f"""
            <ul class="list-inline">
                <li class="list-inline-item">
                    <div class="action_icon delete delete_sold_order" order_id="{order_id}">
                        <i class="fa fa-trash"></i>
                    </div>
                </li>
            </ul>
        """

    @expose()
    def get_sales_offers(self, *args, **kwargs):
        width = str_to_int(kwargs.get('width', MOBILE_BREAK_WIDTH))
        if width < MOBILE_BREAK_WIDTH:
            return self.get_mobile_sales_offers()
        usernow = request.identity.get('user', {})
        dbase_query = DBSession.query(Post). \
            join(Order, Order.post_id == Post.id). \
            filter(Order.order_status_id != COMMON.get_order_status_id('sold')). \
            filter(Order.seller_active == True). \
            filter(Post.post_status_id == COMMON.get_post_status_id('active')). \
            filter(Post.added_by == usernow.id). \
            filter(Post.active == True). \
            order_by(desc(Order.updated)). \
            all()
        html = f"""
        <div class="widget dashboard-container my-adslist">
            <h3 class="widget-header">Sales Offers</h3>
        """
        if dbase_query:
            html += '<div id="accordion">'
            for item in dbase_query:
                sales_order_post = self.get_sales_order_post(**{'post_id': item.id})
                html += f"""
                <div class="salesOfferDiv" post_id="{item.id}">
                    {sales_order_post}
                </div>
                """
        else:
            html += "No items to show"

        html += f"""
            </div>
        </div>
        """
        javascript = """
        <script>
        $(document).ready(function(){
            $('.salesOfferDiv').click(function(){
                $('.salesOfferTableDiv').empty();
                var post_id = $(this).attr('post_id');
                var kwargs = {
                    'post_id': post_id,
                };
                var collapseDiv = $(this).find('.collapse');
                var salesOfferTableDiv = $(this).find('.salesOfferTableDiv');
                salesOfferTableDiv.load('/my_account/get_sales_offers_table', kwargs, function(data){
                    $('#orders'+post_id).collapse('toggle');
                    return false;
                });
            });

            $('.salesOfferDiv:eq(0)').trigger('click');
            var firstPostId = $('.salesOfferDiv:eq(0)').attr('post_id');
            setTimeout(function(){
                $('#orders'+firstPostId).collapse('toggle');
            }, 200);
        });
        </script>
        """
        return html + javascript

    @expose()
    def get_sales_order_post(self, *args, **kwargs):
        post_id = kwargs.get('post_id', None)
        if not post_id: return ''

        item = Post.by_id(post_id)
        post_status = PostStatus.by_id(item.post_status_id)
        status = post_status.status.title() if post_status else ""
        colour = post_status.colour if post_status else "fff"
        category = Category.by_id(item.category_id)
        post_image = PostImage.by_attr_all('post_id', item.id)
        filepath = '/img/placeholder_img.jpg'
        if post_image:
            filepath = os.path.join('/img/posts', post_image[0].filepath)
        product_title = f"""
        <h6 class="title"><a href="/posts?id={item.id}">{item.title}</a></h6>
        <div class="order_post_details">
            <div>
                <strong class="order_info_lbl">Posted on: </strong>
                {item.added.strftime('%b %d, %Y')}
            </div>
            <div class="add-id">
                <strong class="order_info_lbl">Listed Price: </strong>
                {get_currency_by_locale(item.price)}
            </div>
            <strong class="order_info_lbl">Status: </strong><span class="status active" style="color: #{colour};">{status}</span>
        </div>
        """
        html = f"""
        <div class="card mb-3">
            <div id="post{item.id}" class="card-header sales_order collapsed" data-toggle="collapse" data-target="#orders{item.id}" aria-expanded="true" aria-controls="orders{item.id}">
                <i class="fa fa-angle-up rotate_icon" aria-hidden="true"></i>
                <table>
                    <tbody>
                        <tr>
                            <td class="sales_order_img text-center">
                                <img alt='image description' height='auto' src='{filepath}'>
                            </td>
                            <td class="post_content pl-3">
                                {product_title}
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div id="orders{item.id}" class="collapse" aria-labelledby="post{item.id}" data-parent="#accordion">
                <div class="card-body p-0 salesOfferTableDiv"></div>
            </div>
        </div>
        """
        return html

    def get_card_post_item(self, item=None, actions=None, *args, **kwargs):
        if not item: return ''
        post_image = PostImage.by_attr_all('post_id', item.id)
        filepath = '/img/placeholder_img.jpg'
        if post_image:
            filepath = os.path.join('/img/posts', post_image[0].filepath)
        count = DBSession.query(Order). \
            filter(Order.post_id == item.id). \
            filter(Order.seller_active == True). \
            filter(Order.active == True). \
            value(func.count(Order.id))
        card_height = '180px' if actions else '160px'
        title_lines = 'overflow_ellipsis_2_lines' if actions else 'overflow_ellipsis_3_lines'
        footer_actions = f'<div class="col-md-12 text-right px-0">{actions}</div>' if actions else ''
        html = f"""
            <div class="card card-background mt-2" data-toggle="collapse" href="#post{item.id}" role="button"
                aria-expanded="false" aria-controls="post{item.id}" data-id="{item.id}" style="height:{card_height}">
                <div class="image" style="background-image: url(&quot;{filepath}&quot;); background-position: center center; background-size: cover;">
                    <div class="filter"></div>
                </div>
                <div class="content">
                    <div class="mx-3 mt-3">
                        <h4 class="title overflow_ellipsis {title_lines}">{item.title}</h4>
                        <h4 class="text-white">{get_currency_by_locale(item.price)}</h4>
                    </div>
                </div>
                <div class="card_footer row">
                    <span class="ml-3">Posted: {item.added.strftime('%b %d, %Y')}</span>
                    <span class="ml-auto">{count} Offers</span>
                    {footer_actions}
                </div>
            </div>
        """
        return html
    @expose()
    def get_mobile_sales_offers(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        dbase_query = DBSession.query(Post). \
            join(Order, Order.post_id == Post.id). \
            filter(Order.seller_active == True). \
            filter(Post.post_status_id == COMMON.get_post_status_id('active')). \
            filter(Post.added_by == usernow.id). \
            filter(Post.active == True). \
            order_by(desc(Order.updated)). \
            all()

        html = f"""
        <div class="widget dashboard-container my-adslist">
            <h3 class="widget-header">Sales Offers</h3>
        """
        if dbase_query:
            for item in dbase_query:
                html += self.get_card_post_item(item)
                offer_cards = self.get_mobile_offer_cards(**{'post_id': item.id})
                html += f"""
                    <div class="collapse pt-2" id="post{item.id}">
                        {offer_cards}
                    </div>
                """
        else:
            html += "No items to show"

        html += f"""
            </div>
        </div>
        """
        javascript = """
        <script>
            $('.offerBtn').click(function(e){
                e.preventDefault();
                var status_id = $(this).attr('status_id');
                var kwargs = {
                    'post_id': $(this).attr('post_id'),
                    'order_id': $(this).attr('order_id'),
                    'status_id': status_id
                };
                var salesOfferTableDiv = $(this).closest('.salesOfferTableDiv');
                $.post('/my_account/update_sales_offer_status?', kwargs, function(data){
                    var result = JSON.parse(data);
                    if(result.success === 'true'){
                        salesOfferTableDiv.load('/my_account/get_mobile_sales_offers?', kwargs , function(data){
                            return false;
                        });
                        if(status_id === '4'){
                            kwargs['came_from'] = '/my_account/sales';
                            $('#dialogdiv').load('/my_account/get_rating_modal', kwargs, function(data){
                                return false;
                            });
                        };
                    };
                });
                return false;
            });
            $('.removeOffer').click(function(){
                var kwargs = {
                    'post_id': $(this).attr('post_id'),
                    'order_id': $(this).attr('order_id'),
                    'status_id': $(this).attr('status_id')
                };
                $.post('/my_account/remove_seller_offer?', kwargs, function(data){
                    var result = JSON.parse(data);
                    if(result.success === 'true'){
                        $('#salesOffersDiv').load('/my_account/get_mobile_sales_offers');
                    }
                    return false;
                });
            });
            $('.card[data-toggle="collapse"]:eq(0)').trigger('click');
        </script>
        """
        return html + javascript

    def get_mobile_offer_cards(self, *args, **kwargs):
        post_id = kwargs.get('post_id', None)
        if not post_id: return ''
        dbase_query = DBSession.query(Order). \
            filter(Order.post_id == post_id). \
            filter(Order.active == True). \
            filter(Order.seller_active == True). \
            order_by(Order.added.asc()). \
            all()
        sold_status = COMMON.get_order_status_id('sold')
        decline_status = COMMON.get_order_status_id('declined')
        html = ""
        for item in dbase_query:
            student  = Student.by_id(item.buyer_id)
            if not student: continue
            filepath = os.path.join('/img/students', student.filepath)
            star_rating = COMMON.get_star_rating(**{'student_id': item.buyer_id})
            order_status = OrderStatus.by_id(item.order_status_id)
            actions = ""
            if order_status.id == COMMON.get_order_status_id('active'):
                actions = f"""
                    <button type="button" class="btn btn-success btn-sm offerBtn"
                        post_id="{item.post_id}" order_id="{item.id}" status_id="{sold_status}">Sold
                    </button>
                """
            elif order_status.id == (COMMON.get_order_status_id('cancelled')) or (COMMON.get_order_status_id('declined')):
                actions = f"""
                    <button type="button" class="btn btn-danger btn-sm removeOffer"
                        post_id="{item.post_id}" order_id="{item.id}">Remove
                    </button>
                """
            html += f"""
            <div class="card card-body mb-2 pb-2">
                <div class="d-flex align-items-center">
                    <img src="{filepath}" class="rounded-circle chat_profile_pic mr-3">
                    <div>
                        <span>{student.formal_name}</span>
                        {star_rating}
                    </div>
                    <span class="status active ml-auto align-self-start" style="color: #{order_status.colour};">{order_status.status}</span>
                </div>
                <div class="mt-2 d-flex justify-content-between">
                    <div>
                        <span class="subtext">Offer</span>
                        <h4 class="mb-0">{get_currency_by_locale(item.offer_amount)}</h4>
                    </div>
                    <div class="text-right">
                        <span class="subtext">Offer Date</span>
                        <h4 class="mb-0">{item.added.strftime('%b %d, %Y')}</h4>
                    </div>
                </div>
                <hr class="mb-2">
                <div class="text-right">{actions}</div>
            </div>
            """
        return html

    @expose()
    def get_mobile_sales_order_post(self, *args, **kwargs):
        post_id = kwargs.get('post_id', None)
        if not post_id: return ""

        item = Post.by_id(post_id)
        post_status = PostStatus.by_id(item.post_status_id)
        status = post_status.status.title() if post_status else ""
        colour = post_status.colour if post_status else "fff"
        category = Category.by_id(item.category_id)
        post_image = PostImage.by_attr_all('post_id', item.id)
        filepath = '/img/placeholder_img.jpg'
        if post_image:
            filepath = os.path.join('/img/posts', post_image[0].filepath)
        product_title = f"""

                    <div class="col-md-12">
                       <div class="card card-background">
                            <div class="image">
                                <img src="{filepath}" alt="..." />
                                <div class="filter"></div>
                            </div>
                             <div class="content">
                                <h5 class="price">&euro; 129, 00
                                     <a href="#" class="pull-right">
                                        <i class="fa fa-heart"></i>
                                     </a>
                                 </h5>
                                <a href="#"><br>
                                    <h4 class="title">{item.title}</h4>

                                </a>
                            </div>
                            <div class="footer">
                               <div class="stats pull-right">
                                    <i class="fa fa-comment"></i>  {status}
                               </div>
                            </div>
                        </div> <!-- end card -->
                    </div>
        """
        html = f"""
        <div class="card mb-3">
            <div id="post{item.id}" class="card-header sales_order collapsed" data-toggle="collapse" data-target="#orders{item.id}" aria-expanded="true" aria-controls="orders{item.id}">
                <i class="fa fa-angle-up rotate_icon" aria-hidden="true"></i>
                <table>
                    <tbody>
                        <tr>
                            <td class="sales_order_img text-center">
                                <img alt='image description' height='auto' src='{filepath}'>
                            </td>
                            <td class="post_content pl-3">
                                {product_title}
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div id="orders{item.id}" class="collapse" aria-labelledby="post{item.id}" data-parent="#accordion">
                <div class="card-body p-0 salesOfferTableDiv">
                    Content for accordion item goes here
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_sales_overview(self, *args, **kwargs):
        width = str_to_int(kwargs.get('width', MOBILE_BREAK_WIDTH))
        if width < MOBILE_BREAK_WIDTH:
            return ''
        usernow = request.identity.get('user', {})
        dbase_query = DBSession.query(Post). \
            join(Order, Order.post_id == Post.id). \
            filter(Order.order_status_id == COMMON.get_order_status_id('sold')). \
            filter(Order.seller_active == True). \
            filter(Order.active == True). \
            filter(Post.added_by == usernow.id). \
            filter(Post.active == True). \
            order_by(desc(Post.added))
        row_count = dbase_query.count()
        dbase_query = dbase_query.all()
        html = f"""
        <div class="widget dashboard-container my-adslist">
            <h3 class="widget-header">Sales Overview</h3>
        """
        if dbase_query:
            html += '<div id="soldAccordion">'
            for item in dbase_query:
                sales_order_post = self.get_sold_order_post(**{'post_id': item.id, 'table_type': 'sale', 'row_count': row_count})
                html += f"""
                <div class="salesOverviewDiv" post_id="{item.id}">
                    {sales_order_post}
                </div>
                """
        else:
            html += "No items to show"

        html += f"""
            </div>
        </div>
        """
        javascript = """
        <script>
        $(document).ready(function(){
            $('.salesOverviewDiv').click(function(){
                $('.salesOfferTableDiv').empty();
                var post_id = $(this).attr('post_id');
                var kwargs = {
                    'post_id': post_id,
                };
                var collapseDiv = $(this).find('.collapse');
                var soldOfferTableDiv = $(this).find('.soldOfferTableDiv');
                soldOfferTableDiv.load('/my_account/get_sold_offers_table', kwargs, function(data){
                    $('#soldOrders'+post_id).collapse('toggle');
                });

            });
        });
        </script>
        """
        return html + javascript

    @expose()
    def get_sold_order_post(self, *args, **kwargs):
        post_id = kwargs.get('post_id', None)
        if not post_id:
            return ""
        row_count = kwargs.get('row_count', 0)
        if row_count < 1:
            return "No items to show"

        item = Post.by_id(post_id)
        row_index = kwargs.get('row_index', 1)
        post_status = PostStatus.by_id(item.post_status_id)
        status = post_status.status.title() if post_status else ""
        colour = post_status.colour if post_status else "fff"
        category = Category.by_id(item.category_id)
        post_image = PostImage.by_attr_all('post_id', item.id)
        filepath = '/img/placeholder_img.jpg'
        if post_image:
            filepath = os.path.join('/img/posts', post_image[0].filepath)
        product_title = f"""
        <h6 class="title"><a href="/posts?id={item.id}">{item.title}</a></h6>
        <div class="order_post_details">
            <div>
                <strong class="order_info_lbl">Posted on: </strong>
                {item.added.strftime('%b %d, %Y')}
            </div>
            <div class="add-id">
                <strong class="order_info_lbl">Listed Price: </strong>
                {get_currency_by_locale(item.price)}
            </div>
            <strong class="order_info_lbl">Status: </strong><span class="status active" style="color: #{colour};">{status}</span>
        </div>
        """
        html = f"""
        <div class="card mb-3">
            <div id="post{item.id}" class="card-header sales_order collapsed" data-toggle="collapse" data-target="#soldOrders{item.id}" aria-expanded="true" aria-controls="soldOrders{item.id}">
                <i class="fa fa-angle-up rotate_icon" aria-hidden="true"></i>
                <table>
                    <tbody>
                        <tr>
                            <td class="sales_order_img text-center">
                                <img alt='image description' height='auto' src='{filepath}'>
                            </td>
                            <td class="post_content pl-3">
                                {product_title}
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div id="soldOrders{item.id}" class="collapse" aria-labelledby="post{item.id}" data-parent="#soldAccordion">
                <div class="card-body p-0 soldOfferTableDiv"></div>
            </div>
        </div>
        """
        return html

    @require(CustomNotAnonymous())
    @expose('eiffel_front.templates.2_col_med_right')
    def direct_message(self, *args, **kwargs):
        chat = CHAT.get_chat()
        left_col = self.get_left_col()
        right_col = f'<div class="chat-wrapper">{chat}</div>'
        javascript = """
        $('.user_info_div').load('/my_account/get_user_info_html');
        $('#mainNav .nav-item').removeClass('active');
        $('#myAccountLink').addClass('active');
        """
        return dict(title='My Account', left_col=left_col, right_col=right_col, javascript=javascript)

    @expose()
    def get_rating_modal(self, *args, **kwargs):
        post_id = kwargs.get('post_id', None)
        if not post_id:
            return ''
        post = Post.by_id(post_id)
        star_rating = COMMON.get_star_rating(**{'student_id': post.added_by, 'star_class': 'fs-40 text-center'})
        came_from = kwargs.get('came_from', '')
        html = f"""
        <div id="ratingModal" class="modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Feedback on transaction</h5>
                    </div>
                    <div class="modal-body">
                        <p>Your feedback will help others.</p>
                        <p>We would appreciate your input regarding the transaction that you concluded for: </p>
                        <h6>"{post.title}"</p>
                        <p>How would you rate your experience?</p>
                        {star_rating}
                    </div>
                    <div class="modal-footer">
                        <button id="ratingSubmitBtn" type="button" class="btn btn-primary" data-came-from={came_from}>Submit</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
            $('#ratingSubmitBtn').click(function(){
                var cameFrom = $(this).data('cameFrom');

                if ($('.star-set').data('submitted') == 'True'){
                    $('#ratingModal').modal('hide');
                    if(cameFrom){
                        $.redirect(cameFrom);
                    }
                } else {
                    showNotification('warning', 'Please select a star rating for this transaction.');
                }
                return false;
            });
            $('#ratingModal').modal();
        </script>
     	"""
        return html + javascript

    def update_session_usernow(self, *args, **kwargs):
        usernow = request.identity.get('user', {})

        result = GATEWAY.get_user_profile({'entity_id' : usernow.entity_id, 'passthrough': True})

        success = result.get('success', False)
        if not success:
            return False

        data = result.get('data', {})
        if not data:
            return False

        session['usernow'] = data
        session.save()
        return True
