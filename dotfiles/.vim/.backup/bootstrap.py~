# -*- coding: utf-8 -*-

"""Setup the rocket application"""

from __future__ import print_function

import os
import traceback
import transaction

from datetime import datetime, date
from pkg_resources import resource_filename

from rocket import model

from sqlalchemy.exc import IntegrityError

def create_app_folders():

    try:
        APPROOT = os.getcwd()
        FILENAME = os.path.abspath(resource_filename('rocket', 'public'))
        CODE_ROOT = os.path.join(APPROOT, "rocket")

        LOGS_DIRNAME = os.path.join(APPROOT, 'logs')
        if not os.path.exists(LOGS_DIRNAME): os.mkdir(LOGS_DIRNAME)

        MIGRATION_DIRNAME = os.path.join(APPROOT, 'migration')
        if not os.path.exists(MIGRATION_DIRNAME): os.mkdir(MIGRATION_DIRNAME)

        VERSIONS_DIRNAME = os.path.join(MIGRATION_DIRNAME, 'versions')
        if not os.path.exists(VERSIONS_DIRNAME): os.mkdir(VERSIONS_DIRNAME)

        PUBLIC_DIRNAME = os.path.join(CODE_ROOT, "public")
        if not os.path.exists(PUBLIC_DIRNAME): os.mkdir(PUBLIC_DIRNAME)

        CSV_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'csv')
        if not os.path.exists(CSV_DIRNAME): os.mkdir(CSV_DIRNAME)

        EXCEL_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'excel')
        if not os.path.exists(EXCEL_DIRNAME): os.mkdir(EXCEL_DIRNAME)

        PAYMENTS_DIRNAME = os.path.join(CSV_DIRNAME, 'payments')
        if not os.path.exists(PAYMENTS_DIRNAME): os.mkdir(PAYMENTS_DIRNAME)

        PDF_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'pdf')
        if not os.path.exists(PDF_DIRNAME): os.mkdir(PDF_DIRNAME)

        EXCEL_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'excel')
        if not os.path.exists(PDF_DIRNAME): os.mkdir(EXCEL_DIRNAME)

        UPLOADS_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'uploads')
        if not os.path.exists(UPLOADS_DIRNAME): os.mkdir(UPLOADS_DIRNAME)

        IMAGES_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'images')
        if not os.path.exists(IMAGES_DIRNAME): os.mkdir(IMAGES_DIRNAME)

        STAFFPIC_DIRNAME = os.path.join(IMAGES_DIRNAME, 'staff_pictures')
        if not os.path.exists(STAFFPIC_DIRNAME): os.mkdir(STAFFPIC_DIRNAME)

        CATALOG_DIRNAME = os.path.join(IMAGES_DIRNAME, 'catalog_pictures')
        if not os.path.exists(CATALOG_DIRNAME): os.mkdir(CATALOG_DIRNAME)
    except Exception as e:
        print("There was a problem adding the folders.  Exception: {0} ".format(e))

create_app_folders()

def bootstrap(command, conf, vars):

##################################################################################################################
#  AUTHENTICATION
##################################################################################################################

    timestart = datetime.now()
    try:

        u, u1 = None, None

        FIRST = 'Developer'
        devexists = model.DBSession.query(model.User). \
                filter(model.User.username==FIRST). \
                first()
        if not devexists:
            u = model.User()
            u.username = FIRST
            u.name = FIRST
            u.email = 'developer@dotxmltech.com'
            u.password = 'developpass'
            u.expires = datetime.now()
            u.added_by = 1
            model.DBSession.add(u)
            #print(f'Adding USER: {FIRST}')
        else:
            u = devexists

        SECOND = 'User'
        userexists = model.DBSession.query(model.User). \
                filter(model.User.username==SECOND). \
                first()
        if not userexists:
            u1 = model.User()
            u1.username = SECOND
            u1.name = SECOND
            u1.email = 'user@dotxmltech.com'
            u1.password = 'userpass'
            u1.expires = datetime.now()
            u1.added_by = 1
            model.DBSession.add(u1)
            #print(f'Adding USER: {SECOND}')
        else:
            u1 = userexists

        model.DBSession.flush()
        transaction.commit()

        devrolexists = model.DBSession.query(model.Role). \
                filter(model.Role.name==FIRST). \
                first()
        if not devrolexists:
            dev_g = model.Role()
            dev_g.name = FIRST
            dev_g.description = f'Description for the {FIRST}.'
            dev_g.users.append(u)
            model.DBSession.add(dev_g)
            #print(f'Adding ROLES: {FIRST}')

            dev_p = model.Permission()
            dev_p.name = FIRST
            dev_p.description = f'Permission for {FIRST} Access'
            dev_p.roles.append(dev_g)
            model.DBSession.add(dev_p)

            model.DBSession.flush()
            transaction.commit()

    except IntegrityError:
        print('Warning, there was a problem adding your auth data, it may have already been added: ')

        print(traceback.format_exc())
        transaction.abort()
        print('Continuing with bootstrapping...')

##################################################################################################################
# ROLES
##################################################################################################################

    timestart_roles = datetime.now()
    role_list = [
            'Sales',
            'Administrator',
            'Business Process',
            'Catalog Maintenance',
            'Policy Registration',
            'Policy Management',
            'Claim Approval',
            'Claim Management',
            'Claim Registration',
            'Contact Centre',
            'Financial Reports',
            'Membership',
            'Product Setup',
            'Statistical Reports',
            'Users And Access',
            'Agent',
            'DMS User',
            'DMS Administrator',
            #'Appointments',
            #'Call Center',
            #'Call Center Admin',
            'Collections',
            'Batch Import',
            #'Campaign',
            ]
    try:
        for new_role in sorted(role_list):

            exists = model.DBSession.query(model.Role). \
                    filter(model.Role.name==new_role). \
                    first()

            if not exists:

                description = f'Description for the {new_role}.'

                print('Adding Role: {0}'.format(new_role))
                role = model.Role()
                role.name = new_role
                role.description = description
                role.users.append(u)
                #role.users.append(u1)
                model.DBSession.add(role)

                perm = model.Permission()
                perm.name = new_role
                perm.description = 'Permission for {0} Access'.format(new_role.capitalize())
                perm.roles.append(role)
                model.DBSession.add(perm)

                model.DBSession.flush()
                transaction.commit()
    except IntegrityError:
        print("Warning, there was a problem adding LIST OF ROLES, it may have already been added: ")

        print( traceback.format_exc())
        transaction.abort()
        print('Continuing with bootstrapping...')

    dotxml_userlist = [
        {'username' : 'deonbez', 'name' : 'Deon Bezuidenhout', 'email' : 'deon@dotxmltech.com'},
        {'username' : 'lucasgrey', 'name' : 'Lucas Greyling', 'email' : 'lucas@dotxmltech.com'},
        {'username' : 'jpbez', 'name' : 'JP Bezuidenhout', 'email' : 'jp@dotxmltech.com'},
        {'username' : 'trevjou', 'name' : 'Trevor Joubert', 'email' : 'trevor@dotxmltech.com'},
        {'username' : 'tjaart_rocket', 'name' : 'Tjaart Swanepoel', 'email' : 'tjaart@dotxmltech.com'},
        {'username' : 'hans', 'name' : 'Hannes Toerien', 'email' : 'hannes@dotxmltech.com'},
        {'username' : 'camilla007', 'name' : 'Camilla Buys', 'email' : 'camilla@dotxmltech.com'},
            ]

    timeend_roles = datetime.now()

##################################################################################################################
# TEXT MERGE
##################################################################################################################

    mergelist = [
            {'code' : 'policy_number', 'name' : 'Policy Number'},
            {'code' : 'customer_name', 'name' : 'Customer Name'},
            {'code' : 'cover_type', 'name' : 'Cover Type'},
            {'code' : 'life_insured_type', 'name' : 'Life Insured Type'},
            {'code' : 'description', 'name' : 'Product Description'},
            {'code' : 'price', 'name' : 'Product Price'},
            {'code' : 'sum_insured', 'name' : 'Sum Insured'},
            {'code' : 'currency', 'name' : 'Currency'},
            {'code' : 'start_date', 'name' : 'Start Date'},
            {'code' : 'waiting_period', 'name' : 'Waiting Period'},
            {'code' : 'active_period', 'name' : 'Active Period'},
            {'code' : 'end_date', 'name' : 'End Date'},
            {'code' : 'benefits', 'name' : 'Benefits'},
            ]
    try:
        for merge in mergelist:
            name = merge.get('name')
            code = merge.get('code')
            exists = model.DBSession.query(model.MailMerge). \
                filter(model.MailMerge.name == name). \
                first()
            if not exists:
                merge = model.MailMerge()
                merge.name = name
                merge.code = code
                merge.added_by = 1
                model.DBSession.add(merge)
                model.DBSession.flush()
                transaction.commit()
    except IntegrityError:
        print("Warning, there was a problem adding LIST OF MailMerge, it may have already been added:")
        import traceback
        print( traceback.format_exc())
        transaction.abort()
        print('Continuing with bootstrapping...')

##################################################################################################################
# Cover and Exclusions
##################################################################################################################

    cover_list = [
            {'code' : 'Services', 'description' : 'Services'},
            {'code' : 'Life all Causes', 'description' : 'All causes of Death'},
            {'code' : 'Natural', 'description' : 'Natural Death'},
            {'code' : 'Accidental', 'description' : 'Accidental Death/Damage'},
            {'code' : 'Suicide', 'description' : 'Death as a result of Suicide'},
            {'code' : 'Act of God', 'description' : 'Damage/Death as a result of an Act of God'},
            {'code' : 'Disability own', 'description' : 'Inability to perform your own occupation due to permanent disability'},
            {'code' : 'Severe Illness', 'description' : 'Cover that pays out on a medical event'},
            ]
    try:
        for cover in cover_list:
            code = cover.get('code')
            description = cover.get('description')
            exists = model.DBSession.query(model.CoverAndExclusion). \
                filter(model.CoverAndExclusion.code == code). \
                first()
            if not exists:
                cover_and_exclusion = model.CoverAndExclusion()
                cover_and_exclusion.code = code
                cover_and_exclusion.description = description
                cover_and_exclusion.added_by = 1
                model.DBSession.add(cover_and_exclusion)
                model.DBSession.flush()
                transaction.commit()
    except IntegrityError:
        print("Warning, there was a problem adding LIST OF Cover and Exclusions , it may have already been added:")
        import traceback
        print( traceback.format_exc())
        transaction.abort()
        print('Continuing with bootstrapping...')

##################################################################################################################
# Asset Vehicle Categories
##################################################################################################################

    vehicle_list = [
        "Trucks (Driving under 5000 km per annum)",
        "Trucks (Driving over 5000 km per annum)",
        "Busses (Carrying 14 plus people)",
        "Mini Busses (Carrying up to 14 people)",
        "Cars and SUV's (max 7 seater)",
        "Bakkies and Light Delivery Vehicles",
        "Scooters and Motorcycles (2 and 3 wheel)",
            ]
    try:
        for name in vehicle_list:
            exists = model.DBSession.query(model.AssetVehicleCategory). \
                filter(model.AssetVehicleCategory.name == name). \
                first()
            if not exists:
                vehicle = model.AssetVehicleCategory()
                vehicle.name = name
                vehicle.added_by = 1
                model.DBSession.add(vehicle)
                model.DBSession.flush()
                transaction.commit()
    except IntegrityError:
        print("Warning, there was a problem adding LIST OF AssetVehicleCategory , it may have already been added:")
        import traceback
        print( traceback.format_exc())
        transaction.abort()
        print('Continuing with bootstrapping...')

    timeend = datetime.now()

##################################################################################################################
# TYPES
##################################################################################################################

    from rocket.lib.type_utils import create_type_tables, RawTypeDictionary
    timestart_types = datetime.now()

    dict_of_types = RawTypeDictionary().raw_dictionary_of_types
    create_type_tables(DBSession=model.DBSession, dict_of_types=dict_of_types)

    timeend_types = datetime.now()

##################################################################################################################
# Intermediary Role
##################################################################################################################

    entity_role_list = [
        "Agent",
        "Agency",
            ]
    try:
        for name in entity_role_list:
            exists = model.DBSession.query(model.EntityOrganisationIntermediaryRole). \
                filter(model.EntityOrganisationIntermediaryRole.name == name). \
                first()
            if not exists:
                entity_role = model.EntityOrganisationIntermediaryRole()
                entity_role.name = name
                entity_role.description = name
                entity_role.added_by = 1
                model.DBSession.add(entity_role)
                model.DBSession.flush()
                transaction.commit()
    except IntegrityError:
        print("Warning, there was a problem adding LIST OF EntityOrganisationIntermediaryRole , it may have already been added:")
        import traceback
        print( traceback.format_exc())
        transaction.abort()
        print('Continuing with bootstrapping...')

##################################################################################################################
# ISO Utils
##################################################################################################################

    """
    timestart_iso = datetime.now()
    from rocket.lib.iso_utils import create_currencies, create_languages, create_countries
    create_currencies(model.DBSession)
    create_languages(model.DBSession)
    create_countries(model.DBSession)
    timeend_iso = datetime.now()
    """

##################################################################################################################
# Branding
##################################################################################################################

    color_dict = {
        '--color-primary': ('#8693A3', 'color'),
        '--color-primary-dark': ('#304762', 'color'),
        '--color-success': ('#33cc33', 'color'),
        '--color-info': ('#46b3ff', 'color'),
        '--color-warning': ('#ffbc50', 'color'),
        '--color-danger': ('#ff5050', 'color'),
        '--image-login-background': ('public/images/login_rocket.jpg', 'url'),
    }
    for key, value in color_dict.items():

        branding_exists = model.DBSession.query(model.Branding).\
            filter(model.Branding.key == key).\
            first()
        if branding_exists:
            branding_exists.value = value[0]
            branding_exists.type = value[1]
            model.DBSession.flush()
        else:
            this = model.Branding()
            this.key = key
            this.value = value[0]
            this.type = value[1]
            this.added_by = 1
            this.added = datetime.now()
            this.active = True
            model.DBSession.add(this)
            model.DBSession.flush()

##################################################################################################################
# Defaults
##################################################################################################################

    # try:
    #     from rocket.websetup.startup import create_defaults
    #     create_defaults()
    #     pass
    # except IntegrityError:
    #     print('Warning, there was a problem adding your default data, '
    #           'it may have already been added: ')
    #     print(traceback.format_exc())
    #     print('Continuing with bootstrapping...')

##################################################################################################################
# Output
##################################################################################################################

    #print(f"Total Time Normal Bootstraps: {timeend-timestart}")
    #print(f"Total Time Roles: {timeend_roles-timestart_roles}")
    #print(f"Total Time Types: {timeend_types-timestart_types}")
    #print(f"Total Time ISO: {timeend_iso-timestart_iso}")
    #print(f"Total Time Media: {timeend_media-timestart_media}")
    #print(f"Total Time Campaign: {timeend_campaign-timestart_campaign}")
    #print(f"Total Time All Bootstrap: {timeend_campaign-timestart}")
