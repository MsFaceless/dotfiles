# -*- coding: utf-8 -*-
"""Policy controller module"""

import logging

from tg import predicates, require, expose, request

from tg.i18n import ugettext as _
from tg.i18n import lazy_ugettext as l_

from rocket.model import *

from rocket.lib.tg_utils import *
import rocket.lib.vault_utils as vault
from rocket.lib.base import BaseController
from rocket.lib.type_utils import TypeDictionary

from rocket.controllers.product import ProductController
from rocket.controllers.common import CommonController

from sqlalchemy import func, desc, asc, or_

log = logging.getLogger(__name__)

TYPEUTIL = TypeDictionary()
COMMON = CommonController()
PRODUCT = ProductController()

DBQUERY_LIMIT = 15
POLICY_NUMBER_MAX_LENGTH = 10


class PolicyController(BaseController):

###############################################################################
# Policy - Management
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def index(self, *args, **kwargs):
        html = self.get_policies_html(*args, **kwargs)
        javascript = self.get_javascript_policy_onload()
        title = _("Policy Management")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_policies_html(self, *args, **kwargs):
        outputlist = []

        person = TYPEUTIL.get_id_of_name('entity_type', 'person')
        organisation = TYPEUTIL.get_id_of_name('entity_type', 'organisation')

        dbase_query = Policy.get_limit(DBQUERY_LIMIT, 'policy_number')
        for item in dbase_query:
            # Policy Payer
            policy_payer_full_name = None
            policy_payer_entity = EntityPerson.by_attr_first('entity_id', item.policy_payer_entity_id)
            if policy_payer_entity:
                personobj_policy_payer = vault.get_personobj_by_id(policy_payer_entity.person_id)
                if personobj_policy_payer:
                    policy_payer = personobj_policy_payer.get('person', {})
                    policy_payer_full_name = f"{policy_payer.get('firstname', '')} {policy_payer.get('surname', '')}"

            # Policy Owner
            policy_owner_full_name = None

            # TODO need to update to comply with the new standard; Policy owner is nullable now.
            policy_entity_owner_id = item.policy_owner_entity_id
            if policy_entity_owner_id:
                entity_owner = Entity.by_id(policy_entity_owner_id)
                if entity_owner.entity_type_id == person:
                    policy_owner_entity = EntityPerson.by_attr_first('entity_id', item.policy_owner_entity_id)
                    if policy_owner_entity:
                        personobj_policy_owner = vault.get_personobj_by_id(policy_owner_entity.person_id)
                        if personobj_policy_owner:
                            policy_owner = personobj_policy_owner.get('person', {})
                            policy_owner_full_name = f"{policy_owner.get('firstname', '')} {policy_owner.get('surname', '')}"

                if entity_owner.entity_type_id == organisation:
                    entity_organisation = EntityOrganisation.by_attr_first('entity_id', item.policy_owner_entity_id)
                    if entity_organisation:
                        policy_owner_full_name = f"{entity_organisation.code}: {entity_organisation.name}"

            policy_status_name = None
            state = PolicyStatus.by_attr_first('policy_id', item.id)
            if state:
                policy_status_name = TYPEUTIL.get_pretty_name('policy_status_type', state.policy_status_type_id)

            product = Product.by_attr_first('id', item.product_id)
            if not product:
                continue
            outputlist.append({
                'policy_number': f"<div class='edit policy_edit action_link' policy_id='{item.id}'>{item.policy_number}</div>",
                'policy_payer': policy_payer_full_name,
                'policy_owner': policy_owner_full_name,
                'product': product.name,
                'state': policy_status_name,
            })
        dbcolumnlist = [
            'policy_number',
            'policy_payer',
            'policy_owner',
            'product',
            'state',
        ]
        theadlist = [
            'Policy Number',
            'Policy Holder',
            'Policy Owner',
            'Product',
            'State'
        ]
        tdclasslist = [
            'action_link',
            'text-left',
            'text-left',
            'text-left',
            'text-left',
        ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "policy_table", tdclasslist)
        html = f"""
                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <div class="row d-flex">
                                    <div class="col-md-6">
                                         <h4 class="card-title">{_('Policy Management')}</h4>
                                    </div>
                                    <div class="col-md-6 text-right">
                                        <button id="create_new_policy" class="btn btn-primary ml-auto">Create New Policy</button>
                                    </div>
                                </div>
                                <div class="row d-flex align-items-center">
                                    <div class="col-md-4 d-flex">
                                        <input id='search' type="text" class="form-control mr-2 search" name="searchphrase" placeholder="Search by Code or Description">
                                    </div>
                                    <div class="col-md-4 pl-0">
                                        <button id='btn_search' class="btn btn-primary action_search">Search</button>
                                        <button id='btn_reset' class="btn btn-primary">Reset</button>
                                    </div>
                                </div>
                                <hr>
                            </div>
                            <div class="card-body">
                                <div id='div_policy_table' class="table-responsive">
                                    {htmltbl}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                """
        return html

    @expose()
    def get_javascript_policy_onload(self, *args, **kwargs):
        javascript = """
                $("#create_new_policy").click(function(){
                    $.redirect('/policy/new_edit');
                });
                $(".policy_edit").click(function(){
                    var policy_id = $(this).attr('policy_id');
                    var kwargs = {'policy_id' : policy_id};
                    $.redirect('/policy/new_edit', kwargs);
                });
                """
        return javascript

###############################################################################
# NEW/EDIT Policy
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def new_edit(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', 'null')
        title = 'New Edit Policy'
        html = self.get_new_policy_html(**kwargs)
        javascript = self.get_javascript_edit_policy_onload(policy_id)
        return dict(title=title, html=html, javascript=javascript)

    def get_new_policy_html(self, *args, **kwargs):
        """Need to preload chosen product name/code"""
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            title = "New Policy"
        else:
            policy = Policy.by_id(policy_id)
            policy_number = policy.policy_number
            title = f"Edit Policy: {policy_number}"
        html = f"""
                <div class="row sticky">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <div class="row d-flex">
                                    <div class="col-md-6">
                                        <h4 class="card-title">{title}</h4>
                                    </div>
                                    <div class="col-md-3 premium_total"></div>
                                    <div class="col-md-3 text-right">
                                        <button class="btn btn-primary ml-auto" id="policy_back">Back to Policies</button>
                                    </div>
                                </div>
                                <div class="row d-flex">
                                    <div class="col-md-12">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div id=div_new_edit_product></div>
                <div id=div_edit_mandatory_benefits></div>
                <div id=div_edit_optional_benefits></div>
                """
        return html

    def get_javascript_edit_policy_onload(self, policy_id):
        javascript = f"""
            $('#policy_back').click(function(){{
                $.redirect('/policy/index');
            }});
            var policy_id = {policy_id}
            var kwargs = {{'policy_id': policy_id}};
            $('#div_new_edit_product').load('/policy/get_policy_product_form', kwargs, function(data){{
                return false;
            }});
            var premium_display = 0
            $(document).on('getSum', function() {{
                $('#mandatory_benefits_table').find('tr[premium_value]').each(function() {{
                    console.log("hello");
                    var value = $(this).attr('premium_value');
                    premium_display += parseInt(value);
                }});
                $('.premium_total').text(premium_display);
                return false;
            }});
        """
        return javascript

###############################################################################
# NEW/EDIT Policy - Product
###############################################################################

    @expose()
    def get_policy_product_form(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            selectbox_product = self.get_selectbox_product()
            policy_id = 'null'
        else:
            policy = Policy.by_id(policy_id)
            if not policy:
                return ''
            product_id = policy.product_id
            selectbox_product = self.get_selectbox_product(**{'product_id': product_id})
        html = f"""
        <div class="card">
            <div class="card-header d-flex">
                <div class="col-md-6">
                    <h4 class="card-title">Product</h4>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group row">
                            <div class="col-md-6">
                                <label class="col-md-12 col-form-label" required>{_('Product')}</label>
                                    <div class="col-md-12">
                                        {selectbox_product}
                                    </div>
                            </div>
                        </div>
                        <div class="col-md-12 text-right">
                            <button id='btn_summary' class="btn btn-primary ml-auto btn_product_summary">Summary</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        # TODO when the load event runs check if the policy_id belongs to the user now, or that there was a policy created by the user now
        # TODO is the user_now linked to the product to which this policy belongs.
        javascript = f"""
        <script>
            $(document).ready(function(){{
                $(".btn_product_summary").click(function(){{
                    var kwargs = 'product_id='+$('#product_id option:selected').val();
                    $('#dialogdiv').load('/policy/get_modal_product_summary?', kwargs, function(data){{
                        return false;
                    }});
                }});
                $('#product_id').change(function(){{
                    var kwargs = {{'product_id': $('#product_id option:selected').val(),
                            'policy_id': {policy_id},
                        }};
                    if (!{policy_id}){{
                        $.post('/policy/create_new_policy?', kwargs, function(data){{
                            console.log(data);
                            var kwargs = {{'product_id': $('#product_id option:selected').val(),
                                'policy_id': data,
                            }};
                            $('#div_edit_mandatory_benefits').load('/policy/get_mandatory_benefits_form?', kwargs, function(data){{
                                return false;
                            }});
                            $('#div_edit_optional_benefits').load('/policy/get_optional_benefits_form?', kwargs, function(data){{
                                return false;
                            }});
                            return false;
                        }});
                    }} else {{
                            $('#div_edit_mandatory_benefits').load('/policy/get_mandatory_benefits_form?', kwargs, function(data){{
                                return false;
                            }});
                            $('#div_edit_optional_benefits').load('/policy/get_optional_benefits_form?', kwargs, function(data){{
                                return false;
                            }});
                        }}
                }});
                if($('#product_id option:selected').val() !== '0'){{
                    $('#product_id').trigger('change');
                    return false;
                }};
            }});
        </script>
        """
        return html + javascript

    @expose()
    def create_new_policy(self, *args, **kwargs):
        policy_id = self.save_new_policy(**kwargs)
        return f"""{policy_id}"""

    def get_selectbox_product(self, *args, **kwargs):
        print(kwargs)
        product_id = kwargs.get('product_id', None)
        if product_id:
            kwargs['selected'] = product_id
        dbase_query = Product.get_all('code')
        kwargs['limit'] = 'all'
        kwargs['active'] = True
        kwargs['id'] = 'product_id'
        kwargs['outputlist'] = [{'name': m.code, 'id': m.id} for m in dbase_query]
        return create_selectbox_html(**kwargs)

    @expose()
    def get_modal_product_summary(self, *args, **kwargs):
        """Displays the summary of the selected product as a modal"""
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''
        product = DBSession.query(Product).get(product_id)
        product_name = product.name
        summary = PRODUCT.product_summary(**kwargs)
        html = f"""
        <div class="modal fade" id="dialog_product_summary" tabindex="-1" role="dialog" aria-labelledby="myproduct_summaryLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">Product Name: {product_name}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_product_summary'>
                            {summary}
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-outline-primary product_summary_back">Close</button>
                    </div>
                </div>
            </div>
        </div>"""
        javascript = """
        <script>
            var form_id = '#form_product_summary'
            setFormValidation(form_id);
            $('.product_summary_back').click(function(){
                $('#dialog_product_summary').modal('hide');
            });
            $('#dialog_product_summary').modal();
        </script>"""
        return html + javascript

###############################################################################
# Policy - New - Save
###############################################################################

    @expose()
    def save_new_policy(self, *args, **kwargs):
        usernow = request.identity.get('user', {})

        policy_number = self.get_unique_policy_number()
        new = Policy()
        new.policy_number = policy_number
        new.product_id = kwargs.get('product_id', None)
        # new.policy_owner_entity_id = kwargs.get('policy_owner_entity_id', None)
        new.added_by = usernow.id
        DBSession.add(new)
        DBSession.flush()

        pre_quote = TYPEUTIL.get_id_of_name('policy_status_type', 'pre_quote')
        status = PolicyStatus()
        status.policy_id = new.id
        status.policy_status_type_id = pre_quote
        status.date_set = datetime.now()
        status.current_status = True
        status.added_by = usernow.id
        DBSession.add(status)
        DBSession.flush()
        print(new.id)
        return str(new.id)

    def get_unique_policy_number(self, *args, **kwargs):
        number = datetime.now().strftime("%y%m%d%H%M%S")
        policy_number = number[-POLICY_NUMBER_MAX_LENGTH:]
        exists = Policy.by_attr_first('policy_number', policy_number)
        if exists:
            return self.get_unique_policy_number(product_id)  # TODO ask C about this, seems wrong
        return policy_number

###############################################################################
# Policy - edit - Save
###############################################################################

    @expose()
    def save_edit_policy(self, *args, **kwargs):
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''

        this_policy = Policy.by_id(policy_id)
        if not this_policy:
            print("Could not find Policy")
            return None

        usernow = request.identity.get('user', {})
        this_policy.added_by = usernow.id

        product_id = kwargs.get('product_id')
        policy_owner_entity_id = kwargs.get('policy_owner_entity_id')
        if product_id:
            this_policy.product_id = product_id
        if policy_owner_entity_id:
            this_policy.policy_owner_entity_id = policy_owner_entity_id
        DBSession.add(this_policy)
        DBSession.flush()
        return str(policy_id)

###############################################################################
# NEW/EDIT Policy - Mandatory Benefits
###############################################################################

    @expose()
    def get_mandatory_benefits_form(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        table = self.get_policy_mandatory_benefits_html_table(**kwargs)

        html = f"""
                <div class="card">
                    <div class="card-header d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Mandatory Benefits</h4>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-12">
                                {table}
                            </div>
                        </div>
                    </div>
                </div>
                """
        return html

    def get_policy_mandatory_benefits_html_table(self, *args, **kwargs):
        print("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& ", kwargs)
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        # TODO not sure if we should create a policy at this stage or not.
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''

        dbase_query = DBSession.query(Benefit). \
            filter(Benefit.product_id == product_id). \
            filter(Benefit.is_compulsory == True). \
            filter(Benefit.active == True). \
            all()

        return self.benefit_table(dbquery=dbase_query, table_name='mandatory_benefits_table', product_id=product_id, policy_id=policy_id) + self.benefit_table_javascript()

    def _get_benefit_cover_code(self, benefit):
        if benefit.benefit_cover_link_id:
            benefit_cover_link_id = benefit.benefit_cover_link_id
            benefit_cover_link = BenefitCoverLink.by_id(benefit_cover_link_id)
            cover_id = benefit_cover_link.cover_and_exclusion_id
            cover = CoverAndExclusion.by_id(cover_id)
            cover_code = cover.code
        else:
            cover_code = "Not Set"
        return cover_code

    def benefit_table(self, dbquery, table_name, product_id=None, policy_id=None):
        outputlist = []
        tdattributelist = []
        trattributelist = []
        for item in dbquery:

            cover_code = self._get_benefit_cover_code(item)

            # TODO need to refactor these if trees
            if item.is_life:
                benefit_insured_life = BenefitInsuredLife.by_attr_first('benefit_id', item.id)
                benefit_insured_life_type_id = benefit_insured_life.benefit_insured_life_relationship_type_id
                life_type = TYPEUTIL.get_pretty_name('benefit_insured_life_relationship_type',
                                                     benefit_insured_life_type_id)
                insured_type = life_type
                insured_type_basic = 'life'

                max_insured = benefit_insured_life.maximum_lives
                number_of_benefits_available = max_insured
            else:
                benefit_insured_asset_type_id = BenefitInsuredNonLife.by_attr_first('benefit_id', item.id) \
                    .benefit_asset_type_id
                insured_type_basic = TYPEUTIL.get_name('benefit_asset_type', benefit_insured_asset_type_id)
                asset_type = TYPEUTIL.get_pretty_name('benefit_asset_type', benefit_insured_asset_type_id)
                insured_type = asset_type

                number_of_benefits_available = "Infinite"

            price_type = TYPEUTIL.get_name('benefit_price_type', item.benefit_price_type_id)
            if price_type == 'rate_table':
                benefit_rate_table = BenefitRateTable.by_attr_first('benefit_id', item.id)
                rate_table_id = benefit_rate_table.rate_table_id
                rate_table_type = insured_type_basic
                price = self.get_selectbox_rate_table(unique_id=f"benefit_{item.id}_rate_table_{rate_table_id}_number_1", **{'rate_table_type': rate_table_type, 'rate_table_id': rate_table_id}) + "<div class='price_slider'></div>" + self.rate_table_selector_javascript(f"benefit_{item.id}_rate_table_{rate_table_id}_number_1") + "<div class='premium'></div>"
                if insured_type_basic == 'vehicle':
                    price = """
                        <div class="form-group row">
                            <label class="col-4 col-form-label" for="active">Insured</label>
                            <div class="col-8">
                                <div class="form-check">
                                    <label class="form-check-label">
                                        <input class="form-check-input" type="checkbox" name="insured"/>
                                        <span class="form-check-sign"></span>
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-4 col-form-label" for="active">Uninsured</label>
                            <div class="col-8">
                                <div class="form-check">
                                    <label class="form-check-label">
                                        <input class="form-check-input" type="checkbox" name="uninsured"/>
                                        <span class="form-check-sign"></span>
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-4 col-form-label" for="active">Third Party</label>
                            <div class="col-8">
                                <div class="form-check">
                                    <label class="form-check-label">
                                        <input class="form-check-input" type="checkbox" name="third_party"/>
                                        <span class="form-check-sign"></span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    """ + price
                sum_insured = """<div class='sum_insured_slider'></div>
                                 <div class='sum_insured'></div>"""
            elif price_type == 'fixed_premium_and_sum_insured':
                benefit_price = BenefitPrice.by_attr_first('benefit_id', item.id)
                price = "R {:0.2f}".format(float(benefit_price.premium))
                sum_insured = "R {:0.2f}".format(float(benefit_price.sum_insured))
            else:
                price = "Premium"
                sum_insured = "SA"

            premium = f"""{price}"""

            if number_of_benefits_available == 1:
                add_button = ''
                parent_id = ''
            else:
                add_button = """<button class="btn btn-primary ml-auto btn_add">Add</button>"""
                parent_id = f"""id='parent_{item.id}'"""

            button_html = f"""
                <div class="col-md-4">
                    <input id="insured_count" type="number" class="form-control" required='true'>
                </div>
                {add_button}
                <!--
                <button name='{item.name}' benefits_available='{number_of_benefits_available}' cover='{cover_code}' product_benefit_id='{item.id}' insured_type='{insured_type}' policy_id='{policy_id}' class="btn btn-primary ml-auto btn_add">Add</button>
                -->
                <button product_benefit_id='{item.id}' class="btn btn-primary ml-auto btn_summary">Summary</button>
                """

            outputlist.append({
                'name': item.name,
                'cover': f"{insured_type} - {cover_code}",
                'premium': premium,
                'sum_insured': sum_insured,
                'buttons': button_html,
            })
            tdattributelist.append({
                'name': '',
                'cover': '',
                'premium': f"""insured_type_basic='{insured_type_basic}' product_benefit_id='{item.id}'""",
                'sum_insured': '',
                'buttons': ','
            })

            trattributelist.append(
                f"""name='{item.name}' insured_type='{insured_type}' insured_type_basic='{insured_type_basic}' product_benefit_id='{item.id}' price_type='{price_type}' benefits_available='{number_of_benefits_available}' policy_id='{policy_id}' cover='{cover_code}' {parent_id}"""
            )

        dbcolumnlist = [
            'name',
            'cover',
            'premium',
            'sum_insured',
            'buttons',
        ]
        theadlist = [
            'Name',
            'Cover',
            'Premium',
            'Sum Insured'
            '',
        ]
        tdclasslist = [
            '',
            '',
            '',
            '',
            'text-right action_link',
        ]
        return build_html_table_with_attributes(outputlist, dbcolumnlist, theadlist, table_name, tdclasslist, tdattributelist, trattributelist)

    def rate_table_selector_javascript(self, unique_id):
        javascript = f"""
            <script>
                $('#{unique_id}').change(function() {{
                    console.log("Rate table line item has changed!!!!!!!!!!!!!!!!!!!1");
                    var this_item = this.closest("td");
                    var this_row = this.closest("tr");
                    if ($(this_row).attr('insured_type_basic') == 'life') {{
                        var kwargs='rate_table_line_item_id='+$('#{unique_id} option:selected').val()
                        //kwargs += '&product_benefit_id='+$(this_item).attr('product_benefit_id')
                        kwargs += '&product_benefit_id='+$(this_row).attr('product_benefit_id')
                        kwargs += '&unique_id={unique_id}'
                        $.post('/policy/get_min_max_premium_sum_insured?', kwargs, function(data) {{
                            if (data) {{
                                var kwargs = JSON.parse(data);
                                var base_value = kwargs.base_value;
                                var rate_factor = kwargs.rate_factor;
                                var formserial = 'min_premium='+kwargs.min_premium
                                formserial += '&max_premium='+kwargs.max_premium
                                formserial += '&cur_premium='+kwargs.cur_premium
                                formserial += '&min_sum_insured='+kwargs.min_sum_insured
                                formserial += '&max_sum_insured='+kwargs.max_sum_insured
                                formserial += '&cur_sum_insured='+kwargs.cur_sum_insured
                                formserial += '&unique_premium_id='+kwargs.unique_premium_id
                                formserial += '&unique_sum_insured_id='+kwargs.unique_sum_insured_id
                                $(this_item).find('.price_slider').load('/policy/get_slider_premium?', formserial, function(data) {{
                                    var next_item = $(this_item).closest('td').next('td');
                                    $(next_item).find('.sum_insured_slider').load('/policy/get_slider_sum_insured?', kwargs, function(data) {{
                                        
                                        var premium_slider = document.getElementById('{unique_id}_premium');
                                        var sum_insured_slider = document.getElementById('{unique_id}_sum_insured');
                                        console.log(premium_slider, sum_insured_slider);
                            
                                        premium_slider.noUiSlider.on('change', function () {{
                                            var value1 = premium_slider.noUiSlider.get();
                                            var value2 = sum_insured_slider.noUiSlider.get();
                                            console.log(value1, value2);
                                            var value3 = value1 * base_value / rate_factor;
                                            sum_insured_slider.noUiSlider.set(value3);
                                            $(this_row).attr('premium_value', value1);
                                            $(document).trigger('getSum')
                                            console.log(premium_slider, sum_insured_slider);
                                            return false;
                                        }})
                                        sum_insured_slider.noUiSlider.on('change', function () {{
                                            var value1 = premium_slider.noUiSlider.get();
                                            var value2 = sum_insured_slider.noUiSlider.get();
                                            console.log(value1, value2);
                                            var value3 = (value2 * rate_factor) / base_value;
                                            console.log(value3);
                                            premium_slider.noUiSlider.set(value3);
                                            $(document).trigger('getSum', value3)
                                            console.log(premium_slider, sum_insured_slider);
                                            return false;
                                        }})
                                        
                                        return false;
                                    }});
                                    return false;
                                }});
                            }};
                            return false;
                        }});
                    }}
                    else {{
                        var kwargs='rate_table_line_item_id='+$('#{unique_id} option:selected').val();
                        kwargs += '&product_benefit_id='+$(this_item).attr('product_benefit_id');
                        kwargs += '&unique_id={unique_id}';
                        var this_row = this_item.closest('tr');
                        var insured_type_basic = $(this_row).attr('insured_type_basic');
                        kwargs += '&insured_type_basic='+insured_type_basic;
                        console.log(kwargs);
                        $.post('/policy/get_premium_sum_insured_from_rate_table?', kwargs, function(data) {{
                            if (data) {{
                                var kwargs = JSON.parse(data);
                                premium_amount = kwargs.premium;
                                sum_insured_amount = kwargs.sum_insured;
                                console.log(premium_amount);
                                premium_element = $(this_row).find('.premium');
                                sum_insured_element = $(this_row).find('.sum_insured');
                                $(premium_element).text(premium_amount);
                                $(sum_insured_element).text(sum_insured_amount);
                            }};
                            return false;
                        }});
                    }};
                }});
            </script>
        """
        return javascript

    @expose()
    def benefit_table_javascript(self):
        javascript = """
            <script>
                $(document).on('click', '.btn_add', function(){
                    var this_row = this.closest("tr");
                    var kwargs = {
                        'product_benefit_id': $(this_row).attr('product_benefit_id'),
                        'insured_type': $(this_row).attr('insured_type'),
                        'benefits_available': $(this_row).attr('benefits_available'),
                        'cover': $(this_row).attr('cover'),
                        'name': $(this_row).attr('name'),
                        'policy_id': $(this_row).attr('policy_id'),
                        'parent_id': $(this_row).attr('id'),
                        'price_type': $(this_row).attr('price_type'),
                        'insured_type_basic': $(this_row).attr('insured_type_basic'),
                    }
                    ben_avail = $(this_row).attr('benefits_available');
                    console.log(ben_avail);
                    if (ben_avail != 'Infinite' && ben_avail !="1") {
                        var ben_avail = parseInt(ben_avail) - 1;
                        $(this_row).attr('benefits_available', ben_avail);
                        if (ben_avail == 1) {
                            $(this_row).find('td.action_link').children('button.btn_add').hide();
                        }
                    }
                    $.get('/policy/add_benefit_row', kwargs, function(data){
                        $(this_row).after(data);
                        return false;
                    });
                    return false;
                });
                $(document).on('click', '.btn_remove', function(){
                    var parent_id = $(this).attr("parent_id");
                    var this_row = this.closest("tr");
                    var this_parent = $(this_row).closest('table').find('tr[id=' + parent_id + ']');
                    var this_parent_add_button = $(this_parent).find('button.btn_add');
                    if ($(this_parent_add_button).is(":hidden")) {
                        $(this_parent_add_button).show();
                    }
                    var ben_avail = $(this_parent).attr('benefits_available');
                    if (ben_avail != 'Infinite') {
                        ben_avail = parseInt(ben_avail) + 1;
                        $(this_parent).attr('benefits_available', ben_avail);
                    }
                    var policy_benefit_id = $(this_row).attr('policy_benefit_id');
                    var kwargs = {'policy_benefit_id': policy_benefit_id};
                    console.log(this_row);
                    console.log(kwargs);
                    $('#dialogdiv').load('/policy/remove_benefit_row?', kwargs, function(data){
                        return false;
                    });

                    $(this_row).remove();
                    return false;
                });
                $(document).on('click', '.btn_summary', function() {  
                    var kwargs = 'product_benefit_id='+$(this).attr('product_benefit_id');
                    $('#dialogdiv').load('/policy/get_modal_benefit_summary?', kwargs, function(data){
                        return false;
                    });
                });
            </script>"""
        return javascript



    @expose()
    def get_slider_premium(self, *args, **kwargs):
        slider_id = kwargs.get('unique_premium_id', None)
        sum_insured_id = kwargs.get('unique_sum_insured_id', '')
        print(kwargs)
        if not slider_id:
            return ''
        min_val = float(kwargs.get('min_premium', 0))
        max_val = float(kwargs.get('max_premium', 0))
        cur_val = float(kwargs.get('cur_premium', 0))
        if not (min_val and max_val and cur_val):
            print("Could not get either min_val, max_val or cur_val")
            return ''
        return get_slider_html(slider_id=slider_id, min_val=int(min_val), max_val=int(max_val), cur_val=int(cur_val))

    @expose()
    def get_slider_sum_insured(self, *args, **kwargs):
        slider_id = kwargs.get('unique_sum_insured_id', None)
        if not slider_id:
            return ''
        min_val = float(kwargs.get('min_sum_insured', 0))
        max_val = float(kwargs.get('max_sum_insured', 0))
        cur_val = float(kwargs.get('cur_sum_insured', 0))
        if not (min_val and max_val and cur_val):
            print("Could not get either min_val, max_val or cur_val")
            return ''
        return get_slider_html(slider_id=slider_id, min_val=int(min_val), max_val=int(max_val), cur_val=int(cur_val))

    @expose()
    def get_modal_benefit_summary(self, *args, **kwargs):
        """Displays the summary of the selected benefit as a modal"""
        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            return ''
        benefit = DBSession.query(Benefit).get(product_benefit_id)
        benefit_name = benefit.name
        summary = PRODUCT.get_benefit_summary(**{'benefit_id': product_benefit_id})
        html = f"""
        <div class="modal fade" id="dialog_benefit_summary" tabindex="-1" role="dialog" aria-labelledby="mybenefit_summaryLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">Benefit Name: {benefit_name}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_benefit_summary'>
                            {summary}
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-outline-primary benefit_summary_back">Close</button>
                    </div>
                </div>
            </div>
        </div>"""
        javascript = """
        <script>
            var form_id = '#form_benefit_summary'
            setFormValidation(form_id);
            $('.benefit_summary_back').click(function(){
                $('#dialog_benefit_summary').modal('hide');
            });
            $('#dialog_benefit_summary').modal();
        </script>"""
        return html + javascript

    @expose()
    def add_benefit_row(self, *args, **kwargs):
        """Adds another instance of the same benefit"""
        print(kwargs)
        policy_id = kwargs.get('policy_id', None)
        name = kwargs.get('name', '')
        cover = kwargs.get('cover', '')
        insured_type = kwargs.get('insured_type', '')
        product_benefit_id = kwargs.get('product_benefit_id', '')
        parent_id = kwargs.get('parent_id', '')
        policy_benefit_id = self.save_new_policy_benefit_to_db(product_benefit_id, policy_id)
        price_type = kwargs.get('price_type', '')
        insured_type_basic = kwargs.get('insured_type_basic', '')
        if price_type == 'rate_table':
            benefit_rate_table = BenefitRateTable.by_attr_first('benefit_id', product_benefit_id)
            rate_table_id = benefit_rate_table.rate_table_id
            rate_table_type = insured_type_basic
            price = self.get_selectbox_rate_table(unique_id=f"benefit_{product_benefit_id}_policy_benefit_{policy_benefit_id}_rate_table_{rate_table_id}_number_2",
                                                  **{'rate_table_type': rate_table_type,
                                                     'rate_table_id': rate_table_id}) + "<div class='price_slider'></div>" + self.rate_table_selector_javascript(
                f"benefit_{product_benefit_id}_policy_benefit_{policy_benefit_id}_rate_table_{rate_table_id}_number_2")
            sum_insured = "<div class='sum_insured_slider'></div>"
        elif price_type == 'fixed_premium_and_sum_insured':
            benefit_price = BenefitPrice.by_attr_first('benefit_id', product_benefit_id)
            price = "R {:0.2f}".format(float(benefit_price.premium))
            sum_insured = "R {:0.2f}".format(float(benefit_price.sum_insured))
        else:
            price = "Premium"
            sum_insured = "SA"
        if policy_benefit_id:
            html = f"""
                    <tr style="background-color: rgba(0,0,0,0.05);" insured_type_basic="{insured_type_basic}" product_benefit_id="{product_benefit_id}" policy_benefit_id="{policy_benefit_id}", policy_id="{policy_id}">
                        <td>{name}</td>
                        <td>{insured_type} - {cover}</td>
                        <td>{price}</td>
                        <td>{sum_insured}</td>
                        <td class="text-right action_link">
                            <button class='btn btn-primary ml-auto btn_remove' data-parent="{product_benefit_id}" parent_id='{parent_id}'>Remove</button>
                            <div class="col-md-4">
                                <input id="insured_count" type="number" class="form-control" required='true'>
                            </div>
                        </td>
                    </tr>"""
        else:
            html = ''
        return html

    def save_new_policy_benefit_to_db(self, product_benefit_id=None, policy_id=None):
        print("####################################################################")
        if not policy_id:
            print("No policy_id")
            return False
        product_benefit = Benefit.by_id(product_benefit_id)
        if not product_benefit:
            print("Cannot find Benefit")
            return False
        product_benefit_cover_link_id = product_benefit.benefit_cover_link_id
        new_policy_benefit = PolicyBenefit()
        new_policy_benefit.policy_id = policy_id
        new_policy_benefit.product_benefit_id = product_benefit_id
        new_policy_benefit.product_benefit_cover_link_id = product_benefit_cover_link_id
        DBSession.add(new_policy_benefit)
        DBSession.flush()
        return new_policy_benefit.id

    @expose()
    def remove_benefit_row(self, *args, **kwargs):
        print(kwargs)
        policy_benefit_id = kwargs.get('policy_benefit_id', None)
        if not policy_benefit_id:
            return ''
        else:
            self.delete_policy_benefit_from_db(policy_benefit_id)

    def delete_policy_benefit_from_db(self, policy_benefit_id=None):
        if not policy_benefit_id:
            print("No policy_benefit_id")
            return False
        policy_benefit = PolicyBenefit.by_id(policy_benefit_id)
        if not policy_benefit:
            print("Could not find policy_benefit")
            return False
        DBSession.delete(policy_benefit)
        DBSession.flush()

    def get_selectbox_rate_table(self, unique_id, selected=None, *args, **kwargs):
        rate_table_type = kwargs.get('rate_table_type', None)
        if not rate_table_type:
            return ''
        rate_table_id = kwargs.get('rate_table_id', None)
        if not rate_table_id:
            return ''
        kwargs['id'] = unique_id
        kwargs['selected'] = selected
        kwargs['outputdict'] = self.get_dict_of_rate_table_line_items(rate_table_id, rate_table_type)
        return create_selectbox_html(**kwargs)

    def get_dict_of_rate_table_line_items(self, rate_table_id: int, rate_table_type: str): # TODO need to fix what's displayed
        if rate_table_type == 'life':
            list_of_rate_table_line_items = RateTableLineItemLife.by_attr_all('rate_table_id', rate_table_id)
            dict_of_rate_table_line_items = {}
            for i in list_of_rate_table_line_items:
                gender_id = i.gender_type_id
                gender = TYPEUTIL.get_pretty_name('person_gender_type', gender_id)
                if gender == "Unknown":
                    gender = ''
                else:
                    gender = f'{gender}: '
                max_age = i.maximum_age
                if max_age and max_age != 0:
                    max_age_message = f" to {max_age}"
                else:
                    max_age_message = ''
                min_age = max(0, i.minimum_age)
                dict_of_rate_table_line_items.update({i.id: f"{gender}Ages from {min_age}{max_age_message}"})
        elif rate_table_type == 'business' or rate_table_type == 'property':
            list_of_rate_table_line_items = RateTableLineItemTurnover.by_attr_all('rate_table_id', rate_table_id)
            dict_of_rate_table_line_items = {i.id: "R {:0.2f}: Turnover R {:0.2f} - R {:0.2f}".format(i.amount, i.minimum_turnover, i.maximum_turnover)
                                             for i in list_of_rate_table_line_items}
        elif rate_table_type == 'vehicle':
            list_of_rate_table_line_items = RateTableLineItemVehicle.by_attr_all('rate_table_id', rate_table_id)
            dict_of_rate_table_line_items = {i.id: f"{i.description}" for i in list_of_rate_table_line_items}
        elif rate_table_type == 'employee':
            list_of_rate_table_line_items = RateTableLineItemEmployee.by_attr_all('rate_table_id', rate_table_id)
            dict_of_rate_table_line_items = {i.id: f"From {i.minimum_employees_coverable} to {i.maximum_employees_coverable} employees" for i in list_of_rate_table_line_items}
        else:
            print("Not valid rate table type")
            dict_of_rate_table_line_items = {}
        return dict_of_rate_table_line_items


###############################################################################
# NEW/EDIT Policy - Optional Benefits
###############################################################################

    @expose()
    def get_optional_benefits_form(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        table = self.get_policy_optional_benefits_html_table(**kwargs)

        html = f"""
                    <div class="card">
                        <div class="card-header d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Optional Benefits</h4>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-12">
                                    {table}
                                </div>
                            </div>
                        </div>
                    </div>
                    """
        return html


    def get_policy_optional_benefits_html_table(self, *args, **kwargs):
        print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ", kwargs)
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        # TODO not sure if we should create a policy at this stage or not.
        policy_id = kwargs.get('policy_id', None)
        if not policy_id:
            return ''

        dbase_query = DBSession.query(Benefit). \
            filter(Benefit.product_id == product_id). \
            filter(Benefit.is_compulsory == False). \
            filter(Benefit.active == True). \
            all()

        return self.benefit_table(dbquery=dbase_query, table_name='optional_benefits_table', product_id=product_id, policy_id=policy_id)

###############################################################################
# NEW/EDIT Policy - Premiums and Sum Insured
###############################################################################

    @expose()
    def get_min_max_premium(self, *args, **kwargs):  # TODO Must refactor rate table models (this is way too complex)
        # TODO if no limits then need to work out via sum_insured limits
        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            return ''
        benefit_rate_table = BenefitRateTable.by_attr_first('benefit_id', product_benefit_id)
        if not benefit_rate_table:
            print("Could not find BenefitRateTable")
            return ''
        if not benefit_rate_table.has_premium_limits:
            print("No premium limits")
            return ''
        benefit_rate_table_id = benefit_rate_table.id
        benefit_rate_table_premium_limit = BenefitRateTablePremiumLimit.by_attr_first('benefit_rate_table_id', benefit_rate_table_id)
        minimum_premium = benefit_rate_table_premium_limit.minimum_premium
        maximum_premium = benefit_rate_table_premium_limit.maximum_premium
        return {'minimum_premium': float(minimum_premium), 'maximum_premium': float(maximum_premium),
                'benefit_rate_table_id': benefit_rate_table_id}

    @expose()
    def get_min_max_sum_insured(self, *args, **kwargs):
        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            return ''
        benefit_rate_table = BenefitRateTable.by_attr_first('benefit_id', product_benefit_id)
        if not benefit_rate_table:
            print("Could not find BenefitRateTable")
            return ''
        if not benefit_rate_table.has_sum_insured_limits:
            print("No sum_insured_limits")
            return ''
        benefit_rate_table_id = benefit_rate_table.id
        benefit_rate_table_sum_insured_limit = BenefitRateTableSumInsuredLimit.by_attr_first('benefit_rate_table_id',
                                                                                             benefit_rate_table_id)
        minimum_sum_insured = benefit_rate_table_sum_insured_limit.minimum_sum_insured
        maximum_sum_insured = benefit_rate_table_sum_insured_limit.maximum_sum_insured
        return {'minimum_sum_insured': float(minimum_sum_insured), 'maximum_sum_insured': float(maximum_sum_insured),
                'benefit_rate_table_id': benefit_rate_table_id}

    def get_rate_table_base_value(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        if not rate_table_id:
            return ''
        rate_table_base_value = RateTableBaseValue.by_attr_first('rate_table_id', rate_table_id)
        if not rate_table_base_value:
            print("Could not find RateTableBaseValue")
            return ''
        base_value = rate_table_base_value.base_value
        return base_value

    def get_rate_factor_and_rate_table_id(self, *args, **kwargs):
        rate_table_line_item_id = kwargs.get('rate_table_line_item_id', None)
        rate_table_line_item_life = RateTableLineItemLife.by_id(rate_table_line_item_id)
        if not rate_table_line_item_life:
            print("Could not find RateTableLineItemLife")
            return ''
        rate_factor = rate_table_line_item_life.rate_factor
        rate_table_id = rate_table_line_item_life.rate_table_id
        return rate_factor, rate_table_id

    @expose()
    def get_rate_factor_and_base_value(self, *args, **kwargs):
        rate_table_line_item_id = kwargs.get('rate_table_line_item_id', None)
        if not rate_table_line_item_id:
            return ''
        rate_factor, rate_table_id = self.get_rate_factor_and_rate_table_id(**{'rate_table_line_item_id': rate_table_line_item_id})
        if not rate_factor or not rate_table_id:
            return ''
        try:
            float(rate_factor)
        except ValueError:
            print("Invalid rate_factor, is not digit")
            return ''
        base_value = self.get_rate_table_base_value(**{'rate_table_id': rate_table_id})
        if not base_value:
            print("Could not get Base Value")
            return ''
        try:
            float(base_value)
        except ValueError:
            print("Invalid base_value, is not digit")
            return ''
        return {'rate_factor': rate_factor, 'base_value': base_value}

    @expose()
    def get_premium_via_sum_insured(self, *args, **kwargs):
        sum_insured = kwargs.get('sum_insured', None)
        print(sum_insured)
        if not sum_insured:
            return ''
        try:
            float(sum_insured)
        except ValueError:
            print("Invalid sum_insured, is not digit")
            return ''
        sum_insured = float(sum_insured)
        rate_factor = kwargs.get('rate_factor', None)
        if not rate_factor:
            print('No rate_factor')
            return ''
        try:
            float(rate_factor)
        except ValueError:
            print("Invalid rate_factor, is not a digit")
        rate_factor = float(rate_factor)
        base_value = kwargs.get('base_value', None)
        if not base_value:
            print('No base_value')
            return ''
        base_value = float(base_value)
        try:
            premium = (rate_factor * sum_insured) / base_value
        except ValueError:
            print("Value Error: could not calculate premium")
            return ''
        return premium

    @expose()
    def get_sum_insured_via_premium(self, *args, **kwargs):
        premium = kwargs.get('premium', None)
        if not premium:
            return ''
        try:
            float(premium)
        except ValueError:
            print("Invalid sum_insured, is not digit")
            return ''
        premium = float(premium)
        rate_factor = kwargs.get('rate_factor', None)
        rate_factor = float(rate_factor)
        if not rate_factor:
            print('No rate_factor')
            return ''
        base_value = kwargs.get('base_value', None)
        if not base_value:
            print('No base_value')
            return ''
        base_value = float(base_value)
        try:
            sum_insured = premium * base_value / rate_factor
        except ValueError:
            print('Value Error: could not calculate sum_insured')
            return ''
        return sum_insured

    @expose()
    def get_min_max_premium_sum_insured(self, *args, **kwargs):
        unique_id = kwargs.get('unique_id', None)
        unique_premium_id = f"{unique_id}_premium"  # TODO remove when done
        unique_sum_insured_id = f"{unique_id}_sum_insured"
        rate_table_line_item_id = kwargs.get('rate_table_line_item_id', None)
        if not rate_table_line_item_id:
            print("No rate_table_line_item_id")
            return ''
        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            print("No product_benefit_id")
            return ''
        rate_factor_base_val_dict = self.get_rate_factor_and_base_value(**kwargs)
        if not rate_factor_base_val_dict:
            print("Could not get rate_factor or base_value")
            return ''
        rate_factor = rate_factor_base_val_dict.get('rate_factor', None)
        if not rate_factor:
            print("No rate_factor")
            return ''
        base_value = rate_factor_base_val_dict.get('base_value', None)
        if not base_value:
            print("No base_value")
            return ''
        min_max_premium = self.get_min_max_premium(**{'product_benefit_id': product_benefit_id})
        if min_max_premium:
            min_premium = min_max_premium.get('minimum_premium', 0)
            max_premium = min_max_premium.get('maximum_premium', 0)
            cur_premium = (float(min_premium) + float(max_premium)) / 2
            min_sum_insured = self.get_sum_insured_via_premium(**{'base_value': base_value, 'rate_factor': rate_factor,
                                                                  'premium': min_premium})
            max_sum_insured = self.get_sum_insured_via_premium(**{'base_value': base_value, 'rate_factor': rate_factor,
                                                                  'premium': max_premium})
            cur_sum_insured = self.get_sum_insured_via_premium(**{'base_value': base_value, 'rate_factor': rate_factor,
                                                                  'premium': cur_premium})
        else:
            min_max_sum_insured = self.get_min_max_sum_insured(**{'product_benefit_id': product_benefit_id})
            print(min_max_sum_insured)
            if not min_max_sum_insured:
                print('No min_max_sum_insured')
                return ''
            min_sum_insured = min_max_sum_insured.get('minimum_sum_insured', 0)
            max_sum_insured = min_max_sum_insured.get('maximum_sum_insured', 0)
            cur_sum_insured = (float(min_sum_insured) + float(max_sum_insured)) / 2
            min_premium = self.get_premium_via_sum_insured(**{'base_value': base_value, 'rate_factor': rate_factor,
                                                              'sum_insured': min_sum_insured})
            max_premium = self.get_premium_via_sum_insured(**{'base_value': base_value, 'rate_factor': rate_factor,
                                                              'sum_insured': max_sum_insured})
            cur_premium = self.get_premium_via_sum_insured(**{'base_value': base_value, 'rate_factor': rate_factor,
                                                              'sum_insured': cur_sum_insured})

        return json.dumps({
            'min_premium': float(min_premium),
            'max_premium': float(max_premium),
            'cur_premium': float(cur_premium),
            'min_sum_insured': float(min_sum_insured),
            'max_sum_insured': float(max_sum_insured),
            'cur_sum_insured': float(cur_sum_insured),
            'unique_premium_id': unique_premium_id,
            'unique_sum_insured_id': unique_sum_insured_id,
            'base_value': float(base_value),
            'rate_factor': float(rate_factor),
        })
        # formserial = f'min_premium={min_premium}&max_premium={max_premium}&cur_premium={cur_premium}&min_sum_insured={min_sum_insured}&max_sum_insured={max_sum_insured}&cur_sum_insured={cur_sum_insured}&unique_premium_id={unique_premium_id}&unique_sum_insured_id={unique_sum_insured_id}&'
        # return formserial

    @expose()
    def get_premium_sum_insured_from_rate_table(self, *args, **kwargs):
        """Use this method when both the Premium and Sum Insured are defined in the rate table line item"""
        rate_table_line_item_id = kwargs.get('rate_table_line_item_id', None)
        if not rate_table_line_item_id:
            print("No rate_table_line_item_id")
            return ''
        insured_type_basic = kwargs.get('insured_type_basic', None)

        # Initialise the RateTableLineItem object
        if not insured_type_basic:
            print("No insured_type_basic")
            return ''
        if insured_type_basic == 'employee':
            rate_table_line_item = RateTableLineItemEmployee.by_id(rate_table_line_item_id)
        elif insured_type_basic == 'business' or insured_type_basic == 'property':
            rate_table_line_item = RateTableLineItemTurnover.by_id(rate_table_line_item_id)
        elif insured_type_basic == 'vehicle':
            rate_table_line_item = RateTableLineItemVehicle.by_id(rate_table_line_item_id)
        else:
            print(f'{insured_type_basic} is not a valid insured type')
            return ''

        # Instantiate the Premium and Sum Insured amounts from the RateTableLineItem objects
        if insured_type_basic == 'employee' or insured_type_basic == 'business' or insured_type_basic == 'property':
            premium = rate_table_line_item.amount
            sum_insured = rate_table_line_item.sum_insured
        elif insured_type_basic == 'vehicle':
            print('Need to sort out vehicles')  # TODO this needs to be sorted
            return ''
        else:
            return ''
        if not premium or not sum_insured:
            print(f"Could not find premium or sum_insured amounts from rate_table_line_item {rate_table_line_item_id}")
            return ''
        return json.dumps({'premium': float(premium),
                           'sum_insured': float(sum_insured)})
