from tg.configurator import ConfigurationComponent, EnvironmentLoadedConfigurationAction
from tg import response
from tg.support.converters import asbool

BASE_URL = 'https://qa-omvim-rocket.dotxmltech.com'

class ResponseHeaderComponent(ConfigurationComponent):
    id = 'response_component'

    def get_defaults(self):
        return {
        'response_component.enabled': True
        }

    def get_coercion(self):
        return {
        'response_component.enabled': asbool
        }

    def on_bind(self, configurator):
        from tg.appwrappers import ApplicationWrapper
        class ResponseHeaderApplicationWrapper(ApplicationWrapper):
            def __init__(self, handler, config):
                super(ResponseHeaderApplicationWrapper, self).__init__(handler, config)
                self.enabled = config['response_component.enabled']

            @property
            def injected(self):
                return self.enabled

            def __call__(self, controller, environ, context):
                response.headers = {}
                response.headers["Strict-Transport-Security"] = 'max-age=15552000'
                response.headers["X-Frame-Options"] = 'deny'
                response.headers["X-XSS-Protection"] = '1; mode=block'
                response.headers["X-Content-Type-Options"] = 'nosniff'
                response.headers["Permissions-Policy"] = ''
                response.headers["Referrer-Policy"] = 'no-referrer'
                response.headers["Expect-CT"] = f'max-age=86400, enforce, report-uri="{BASE_URL}"'
                response.headers["Access-Control-Allow-Origin"] = BASE_URL
                response.headers["Origin"] = BASE_URL

                response.headers["Content-Security-Policy"] = f"default-src 'self' 'unsafe-eval' "
                response.headers["Content-Security-Policy"] += f"https://fonts.googleapis.com https://fonts.gstatic.com"
                response.headers["Content-Security-Policy"] += f" {BASE_URL};"

                response.headers['Content-Security-Policy'] += f"font-src 'self' data: "
                response.headers["Content-Security-Policy"] += f"https://fonts.googleapis.com https://fonts.gstatic.com"
                response.headers["Content-Security-Policy"] += f" {BASE_URL};"

                response.headers['Content-Security-Policy'] += f"script-src 'self' data: "
                response.headers["Content-Security-Policy"] += f" {BASE_URL} 'nonce-1234';"

                response.headers['Content-Security-Policy'] += f"style-src 'self' data: "
                response.headers["Content-Security-Policy"] += f"https://fonts.googleapis.com https://fonts.gstatic.com"
                response.headers["Content-Security-Policy"] += f" {BASE_URL} 'nonce-1234';"

                response.headers['Content-Security-Policy'] += f"img-src 'self' data: {BASE_URL};"
                response.headers['Content-Security-Policy'] += f"frame-ancestors 'none';"
                response.headers['Content-Security-Policy'] += f"form-action 'self';"

                #response.headers['Content-Security-Policy'] += f"connect-src 'self' 'unsafe-inline' data: wss://* https://eventgw.twilio.com;"
                #response.headers['Content-Security-Policy'] += f"media-src 'self' 'unsafe-inline' data: https://media.twiliocdn.com https://api.twilio.com;"
                return self.next_handler(controller, environ, context)

        configurator.register_application_wrapper(ResponseHeaderApplicationWrapper, after=True)
