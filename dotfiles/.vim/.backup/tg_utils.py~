"""
File: tg_utils.py
Author: Camilla Buys
Company: Dotxml
email: camilla at dotxmltech dot com
Github: Not yet
"""
# -*- coding: utf-8 -*-

from __future__ import print_function

import re
import os
import json
import random
import requests
import locale

from collections import defaultdict
from babel.numbers import format_decimal
from sqlalchemy.inspection import inspect
from pkg_resources import resource_filename
from datetime import datetime, timedelta, date
import logging

log = logging.getLogger(__name__)

from xml.etree import ElementTree
from urllib3.exceptions import NewConnectionError
from requests.exceptions import ConnectionError as RequestConnectionError

VAT_RATE = 0.15

###############################################################################
# COMMON HELPERS
###############################################################################

def sort_dict_list(thelist, thekey):
    return sorted(thelist, key=lambda k: k[thekey])

def sane_date(strdate):
    """ sane_date """
    if not strdate:
        return None
    try:
        return str_to_date(strdate)
    except TypeError:
        return strdate.date()
    else:
        return None

def add_seconds_to_date(thisdate, seconds):
    if not thisdate: return None
    if type(thisdate)==date:
        return_date = thisdate+relativedelta(seconds=seconds)
        return return_date
    else: return None

def add_minutes_to_date(thisdate, minutes):
    if not thisdate: return None
    if type(thisdate) == date or type(thisdate) == datetime:
        return thisdate + relativedelta(minutes=minutes)
    return None

def add_hours_to_date(thisdate, hours):
    if not thisdate: return None
    if type(thisdate)==date:
        return_date = thisdate+relativedelta(hours=hours)
        return return_date
    else: return None

def add_days_to_date(thisdate, days=0):
    """ add_days_to_date """
    if not thisdate:
        return None
    if type(thisdate) == date:
        return thisdate+relativedelta(days=days)
    return None

def add_months_to_date(thisdate, months):
    """ add_months_to_date """
    if not thisdate:
        return None
    if type(thisdate) == date:
        return_date = thisdate+relativedelta(months=months)
        return return_date
    return None

def first_day_of_month(thisdate):
    """ return the first day of the month in the date """
    if thisdate:
        return None
    if type(thisdate) == date:
        return_date = thisdate.replace(day=1)
        return return_date
    return None

def last_day_of_month(thisdate):
    """ return the last day of the month in the date """
    if thisdate:
        return None
    if type(thisdate) == date:
        months = add_months_to_date(thisdate, 1)
        first_day = first_day_of_month(months)
        return_date = add_days_to_date(first_day, -1)
        if type(return_date) == date:
            return return_date
    return None

def get_age_from_birthday_years(thisbirthday):
    """ get_age_from_birthday_years """
    now = datetime.utcnow()
    today = now.date()
    if not type(thisbirthday) == date:
        thisbirthday = datetime.strptime(thisbirthday, '%Y-%m-%d')
    return relativedelta(today, thisbirthday).years

def date_to_datetime(from_date):
    return datetime(from_date.year, from_date.month, from_date.day)

def date_to_start_datetime(from_date):
    return datetime(from_date.year, from_date.month, from_date.day, 0, 0)

def date_to_end_datetime(from_date):
    return datetime(from_date.year, from_date.month, from_date.day, 23, 59)

###############################################################################
# SERVICE HELPERS
###############################################################################

def remove_hash_from_filename(filename, seperator='_'):
    """ remove_hash_from_filename """
    try:
        if filename.find(seperator) <= 0: return filename
    except AttributeError: return None
    if not filename: return None
    filelist = filename.split(seperator)[1:]
    return seperator.join(filelist)

def str_to_float(string):
    """ str_to_float """
    if not string:
        return None
    try:
        return float(string)
    except ValueError:
        return None

def str_to_bool(strbool):
    """ str_to_bool"""
    if strbool in ['1', 1, 'true', 'True']:
        return True
    if strbool in ['0', 0, 'false', 'False']:
        return False
    return None

def str_to_date(strdate, dateformat='%d-%m-%Y'):
    """ str_to_date """
    if not strdate:
        return None
    if type(strdate)==date:
        return strdate
    try:
        return datetime.strptime(strdate, dateformat)
    except:
        return None

def date_to_str(strdate, dateformat='%d/%m/%Y'):
    """ date_to_str """
    if not strdate:
        return None
    try:
        return datetime.strftime(strdate, dateformat)
    except ValueError:
        return None

def str_to_int(string):
    """ str_to_int """
    if not string:
        return 0
        return None
    try:
        return int(string)
    except ValueError:
        return 0

def get_xml_from_url(url, data=None, datatype=None):
    """ get_content_from_url """
    if not datatype:
        datatype = []
    if not url:
        return datatype
    response = None
    try:
        if data:
            response = requests.get(url, data=data)
        else:
            response = requests.get(url)
    except RequestConnectionError:
        return datatype
    content = {}
    if response:
        try:
            content = response.content
            content = ElementTree.fromstring(content)
            return content.text
        except ValueError:
            return datatype
    if content.get('status'):
        return content.get('data', datatype)
    return datatype

def get_content_from_url(url, data=None, datatype=None):
    """ get_content_from_url """
    if not url:
        return datatype
    response = None
    try:
        if data:
            response = requests.get(url, data=data)
        else:
            response = requests.get(url)
    except RequestConnectionError:
        return datatype
    except NewConnectionError:
        return datatype
    content = {}
    if response:
        try:
            content = json.loads(response.content)
        except ValueError:
            return datatype
    if content.get('status'):
        return content.get('data', datatype)
    return datatype

def post_json_to_url(url, data, datatype=None):
    """ post_json_to_url """
    if not url:
        return datatype
    response = None
    try:
        response = requests.post(url, data=data)
    except RequestConnectionError:
        return datatype
    content = {}
    if response:
        try:
            content = response.content
            content = json.loads(content)
        except ValueError:
            return datatype
    if content.get('status'):
        return content.get('data', datatype)
    if content.get('success'):
        return content.get('tenant', datatype)
    return datatype

def get_text_from_url(url):
    """ get_text_from_url """
    try:
        response = requests.get(url)
    except RequestConnectionError:
        return None
    except NewConnectionError:
        return None
    if response:
        return response.text
    return None

###############################################################################
# NEW UTILS
###############################################################################

def get_accordion_item(*args, **kwargs):
    div = kwargs.get('div', None)
    name = kwargs.get('name', None)
    heading = kwargs.get('heading', None)
    collapse = kwargs.get('collapse', None)
    expanded = kwargs.get('expanded', False)
    content = kwargs.get('content', '')
    acc_header_class = kwargs.get('acc_header_class', '')

    aria_expanded = 'true'
    show = 'show'

    if not expanded:
        aria_expanded = 'false'
        show = ''

    html = f"""
    <div class="card card-plain">
        <div class="card-header" role="tab">
            <a class='collapsed {acc_header_class}' data-toggle="collapse" data-parent="#accordion" href="#{collapse}" aria-expanded={aria_expanded} aria-controls="{collapse}">
                {name}
                <i class="now-ui-icons arrows-1_minimal-down"></i>
            </a>
        </div>
        <div id="{collapse}" class="collapse {show}" role="tabpanel" aria-labelledby="{heading}">
            <div class="card-body">
                <div id="{div}" class='accordion_content'>{content}</div>
            </div>
        </div>
    </div>
    """
    return html

def get_currency_by_locale(value, the_locale='en_US.utf-8', cents=True):
    locale.setlocale(locale.LC_ALL, the_locale)
    if not value:
        return locale.currency(0, grouping=True)
    if cents:
        try:
            value = int(value)
        except:
            return locale.currency(0, grouping=True)
        value = value / 100
    return locale.currency(value, grouping=True)

def get_service_url():
    curpath = os.path.abspath(os.path.curdir)
    FILENAME = os.path.abspath(resource_filename('rocket', 'public'))
    filepath = os.path.join(FILENAME, 'services_url.txt')
    filepath = os.path.join(curpath, 'services_url.txt')
    with open(filepath, 'r') as f:
        url = f.readline()
    if url.startswith('http://'): url = url[7:]
    return url

def get_name_from_enum_id(enum, value):
    """ get_name_from_enum_id """
    try:
        return enum(int(value)).name.replace('_', ' ').title()
    except ValueError:
        return None
    except TypeError:
        return None

def get_id_from_enum_name(enum, name):
    """ get_id_from_enum_name """
    try:
        name = name.title().replace(' ', '_')
        return enum[name].value
    except KeyError:
        return None

def create_radio_html(**kwargs):
    """ create_radio_html """
    classname = kwargs.get('class', None)
    name_key = kwargs.get('name_key', None)
    name_value = kwargs.get('name_value', None)
    id_key = kwargs.get('id_key', None)
    id_value = kwargs.get('id_value', None)
    return f"""
    <div class='form-check form-check-radio'>
        <label class='form-check-label'>
            <input class='form-check-input {classname}'
                   type='radio'
                   name='{classname}'
                   {name_key}='{name_value}'
                   {id_key}='{id_value}'
            >
            <span class='form-check-sign'></span>
        </label>
    </div>
    """

def get_hidden_input(*args, **kwargs):
    input_id = kwargs.get('id', 'id')
    input_value = kwargs.get('value', None)
    return f"""<input style='display: none;' type="text" id="{input_id}" name="{input_id}" class="form-control" value="{input_value}"/>"""

def create_selectbox_html(**kwargs):
    """ create_selectbox_html """
    selectbox_id = kwargs.get('id', None)
    disabled = kwargs.get('disabled', None)
    selected = kwargs.get('selected', None)
    required = kwargs.get('required', None)
    outputlist = kwargs.get('outputlist', [])
    outputdict = kwargs.get('outputdict', {})
    class_names = kwargs.get('class_names', '')
    required = 'required="true"' if required else ''
    case_sensitive = kwargs.get('case_sensitive', False)
    attributes = kwargs.get('attributes', '')

    if not outputlist and outputdict:
        outputlist = [{'name': y, 'id': i} for i, y in outputdict.items()]

    #if not selected and len(outputlist) == 1:
    #    selected = outputlist[0].get('id', None)

    outputlist = sort_dict_list(outputlist, 'name')

    disabled_text = ''
    empty_message = 'Select an option...'
    if not outputlist:
        disabled_text = "disabled"
        empty_message = 'No options to select...'
    if disabled:
        disabled_text = 'disabled'

    html = f"""
        <select {disabled_text} class='selectpicker {class_names}' data-style='form-control' id='{selectbox_id}' name='{selectbox_id}' {required} {attributes}>
            <option value='0'>{empty_message}</option>
    """
    for item in outputlist:
        if case_sensitive: name = item.get('name', None).replace('_', ' ')
        else: name = item.get('name', None).replace('_', ' ').title()
        if item.get('id') == str_to_int(selected):
            html += f"<option selected='true' value='{item.get('id')}'>{name}</option>"
        else:
            html += f"<option value='{item.get('id')}'>{name}</option>"
    html += '</select>'
    javascript = """
    <script nonce='1234'>
        $(document).ready(function(){
            $(".selectpicker").selectpicker({
              iconBase: "now-ui-icons",
              tickIcon: "ui-1_check",
            });
        });
    </script>
    """
    return html + javascript

def create_boolean_selectbox_html(**kwargs):
    """ Get Boolean selectbox """
    selectbox_id = kwargs.get('id', None)
    selected = kwargs.get('selected', True)
    html = f"""
        <select class='form-control' id='{selectbox_id}' name='{selectbox_id}'>
    """
    if selected:
        html += """ <option value=1 selected="selected">True</option>
                    <option value=0>False</option> """
    else:
        html += """ <option value=1>True</option>
                    <option value=0 selected="selected">False</option> """
    html += '</select>'
    return html

def load_table_cell(cellid, value):
    selfloading_value = f"""
    <script type='text/javascript'>
        $('#{cellid}').text("{value}");
    </script>"""
    return selfloading_value

def build_html_table(rowlist, headerlist, headers, tablename, tdclasslist=None):
    """ build_html_table """
    #from html import escape
    html = f"<table class='table' id='{tablename}'><thead class='text-primary'><tr>"
    empty_row = ''
    for i, head in enumerate(headers):
        classname = f"class='{tdclasslist[i]}'" if tdclasslist else ''
        html += f"<th {classname}>{head}</th>"
        empty_row += '<td class="noRecords">No records found...</td>' if i == 0 else '<td class="noRecords"></td>'

    html += "</tr></thead><tbody>"
    cur_row = 0
    if rowlist:
        for row in rowlist:
            cur_row += 1
            html += '<tr>'
            for i, _ in enumerate(headerlist):
                random_id = f"{tablename}_td_{cur_row}_{i}"
                value = row[headerlist[i]]
                #value = load_table_cell(random_id, value)
                classname = f"class='{tdclasslist[i]}'" if tdclasslist else ''
                html += f'<td id="{random_id}" {classname}>{value}</td>'
            html += '</tr>'
    if not rowlist:
        html += """
        <style nonce='1234'>
            .noRecords:first-child {border-right: none;}
            .noRecords:last-child {border-left: none;}
            .noRecords:not(:first-child):not(:last-child){border-left: none;border-right: none;}
        </style>
        """
        html += f'<tr>{empty_row}</tr>'
    html += "</tbody></table>"
    return html

def build_html_table_with_attributes(rowlist, headerlist, headers, tablename, tdclasslist=None, tdattributelist=None, trattributelist=None):
    """ build_html_table with attributes in each td
    Note that attributes should take the form: attribute_name='attribute_value'"""
    html = f"<table class='table' id='{tablename}'><thead class='text-primary'><tr>"
    for i, head in enumerate(headers):
        classname = f"class='{tdclasslist[i]}'" if tdclasslist else ''
        html += f"<th {classname}>{head}</th>"
    html += "</tr></thead><tbody>"
    cur_row = 0
    if rowlist:
        for row in rowlist:
            if trattributelist:
                trattributerow = trattributelist[cur_row]
            else:
                trattributerow = ''
            if tdattributelist:
                tdattributerow = tdattributelist[cur_row]
            else:
                tdattributerow = None
            cur_row += 1
            html += f'<tr {trattributerow}>'
            for i, _ in enumerate(headerlist):
                random_id = f"{tablename}_td_{cur_row}_{i}"
                value = row[headerlist[i]]
                classname = f"class='{tdclasslist[i]}'" if tdclasslist else ''
                attribute = f"{tdattributerow[headerlist[i]]}" if tdattributelist else ''
                html += f'<td {attribute} id="{random_id}" {classname}>{value}</td>'
            html += '</tr>'
    html += "</tbody></table>"
    if not rowlist:
        html += '<tr>No records found...</tr>'
    return html

def get_slider_html(slider_id='slider', cur_val=50, min_val=0, max_val=100, step=1):
    html = f"""
    <div id="{slider_id}" class="slider slider-primary" data-value="{cur_val}" data-min="{min_val}" data-max="{max_val}" data-step="{step}">
        <input hidden name="{slider_id}">
    </div>
    """
    javascript = f"<script> var slider = document.getElementById('{slider_id}');"
    javascript += """
        var value = slider.getAttribute('data-value');
        var min = slider.getAttribute('data-min');
        var max = slider.getAttribute('data-max');
        var step = slider.getAttribute('data-step');

        noUiSlider.create(slider, {
            start: value,
            connect: [true,false],
            range: {
                min: parseInt(min),
                max: parseInt(max)
            },
            step: parseInt(step),
            tooltips: true
        });
    </script>
    """
    return html + javascript

def build_html_form(form_id='form_id', params_list=[], form_class=''):
    form_content = build_html_form_inputs(params_list)
    html = f"""
    <form id="{form_id}" class="{form_class}">
        {form_content}
    </form>
    """
    return html

def build_html_form_inputs(params_list=[]):
    form_content = ""
    for item in params_list:
        input_id = item.get('input_id', '') # also the key/name for formserial
        label_attrs = item.get('label_attrs', '') # any settings like for and data attributes go here
        label_val = item.get('label_val', '') # you need css to have the * appear after a required field, see Tanzanite for an example
        label_class = item.get('label_class', 'col-md-3 col-form-label')
        input_val = item.get('input_val', '') # value of the input
        input_container_class = item.get('input_container_class', 'col-md-9')
        input_class = item.get('input_class', '')
        input_attrs = item.get('input_attrs', '') # settings like min, max, required, disabled, data attributes go here
        input_type = item.get('input_type', 'text') # number, text, radio, file, hidden etc
        input_field = item.get('input_field', '') # works with input type 'custom', here you can enter anything your heart desires, make sure the content fits
        input_wrapper_class = item.get('input_wrapper_class', 'col-md-6') # d-flex will make multiple inputs stack into one line if their widths allow it
        input_wrapper_attrs = item.get('input_wrapper_attrs', '')
        widget = item.get('widget', '') # any custom element, like div for dynamic content
        if input_type == 'hidden':
            form_content += f"""
            <input id="{input_id}" name="{input_id}" {input_attrs} hidden {input_val}/>
            """
        elif input_type == 'custom':
            form_content += f"""
                <div class="form-group row {input_id} {input_wrapper_class}">
                    <label class="{label_class}" for="{input_id}" {label_attrs}>{label_val}</label>
                    <div class="{input_container_class}">
                        {input_field}
                    </div>
                </div>
            """
        elif input_type == 'widget':
            form_content += widget
        else:
            form_content += f"""
                <div class="form-group row {input_wrapper_class}" {input_wrapper_attrs}>
                    <label class="{label_class}" for="{input_id}" {label_attrs}>{label_val}</label>
                    <div class="{input_container_class}">
                        <input type="{input_type}" class="form-control {input_class}" id="{input_id}" name="{input_id}" {input_attrs} {input_val}/>
                    </div>
                </div>
            """
    return form_content

###############################################################################
# OLD UTILS
###############################################################################

def ensure_dir(filename):
    """ Ensure dir exists """
    dirname = os.path.dirname(filename)
    if not os.path.exists(dirname):
        os.makedirs(dirname)

def get_divs_package_random(content, divcount=2):
    """ Get divs by divcount """
    rnd = random.random()
    rnd = str(rnd).split('.')[1]
    div_name_some_list = 'div_{0}_parent'.format(rnd)
    div_some_list = """<div id={0}>{1}</div>""".format(div_name_some_list, content)
    if divcount < 2:
        divcount = 2
    div_list = []
    div_name_list = []
    for div in range(1, divcount):
        div_name_list.append('div_{0}_child_{1}'.format(rnd, div))
        div_list.append('<div id={0}></div>'.format(div_name_list[-1]))
    divs = div_some_list + ''.join(div_list)
    style = """
                <style nonce='1234'>
                    #{0} {{
                        width : 25%;
                        height: 75vh;
                        float: left;
                        overflow-y: scroll;
                        background: #f2f2f2;
                    }}
                """.format(div_name_some_list)
    divwidth = (75/int(divcount - 1))-1
    for div in range(1, divcount):
        style_tmp = """
                    #{0} {{
                        width : {1}%;
                        height: 75vh;
                        float: left;
                        overflow-y: auto;
                        margin-left: 2px;
                        border-right : 3px dashed grey;
                    }}
                    """.format(div_name_list[int(div) - 1], divwidth)
        style = style + style_tmp
    style = style + '</style>'
    return divs + style

def get_selectbox_bln_text(name, state):
    """ Get Boolean selectbox """
    if state:
        active_txt = """
           <select name='{0}'>
               <option value='1' selected="selected">True</option>
               <option value="0">False</option>
           </select>
           """.format(name)
    else:
        active_txt = """
                   <select name='{0}'>
                       <option value='1'>True</option>
                       <option value="0" selected="selected">False</option>
                   </select>
                   """.format(name)
    return active_txt

def get_selectbox_id_text(name, iter_id, iter_txt, selected):
    """ Get selectbox from iterable """
    top = """
       <select id='{0}' name='{0}'>
       <option value='None' >--Select an option</option>
          """.format(name)
    middle = ""
    for i, itr in enumerate(iter_id):
        if str(i) == selected:
            mid = """ <option value='{0}' selected="selected">{1}</option>
                  """.format(itr, iter_txt[i])
        else:
            mid = """ <option value='{0}'>{1}</option>
                  """.format(itr, iter_txt[i])
        middle = middle + mid
    end = """ </select>"""
    return top + middle + end

def isnumeric(value):
    """ Isnumeric """
    return str(value).replace(".", "").replace("-", "").isdigit()

def checknullvalue(value):
    """ Check if value """
    if not value:
        return 'undefined'
    return str(value)

def getcurrency(value):
    """ Format as Currency """
    if not value:
        return 0
    return format_decimal(value, format='#0.00;-#0.00', locale='en')

def get_vat_amount(amount):
    """ Get vat amount """
    return amount * (1 + VAT_RATE)

def get_month_date_list(months_total=6, dt_start=None):
    """ Get list of month start and end dates """
    if not dt_start:
        dt_start = datetime.date(datetime.now())
    month_date_list = []
    dt_firstday = dt_start.replace(day=1)
    month_date_list.append([dt_firstday, dt_start])
    one_day = timedelta(days=1)
    for _ in range(months_total-1):
        dt_lastday_lastmonth = dt_firstday - one_day
        dt_firstday = dt_lastday_lastmonth.replace(day=1)
        month_date_list.append([dt_firstday, dt_lastday_lastmonth])
    return month_date_list

def get_week_days_list(day_total=7, dt_start=None):
    """ Get list of week start and end dates """
    if not dt_start:
        dt_start = datetime.date(datetime.now())
    week_days_list = []
    week_days_list.append(dt_start)
    for day in range(day_total-1):
        dt_prev = dt_start - timedelta(days=1+day)
        week_days_list.append(dt_prev)
    return week_days_list

def get_month_week_list(week_total=12, dt_start=None):
    """ Get list of week start and end dates """
    if not dt_start:
        dt_start = datetime.date(datetime.now())
    month_weeks_list = []
    dt_firstday = dt_start - timedelta(days=dt_start.weekday())
    for week in range(week_total):
        week_start = dt_firstday - timedelta(days=week*7)
        week_end = week_start + timedelta(days=6)
        month_weeks_list.append([week_start, week_end])
    return month_weeks_list

def build_accordion_html(name='name', iter_list=None, header=None, linkcont='', jslink=''):
    """Usage
        iter_list = [{
                          'link_id':'',
                          'left_label':'',
                          'right_label1':'',
                          'right_label2':'',
                          'right_label3':'',
                          'right_label4':'',
                        }]
        header = [{
                          'left_header':'',
                          'left_header1':'',
                          'right_header':'',


                 }]
        name = accordion_name
        linkcont = 'some/linke/controller/without/kwargs?somearg='
        jslink = 'javascript linking name'
    """
    if not iter_list:
        iter_list = []
    if not header:
        header = []
    html = """<div id="{0}">""".format(name)
    for item in iter_list:
        htmltemp = """ <div class='accord_header'>
                           <h3 link_id={0} {6}='{0}'>{1}
                                <span class='pull-right'>{2}: {3}</span><span class='accord_qty' > {4}:  {5}</span>
                            </h3>
                            <div class='accord_content'></div>
                        <div>
                   """.format(item['link_id'], item['left_label'], item['right_label1'],
                              item['right_label2'], item['right_label3'], item['right_label4'],
                              jslink)
        html = html + htmltemp + "</div></div>"
    for head in header:
        heading = """<h4 class="modal-content">{0}: {1}
                        <span class='pull-right'>{2}</span>
                     </h4>""".format(head['left_header'],
                                     head['left_header1'],
                                     head['right_header'])
    javascript = """
    <script>
            var icons = {{ header: "ui-icon-circle-arrow-e",
                           activeHeader: "ui-icon-circle-arrow-s" }};
            $("#{0}" ) .accordion({{ header: "h3",
                                     heightStyle: 'content',
                                     icons: icons,
                                     active: 'false',
                                     collapsible:'false',
                                     event: 'click',
              }})
              /*
              .sortable({{
                axis: "y",
                handle: "h3",
                collapsible:false,
                stop: function( event, ui ) {{
                  ui.item.children( "h3" ).triggerHandler( "focusout" );
                }}
              }});
              */
            $('#{0} h3').bind('click', function (e) {{
                var this_id = $(this).attr('{2}');
                $(".accord_content").empty();
                $(this).next('div').load("{1}"+this_id, function(responseTxt, statusTxt, xhr){{
                    return false;
                }});
                e.preventDefault();
                e.stopPropagation();
            }});
    </script> """.format(name, linkcont, jslink)
    return  heading + html + "</div>" + javascript

def query_to_list(query_in):
    """ Return: columns name, list of result """
    result = []
    for obj in query_in:
        instance = inspect(obj)
        items = instance.attrs.items()
        result.append([x.value for _, x in items])
    return instance.attrs.keys(), result

def query_to_dict(query_in):
    """ Return: dict of query """
    result = defaultdict(list)
    for obj in query_in:
        instance = inspect(obj)
        for key, val in instance.attrs.items():
            result[key].append(val.value)
    return result

def get_search_generic_dbase_field(**kwargs):
    """Usage
        #thisurl = "/controller/search_some_callback"
        #payload = {'input_element_id': 'old_item',
                    'output_element_id': 'req_item_description',
                    'callback_url': thisurl}
        #search_data = get_search_generic_dbase_field(**payload)

        @expose('jsonp')
        def search_some_callback(self, **kwargs):
            phrase = "%(q)s" % kwargs
            callback = kw['callback']
            searchphrase = "%"+phrase+"%"
            ot = DBS_Session.query(JistSQLTable). \
                    filter(JistItems.description.like(searchphrase)). \
                    order_by(desc(JistItems.id)).limit(50).distinct()
            outerlist = [(k.description) for k in ot]
            descriptionlist = set(outerlist)
            d = json.dumps(list(descriptionlist))
            return callback +'('+d+');'
    """
    input_element_id = kwargs.get('input_element_id', 'input')
    input_name = kwargs.get('input_name', 'Search Items (min 3 characters - max search 50 items) ')
    output_element_id = kwargs.get('output_element_id', 'output')
    output_name = kwargs.get('output_name', 'Output Name')
    callback_url = kwargs.get('callback_url', '')
    html = """ <label for="{0}">{2}</label>
               <input id="{0}"></input><br/>

               <label for="{1}">{3}</label>
               <input id="{1}"></input>
           """.format(input_element_id, output_element_id, input_name, output_name)
    javascript = """
    <style nonce='1234'>
        .ui-autocomplete-loading {
            background: white url("/images/ui-anim_basic_16x16.gif") right center no-repeat;
         }
        .ui-autocomplete {
            max-height: 200px;
            overflow-y: auto;
            overflow-x: hidden;
          }
      </style>
      <script>
         var output_width = $("#%s").width();
         $("#%s").css('width', output_width)
          $(function() {
            $( "#%s" ).autocomplete({
              source: function( request, response ) {
                $.ajax({ url: "%s",
                         dataType: "jsonp",
                        data: { q: request.term },
                        success: function( data ) {
                            response( data );
                        }
                });
              },
              minLength: 3,
              select: function( event, ui ) {
                $("#%s").val(ui.item.label);
                $("#%s").focus();
              },
              open: function() {
                $( this ).removeClass( "ui-corner-all" ).addClass( "ui-corner-top" );
              },
              close: function() {
                $( this ).removeClass( "ui-corner-top" ).addClass( "ui-corner-all" );
              }
            });
          });
      </script> """%(output_element_id, input_element_id,
                     input_element_id, callback_url,
                     output_element_id, output_element_id)
    return html + javascript

def dbsafe(incoming):
    """ Replace incoming to be database safe """
    incoming.replace("'", "\'")
    incoming.replace('"', '\"')
    incoming.replace("'\'", "\\")
    incoming.replace("%", r"\%")
    incoming.replace("_", r"\_")
    return incoming

def filenamesafe(filename):
    """ filenamesafe """
    filename.replace(' ', '')
    filename.replace('/', '-')
    return filename

def calculate_panel_sq_m(width_mm=0, height_mm=0, qty=0):
    """ Calculate SQM """
    if not width_mm or not height_mm or not qty:
        return 0
    width_mm = float(width_mm)
    height_mm = float(height_mm)
    qty = float(qty)
    area_m = (width_mm/1000) * (height_mm/1000) * qty
    return area_m

def generate_dates(start_date, end_date):
    """
    start_date = datetime.date(2010, 1, 25)
    end_date = datetime.date(2010, 3, 5)
    generate_dates(start_date, end_date)
    """
    delta = timedelta(hours=24)
    current_date = start_date
    while current_date <= end_date:
        current_date += delta

def format_timedelta(delta):
    """ Format timedelta to string """
    if delta < timedelta(0):
        return '-' + format_timedelta(-delta)
    return str(delta)

def between(early_dt, late_dt, time_now=datetime.now().time()):
    """ Check if dates are between """
    early_time = early_dt.time()
    late_time = late_dt.time()
    if early_time < time_now:
        if time_now < late_time:
            return True
    return False

def get_sweetalert_click(**kwargs):
    supported_types = ['warning', 'success', 'error', 'info', 'question']
    bln_script_tag = kwargs.get('wrap_script', True)
    target_element = kwargs.get('target_element')
    title = kwargs.get('title', None)
    alert_type = kwargs.get('alert_type', 'warning')
    if alert_type not in supported_types: return "Type not Found"
    alert_content = kwargs.get('alert_content', None)
    bln_cancel_button = kwargs.get('cancel_button', True)
    if bln_cancel_button: cancel_toggle = 'true'
    else: cancel_toggle = 'false'
    cancel_color = kwargs.get('cancel_color', '#d33')
    confirm_color = kwargs.get('confirm_color', '#EEA206')
    confirm_text = kwargs.get('confirm_text', 'Ok')
    proceed_target = kwargs.get('proceed_target', None)
    if not proceed_target: return False

    sweetalert = f"""
        $("{target_element}").click(function(){{
            Swal.fire({{
                title: '{title}',
                type: '{alert_type}',
                html: `{alert_content}`,
                showCancelButton: {cancel_toggle},
                cancelButtonColor: '{cancel_color}',
                confirmButtonColor: '{confirm_color}',
                confirmButtonText: '<div id="proceed">{confirm_text}</div>',
                onBeforeOpen: function(){{
                    $('#proceed').click(function(){{
                        $.redirect('{proceed_target}');
                    }});
                }},
            }})
        }});
        """
    if bln_script_tag: return f"<script type='text/javascript'> {sweetalert} </script>"
    else: return sweetalert

def html_safe(record_instance=None):
    if not record_instance: return False
    safe_record_instance = None
    ignorelist = ['_sa_instance_state']
    for k,v in record_instance.__dict__.items():
        if k not in ignorelist:
            if isinstance(v, str):
                log.info("Must be safified", v)
    return safe_record_instance

def calculate_age(date_of_birth=None):
    if not date_of_birth: return None
    today = datetime.now()
    return today.year - date_of_birth.year - ((today.month, today.day) < (date_of_birth.month, date_of_birth.day))
