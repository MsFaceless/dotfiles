#!/bin/python
# -*- coding: utf-8 -*-
# import the necessary packages
import os
import re
import string
import textract
import pytesseract
from PIL import Image as PilImage

CANNOT_PROCESS = 'CANNOT_PROCESS'
UNRECODNOSED = 'UNRECODNOSED'
NOT_SUPPLIED = 'NOT_SUPPLIED'
NOT_EXIST = 'NOT_EXIST'
NOT_SUPPORTED = 'NOT_SUPPORTED'

class MediaOcr():
    """Docstring for Test. """
    def __init__(self, *args, **kwargs):
        self.text = 'Unable_to_OCR_this_file'

    def get_document_list(self, *args, **kwargs):
        return ['.csv', '.doc', '.docx', '.eml', '.epub', '.gif', '.htm', 
                '.html', '.jpeg', '.jpg', '.json', '.log', '.mp3', '.msg', 
                '.odt', '.ogg', '.pdf', '.png', '.pptx', '.ps', '.psv', 
                '.rtf', '.tff', '.tif', '.tiff', '.tsv', '.txt', '.wav', 
                '.xls', '.xlsx']

    def get_image_list(self, *args, **kwargs):
        return ['.jfif', '.jpeg', '.jpg', '.png', '.tff', '.tif', '.tiff']


    def set_success_return(self, text='', *args, **kwargs):
        return {'success': True, 'message': 'Success', 'text': text}

    def set_error_return(self, error_code='',*args, **kwargs):
        message = 'Unspecified Error Code.'

        if error_code == CANNOT_PROCESS:
            message = 'Unable to OCR this file.'

        if error_code == UNRECODNOSED:
            message = 'File contains no recognisable text.'

        if error_code == NOT_SUPPLIED:
            message = 'No file has been supplied.'

        if error_code == NOT_EXIST:
            message = 'Supplied file does not exist.'

        if error_code == NOT_SUPPORTED:
            message = 'File format is not currently supported.'
        
        return {'success': False, 'message': message, 'text': '',}

    def sanitise_the_text(self, unsanitised_text='', *args, **kwargs):
        lower_text = unsanitised_text.lower()    
        no_url_text = re.sub(r'http[s]?://\S+', '', lower_text)
        no_short_words = re.sub(r'\b\w{1,3}\b', '', no_url_text)
        title_case = no_short_words.title()
        
        raw_text_1 = re.sub('[^0-9a-zA-Z]+', ' ', title_case)
        # raw_text_1 = re.sub("[^a-zA-Z0-9]+", " ", title_case)
        # raw_text_2 = re.sub("/[^A-Za-z0-9_\-\s]/g", " ", raw_text_1)
        # raw_text_3 = re.sub("\d+", "", raw_text_2)
        # raw_text_4 = raw_text_3.strip(string.punctuation)
        raw_text_4 = raw_text_1.strip(string.punctuation)
        return_text = ' '.join(raw_text_1.split())
        if not unsanitised_text or len(return_text) == 0:
            return self.set_error_return(UNRECODNOSED)
        return self.set_success_return(return_text)

    def read_the_doc(self, *args, **kwargs):
        try:
            raw_text = textract.process(self.file_name, encoding='ascii')
            self.text = str(raw_text, 'utf-8')
            self.text = self.text.replace("\n", " ")
            self.text = self.text.replace("  ", " ")
            return self.sanitise_the_text(unsanitised_text=self.text)


        except: # IntegrityError:
            return  self.set_error_return(CANNOT_PROCESS)

    def read_the_image(self, *args, **kwargs):
        try:
            raw_image = PilImage.open(self.file_name)
            self.text = pytesseract.image_to_string(raw_image)
            return self.sanitise_the_text(unsanitised_text=self.text)

        except: # IntegrityError:
            return self.set_error_return(CANNOT_PROCESS)

    def process_file(self, file_name='', *args, **kwargs):
        if not file_name:
            return self.set_error_return(NOT_SUPPLIED)

        # self.base_name = os.path.basename(self.file_name)
        self.file_name = os.path.abspath(file_name)

        # self.directory_name = os.path.dirname(self.file_name)
        if not os.path.exists(self.file_name):
            return self.set_error_return(NOT_EXIST)

        raw_file_name, extension = os.path.splitext(self.file_name)

        if extension in self.get_document_list():
            return self.read_the_doc()

        elif extension in self.get_image_list():
            return self.read_the_image()

        return self.set_error_return(NOT_SUPPORTED)
