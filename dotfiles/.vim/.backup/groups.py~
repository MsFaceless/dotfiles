# -*- coding: utf-8 -*-
"""Groups Controller"""

import logging

from tg import expose

from calabash.model import *

from calabash.lib.html_utils import *
from calabash.lib.base import BaseController
from calabash.lib.tg_decorators import safe_headers
from calabash.lib.image_uploader import ImageUploader
from calabash.lib.myimali_api_gateway import MyImaliApiGateway

from calabash.controllers.wallet import WalletController
from calabash.controllers.common import CommonController
from calabash.controllers.registration import RegistrationController

import calabash.lib.vault_utils as VAULT

WALLET = WalletController()
MYIMALI = MyImaliApiGateway()
COMMON = CommonController()
REGISTRATION = RegistrationController()

LOGGER = logging.getLogger(__name__)

class GroupsController(BaseController):

    @safe_headers
    @expose('json')
    def create_group(self, *args, **kwargs):
        LOGGER.info('create_group')
        LOGGER.info(str(kwargs))

        result = MYIMALI.create_group(**kwargs)
        success = result.get('success', False)
        if not success:
            error = result.get('error', '')
            username = kwargs.get('username', None)
            transfer_result = COMMON.auto_transfer_user_api_key(error, username)
            if transfer_result:
                return self.create_group(**kwargs)
            return error_response(error)
        group_id = self.save_new_group(**kwargs)
        message = result.get('message', '')
        return success_response(message)

    def save_new_group(self, *args, **kwargs):
        username = kwargs.get('username', None)
        username = username.strip()

        groupname = kwargs.get('groupname', None)
        groupname = groupname.strip()

        new = UserGroup()
        new.owner_username = username
        new.groupname = groupname
        DBSession.add(new)
        DBSession.flush()
        return new.id

    def get_user_group(self, *args, **kwargs):
        username = kwargs.get('username', None)
        username = username.strip()

        groupname = kwargs.get('groupname', None)
        groupname = groupname.strip()

        dbase_query = DBSession.query(UserGroup). \
                filter(UserGroup.owner_username == username). \
                filter(UserGroup.groupname == groupname). \
                filter(UserGroup.active == True). \
                first()

        return dbase_query

    def get_user_group_by_id(self, *args, **kwargs):
        group_id = kwargs.get('group_id', None)
        return UserGroup.by_id(group_id)

    def confirm_user_group_exists(self, owner_username=None, groupname=None, *args, **kwargs):
        if not owner_username or not groupname:
            return False

        item = DBSession.query(UserGroup). \
                filter(UserGroup.owner_username == owner_username). \
                filter(UserGroup.groupname == groupname). \
                filter(UserGroup.active == True). \
                first()
        if not item:
            item = UserGroup()
            item.owner_username = owner_username
            item.groupname = groupname
            DBSession.add(item)
            DBSession.flush()

        return item.id

    @safe_headers
    @expose('json')
    def remove_group(self, *args, **kwargs):
        LOGGER.info('remove_group')
        LOGGER.info(str(kwargs))

        group = self.get_user_group_by_id(**kwargs)
        if not group:
            return error_response('Could not get user_group.')

        kwargs['groupname'] = group.groupname
        kwargs['owner_username'] = group.owner_username
        result = MYIMALI.remove_group(**kwargs)
        success = result.get('success', False)
        if not success:
            error = result.get('error', '')
            username = kwargs.get('username', None)
            transfer_result = COMMON.auto_transfer_user_api_key(error, username)
            if transfer_result:
                return self.remove_group(**kwargs)
            return error_response(error)

        group.active = False
        DBSession.flush()

        message = result.get('message', '')
        return success_response(message)

    @safe_headers
    @expose('json')
    def leave_group(self, *args, **kwargs):
        LOGGER.info('leave_group')
        LOGGER.info(str(kwargs))

        group = self.get_user_group_by_id(**kwargs)
        if not group:
            return error_response('Could not get user_group.')

        kwargs['groupname'] = group.groupname
        kwargs['owner_username'] = group.owner_username
        result = MYIMALI.leave_group(**kwargs)
        success = result.get('success', False)
        if not success:
            error = result.get('error', '')
            username = kwargs.get('username', None)
            transfer_result = COMMON.auto_transfer_user_api_key(error, username)
            if transfer_result:
                return self.leave_group(**kwargs)
            return error_response(error)
        message = result.get('message', '')
        return success_response(message)

    @safe_headers
    @expose('json')
    def accept_group_invite_notification(self, *args, **kwargs):
        notification_id = kwargs.get('notification_id', None)
        if not notification_id:
            return error_response('No notification_id supplied.')

        notification = Notification.by_id(notification_id)
        if not notification:
            return error_response('No notification for id.')
        notification.bln_actioned = True
        DBSession.flush()

        if not notification.groupname:
            return error_response(f'Could not find group.')

        kwargs['group_id'] = notification.groupname
        group = self.get_user_group_by_id(**kwargs)
        if not group:
            return error_response(f'Could not get group for {notification.groupname}')

        kwargs['username'] = notification.from_username
        kwargs['owner_username'] = group.owner_username
        kwargs['groupname'] = group.groupname
        kwargs['to_username'] = to_username = notification.to_username

        result = MYIMALI.add_user(**kwargs)
        success = result.get('success', False)
        if not success:
            error = result.get('error', '')
            transfer_result = COMMON.auto_transfer_user_api_key(error, to_username)
            if transfer_result:
                return self.accept_group_invite_notification(**kwargs)
            return error_response(error)
        message = result.get('message', '')
        return success_response(str(message))

    @safe_headers
    @expose('json')
    def reject_group_invite_notification(self, *args, **kwargs):
        notification_id = kwargs.get('notification_id', None)
        if not notification_id:
            return error_response('No notification_id supplied.')

        notification = Notification.by_id(notification_id)
        if not notification:
            return error_response('No notification for id.')
        notification.bln_actioned = True
        DBSession.flush()
        return success_response('True')

    @safe_headers
    @expose('json')
    def invite_user(self, *args, **kwargs):
        LOGGER.info('invite_user')
        LOGGER.info(str(kwargs))

        group = self.get_user_group_by_id(**kwargs)
        if not group:
            return error_response('Could not get user_group.')

        to_username = self.get_username_from_mobile_number(**kwargs)
        if not to_username:
            return error_response('Could not get username for mobile number')

        kwargs['to_username'] = to_username
        kwargs['groupname'] = group.id
        notification_id, notification_type = WALLET.send_group_invite_notification(**kwargs)
        if not notification_id:
            return error_response('Unable to send group invite.')
        return success_response(str(notification_type))

    @safe_headers
    @expose('json')
    def remove_user(self, *args, **kwargs):
        LOGGER.info('remove_user')
        LOGGER.info(str(kwargs))

        group = self.get_user_group_by_id(**kwargs)
        if not group:
            return error_response('Could not get user_group.')

        kwargs['groupname'] = group.groupname
        kwargs['owner_username'] = group.owner_username
        result = MYIMALI.remove_user(**kwargs)
        success = result.get('success', False)
        if not success:
            error = result.get('error', '')

            username = kwargs.get('username', None)
            transfer_result = COMMON.auto_transfer_user_api_key(error, username)
            if transfer_result:
                return self.remove_user(**kwargs)

            remove_username = kwargs.get('remove_username', None)
            transfer_result = COMMON.auto_transfer_user_api_key(error, remove_username)
            if transfer_result:
                return self.remove_user(**kwargs)

            return error_response(error)
        message = result.get('message', '')
        return success_response(message)

    @safe_headers
    @expose('json')
    def update_user(self, *args, **kwargs):
        LOGGER.info('update_user')
        LOGGER.info(str(kwargs))

        group = self.get_user_group_by_id(**kwargs)
        if not group:
            return error_response('Could not get user_group.')

        kwargs['groupname'] = group.groupname
        kwargs['owner_username'] = group.owner_username
        result = MYIMALI.update_user(**kwargs)
        success = result.get('success', False)
        if not success:
            error = result.get('error', '')

            username = kwargs.get('username', None)
            transfer_result = COMMON.auto_transfer_user_api_key(error, username)
            if transfer_result:
                return self.update_user(**kwargs)

            to_username = kwargs.get('to_username', None)
            transfer_result = COMMON.auto_transfer_user_api_key(error, to_username)
            if transfer_result:
                return self.update_user(**kwargs)

            return error_response(error)
        message = result.get('message', '')
        return success_response(message)

    @safe_headers
    @expose('json')
    def user_deposit(self, *args, **kwargs):
        LOGGER.info('user_deposit')
        LOGGER.info(str(kwargs))
        username = kwargs.get('username', None)

        group = self.get_user_group_by_id(**kwargs)
        if not group:
            return error_response('Could not get user_group.')

        kwargs['groupname'] = group.groupname
        kwargs['owner_username'] = group.owner_username
        result = MYIMALI.user_deposit(**kwargs)
        success = result.get('success', False)
        if not success:
            error = result.get('error', '')
            transfer_result = COMMON.auto_transfer_user_api_key(error, username)
            if transfer_result:
                return self.user_deposit(**kwargs)
            return error_response(error)
        REGISTRATION.update_transaction_history(**kwargs)
        return success_response('True')

    @safe_headers
    @expose('json')
    def user_transfer(self, *args, **kwargs):
        LOGGER.info('user_transfer')
        LOGGER.info(str(kwargs))
        username = kwargs.get('username', None)

        to_username = kwargs.get('to_username', None)
        to_reference = kwargs.get('to_reference', None)
        if not to_username and not to_reference:
            return error_response('Nothing to identify to user.')

        if to_reference and not to_username:
            kwargs['to_username'] = to_username = WALLET.get_username_from_reference(to_reference)

        group = self.get_user_group_by_id(**kwargs)
        if not group:
            return error_response('Could not get user_group.')

        kwargs['groupname'] = group.groupname
        kwargs['owner_username'] = group.owner_username
        result = MYIMALI.user_transfer(**kwargs)
        success = result.get('success', False)
        if not success:
            error = result.get('error', '')

            transfer_result = COMMON.auto_transfer_user_api_key(error, username)
            if transfer_result:
                return self.user_transfer(**kwargs)

            to_username = kwargs.get('to_username', None)
            transfer_result = COMMON.auto_transfer_user_api_key(error, to_username)
            if transfer_result:
                return self.user_transfer(**kwargs)

            return error_response(error)

        REGISTRATION.update_transaction_history(**kwargs)
        return success_response('True')

    @safe_headers
    @expose('json')
    def user_mobile_transfer(self, *args, **kwargs):
        LOGGER.info('user_mobile_transfer')
        LOGGER.info(str(kwargs))

        to_username = self.get_username_from_mobile_number(**kwargs)
        if not to_username:
            return error_response('Could not get username for mobile number')
        kwargs['to_username'] = to_username
        return self.user_transfer(**kwargs)

    @safe_headers
    @expose('json')
    def user_withdraw(self, *args, **kwargs):
        LOGGER.info('user_withdraw')
        LOGGER.info(str(kwargs))
        username = kwargs.get('username', None)

        group = self.get_user_group_by_id(**kwargs)
        if not group:
            return error_response('Could not get user_group.')

        kwargs['groupname'] = group.groupname
        kwargs['owner_username'] = group.owner_username
        result = MYIMALI.user_withdraw(**kwargs)
        success = result.get('success', False)
        if not success:
            error = result.get('error', '')
            transfer_result = COMMON.auto_transfer_user_api_key(error, username)
            if transfer_result:
                return self.user_withdraw(**kwargs)
            return error_response(error)
        REGISTRATION.update_transaction_history(**kwargs)
        return success_response('True')

    @safe_headers
    @expose('json')
    def user_sale(self, *args, **kwargs):
        LOGGER.info('user_sale')
        LOGGER.info(str(kwargs))
        username = kwargs.get('username', None)
        merchant_username = kwargs.get('merchant_username', None)
        merchant_reference = kwargs.get('merchant_reference', None)
        if not merchant_username and not merchant_reference:
            return error_response('Nothing to identify merchant.')

        if merchant_reference and not merchant_username:
            kwargs['merchant_username'] = merchant_username = WALLET.get_username_from_reference(merchant_reference)

        group = self.get_user_group_by_id(**kwargs)
        if not group:
            return error_response('Could not get user_group.')

        kwargs['groupname'] = group.groupname
        kwargs['owner_username'] = group.owner_username
        result = MYIMALI.user_sale(**kwargs)
        success = result.get('success', False)
        if not success:
            error = result.get('error', '')

            transfer_result = COMMON.auto_transfer_user_api_key(error, username)
            if transfer_result:
                return self.user_sale(**kwargs)

            transfer_result = COMMON.auto_transfer_user_api_key(error, merchant_username)
            if transfer_result:
                return self.user_sale(**kwargs)

            return error_response(error)
        REGISTRATION.update_transaction_history(**kwargs)
        transaction_id = result.get('transactionsId', '')
        return success_response(transaction_id)

    @safe_headers
    @expose('json')
    def get_group_statement(self, *args, **kwargs):
        LOGGER.info('get_group_statement')
        LOGGER.info(str(kwargs))

        group = self.get_user_group_by_id(**kwargs)
        if not group:
            return error_response('Could not get user_group.')

        kwargs['groupname'] = group.groupname
        kwargs['owner_username'] = group.owner_username
        result = MYIMALI.get_group_statement(**kwargs)
        success = result.get('success', False)
        if not success:
            error = result.get('error', '')
            username = kwargs.get('username', None)
            transfer_result = COMMON.auto_transfer_user_api_key(error, username)
            if transfer_result:
                return self.get_group_statement(**kwargs)
            return error_response(error)
        statement = result.get('statement', [])
        return success_response(statement)

    @safe_headers
    @expose('json')
    def get_group_user_statement(self, *args, **kwargs):
        LOGGER.info('get_group_user_statement')
        LOGGER.info(str(kwargs))

        group_username = kwargs.get('group_username', None)
        if not group_username:
            return error_response('No group_username to search')

        result = self.get_group_statement(**kwargs)
        success = result.get('success', False)
        if not success:
            error = result.get('data', '')

            username = kwargs.get('username', None)
            transfer_result = COMMON.auto_transfer_user_api_key(error, username)
            if transfer_result:
                return self.get_group_user_statement(**kwargs)

            group_username = kwargs.get('group_username', None)
            transfer_result = COMMON.auto_transfer_user_api_key(error, group_username)
            if transfer_result:
                return self.get_group_user_statement(**kwargs)

            return error_response(error)

        outputlist = []
        statement = result.get('data', [])
        for item in statement:
            other = item.get('other', '')
            if str(group_username) in str(other).lower():
                outputlist.append(item)

        return success_response(outputlist)

    @safe_headers
    @expose('json')
    def get_group_detail(self, *args, **kwargs):
        LOGGER.info('get_group_detail')
        LOGGER.info(str(kwargs))

        group = self.get_user_group_by_id(**kwargs)
        if not group:
            return error_response('Could not get user_group.')

        kwargs['groupname'] = group.groupname
        kwargs['owner_username'] = group.owner_username
        result = MYIMALI.get_group_detail(**kwargs)
        success = result.get('success', False)
        if not success:
            error = result.get('error', '')
            username = kwargs.get('username', None)
            transfer_result = COMMON.auto_transfer_user_api_key(error, username)
            if transfer_result:
                return self.get_group_detail(**kwargs)
            return error_response(error)

        data = result.get('data', {})
        userslist = data.get('users', [])
        for user in userslist:
            admin = user.get('admin', 'false').title()
            bln_admin = str_to_bool(admin)
            user['admin'] = bln_admin

            username = user.get('username', None)
            image_uploader = ImageUploader(**{'username' : username})
            image = image_uploader.get_base64_image()
            if not image:
                image = ''
            user['image'] = image

        data['users'] = userslist
        return success_response(data)

    @safe_headers
    @expose('json')
    def get_user_groups(self, *args, **kwargs):
        LOGGER.info('get_user_groups')
        LOGGER.info(str(kwargs))

        result = MYIMALI.get_user_groups(**kwargs)
        success = result.get('success', False)
        if not success:
            error = result.get('error', '')
            username = kwargs.get('username', None)
            transfer_result = COMMON.auto_transfer_user_api_key(error, username)
            if transfer_result:
                return self.get_user_groups(**kwargs)
            return success_response([])

        data = result.get('data', [])
        for item in data:

            owner_username = item.get('owner', None)
            groupname = kwargs['groupname'] = item.get('groupName', '')

            group_id = self.confirm_user_group_exists(owner_username, groupname)
            if not group_id:
                continue
            item['group_id'] = kwargs['group_id'] = group_id

            image_uploader = ImageUploader(**kwargs)
            image = image_uploader.get_base64_image()
            if not image:
                image = ''
            item['image'] = image

            admin = item.get('admin', 'false').title()
            bln_admin = str_to_bool(admin)
            item['admin'] = bln_admin

        return success_response(data)

    @safe_headers
    @expose('json')
    def upload_group_picture(self, *args, **kwargs):
        group = self.get_user_group_by_id(**kwargs)
        if not group:
            return error_response('Could not get user_group.')

        kwargs['group_id'] = group.id
        image_uploader = ImageUploader(**kwargs)
        success = image_uploader.upload()
        if not success:
            return error_response('Something went wrong.')
        return success_response('True')

    @safe_headers
    @expose('json')
    def get_group_picture(self, *args, **kwargs):
        group = self.get_user_group_by_id(**kwargs)
        if not group:
            return error_response('Could not get user_group.')

        kwargs['group_id'] = group.id
        image_uploader = ImageUploader(**kwargs)
        success = image_uploader.get_base64_image()
        if not success:
            return error_response('Something went wrong.')
        return success_response(str(success))

    @safe_headers
    @expose('json')
    def delete_group_picture(self, *args, **kwargs):
        group = self.get_user_group_by_id(**kwargs)
        if not group:
            return error_response('Could not get user_group.')

        kwargs['group_id'] = group.id
        image_uploader = ImageUploader(**kwargs)
        success = image_uploader.delete_base64_image()
        if not success:
            return error_response('Something went wrong.')
        return success_response(str(success))

    def get_username_from_mobile_number(self, *args, **kwargs):
        to_mobile_number = kwargs.get('to_mobile_number', None)
        if not to_mobile_number:
            return False

        result = VAULT.get_entity_by_mobile({'mobile_number' : to_mobile_number})
        entity = result.get('entity', {})
        if not entity:
            return False

        username = None
        identity_list = result.get('identity_list', [])
        for identity in identity_list:
            identity_name = identity.get('identitytype', {}).get('name', '').lower()
            if str(identity_name) == 'username':
                username = identity.get('value', '')
                break

        if username:
            return username
        return False

    def get_all_wallet_groups(self, *args, **kwargs):
        wallets = Wallet.get_all('id')
        for wallet in wallets:
            self.get_user_groups(**{'username' : wallet.username})
        return True
