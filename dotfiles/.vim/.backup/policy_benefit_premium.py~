# -*- coding: utf-8 -*-
"""Policy Benefit Premium module"""

import logging

from tg import predicates, require, expose, request, redirect
from tg.i18n import ugettext as _
from tg.i18n import lazy_ugettext as l_

from rocket.model import *

from rocket.lib.tg_utils import *
from rocket.lib.base import BaseController
from rocket.lib.type_utils import TypeDictionary

from rocket.controllers.common import CommonController
from rocket.controllers.product import ProductController

from sqlalchemy import func, desc, asc, or_
from datetime import date

LOGGER = logging.getLogger(__name__)

TYPEUTIL = TypeDictionary()
COMMON = CommonController()
DBQUERY_LIMIT = 15

POLICY_BENEFIT_ID = 1
ANNUAL_PREMIUM_AMOUNT = 50000

# TODO I am assuming that benefit price as stated in the Product controller is ANNUAL!!! NB NB NB NB NB <= <= <=

class PolicyBenefitPremiumController(BaseController):

###############################################################################
# Policy Benefit Premium - List
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def index(self, *args, **kwargs):
        html = self.get_policy_benefit_premium_html()
        javascript = self.get_javascript_policy_benefit_premium_onload()
        title = _("Policy Benefit Premium")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_policy_benefit_premium_html(self, *args, **kwargs):
        outputlist = []
        dbase_query = DBSession.query(PolicyBenefitPremium). \
            filter(PolicyBenefitPremium.active == True). \
            filter(PolicyBenefitPremium.policy_benefit_id == POLICY_BENEFIT_ID). \
            order_by(PolicyBenefitPremium.added.desc()). \
            limit(DBQUERY_LIMIT)

        for item in dbase_query:

            # Get Policy Benefit Premium Id
            policy_benefit_premium_id = item.id

            # Get Initial Annual Premium Amount
            initial_annual_premium_amount = item.initial_annual_premium_amount
            initial_annual_premium_amount = "{:0.2f}".format(float(initial_annual_premium_amount))

            # Get Annual Increase Percentage
            annual_increase_percentage = item.premium_annual_increase_percentage

            # Get Current Annual Premium Amount
            current_annual_premium_amount = self.__calculate_current_annual_premium_amount(int(float(initial_annual_premium_amount)), float(annual_increase_percentage))
            if current_annual_premium_amount.get('success'):
                current_annual_premium_amount = current_annual_premium_amount.get('data')
            else:
                current_annual_premium_amount = "Not yet paying"

            outputlist.append({
                'initial_annual_premium': f"<div class='edit policy_benefit_premium_edit' policy_benefit_premium_id='{policy_benefit_premium_id}' initial_premium_amount='{initial_annual_premium_amount}' annual_increase_percentage='{annual_increase_percentage}'>{initial_annual_premium_amount}</div>",
                'current_annual_premium': current_annual_premium_amount,
                'annual_increase_percentage': annual_increase_percentage,
            })
        dbcolumnlist = [
            'initial_annual_premium',
            'current_annual_premium',
            'annual_increase_percentage',
        ]
        theadlist = [
            'Initial Annual Premium',
            'Current Annual Premium',
            'Annual Premium Increase',
        ]
        tdclasslist = [
            'action_link',
            '',
            '',
        ]
        htmltable = build_html_table(outputlist, dbcolumnlist, theadlist, "policy_benefit_premium_table",
                                     tdclasslist)
        html = f"""
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header">
                                    <div class="row d-flex">
                                        <div class="col-md-6">
                                             <h4 class="card-title">{_('Policy Benefit Premium')}</h4>
                                        </div>
                                        <div class="col-md-6 text-right">
                                            <button id="create_new_policy_benefit_premium" class="btn btn-primary" policy_benefit_id='{POLICY_BENEFIT_ID}' ml-auto">Create New Policy Benefit Premium</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div id='div_policy_benefit_premium_table' class="table-responsive">
                                        {htmltable}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                """
        return html

    @expose()
    def get_javascript_policy_benefit_premium_onload(self, *args, **kwargs):
        javascript = """
                $("#create_new_policy_benefit_premium").click(function(){
                    $.post('/policy_benefit_premium/create_new_policy_benefit_premium?', function(data){
                        $.redirect('/policy_benefit_premium/index');
                        return false;
                    });
                });
                $('.policy_benefit_premium_edit').click(function() {
                    var policy_benefit_premium_id = $(this).attr('policy_benefit_premium_id');
                    var initial_premium_amount = $(this).attr('initial_premium_amount');
                    var annual_increase_percentage = $(this).attr('annual_increase_percentage');
                    var kwargs = {
                        'policy_benefit_premium_id': policy_benefit_premium_id,
                        'initial_premium_amount': initial_premium_amount,
                        'annual_increase_percentage': annual_increase_percentage,
                    };
                    $.redirect('/policy_benefit_premium/edit', kwargs);
                });
                """
        return javascript

    def __calculate_current_annual_premium_amount(self, initial_annual_premium: int, annual_percentage_increase: float):
        policy_benefit = PolicyBenefit.by_id(POLICY_BENEFIT_ID)
        if policy_benefit:
            policy_id = policy_benefit.policy_id
        else:
            print("No Policy Benefit")
            return {'success': False, 'data': "No Policy Benefit"}
        number_of_years_paying = self.__calculate_number_of_years_paying(policy_id)
        if not number_of_years_paying.get('success'):
            return number_of_years_paying
        else:
            number_of_years = number_of_years_paying.get('data')
            current_premium = initial_annual_premium * ((1 + annual_percentage_increase)**number_of_years)
        return {'success': True, 'data': current_premium}

    def __calculate_number_of_years_paying(self, policy_id: int):
        premium_schedule_query = DBSession.query(PolicyPremiumSchedule.date_of_first_payment_due). \
            filter(PolicyPremiumSchedule.policy_id == policy_id). \
            filter(PolicyPremiumSchedule.active == True). \
            first()
        if not premium_schedule_query:
            return {'success': False, 'data': 'No premium schedule'}
        first_payment_date = premium_schedule_query.date_of_first_payment_due
        # TODO need to check if Policy active, assuming active for now
        years_paying = self.__years_difference(first_payment_date, datetime.today())
        return years_paying

    def __years_difference(self, start_date, end_date):
        years = end_date.year - start_date.year
        if years < 0:
            return {'success': False, 'data': 'Negative Years'}
        if end_date.month < start_date.month or (end_date.month == start_date.month and end_date.day < start_date.day):
            years -= 1
        return {'success': True, 'data': years}


###############################################################################
# Policy Benefit Loader - Edit
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def edit(self, *args, **kwargs):
        html = self.get_edit_policy_benefit_premium_html(**kwargs)
        javascript = self.get_edit_policy_benefit_premium_javascript_onload()
        title = _("Edit Policy Benefit Premium")
        return dict(title=title, html=html, javascript=javascript)


    def get_edit_policy_benefit_premium_html(self, *args, **kwargs):
        policy_benefit_premium_id = kwargs.get('policy_benefit_premium_id', None)
        if not policy_benefit_premium_id:
            print("Could not find policy_benefit_premium_id")
            return ''
        initial_premium_amount = kwargs.get('initial_premium_amount', None)
        if not initial_premium_amount:
            print("Could not find initial_premium_amount")
            return ''
        annual_increase_percentage = kwargs.get('annual_increase_percentage', None)
        if not annual_increase_percentage:
            print("Could not find annual_increase_percentage")
            return ''

        html = f"""
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header">
                                    <div class="row d-flex">
                                        <div class="col-md-6">
                                             <h4 class="card-title">Edit Policy Benefit Premium</h4>
                                        </div>
                                        <div class="col-md-6 text-right">
                                            <button id="save_edit_policy_benefit_premium" class="btn btn-primary ml-auto" policy_benefit_premium_id='{policy_benefit_premium_id}'>Save Policy Benefit Loader</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <form id="form_edit_policy_benefit_premium">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group row">
                                                    <label class="col-md-3 col-form-label" required>{_('Initial Annual Premium Amount')}</label>
                                                    <div class="col-md-9">
                                                        <input type="text" class="form-control" name="initial_premium_amount" id="initial_premium_amount" required='true' value='{initial_premium_amount}'>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group row">
                                                    <label class="col-md-3 col-form-label" required>{_('Annual Premium Increase')}</label>
                                                    <div class="col-md-9">
                                                        <input type="text" class="form-control" name="annual_increase_percentage" id="annual_increase_percentage" required='true' value='{annual_increase_percentage}'>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                """
        return html


    def get_edit_policy_benefit_premium_javascript_onload(self, *args, **kwargs):
        javascript = """
            setFormValidation('#form_edit_policy_benefit_premium');

            $('#save_edit_policy_benefit_premium').click(function(){
                var policy_benefit_premium_id = $(this).attr('policy_benefit_premium_id');
                var initial_premium_amount = $('#initial_premium_amount').val();
                var annual_increase_percentage = $('#annual_increase_percentage').val();
                var valid = FormIsValid('#form_edit_policy_benefit_premium');
                if(valid) {
                    var formserial = $('#form_edit_policy_benefit_premium').serialize();
                    formserial += '&policy_benefit_premium_id='+policy_benefit_premium_id;
                    formserial += '&initial_premium_amount='+initial_premium_amount;
                    formserial += '&annual_increase_percentage='+annual_increase_percentage;
                    $.post('/policy_benefit_premium/add_to_db_edit_policy_benefit_premium?', formserial, function(data){
                        $.redirect('/policy_benefit_premium/index');
                        return false;
                    });
                };
            });
        """
        return javascript


    @expose()
    def add_to_db_edit_policy_benefit_premium(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        old_policy_benefit_premium_id = kwargs.get('policy_benefit_premium_id', None)
        if not old_policy_benefit_premium_id:
            print("Could not find old_policy_benefit_premium_id")
            return ''

        # Deactivate old policy benefit premium
        old_policy_benefit_premium = PolicyBenefitPremium.by_id(old_policy_benefit_premium_id)
        old_policy_benefit_premium.active = False
        DBSession.add(old_policy_benefit_premium)
        DBSession.flush()

        initial_premium_amount = kwargs.get('initial_premium_amount', None)
        print(initial_premium_amount)
        if not initial_premium_amount:
            print("Could not find initial_premium_amount")
            return ''
        annual_increase_percentage = kwargs.get('annual_increase_percentage', None)
        if not annual_increase_percentage:
            print("Could not find annual_increase_percentage")
            return ''

        policy_benefit_premium = PolicyBenefitPremium()
        policy_benefit_premium.initial_annual_premium_amount = initial_premium_amount[0]
        policy_benefit_premium.policy_benefit_id = POLICY_BENEFIT_ID
        policy_benefit_premium.premium_annual_increase_percentage = annual_increase_percentage[0]
        policy_benefit_premium.added_by = usernow.id

        DBSession.add(policy_benefit_premium)
        DBSession.flush()
        return ''

###############################################################################
# TODO this is a temporary CRUD, this will happen automatically when choosing a product benefit
# Policy Benefit Premium - New
###############################################################################

    @expose()
    def create_new_policy_benefit_premium(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        policy_benefit = PolicyBenefit.by_id(POLICY_BENEFIT_ID)
        if not policy_benefit:
            print("No PolicyBenefit")
            return ''
        product_benefit_id = policy_benefit.product_benefit_id

        product_benefit_annual_increase = BenefitAnnualIncreaseOption.by_attr_first('benefit_id', product_benefit_id)
        product_benefit_annual_increase_percentage = product_benefit_annual_increase.premium_increase_percentage

        old_policy_benefit_premiums = DBSession.query(PolicyBenefitPremium). \
            filter(PolicyBenefitPremium.active == True). \
            all()
        for old in old_policy_benefit_premiums:
            old.active = False
            DBSession.flush()

        policy_benefit_premium = PolicyBenefitPremium()
        policy_benefit_premium.policy_benefit_id = POLICY_BENEFIT_ID
        policy_benefit_premium.initial_annual_premium_amount = ANNUAL_PREMIUM_AMOUNT
        policy_benefit_premium.premium_annual_increase_percentage = product_benefit_annual_increase_percentage
        policy_benefit_premium.added_by = usernow.id

        DBSession.add(policy_benefit_premium)
        DBSession.flush()
        return ''
