from fastapi import FastAPI
from sqlalchemy.orm import Session
from model.dbinit import SessionLocal
from fastapi import FastAPI, Depends, HTTPException
from cruds.cruds import active_cruds
from model.dbinit import get_db
#from model.dbinit import get_session as get_db
import json

active_routes = {}

def create_routes(
        app: FastAPI,
        model_name: str,
        cruds_dict: dict,
        ):

    routes_dict = {}
    proper_model_name = f"{model_name.lower()}"

    read_by_id_route_name = f"/get_{proper_model_name}_by_id"
    read_by_id_func_name = f"get_{proper_model_name}_by_id".lower()

    @app.get(read_by_id_route_name)
    def get_by_id_route_function(target_id: int, db: Session=Depends(get_db)):
        query = cruds_dict['get_by_id'](db=db, target_id=target_id)
        return query

    setattr(get_by_id_route_function, "__name__", read_by_id_func_name)
    setattr(get_by_id_route_function, "__qualname__", read_by_id_func_name)
    routes_dict['get_by_id'] = get_by_id_route_function

    read_all_route_name = f"/get_all_{proper_model_name}s"
    read_all_func_name = f"get_all_{proper_model_name}s".lower()

    @app.get(read_all_route_name)
    def get_all_route_function(limit: int=10, db: Session=Depends(get_db)):
        query = cruds_dict['get_all'](db=db, limit=limit)
        return query

    setattr(get_all_route_function, "__name__", read_all_func_name)
    setattr(get_all_route_function, "__qualname__", read_all_func_name)
    routes_dict['get_all'] = get_all_route_function

    create_route_name = f"/create_{proper_model_name}"
    create_func_name = f"create_{proper_model_name}".lower()

    @app.post(create_route_name)
    def create_route_function(data: dict, db: Session=Depends(get_db)):
        crud_status = cruds_dict['create'](db=db, **data)
        if not crud_status: raise HTTPException(status_code=400, detail=f"Error Creating {name}")
        return crud_status

    setattr(create_route_function, "__name__", create_func_name)
    setattr(create_route_function, "__qualname__", create_func_name)
    routes_dict['create'] = create_route_function

    update_route_name = f"/update_{proper_model_name}"
    update_func_name = f"update_{proper_model_name}".lower()

    @app.post(update_route_name)
    def update_route_function(data: dict, db: Session=Depends(get_db)):
        crud_status = cruds_dict['update'](db=db, **data)
        if not crud_status: raise HTTPException(status_code=400, detail=f"Error Creating {name}")
        return crud_status

    setattr(update_route_function, "__name__", update_func_name)
    setattr(update_route_function, "__qualname__", update_func_name)
    routes_dict['update'] = update_route_function

    delete_route_name = f"/delete_{proper_model_name}"
    delete_func_name = f"delete_{proper_model_name}".lower()

    @app.get(delete_route_name)
    def delete_route_function(target_id: int, db: Session=Depends(get_db)):
        query = cruds_dict['delete'](db=db, target_id=target_id)
        return query

    setattr(delete_route_function, "__name__", delete_func_name)
    setattr(delete_route_function, "__qualname__", delete_func_name)
    routes_dict['delete'] = delete_route_function

    undelete_route_name = f"/undelete_{proper_model_name}"
    undelete_func_name = f"undelete_{proper_model_name}".lower()

    @app.get(undelete_route_name)
    def undelete_route_function(target_id: int, db: Session=Depends(get_db)):
        query = cruds_dict['undelete'](db=db, target_id=target_id)
        return query

    setattr(undelete_route_function, "__name__", undelete_func_name)
    setattr(undelete_route_function, "__qualname__", undelete_func_name)
    routes_dict['undelete'] = undelete_route_function

    return routes_dict

def generate_routes(app: FastAPI):
    for name, cruds_dict in active_cruds.items():
        routes_dict = {
                'app': app,
                'model_name': name,
                'cruds_dict': cruds_dict,
                }
        routes = create_routes(**routes_dict)
        active_routes[name] = routes
    return True
