import requests
import pandas as pd

# base_url = "https://qarocketapp.rocketinsurtech.com"
base_url = 'http://localhost:1234'

relevant_columns_erm_person = [
    'ClientNo',
    'person_obj',
    'person_title',
    'first_name',
    'last_name',
    'date_of_birth',
    'gender',
    'language_obj',
]

relevant_columns_erm_person_identity = [
    'ClientNo',
    'person_obj',
    'identity_type_obj',
    'identity_number',
    'primary_identification'
]

relevant_columns_erm_person_contact = [
    'ClientNo',
    'contact_line1'
]

person_df = pd.read_csv('NAExtract/erm_person_20200524_093704.txt', sep='\x03', usecols=relevant_columns_erm_person)

person_identity_df = pd.read_csv('NAExtract/erm_person_identity_20200524_093723.txt', sep='\x03', usecols=relevant_columns_erm_person_identity)

person_contact_df = pd.read_csv('NAExtract/erm_contact_20200524_093737.txt', sep='\x03')

person_contact_df = person_contact_df[person_contact_df.contact_text == "Cellphone"]

person_contact_df = person_contact_df[relevant_columns_erm_person_contact]

person_identity_df = person_identity_df[person_identity_df.primary_identification != 'No']

person_identity_df.drop(columns=['ClientNo'], inplace=True)

# These are left joins, note how the "on" feature works
new_df = person_df.join(person_identity_df.set_index('person_obj'), on='person_obj',)

new_df = new_df.join(person_contact_df.set_index('ClientNo'), on='ClientNo')

new_df.drop(columns=['person_obj', 'primary_identification'], inplace=True)

# Defaulting all types to 1
new_df['person_title'] = 1
new_df['gender'] = 5
new_df['language_obj'] = 1
new_df['identity_type_obj'] = 1

new_df.dropna(inplace=True)

new_df.drop_duplicates(subset=['identity_number'], inplace=True)

columns_dict = {
    'person_title': 'entity_person_title_id',
    'first_name': 'name',
    'last_name': 'surname',
    'gender': 'person_gender_type_id',
    'language_obj': 'language_id',
    'identity_type_obj': 'identity_type_id',
    'identity_number': 'number',
    'contact_line1': 'mobile'
}

new_df.rename(columns=columns_dict, inplace=True)

new_df['date_of_birth'] = pd.to_datetime(new_df['date_of_birth'])

new_df['date_of_birth'] = new_df['date_of_birth'].dt.strftime('%d-%m-%Y')

# print(new_df)

# print(person_contact_df)

# print(person_df)
# for col in person_df.columns:
#     print(col)
# for i in range(len(person_df.index)):
#     print(person_df.iloc[[i]])

# print(person_df.to_dict('records'))

# Practice payload
# payload = {'person_title_type_id': '1',
#            'name': 'werwewer',
#            'surname': 'werew',
#            'identity_type_id': '1',
#            'number': '92847329843',
#            'date_of_birth': '01-10-2020',
#            'person_gender_type_id': '1',
#            'language_id': '1551',
#            'mobile': '234234234324'}
#
# r = requests.post(address_to_send + '/members/save_new_memberobj', data=payload)
# print(r.text)

# address_payload = {'address_type_id': '2',  # Mandatory
#                    'entity_person_id': '2',  # Mandatory
#                    'street_address_id': '',
#                    'address_line': 'Unit 48, High Cape 2',
#                    'city': 'Cape Town',
#                    'postal_code': '8001',
#                    'country_id': '207'}
#
# address_payload_test = {'address_type_id': '2',  # Mandatory
#                         'entity_person_id': '5',  # Mandatory
#                         'street_address_id': '',
#                         'address_line': '',
#                         'city': '',
#                         'postal_code': '',
#                         'country_id': ''}

# r = requests.post('http://localhost:1234/members/save_person_address', data=address_payload_test)


list_of_dicts_to_send = new_df.head(20).to_dict('records')


person_address_df = pd.read_csv('NAExtract/agm_address_20200524_093732.txt', sep='\x03')

person_bank_df = pd.read_csv('NAExtract/fim_bank_account_detail_20200524_093804.txt', sep='\x03')
# print(person_bank_df)

bank_columns_rename_dict = {
    'creditcard_swift_code': 'swift_code',
    'account_name': 'account_holder',
    'bank_branch_obj': 'branch_code'
}

person_bank_df.rename(columns=bank_columns_rename_dict, inplace=True)
person_bank_df['bank_id'] = 1  # TODO temp val
person_bank_df['currency_id'] = 1  # TODO temp val
person_bank_df['iban'] = 1234567890  # TODO temp val

def create_address_object(ClientNo):
    row = person_address_df.loc[person_address_df['ClientNo'] == ClientNo]
    to_send = row[['address_line', 'address_type_id', 'postal_code']]
    to_send = to_send.to_dict('records')
    print(row)
    return to_send  # TODO note that one person can have more than one address

def create_bank_object(ClientNo):
    row = person_bank_df.loc[person_bank_df['ClientNo'] == ClientNo]
    to_send = row[['bank_id', 'currency_id', 'swift_code', 'account_holder', 'branch_code', 'account_number', 'iban']]
    if not to_send.empty:
        print(to_send.to_dict('records'))
    to_send = to_send.to_dict('records')
    return to_send  # TODO note that one person can have more than one address

person_address_df['address_type_obj'] = person_address_df['address_type_obj'].apply(lambda x: 2 if x == 'PHY' else 1)

person_address_df['address_line'] = person_address_df[['address_line1', 'address_line2', 'address_line3', 'address_line4']].apply(lambda x: x.str.cat(sep=', '), axis=1)

address_columns_rename_dict = {
    'address_type_obj': 'address_type_id',
    'post_code': 'postal_code'
}

person_address_df.rename(columns=address_columns_rename_dict, inplace=True)

# counter = 0
# for i in list_of_dicts_to_send:
#     ClientNo = i.get('ClientNo', None)
#     counter += 1
#     print(counter)
#     print(i)
#     i.update({'added_by': 7770777})
#     r = requests.post(address_to_send + '/members/save_new_memberobj', i)
#     response = dict(r.json())
#     if response['success'] and ClientNo:
#         print(response['success'], ClientNo)
#         print(response['family_member_entity_person_id'])
#         entity_person_id = response['family_member_entity_person_id']
#         to_send = create_address_object(ClientNo)
#         if len(to_send) == 2:
#             for y in to_send:
#                 y.update({'entity_person_id': entity_person_id})
#                 y.update({'added_by': 7770777})
#                 print(y)
#                 r_2 = requests.post(address_to_send + '/members/save_person_address', y)
#                 print(r_2.text)
#         elif to_send:
#             to_send = to_send[0]
#             to_send.update({'entity_person_id': entity_person_id})
#             to_send.update({'added_by': 7770777})
#             r_2 = requests.post(address_to_send + '/members/save_person_address', to_send)
#             print(r_2.text)
#         bank_to_send = create_bank_object(ClientNo)
#         if bank_to_send:
#             bank_to_send = bank_to_send[0]
#             bank_to_send.update({'entity_person_id': entity_person_id})
#             bank_to_send.update({'added_by': 7770777})
#             r_3 = requests.post(address_to_send + '/members/save_person_bank_account', bank_to_send)
#             print(r_3.text)


# print(person_address_df.loc[person_address_df['ClientNo' == 2245645]])

# print(person_address_df['ClientNo'])


# import requests
import json


class RocketApp:
    def __init__(self, **kwargs):

        self.username = kwargs.get("username")
        self.password = kwargs.get("password")
        self.remember = 2252000
        self.auth_headers = {
                'login':self.username,
                'password':self.password,
                'remember':self.remember,
                }
        self.session = requests.Session()
        self.login()

    def login(self):
        login_request = self.session.post(f"{base_url}/login_handler", data=self.auth_headers)
        return True

    def post_to_rocketapp(self, endpoint, data):
        target = f"{base_url}/{endpoint}"
        r = self.session.post(target, data=data)
        print(r.status_code)
        if r.status_code == 200:
            jsondata = r.json()
            print(jsondata)
            return jsondata
        return False

    def get_from_rocketapp(self, endpoint, data):
        target = f"{base_url}/{endpoint}"
        r = self.session.get(target, json=data)
        if r.status_code == 200: return True
        return False

def main():
    kwargs = {'username':'Developer', 'password':'developpass'}
    rapp = RocketApp(**kwargs)
    print(rapp.post_to_rocketapp(endpoint='product/save_new_allocations', data={'data':json.dumps({'name':'piet'})}))

# if __name__ == '__main__':
#     main()

counter = 0
kwargs = {'username': 'Developer', 'password': 'developpass'}
rapp = RocketApp(**kwargs)
for i in list_of_dicts_to_send:
    ClientNo = i.get('ClientNo', None)
    counter += 1
    print(counter)
    print(i)
    i.update({'added_by': 7770777})
    r = rapp.post_to_rocketapp(endpoint='members/save_new_memberobj', data=i)
    # r = requests.post(address_to_send + '/members/save_new_memberobj', i)
    # response = dict(r.json())
    response = r
    if response['success'] and ClientNo:
        print(response['success'], ClientNo)
        print(response['family_member_entity_person_id'])
        entity_person_id = response['family_member_entity_person_id']
        to_send = create_address_object(ClientNo)
        if len(to_send) == 2:
            for y in to_send:
                y.update({'entity_person_id': entity_person_id})
                y.update({'added_by': 7770777})
                print(y)
                # r_2 = requests.post(address_to_send + '/members/save_person_address', y)
                r_2 = rapp.post_to_rocketapp(endpoint='members/save_person_address', data=y)
                print(r_2)
        elif to_send:
            to_send = to_send[0]
            to_send.update({'entity_person_id': entity_person_id})
            to_send.update({'added_by': 7770777})
            r_2 = rapp.post_to_rocketapp(endpoint='members/save_person_address', data=to_send)
            # r_2 = requests.post(address_to_send + '/members/save_person_address', to_send)
            print(">>>>>>>>>>>> Address: ", r_2)
        bank_to_send = create_bank_object(ClientNo)
        if bank_to_send:
            bank_to_send = bank_to_send[0]
            bank_to_send.update({'entity_person_id': entity_person_id})
            bank_to_send.update({'added_by': 7770777})
            r_3 = rapp.post_to_rocketapp(endpoint='members/save_person_bank_account', data=bank_to_send)
            # r_3 = requests.post(address_to_send + '/members/save_person_bank_account', bank_to_send)
            print(">>>>>>>>>>>> Bank Account ", r_3)
