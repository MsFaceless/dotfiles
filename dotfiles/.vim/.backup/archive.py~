#!/bin/python
# -*- coding: utf-8 -*-
from tg.predicates import has_permission
from tg.i18n import ugettext as _, lazy_ugettext as l_

from sqlalchemy import func, desc, asc, or_, and_
from datetime import date, datetime
from tanzanite.model import *
from tanzanite.controllers.common import CommonController
from tanzanite.lib.tg_utils import *
from tanzanite.lib.email_creator import *

COMMON = CommonController()

class Archive():

    allow_only = has_permission(
        'Developer',
        msg=l_('Only for people with the Developer permission')
    )

    def __init__(self, *args, **kwargs):
        # Defaults
        self.datetime_now = datetime.now()
        self.archive_period = 6
        self.fence_date = self.set_fence_date()
        self.sold_id = COMMON.get_type_id(CardStatus, 'Sold')
        self.destroyed_id = COMMON.get_type_id(CardStatus, 'Destroyed')
        self.shipped_id = COMMON.get_type_id(ClientOrderStatus, 'Shipped')
        self.received = COMMON.get_type_id(ClientOrderStatus, 'Received')
        self.cancelled = COMMON.get_type_id(ClientOrderStatus, 'Cancelled')

    def set_archive_period(self,period=6,  *args, **kwargs):
        print('Set Archive Period')
        if period < 6: period = 6
        self.archive_period = period
        self.fence_date = self.set_fence_date()

    def set_fence_date(self, *args, **kwargs):
        print('Set Archive Fence Date')
        return date_to_end_datetime(add_months_to_date(datetime_to_date(self.datetime_now), -self.archive_period))
    
    def archive_this_packing_detail(self, packing_detail_id=None,  *args, **kwargs):
        packing_detail = self.get_packing_detail_from_id(packing_detail_id)
        if not packing_detail: return

        this = PackingDetailArchive()
        this.id = packing_detail.id
        this.reference_number = packing_detail.reference_number
        this.store_location_id = packing_detail.store_location_id 
        this.outer_pack_id = packing_detail.outer_pack_id 
        this.pallet_id = packing_detail.pallet_id 
        this.packing_type_id = packing_detail.packing_type_id 
        this.supplier_order_detail_id = packing_detail.supplier_order_detail_id 
        this.content_serial_range = packing_detail.content_serial_range 
        this.is_partial = packing_detail.is_partial
        this.received = packing_detail.received
        this.received_by = packing_detail.received_by
        DBSession.add(this)
        DBSession.delete(packing_detail)
        DBSession.flush()
      
    def get_packing_detail_from_card_id(self, card_id=None,  *args, **kwargs):
        if not card_id: 
            return None
        card = Card.by_id(card_id)
        if not card: 
            card = CardArchive.by_id(card_id) 
            if not card: 
                return None

        if (card.card_status_id == self.sold_id) or \
           (card.card_status_id == self.destroyed_id): 
            return PackingDetail.by_id(card.packing_detail_id)
        return None

    def get_packing_detail_from_id(self, packing_detail_id=None,  *args, **kwargs):
        if not packing_detail_id: None
        return PackingDetail.by_id(packing_detail_id)

    def archive_cards(self, *args, **kwargs):
        # Here we archve the cards
        card_list = self.get_card_list()
        if not card_list: return
        # Ok, let us move the cards over
        print("Archiving Cards:", len(card_list))
        for history in card_list:
            self.archive_this_card(history.card_id)
            self.archive_card_history(history.card_id)

    def get_card_list(self, *args, **kwargs):
        return DBSession.query(CardHistory).\
            filter(or_(CardHistory.card_status_id==self.sold_id,
                       CardHistory.card_status_id==self.destroyed_id)).\
            filter(CardHistory.date_time<=self.fence_date).\
            order_by(asc(CardHistory.card_id)).\
            all()
                    
    def archive_this_card(self, card_id=None, *args, **kwargs):
        # print('Card id: ',card_id)
        if not card_id: return

        card = Card.by_id(card_id)
        if not card: return

        if not card.card_status_id == self.sold_id and \
            not card.card_status_id == self.destroyed_id: return

        this = CardArchive()
        this.id = card.id
        this.product_id = card.product_id
        this.tracking_number = card.tracking_number
        this.store_location_id = card.store_location_id
        this.card_status_id = card.card_status_id
        this.packing_detail_id = card.packing_detail_id
        this.created = card.created
        this.created_by_id = card.created_by_id
        DBSession.add(this)
        DBSession.delete(card)
        DBSession.flush()

    def archive_card_history(self, card_id=None, *args, **kwargs):
        # print('Card id: ',card_id)
        if not card_id: return
        history_list = DBSession.query(CardHistory).\
            filter(CardHistory.card_id==card_id).\
            order_by(asc(CardHistory.id)).\
            all()
        if not history_list:
            return
        for hist in history_list:

            this = CardHistoryArchive()
            this.id = hist.id
            this.card_id = hist.card_id
            this.store_location_id = hist.store_location_id
            this.card_status_id = hist.card_status_id
            this.date_time = hist.date_time
            this.user_id = hist.user_id
            DBSession.add(this)
            DBSession.delete(hist)
        DBSession.flush()

    def can_archive_packing_detail(self, packing_detail_id=None, *args, **kwargs):
        # Can this Pack be archived as a result og not having a card.
        if not packing_detail_id:
            return False
        exists = DBSession.query(Card).\
            filter_by(packing_detail_id==packing_detail_id).\
            first()
        if exists:
            return False
        return True

    def run_archive(self, *args, **kwargs):
        print('RUN Archive')

        print('Running Cards')
        self.archive_cards(**kwargs)
        print('Running Cards: Complete')
    
        print('Running Orphaned Packing Details')
        self.archive_packing_detail_orphans()
        print('Running Orphaned Packing Details: Complete')

        print('Running Orphaned Pallets')
        self.archive_orphaned_pallets()
        print('Running Orphaned Pallets: Complete')

        print('Running Client Orders')
        self.archive_client_orders
    
        print('Running Supplier Orders')
        self.archive_supplier_orders
        
        print('Running Old Users')
        self.archive_old_user_data

        print('Sending Mail')
        self.send_result_email()
        return        

    def send_result_email(self, *args, **kwargs):
        arc_cards = len(DBSession.query(CardArchive).all())
        arc_cardhists = len(DBSession.query(CardHistoryArchive).all())
        arc_packs = len(DBSession.query(PackingDetailArchive).all())
        arc_pallets = len(DBSession.query(PalletArchive).all())
        arc_order_batches = len(DBSession.query(ClientOrderBatchArchive).all())
        arc_orders = len(DBSession.query(ClientOrderArchive).all())

        print('Total archived cards:', arc_cards)
        print('Total archived card historys:', arc_cardhists)
        print('Total archived packages:', arc_packs)
        print('Total archived pallets:', arc_pallets)
        print('Total archived client order batches:', arc_order_batches)
        print('Total archived client orders:', arc_orders)

        e = EmailCreator()
        #valid_email = e.validate_email(user.email)
        #if not valid_email: return 'false'
        e.add_subject('Archive run Result | Tanzanite')

        test_email = 'trevor@dotxmltech.com'
        e.add_to_address(test_email)

        plain_text = f"""
        Dear Administrator, \n\n

        The Archive engine has completed with the following results:\n\n

        Total archived cards: {arc_cards}
        Total archived card historys: {arc_cardhists}
        Total archived packages: {arc_packs}
        Total archived pallets: {arc_pallets}
        Total archived client order batches: {arc_order_batches}
        Total archived client orders: {arc_orders}

        Kind Regards
        
        Tanzanite
        """
        e.add_plain_text(plain_text)

        rich_text = f"""
        Dear Administrator;<br/><br/>
        The Archvie engine has completed with the following results:<br/><br/>

        Total archived cards: {arc_cards}<br/>
        Total archived card historys: {arc_cardhists}<br/>
        Total archived packages: {arc_packs}<br/>
        Total archived pallets: {arc_pallets}<br/>
        Total archived client order batches: {arc_order_batches}<br/>
        Total archived client orders: {arc_orders}<br/><br/>

        <p>Kind Regards.</p><br/>
        <p>Tanzanite.</p>
        """

        e.add_rich_text(rich_text)
        e.send(verbose=False)
        print('Mail Send result: ', e)
        if not e: return 'false'
        return 'true'

    def archive_packing_detail_orphans(self, *args, **kwargs):
        print('Archiving Orphaned Packing Details')
        packing_detail_id_list = self.get_packing_detail_orphan_list()
        print('Archiving Orphaned Packing Details: Looping Now!')
        for pack_id in packing_detail_id_list:
            this_pack_id = pack_id.get('id', None)
            if not this_pack_id: continue
            self.archive_this_packing_detail(this_pack_id)
        return

    def get_packing_detail_orphan_list(self, *args, **kwargs):
        #All the packdetail that are not in packinf_detail.outer_pack_id and card.packing_detail.id
        output_dict = []
        card_sub_query = DBSession.query(Card.packing_detail_id).\
            group_by(Card.packing_detail_id). \
            order_by(Card.packing_detail_id). \
            all()

        dbase_query = DBSession.query(PackingDetail.id).\
            filter(PackingDetail.id.notin_(card_sub_query)).\
            order_by(asc(PackingDetail.id)).\
            all()

        for pack in dbase_query:
            exists_outer = DBSession.query(PackingDetail).\
                filter(PackingDetail.outer_pack_id == pack.id). \
                first()
            if exists_outer:
                continue
            output_dict.append({'id' : pack.id})
        return output_dict

    def archive_orphaned_pallets(self, *args, **kwargs):
        print('Archiving Orphaned Pallets')
        pallet_list = self.get_pallet_list()
        print('Pallet Count: Looping Now:', len(pallet_list))
        for pallet in pallet_list:
            #All the packdetail that are not in packinf_detail.outer_pack_id and card.packing_detail.id
            exists = DBSession.query(InboundPallet).\
                filter(InboundPallet.pallet_id==pallet.id). \
                first()
            if exists : continue
            exists = DBSession.query(PackingDetail).\
                filter(PackingDetail.pallet_id==pallet.id). \
                first()
            if exists : continue
            self.archive_this_pallet(pallet.id)
                    
    def archive_this_pallet(self, pallet_id=None, *args, **kwargs):
        if not pallet_id: return
        pallet = Pallet.by_id(pallet_id)
        print('Archiving Pallet: ', pallet_id, pallet)
        if not pallet: return

        this = PalletArchive()
        this.id = pallet.id
        this.pallet_number = pallet.pallet_number
        this.store_location_id = pallet.store_location_id
        this.created_by_id = pallet.created_by_id
        this.created_date_time = pallet.created_date_time
        DBSession.add(this)
        DBSession.delete(pallet)
        DBSession.flush()

    def get_pallet_list(self, *args, **kwargs):
        return DBSession.query(Pallet).\
            order_by(Pallet.id).\
            all()
    
    def archive_client_orders(self, *args, **kwargs):
        # Client Order, Client Order Detail, Client Order Detail Pack and Client Order History.
        print("Archiving Client Orders older than :", self.archive_period)
        order_list = self.get_old_client_order_list()
        if order_list:
            for order in order_list:
                self.archive_this_client_order(order)

        self.archive_client_order_batches()
        
    def get_old_client_order_list(self, *args, **kwargs):
        return DBSession.query(ClientOrder).\
            filter(or_(ClientOrder.client_order_status_id==self.shipped_id,
                       ClientOrder.client_order_status_id==self.received)).\
            filter(ClientOrder.created<=self.fence_date).\
            order_by(asc(ClientOrder.id)).\
            all()

    def get_cancelled_client_order_list(self, *args, **kwargs):
        return DBSession.query(ClientOrder).\
            filter(ClientOrder.client_order_status_id==self.cancelled).\
            order_by(asc(ClientOrder.id)).\
            all()
    
    def archive_this_client_order(self, order=None, *args, **kwargs):
        if not order: return
        self.archive_client_order_detail(order.id)
        self.archive_client_order_history(order.id)

        this = ClientOrderArchive()
        this.id = order.id
        this.order_number = order.order_number
        this.shipping_box_count = order.shipping_box_count
        this.courier_reference = order.courier_reference
        this.client_order_batch_id = order.client_order_batch_id
        this.client_branch_id = order.client_branch_id
        this.client_order_status_id = order.client_order_status_id
        this.delivery_method_id = order.delivery_method_id
        this.created = order.created
        this.created_by_id = order.created_by_id
        DBSession.add(this)
        DBSession.delete(order)
        DBSession.flush()

    def archive_client_order_detail(self, client_order_id=None, *args, **kwargs):
        if not client_order_id: return
        order_detail_list = self.get_client_order_detail_list(client_order_id)
        if not order_detail_list: return
        for order_detail in order_detail_list:
            self.archive_client_order_detail_pack(order_detail.id)
            this = ClientOrderDetailArchive()
            this.id = order_detail.id
            this.client_order_id = order_detail.client_order_id
            this.product_id = order_detail.product_id
            this.reorder_type_id = order_detail.reorder_type_id
            this.order_quantity = order_detail.order_quantity
            this.ordered = order_detail.ordered
            this.ordered_by = order_detail.ordered_by
            this.filled_quantity = order_detail.filled_quantity
            this.filled = order_detail.filled
            this.filled_by = order_detail.filled_by
            DBSession.add(this)
            DBSession.delete(order_detail)

    def get_client_order_detail_list(self, client_order_id=None, *args, **kwargs):
        return DBSession.query(ClientOrderDetail).\
            filter(ClientOrderDetail.client_order_id==client_order_id) .\
            order_by(asc(ClientOrderDetail.id)).\
            all()

    def archive_client_order_detail_pack(self, client_order_detail_id=None, *args, **kwargs):
        order_pack_list = self.get_client_order_detail_pack_list()
        if not order_pack_list: return
        
        for pack in order_pack_list:
            this = ClientOrderDetailPackArchive()
            this.id = pack.id
            this.client_order_detail_id = pack.client_order_detail_id
            this.packing_detail_id = pack.packing_detail_id
            DBSession.add(this)
            DBSession.delete(pack)
            
    def get_client_order_detail_pack_list(self, client_order_detail_id=None, *args, **kwargs):
        return DBSession.query(ClientOrderDetailPack).\
            filter(ClientOrderDetailPack.client_order_detail_id==client_order_detail_id) .\
            order_by(asc(ClientOrderDetailPack.id)).\
            all()

    def archive_client_order_history(self, client_order_id=None, *args, **kwargs):
        if not client_order_id: return
        order_history_list = self.get_client_order_history_list(client_order_id)
        if not order_history_list: return
        
        for history in order_history_list:
            this = ClientOrderHistoryArchive()
            this.id = history.id
            this.client_order_id = history.client_order_id
            this.client_order_status_id = history.client_order_status_id
            this.date_time = history.date_time
            this.user_id = history.user_id
            DBSession.add(this)
            DBSession.delete(history)

    def get_client_order_history_list(self, client_order_id=None, *args, **kwargs):
        return DBSession.query(ClientOrderHistory).\
            filter(ClientOrderHistory,client_order_id==client_order_id) .\
            order_by(asc(ClientOrderHistory.id)).\
            all()

    def archive_client_order_batches(self, *args, **kwargs):
        # Client Order Batch and Client Order Batch History.
        batch_list = self.get_client_order_batch_list()
        if not batch_list: return 
        
        for batch in batch_list:
            this_batch_id = batch.get('id', None)
            if not this_batch_id: continue
            self.archive_client_order_batch_history(this_batch_id) 

            this = ClientOrderBatchArchive()
            this.id = batch.id
            this.client_id = batch.client_id
            this.client_order_batch_status_id = batch.client_order_batch_status_id
            this.ordering_method_id = batch.ordering_method_id
            this.created = batch.created
            this.created_by_id = batch.created_by_id
            DBSession.add(this)
            DBSession.delete(batch)
            DBSession.flush()

    def get_client_order_batch_list(self, *args, **kwargs):
        output_dict = []
        batch_list = DBSession.query(ClientOrderBatch).\
            order_by(asc(ClientOrderBatch.id)).\
            all()
        if not batch_list: return
        
        for batch in batch_list:
            exists_order = DBSession.query(ClientOrder).\
                filter(ClientOrder.client_order_batch_id==batch.id). \
                first()
            if exists_order: continue
            output_dict.append({'id' : batch.id})
        return output_dict

    def archive_client_order_batch_history(self, this_batch_id=None, *args, **kwargs):
        if not this_batch_id: return
        batch_history_list = self.get_client_order_batch_history_list(this_batch_id)
        if not batch_history_list: return
        
        for history in batch_history_list:
            this = ClientOrderBatchHistoryArchive()
            this.id = history.id
            this.client_order_batch_id = history.client_order_batch_id
            this.client_order_batch_status_id = history.client_order_batch_status_id
            this.date_time = history.date_time
            this.user_id = history.user_id
            DBSession.add(this)
            DBSession.delete(history)

    def get_client_order_batch_history_list(self, client_order_batch_id=None, *args, **kwargs):
        return DBSession.query(ClientOrderBatchHistory).\
            filter(ClientOrderBatchHistory.client_order_batch_id==client_order_batch_id) .\
            order_by(asc(ClientOrderBatchHistory.id)).\
            all()

    def archive_supplier_orders(self, *args, **kwargs):
        # 
        print("Archiving Supplier Orders older than :", self.archive_period)
        supplier_order_list = self.get_supplier_order_list()
        if not supplier_order_list: return
        
        for item in supplier_order_list:
            can_archive = self.can_archive_supplier_order(item.id)
            if not can_archive: continue
            self.archive_supplier_order_history(item.id)
            self.archive_supplier_order_detail(item.id)

            this = SupplierOrderArchive()
            this.id = item.id
            this.order_number = item.order_number
            this.supplier_order_status_id = item.supplier_order_status_id
            this.supplier_order_type_id = item.supplier_order_type_id
            this.supplier_id = item.supplier_id
            this.shipment_method_id = item.shipment_method_id
            this.order_total = item.order_total
            this.currency_id = item.currency_id
            this.base_total = item.base_total
            this.base_currency_id = item.base_currency_id
            this.exchange_rate = item.exchange_rate
            this.created = item.created
            this.created_by_id = item.created_by_id
            DBSession.add(this)
            DBSession.delete(item)
            DBSession.flush()

    def get_supplier_order_list(self, *args, **kwargs):
        return DBSession.query(SupplierOrder).\
            order_by(asc(SupplierOrder.id)).\
            all()

    def can_archive_supplier_order(self, supplier_order_id=None, *args, **kwargs):
        if not supplier_order_id: return False
        detail_list = self.get_supplier_order_detail_list(supplier_order_id)
        if not detail_list: return True
        
        for item in detail_list:
            exists = DBSession.query(PackingDetail).\
                filter(PackingDetail.supplier_order_detail_id==item.id).\
                first()
            if exists: return False
        return True
    
    def archive_supplier_order_detail(self, supplier_order_id=None, *args, **kwargs):
        if not supplier_order_id: return
        detail_list = self.get_supplier_order_detail_list(supplier_order_id)
        if not detail_list: return
        
        for item in detail_list:
            this = SupplierOrderDetailArchive()
            this.id = item.id
            this.supplier_order_id = item.supplier_order_id
            this.product_id = item.product_id
            this.quantity = item.quantity
            this.amount = item.amount
            this.currency_id = item.currency_id
            this.base_amount = item.base_amount
            this.base_currency_id = item.base_currency_id
            this.exchange_rate = item.exchange_rate
            this.created = item.created
            this.created_by_id = item.created_by_id
            DBSession.add(this)
            DBSession.delete(item)

    def get_supplier_order_detail_list(self, supplier_order_id=None, *args, **kwargs):
        return DBSession.query(SupplierOrderDetail).\
            filter(SupplierOrderDetail.supplier_order_id==supplier_order_id).\
            order_by(asc(SupplierOrderDetail.id)).\
            all()

    def archive_supplier_order_history(self, supplier_order_id=None, *args, **kwargs):
        if not supplier_order_id: return
        history_list = self.get_supplier_order_detail_list(supplier_order_id)
        if not history_list: return
        
        for item in history_list:
            this = SupplierOrderHistoryArchive()
            this.id = item.id
            this.supplier_order_id = item.supplier_order_id
            this.supplier_order_status_id = item.supplier_order_status_id
            this.date_time = item.date_time
            this.user_id = item.user_id
            DBSession.add(this)
            DBSession.delete(item)
        DBSession.flush()

    def get_supplier_order_history_list(self, supplier_order_id=None, *args, **kwargs):
        return DBSession.query(SupplierOrderHistory).\
            filter(SupplierOrderHistory.supplier_order_id==supplier_order_id).\
            order_by(asc(SupplierOrderHistory.id)).\
            all()

    def archive_old_user_data(self, *args, **kwargs):
        # 
        print("Archiving User Data older than :", self.archive_period)
        activation_list = self.get_user_activation_list()
        if activation_list: 
            for item in activation_list:
                this = UserActivationArchive()
                this.id = item.id
                this.user_id = item.user_id
                this.created_date = item.created_date
                DBSession.add(this)
                DBSession.delete(item)
            DBSession.flush()

        history_list = self.get_user_password_history_list()
        if not history_list: return
        
        for item in history_list:
            this = UserPasswordHistoryArchive()
            this.id = item.id
            this.user_id = item.user_id
            this.password_added_date = item.password_added_date
            this.password = item.password
            DBSession.add(this)
            DBSession.delete(item)
        DBSession.flush()

    def get_user_activation_list(self, *args, **kwargs):
        return DBSession.query(UserActivation).\
            filter(UserActivation.created_date<=self.fence_date).\
            order_by(asc(UserActivation.id)).\
            all()

    def get_user_password_history_list(self, *args, **kwargs):
        return DBSession.query(UserPasswordHistory).\
            filter(UserPasswordHistory.crepassword_added_dateated<=self.fence_date).\
            order_by(asc(UserPasswordHistory.id)).\
            all()

        # "ArchiveType": [
        #     {'ref': 'Manual', 'label': 'Manual', 'id': '2', 'order': '1'},
        #     {'ref': 'Automatic', 'label': 'Automatic', 'id': '1', 'order': '2'}
        #  ],

    # def new_archive(self, *args, **kwargs):
    #     archive_type_id = kwargs.get('archive_type_id', None)
    #     if not archive_type_id:
    #         archive_type_id = COMMON.get_type_id(ArchiveType, 'Automatic')

    #     card_count = kwargs.get('card_count', 0)
    #     card_history_count = kwargs.get('card_history_count', 0)
    #     pack_count = kwargs.get('pack_count', 0)
    #     pallet_count = kwargs.get('pallet_count', 0)
    #     client_order_batch_count = kwargs.get('client_order_batch_count', 0)
    #     client_order_count = kwargs.get('client_order_count', 0)

    #     total_card_count = kwargs.get('total_card_count', 0)
    #     total_card_history_count = kwargs.get('total_card_history_count', 0)
    #     total_pack_count = kwargs.get('total_pack_count', 0)
    #     total_pallet_count = kwargs.get('total_pallet_count', 0)
    #     total_client_order_batch_count = kwargs.get('total_client_order_batch_count', 0)
    #     total_client_order_count = kwargs.get('total_client_order_count', 0)

    #     notes = 'Started'
    #     is_complete = False
    #     process_date_time = datetime.now()
    #     process_user_id = kwargs.get('process_user_id', None)
        
    #     this = Archive()
    #     this.card_count = card_count
    #     this.card_history_count = card_history_count
    #     this.pack_count = pack_count
    #     this.pallet_count = pallet_count
    #     this.client_order_batch_count = client_order_batch_count
    #     this.client_order_count = client_order_count
    #     this.total_card_count = total_card_count
    #     this.total_card_history_count = total_card_history_count
    #     this.total_pack_count = total_pack_count
    #     this.total_pallet_count = total_pallet_count
    #     this.total_client_order_batch_count = total_client_order_batch_count
    #     this.total_client_order_count = total_client_order_count
    #     this.notes = notes
    #     this.is_complete = is_complete
    #     this.process_date_time = process_date_time
    #     this.process_user_id = process_user_id
    #     DBSession.add(this)
    #     DBSession.flush()
    #     return this.id

    # def update_archive(self, *args, **kwargs):
    #     archive_id = kwargs.get('archive_id', None)
    #     if not archive_id:
    #         return
    #     card_count = kwargs.get('card_count', None)
    #     card_history_count = kwargs.get('card_history_count', None)
    #     pack_count = kwargs.get('pack_count', None)
    #     pallet_count = kwargs.get('pallet_count', None)
    #     client_order_batch_count = kwargs.get('client_order_batch_count', None)
    #     client_order_count = kwargs.get('client_order_count', None)

    #     total_card_count = kwargs.get('total_card_count', None)
    #     total_card_history_count = kwargs.get('total_card_history_count', None)
    #     total_pack_count = kwargs.get('total_pack_count', None)
    #     total_pallet_count = kwargs.get('total_pallet_count', None)
    #     total_client_order_batch_count = kwargs.get('total_client_order_batch_count', None)
    #     total_client_order_count = kwargs.get('total_client_order_count', None)

    #     notes = kwargs.get('notes', '')
    #     is_complete = kwargs.get('notes', '')

    #     this = Archive.by_id(archive_id)

    #     if card_count:
    #         this.card_count = card_count
    #     if card_history_count:
    #         this.card_history_count = card_history_count
    #     if pack_count:
    #         this.pack_count = pack_count
    #     if pallet_count:
    #         this.pallet_count = pallet_count
    #     if client_order_batch_count:
    #         this.client_order_batch_count = client_order_batch_count
    #     if client_order_count:
    #         this.client_order_count = client_order_count
    #     if total_card_count:
    #         this.total_card_count = total_card_count
    #     if total_card_history_count:
    #         this.total_card_history_count = total_card_history_count
    #     if total_pack_count:
    #         this.total_pack_count = total_pack_count
    #     if total_pallet_count:
    #         this.total_pallet_count = total_pallet_count
    #     if total_client_order_batch_count:
    #         this.total_client_order_batch_count = total_client_order_batch_count
    #     if total_client_order_count:
    #         this.total_client_order_count = total_client_order_count
    #     if notes:
    #         this.notes = this.notes += notes
    #     if is_complete:
    #         this.is_complete = is_complete
    #     DBSession.flush()
    #     return
        

    # def new_archive_audit(self, *args, **kwargs):
    #     archive_id = kwargs.get('archive_id', None)
    #     audit = kwargs.get('audit', None)
    #     if not archive_id:
    #         return
    #     this = ArchiveAudit()
    #     this.archive_id = archive_id
    #     this.audit_date_time = datetime.now()
    #     this.audit = audit
    #     DBSession.add(this)
    #     DBSession.flush()
    #     return

