# -*- coding: utf-8 -*-
"""Policy Date module"""

import logging

from tg import predicates, require, expose, request, redirect
from tg.i18n import ugettext as _
from tg.i18n import lazy_ugettext as l_

from rocket.model import *

from rocket.lib.tg_utils import *
from rocket.lib.base import BaseController
from rocket.lib.type_utils import TypeDictionary

from rocket.controllers.common import CommonController
from rocket.controllers.product import ProductController

from sqlalchemy import func, desc, asc, or_

LOGGER = logging.getLogger(__name__)

TYPEUTIL = TypeDictionary()
COMMON = CommonController()
DBQUERY_LIMIT = 15

POLICY_ID = 1


class PolicyDateController(BaseController):

###############################################################################
# Policy Status - List
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def index(self, *args, **kwargs):
        html = self.get_policy_date_html()
        javascript = self.get_javascript_policy_date_onload()
        title = _("Policy Date")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_policy_date_html(self, *args, **kwargs):
        outputlist = []
        dbase_query = DBSession.query(PolicyDate). \
            filter(PolicyDate.active == True). \
            filter(PolicyDate.policy_id == POLICY_ID). \
            order_by(PolicyDate.added.desc()). \
            limit(DBQUERY_LIMIT)

        for item in dbase_query:

            # Get Policy Date Id
            policy_date_id = item.id

            # Get Policy Date Type
            policy_date_type_id = item.policy_date_type_id

            # Get Policy Date Pretty Name
            policy_date_pretty_name = TYPEUTIL.get_pretty_name('policy_date_type', policy_date_type_id)

            # Get Policy Date
            policy_date = item.date

            outputlist.append({
                'policy_date_type': f"<div class='edit policy_date_edit' policy_date_id='{policy_date_id}' policy_date_type_id='{policy_date_type_id}' policy_date='{policy_date}'>{policy_date_pretty_name}</div>",
                'policy_date': policy_date,
                'deactivate': f"<div class='policy_date_deactivate' policy_date_id='{policy_date_id}'>Deactivate</div>"
            })
        dbcolumnlist = [
            'policy_date_type',
            'policy_date',
            'deactivate',
        ]
        theadlist = [
            'Date',
            'Set',
            '',
        ]
        tdclasslist = [
            'action_link',
            '',
            'action_link text-right',
        ]
        htmltable = build_html_table(outputlist, dbcolumnlist, theadlist, "policy_date_table",
                                     tdclasslist)
        html = f"""
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header">
                                    <div class="row d-flex">
                                        <div class="col-md-6">
                                             <h4 class="card-title">{_('Policy Date')}</h4>
                                        </div>
                                        <div class="col-md-6 text-right">
                                            <button id="create_new_policy_date" class="btn btn-primary" policy_id='{POLICY_ID}' ml-auto">Create New Policy Date</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div id='div_policy_date_table' class="table-responsive">
                                        {htmltable}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                """
        return html

    @expose()
    def get_javascript_policy_date_onload(self, *args, **kwargs):
        javascript = """
                $("#create_new_policy_date").click(function(){
                    var policy_id = $(this).attr('policy_id');
                    var kwargs = {'policy_id' : policy_id};
                    $.redirect('/policy_date/new', kwargs);
                });
                $('.policy_date_deactivate').click(function() {
                    var policy_date_id = $(this).attr('policy_date_id');
                    var kwargs = {'policy_date_id': policy_date_id};
                    $.post('/policy_date/deactivate_policy_date?', kwargs, function(data) {
                        $.redirect('/policy_date/index');
                        return false;
                    });
                    return false;
                });
                $('.policy_date_edit').click(function() {
                    var policy_date_id = $(this).attr('policy_date_id');
                    var policy_date_type_id = $(this).attr('policy_date_type_id');
                    var policy_date = $(this).attr('policy_date');
                    var kwargs = {'policy_date_id': policy_date_id,
                        'policy_date_type_id': policy_date_type_id,
                        'policy_date': policy_date,
                    };
                    $.redirect('/policy_date/edit', kwargs);
                });
                """
        return javascript

    @expose()
    def deactivate_policy_date(self, *args, **kwargs):
        policy_date_id = kwargs.get('policy_date_id', None)
        if not policy_date_id:
            print("Could not find policy_date_id to deactivate")
            return ''
        policy_date = PolicyDate.by_id(policy_date_id)
        if not policy_date:
            print("Could not find active policy_date")
            return ''

        policy_date.active = False
        DBSession.add(policy_date)
        DBSession.flush()
        return ''

###############################################################################
# Policy Date - New
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def new(self, *args, **kwargs):
        html = self.get_new_policy_date_html(**kwargs)
        javascript = self.get_new_policy_date_javascript_onload()
        title = _("New Policy Date")
        return dict(title=title, html=html, javascript=javascript)

    def get_new_policy_date_html(self, *args, **kwargs):
        policy_date_type_selectbox = self.policy_date_type_selectbox()
        html = f"""
                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <div class="row d-flex">
                                    <div class="col-md-6">
                                         <h4 class="card-title">{_('New Policy Date')}</h4>
                                    </div>
                                    <div class="col-md-6 text-right">
                                        <button id="save_new_policy_date" class="btn btn-primary" policy_id='{POLICY_ID}' ml-auto">Save New Policy Date</button>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <form id="form_new_policy_date">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group row" id=div_policy_date_type>
                                                <label class="col-md-3 col-form-label" required>{_('Date Type')}</label>
                                                <div class="col-md-9">
                                                    {policy_date_type_selectbox}
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group row">
                                                <label class="col-md-3 col-form-label" required>{_('Date')}</label>
                                                <div class="col-md-9">
                                                    <input id="policy_date" type="text" name="policy_date" class="form-control" required='true'>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            """
        return html

    def policy_date_type_selectbox(self, *args, **kwargs):
        selected = kwargs.get('policy_date_type_id', None)
        if selected:
            kwargs['selected'] = int(selected)
        kwargs['required'] = True
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("policy_date_type")
        print(TYPEUTIL.get_dict_of_types("policy_date_type"))
        kwargs['id'] = 'policy_date_type_id'
        return create_selectbox_html(**kwargs)

    def get_new_policy_date_javascript_onload(self, *args, **kwargs):
        javascript = """
            createDatepicker('#policy_date');
            setFormValidation('#form_new_policy_date');

            $('#save_new_policy_date').click(function(){
                var valid = FormIsValid('#form_new_policy_date');
                if(valid) {
                    var formserial = $('#form_new_policy_date').serialize();
                    $.post('/policy_date/add_to_db_new_policy_date?', formserial, function(data){
                        $.redirect('/policy_date/index');
                        return false;
                    });
                };
            });
        """
        return javascript

    @expose()
    def add_to_db_new_policy_date(self, *args, **kwargs):
        print(kwargs)
        usernow = request.identity.get('user', {})
        policy_date_set = kwargs.get('policy_date', None)
        print(policy_date_set)
        if not policy_date_set:
            print("No policy_date")
            return ''
        policy_date_type_id = kwargs['policy_date_type_id']
        if not policy_date_type_id:
            print("No policy_date_type_id")
            return ''

        policy_date = PolicyDate()
        policy_date.policy_id = POLICY_ID
        policy_date.policy_date_type_id = policy_date_type_id
        policy_date.date = str_to_date(policy_date_set)
        policy_date.added_by = usernow.id

        DBSession.add(policy_date)
        DBSession.flush()
        return ''
