# -*- coding: utf-8 -*-
"""UserController controller module"""

import os
import json
import hashlib, uuid
from datetime import datetime
from sqlalchemy import func, desc, asc
from pkg_resources import resource_filename
from tg import expose, require, redirect, validate, flash, url, request, response, predicates

from eiffel_back.model import *
from eiffel_back.lib.tg_utils import *
from eiffel_back.lib.base import BaseController
from eiffel_back.lib.tg_decorators import *
from eiffel_back.lib.tgfileuploader import FileUploader
from eiffel_back.lib.tg_generic_reportlab import PDFCreator, Paragraph
from eiffel_back.lib.email_creator import EiffelBackEmailCreator
from eiffel_back.controllers.common import CommonController

COMMON = CommonController()

FILENAME = os.path.abspath(resource_filename('eiffel_back', 'public'))
PUBLIC_DIRNAME = os.path.join(FILENAME)
PDF_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'pdf')
IMAGES_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'images')
CATALOG_DIRNAME = os.path.join(IMAGES_DIRNAME, 'catalog_pictures')

NUM = 5
LINK_EXPIRY = 4

__all__ = ['UserController']

class UserController(BaseController):

    @require(CustomNotAnonymous())
    @expose('eiffel_back.templates.generic')
    def index(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        htmltbl = self.get_user_htmltbl(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header card-header-primary card-header-icon">
                        <div class="card-icon">
                            <i class="material-icons">supervised_user_circle</i>
                        </div>
                        <h4 class="card-title">Admins</h4>
                    </div>
                    <div class="card-body pt-0">
                        <div class="toolbar text-right">
                            <div class="col-md-12 d-flex px-0">
                                <div class="ml-auto col-md-4 pl-0">
                                    <input type="text" class="form-control search" name="searchphrase"  id='searchphrase' value='' placeholder="Search">
                                </div>
                                    <button class="btn btn-primary btn-sm ml-2" id='action_search'>Search</button>
                                    <button class="btn btn-outline-primary btn-sm ml-2" id='btn_reset'>Reset</button>
                                    <button class="btn btn-primary btn-sm ml-2" id="createNewSafetyTip">Create a new Admin</button>
                            </div>
                        </div>
                        <div class="material-datatables">
                            {htmltbl}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
            $('#createNewSafetyTip').click(function(){
                $.redirect('/create_admin');
            });
        """
        return dict(title="All Admins", html=html, javascript=javascript)

    def get_user_htmltbl(self, *args, **kwargs):
        outputlist = []
        dbase_query = User.get_all()
        for item in dbase_query:
            data = f'data-user-id="{item.id}"'
            actions = f"""
            <div {data} class="btn btn-link btn-warning btn-just-icon edit"><i class="material-icons">dvr</i></div>
            <div {data} class="btn btn-link btn-danger btn-just-icon remove"><i class="material-icons">close</i></div>
            """
            user_name = item.name+' '
            user_name += item.surname if item.surname else '(Unknown Surname)'
            outputlist.append({
                'name': user_name,
                'role': Role.by_id(item.role_id).name,
                'actions': actions,
                             })
        dbcolumnlist=[
                'name',
                'role',
                'actions',
                    ]
        theadlist=[
                'Name',
                'Role',
                'Actions'
                ]
        tdclasslist = [
                '',
                '',
                'text-right',
                ]
        javascript = """
        <script>
        $('.edit').click(function(){
            var kwargs = {'user_id' : $(this).data('user-id')};
            $.redirect('/edit_admin', kwargs);
        });
        $('.remove').click(function(){
            var kwargs = {'user_id' : $(this).data('user-id')};
            $.post('/user/save_remove_user?', kwargs, function(data){
                $.redirect('/all_admins');
                return false;
            });
        });
        $('#alluser').DataTable({
            "pagingType": "full_numbers",
            "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, 'All']],
            "columns": [
                null,
                null,
                { "orderable": false }
            ],
            "dom": "<'row'<'col-md-12't>>" +
                "<'row'<'col-md-6 d-flex'<'mt-1'l><'ml-2'i>><'col-md-6'p>>",
            responsive: true,
            language: {
                search: "_INPUT_",
                searchPlaceholder: "Search records",
                emptyTable: "No transactions to show...",
            }
        });
        </script>
        """
        return build_html_table_material(outputlist, dbcolumnlist, theadlist, "alluser", tdclasslist) + javascript

    @expose()
    def save_remove_user(self, *args, **kwargs):
        user_id = kwargs.get('user_id', None)
        if not user_id:
            return ''

        user = User.by_id(user_id)
        if not user:
            return ''

        user.active = False
        DBSession.flush()
        return ''

    @require(CustomNotAnonymous())
    @expose('eiffel_back.templates.generic')
    def create(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        html = COMMON.get_user_form_html()
        javascript = """
        $('.save').click(function(e){
            e.preventDefault();
            var data = $('#form_user').serialize();
            $.post('/user/save_create_user?', data, function(data){
                if(data=='true'){
                    $.redirect('/all_admins');
                };
                return false;
            });
        });
        """
        return dict(title="Create Admin", html=html, javascript=javascript)

    @require(CustomNotAnonymous())
    @expose('eiffel_back.templates.generic')
    def edit(self, *args, **kwargs):
        user_id = kwargs.get('user_id', None)
        usernow = request.identity.get('user', {})
        this = User.by_id(user_id)
        if not this: redirect('/all_admins')
        html = COMMON.get_user_form_html(**{
            'id' : this.id if this.id else '',
            'name' : this.name if this.name else '',
            'email' : this.email if this.email else '',
            'surname' : this.surname if this.surname else '',
            'username' : this.username if this.username else '',
        })
        javascript = """
        $('.save').click(function(e){
            e.preventDefault();
            var data = $('#form_user').serialize();
            $.post('/user/save_edit_user?', data, function(data){
                if(data=='true'){
                    $.redirect('/all_admins');
                };
                return false;
            });
        });
        """
        return dict(title='Edit Admin', html=html, javascript=javascript)

    def get_form_input(self, width, label, label_id, value, input_type='text'):
        return f"""
        <div class="col-md-{width}">
            <div class="form-group">
                <label class="bmd-label-floating">{label}</label>
                <input id="{label_id}" name="{label_id}" type="{input_type}" class="form-control" value="{value}">
            </div>
        </div>
        """

    @expose()
    def save_edit_user(self, *args, **kwargs):
        this = User.by_id(kwargs.get('user_id', None))
        if not this: return 'false'
        this.username = kwargs.get('username', None)
        this.name = kwargs.get('name', None)
        this.surname = kwargs.get('surname', None)
        this.email = kwargs.get('email', None)
        this.identity_number = kwargs.get('identity_number', None)
        DBSession.flush()
        return 'true'

    @expose()
    def save_create_user(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        this = User()
        this.username = kwargs.get('username', None)
        this.name = kwargs.get('name', None)
        this.surname = kwargs.get('surname', None)
        this.email = kwargs.get('email', None)
        this.identity_number = kwargs.get('identity_number', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()

        kwargs['user_id'] = this.id
        result = self.send_magic_link(**kwargs)
        print(result)

        return 'true'

    @expose()
    def reset_password(self, *args, **kwargs):
        password = kwargs.get('password', None)
        if not password:
            return 'false'

        user_id = kwargs.get('user_id', None)
        if not user_id:
            return 'false'

        user = User.by_id(user_id)
        if not user:
            return 'false'

        user.password = password
        user.active = True
        DBSession.flush()
        return 'true'

    @expose()
    def create_magic_link(self, *args, **kwargs):
        user_id = kwargs.get('user_id', None)
        email = kwargs.get('email', None)
        if not user_id or not email:
            return False

        this = StudentGuid()
        this.student_id = user_id
        this.guid = self.get_guid()
        this.expires = datetime.now() + timedelta(hours = LINK_EXPIRY)
        this.added_by = user_id
        DBSession.add(this)
        DBSession.flush()
        domain = request.host_url
        return domain + "/reset/" + this.guid

    @expose()
    def send_magic_link(self, *args, **kwargs):
        user_id = kwargs.get('user_id', None)
        fail_message = "We could not process this request, please retype carefully and try again."
        if not user_id:
            return json.dumps({'success': 'false', 'message': fail_message, 'status': 'danger'})

        email = kwargs.get('email', None)
        magic_link = self.create_magic_link(**kwargs)
        if not magic_link:
            return json.dumps({'success': 'false', 'message': fail_message, 'status': 'danger'})

        e = EiffelBackEmailCreator()
        e.add_subject('Password Reset | Eiffel Corp')
        e.add_to_address(email)
        name = kwargs.get('name', '')
        plain_text = f"""
        Dear {name}, \n\n

        To reset your password, please copy the following link and paste it in your browser: {magic_link}<br/>
        """
        e.add_plain_text(plain_text)
        rich_text = f"""
        Dear {name};<br/><br/>
        To reset your password, please click on the the following link: <br/>
        <a href="{magic_link}">{magic_link}</a><br/>
        <p>If the link is not clickable, please copy and paste it into your browser.</p>
        """
        e.add_rich_text(rich_text)
        e.send(False)
        if not e:
            return json.dumps({'success': 'false', 'message': fail_message, 'status': 'danger'})
        return json.dumps({'success': 'true', 'message': f'Please check your "{email}" inbox for the magic link.', 'status':'success'})

    def get_guid(self, *args, **kwargs):
        guid = hashlib.md5(str(uuid.uuid4()).encode('utf-8')).hexdigest()
        exists = StudentGuid.by_attr_first('guid', guid)
        if exists:
            return self.get_guid()
        return guid

    @expose('eiffel_back.templates.generic')
    def reset(self, *args, **kwargs):
        print('reset')
        print('kwargs', kwargs)
        magicguid = kwargs.get('guid', None)
        if not magicguid:
            magicguid = StudentGuid.latest_entry().guid
            #redirect('/')

        guid = StudentGuid.by_attr_first('guid', magicguid)
        print(guid)
        if not guid:
            redirect('/')

        user = User.by_id(guid.student_id)
        if not user:
            redirect('/')

        html = COMMON.get_forgot_password_form(**kwargs)
        title = "Reset"
        return dict(title=title, html=html, javascript='')
