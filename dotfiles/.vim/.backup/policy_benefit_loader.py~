# -*- coding: utf-8 -*-
"""Policy Benefit Loader module"""

import logging

from tg import predicates, require, expose, request, redirect
from tg.i18n import ugettext as _
from tg.i18n import lazy_ugettext as l_

from rocket.model import *

from rocket.lib.tg_utils import *
from rocket.lib.base import BaseController
from rocket.lib.type_utils import TypeDictionary

from rocket.controllers.common import CommonController
from rocket.controllers.product import ProductController

from sqlalchemy import func, desc, asc, or_

LOGGER = logging.getLogger(__name__)

TYPEUTIL = TypeDictionary()
COMMON = CommonController()
DBQUERY_LIMIT = 15

POLICY_BENEFIT_ID = 1


class PolicyBenefitLoaderController(BaseController):

###############################################################################
# Policy Benefit Loader - List
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def loaders(self, *args, **kwargs):
        html = self.get_policy_benefits_loaders_html()
        javascript = self.get_javascript_policy_benefit_loaders_onload()
        title = _("Policy Benefit Loaders")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_policy_benefits_loaders_html(self, *args, **kwargs):
        outputlist = []
        dbase_query = DBSession.query(PolicyBenefitLoader). \
            filter(PolicyBenefitLoader.active == True). \
            filter(PolicyBenefitLoader.policy_benefit_id == POLICY_BENEFIT_ID). \
            limit(DBQUERY_LIMIT)
        for item in dbase_query:
            # Get the answer text
            loader_question_answer_id = item.loader_question_answer_id
            loader_question_answer = LoaderQuestionAnswer.by_id(loader_question_answer_id)
            loader_question_answer_text = loader_question_answer.answer_text

            # Get the question text
            loader_question_id = loader_question_answer.loader_question_id
            loader_question = LoaderQuestion.by_id(loader_question_id)
            loader_question_text = loader_question.text

            # Get the premium effect amount
            premium_effect_amount = item.premium_effect_amount

            outputlist.append({
                'question': f"<div class='edit loader_question_edit action_link' loader_question_id='{loader_question_id}' loader_question_text='{loader_question_text[:20]}' policy_benefit_loader_id='{item.id}' loader_answer_id='{loader_question_answer_id}'>{loader_question_text[:20]}</div>",
                'answer': loader_question_answer_text[:20],
                'premium_effect_amount': premium_effect_amount,
                'deactivate': f"<div class='policy_benefit_loader_deactivate' policy_benefit_loader_id='{item.id}'>Deactivate</div>"
            })
        dbcolumnlist = [
            'question',
            'answer',
            'premium_effect_amount',
            'deactivate',
        ]
        theadlist = [
            'Question',
            'Answer',
            'Premium Effect Amount',
            '',
        ]
        tdclasslist = [
            'action_link',
            '',
            '',
            'action_link text-right',
        ]
        htmltable = build_html_table(outputlist, dbcolumnlist, theadlist, "policy_benefit_loader_table", tdclasslist)
        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <div class="row d-flex">
                                <div class="col-md-6">
                                     <h4 class="card-title">{_('Policy Benefit Loaders')}</h4>
                                </div>
                                <div class="col-md-6 text-right">
                                    <button id="create_new_policy_benefit_loader" class="btn btn-primary policy_benefit_id='{POLICY_BENEFIT_ID}' ml-auto">Create New Policy Benefit Loader</button>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div id='div_policy_benefit_loader_table' class="table-responsive">
                                {htmltable}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_javascript_policy_benefit_loaders_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_policy_benefit_loader").click(function(){
            var policy_benefit_id = $(this).attr('policy_benefit_id');
            var kwargs = {'policy_benefit_id' : policy_benefit_id};
            $.redirect('/policy_benefit_loader/new', kwargs);
        });
        $('.loader_question_edit').click(function() {
            var loader_question_id = $(this).attr('loader_question_id');
            var loader_question_text = $(this).attr('loader_question_text');
            var policy_benefit_loader_id = $(this).attr('policy_benefit_loader_id');
            var loader_answer_id = $(this).attr('loader_answer_id');
            var kwargs = {'loader_question_id': loader_question_id,
                'loader_question_text': loader_question_text,
                'policy_benefit_loader_id': policy_benefit_loader_id,
                'loader_answer_id': loader_answer_id,
            };
            $.redirect('/policy_benefit_loader/edit', kwargs);
        });
        $('.policy_benefit_loader_deactivate').click(function() {
            var policy_benefit_loader_id = $(this).attr('policy_benefit_loader_id');
            var kwargs = {'policy_benefit_loader_id': policy_benefit_loader_id};
            $.post('/policy_benefit_loader/deactivate_policy_benefit_loader?', kwargs, function(data) {
                $.redirect('/policy_benefit_loader/loaders');
                return false;
            });
            return false;
        });
        """
        return javascript

    @expose()
    def deactivate_policy_benefit_loader(self, *args, **kwargs):
        policy_benefit_loader_id = kwargs.get('policy_benefit_loader_id', None)
        if not policy_benefit_loader_id:
            print("Could not find policy_benefit_loader_id to deactivate")
            return ''
        policy_benefit_loader = PolicyBenefitLoader.by_id(policy_benefit_loader_id)
        if not policy_benefit_loader:
            print("Could not find active policy_benefit_loader")
            return ''

        policy_benefit_loader.active = False
        DBSession.add(policy_benefit_loader)
        DBSession.flush()
        return ''

###############################################################################
# Policy Benefit Loader - Edit
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def edit(self, *args, **kwargs):
        html = self.get_edit_policy_benefit_loader_html(**kwargs)
        javascript = self.get_edit_policy_benefit_loader_javascript_onload()
        title = _("Edit Policy Benefit Loader")
        return dict(title=title, html=html, javascript=javascript)

    def get_edit_policy_benefit_loader_html(self, *args, **kwargs):
        loader_question_text = kwargs.get('loader_question_text', '')
        loader_question_id = kwargs.get('loader_question_id', None)
        if not loader_question_id:
            print("Could not find loader_question_id to edit")
            return ''
        loader_answer_id = kwargs.get('loader_answer_id', None)
        if not loader_answer_id:
            print("Could not find loader_answer_id to edit")
            return ''
        policy_benefit_loader_id = kwargs.get('policy_benefit_loader_id', None)
        if not policy_benefit_loader_id:
            print("Could not find policy_benefit_loader_id to edit")
            return ''
        policy_loader_answer_selectbox = self.policy_loader_answer_selectbox(
            **{'loader_question_id': loader_question_id,
               'loader_answer_id': loader_answer_id})

        html = f"""
                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <div class="row d-flex">
                                    <div class="col-md-6">
                                         <h4 class="card-title">Edit Policy Benefit Loader: {loader_question_text}</h4>
                                    </div>
                                    <div class="col-md-6 text-right">
                                        <button id="save_edit_policy_benefit_loader" class="btn btn-primary ml-auto" policy_benefit_loader_id='{policy_benefit_loader_id}'>Save Policy Benefit Loader</button>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <form id="form_edit_policy_benefit_loader">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group row">
                                                <label class="col-md-3 col-form-label" required>{_('Answer')}</label>
                                                <div class="col-md-9">
                                                    {policy_loader_answer_selectbox}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            """
        return html

    def get_edit_policy_benefit_loader_javascript_onload(self, *args, **kwargs):
        javascript = """
                        setFormValidation('#form_edit_policy_benefit_loader');
    
                        $('#save_edit_policy_benefit_loader').click(function(){
                            var policy_benefit_loader_id = $(this).attr('policy_benefit_loader_id');
                            var valid = FormIsValid('#form_edit_policy_benefit_loader');
                            if(valid) {
                                var formserial = $('#form_edit_policy_benefit_loader').serialize();
                                formserial += '&policy_benefit_loader_id='+policy_benefit_loader_id;
                                $.post('/policy_benefit_loader/add_to_db_edit_policy_benefit_loader?', formserial, function(data){
                                    $.redirect('/policy_benefit_loader/loaders');
                                    return false;
                                });
                            };
                        });
                    """
        return javascript

    @expose()
    def add_to_db_edit_policy_benefit_loader(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        print(kwargs)
        policy_benefit_loader_id = kwargs.get('policy_benefit_loader_id', None)
        if not policy_benefit_loader_id:
            print("Could not find policy_benefit_loader_id")
            return ''
        loader_answer_id = kwargs.get('loader_answer_id', None)
        if not loader_answer_id:
            print("No loader_answer_id")
            return ''

        policy_benefit_loader = PolicyBenefitLoader.by_id(policy_benefit_loader_id)
        policy_benefit_loader.loader_question_answer_id = loader_answer_id
        policy_benefit_loader.added_by = usernow.id

        DBSession.add(policy_benefit_loader)
        DBSession.flush()
        return ''

###############################################################################
# Policy Benefit Loader - New
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def new(self, *args, **kwargs):
        html = self.get_new_policy_benefit_loader_html(**kwargs)
        javascript = self.get_new_policy_benefit_loader_javascript_onload()
        title = _("New Policy Benefit Loader")
        return dict(title=title, html=html, javascript=javascript)

    def get_new_policy_benefit_loader_html(self, *args, **kwargs):
        policy_benefit = PolicyBenefit.by_id(POLICY_BENEFIT_ID)
        product_benefit_id = policy_benefit.product_benefit_id
        policy_loader_question_selectbox = self.policy_loader_question_selectbox(**{'product_benefit_id': product_benefit_id})
        html = f"""
                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <div class="row d-flex">
                                    <div class="col-md-6">
                                         <h4 class="card-title">{_('New Policy Benefit Loader')}</h4>
                                    </div>
                                    <div class="col-md-6 text-right">
                                        <button id="save_new_policy_benefit_loader" class="btn btn-primary ml-auto" policy_benefit_id='{POLICY_BENEFIT_ID}'>Save New Policy Benefit Loader</button>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <form id="form_new_policy_benefit_loader">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group row">
                                                <label class="col-md-3 col-form-label" required>{_('Question')}</label>
                                                <div class="col-md-9">
                                                    {policy_loader_question_selectbox}
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group row" id="div_loader_answer">
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            """
        return html

    def get_new_policy_benefit_loader_javascript_onload(self, *args, **kwargs):
        javascript = """
                    setFormValidation('#form_new_policy_benefit_loader');
                    
                    $('.selectpicker#loader_question_id').change(function() {
                        var loader_question_id = $(this).val();
                        var kwargs = {'loader_question_id': loader_question_id};
                        
                        $('#div_loader_answer').load('/policy_benefit_loader/get_policy_loader_answer_selectbox_html?', kwargs, function(data) {
                            return false;
                        });
                        return false;
                    });
                    
                    $('#save_new_policy_benefit_loader').click(function(){
                        var valid = FormIsValid('#form_new_policy_benefit_loader');
                        if(valid) {
                            var formserial = $('#form_new_policy_benefit_loader').serialize();
                            $.post('/policy_benefit_loader/add_to_db_new_policy_benefit_loader?', formserial, function(data){
                                $.redirect('/policy_benefit_loader/loaders');
                                return false;
                            });
                        };
                    });
                """
        return javascript

    @expose()
    def get_policy_loader_answer_selectbox_html(self, *args, **kwargs):
        loader_question_id = kwargs.get('loader_question_id')
        policy_loader_answer_selectbox = self.policy_loader_answer_selectbox(**{'loader_question_id': loader_question_id})
        html = f"""
            <label class="col-md-3 col-form-label" required>{_('Answer')}</label>
            <div class="col-md-9">
                {policy_loader_answer_selectbox}
            </div>
        """
        return html

    def policy_loader_question_selectbox(self, *args, **kwargs):
        product_benefit_id = kwargs.get('product_benefit_id', None)
        if not product_benefit_id:
            return ''
        loader_questions = BenefitLoaderLink.by_attr_all('benefit_id', product_benefit_id)
        # Don't want to answer the same loader twice
        list_of_current_loaders = self.get_list_of_current_loader_questions()
        outputdict = {}
        for question in loader_questions:
            if question.loader_question_id in list_of_current_loaders:
                continue
            loader_question_query = LoaderQuestion.by_id(question.loader_question_id)
            loader_question_text = loader_question_query.text[:20]
            outputdict.update({question.loader_question_id: loader_question_text})
        kwargs['required'] = True
        kwargs['outputdict'] = outputdict
        kwargs['id'] = 'loader_question_id'
        return create_selectbox_html(**kwargs)

    def get_list_of_current_loader_questions(self):
        loader_questions = []
        current_loaders_query = PolicyBenefitLoader.by_attr_all('policy_benefit_id', POLICY_BENEFIT_ID)
        for loader in current_loaders_query:
            loader_answer_id = loader.loader_question_answer_id
            loader_answer_query = LoaderQuestionAnswer.by_id(loader_answer_id)
            loader_question_id = loader_answer_query.loader_question_id
            loader_questions.append(loader_question_id)
        return list(set(loader_questions))

    def policy_loader_answer_selectbox(self, *args, **kwargs):
        print(kwargs)
        selected = kwargs.get('loader_answer_id', None)
        if selected:
            kwargs['selected'] = int(selected)
        loader_question_id = kwargs.get('loader_question_id', None)
        if not loader_question_id:
            return ''
        loader_answer = LoaderQuestionAnswer.by_attr_all('loader_question_id', loader_question_id)
        outputdict = {}
        for answer in loader_answer:
            loader_answer_query = LoaderQuestionAnswer.by_id(answer.id)
            loader_answer_text = loader_answer_query.answer_text[:20]
            outputdict.update({answer.id: loader_answer_text})
        kwargs['required'] = True
        kwargs['outputdict'] = outputdict
        kwargs['id'] = 'loader_answer_id'
        return create_selectbox_html(**kwargs)

    @expose()
    def add_to_db_new_policy_benefit_loader(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        loader_question_id = kwargs.get('loader_question_id', None)
        if not loader_question_id:
            print("No loader question id")
            return ''
        loader_answer_id = kwargs.get('loader_answer_id', None)
        if not loader_answer_id:
            print("No loader_answer_id")
            return ''
        premium_effect_amount = self.premium_effect_amount(loader_question_id=loader_question_id, loader_answer_id=loader_answer_id)
        if premium_effect_amount == 'fail':
            return ''

        policy_benefit_loader = PolicyBenefitLoader()
        policy_benefit_loader.policy_benefit_id = POLICY_BENEFIT_ID
        policy_benefit_loader.loader_question_answer_id = loader_answer_id
        policy_benefit_loader.premium_effect_amount = premium_effect_amount
        policy_benefit_loader.added_by = usernow.id

        DBSession.add(policy_benefit_loader)
        DBSession.flush()
        return ''

    def premium_effect_amount(self, loader_question_id, loader_answer_id):
        loader_question_query = LoaderQuestion.by_id(loader_question_id)
        loader_question_premium_effect_type_id = loader_question_query.loader_question_premium_effect_type_id
        loader_question_premium_effect_type = TYPEUTIL.get_name('loader_question_premium_effect_type', loader_question_premium_effect_type_id)
        print(loader_question_premium_effect_type)
        if loader_question_premium_effect_type == 'none':
            return 0
        elif loader_question_premium_effect_type == 'percentage':
            loader_question_answer_percentage = LoaderQuestionAnswerPercentage.by_attr_first('loader_question_answer_id', loader_answer_id)
            loader_question_answer_percentage = loader_question_answer_percentage.percentage
            """This will change once benefit premiums are farmed out to their own tables"""
            benefit_premium = PolicyBenefit.by_id(POLICY_BENEFIT_ID).premium
            return float(benefit_premium) * float(loader_question_answer_percentage)
        elif loader_question_premium_effect_type == 'amount':
            loader_question_answer_amount = LoaderQuestionAnswerAmount.by_attr_first('loader_question_answer_id', loader_answer_id)
            loader_question_answer_amount = loader_question_answer_amount.amount
            return float(loader_question_answer_amount)
        else:
            print("Could not determine loader_question_premium_effect_type")
            return 'fail'
