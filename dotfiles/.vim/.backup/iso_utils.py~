""" Create CurrencyCode, Language and Country from iso standards """
import iso639
import iso3166
import iso4217

def create_currencies(model=None, session_maker=None, exists_func=None):
    if not model or not session_maker or not exists_func: return False

    for i in iso4217.Currency:
        DBSession = session_maker()

        code = str(i.name.upper()).encode("latin-1", "replace").decode("latin-1")
        name = str(i.currency_name).encode("latin-1", "replace").decode("latin-1")

        active = False
        if code == 'ZAR':
            active = True

        exists = exists_func(db=session_maker(), value=code)
        if not exists:
            new = model()
            new.code = code
            new.name = name
            new.is_home_currency = active
            new.bln_active = active
            new.added_by = 1
            DBSession.add(new)
            DBSession.commit()
            #print('Bootstrapping', model, i.currency_name, active)

        DBSession.close()

def create_languages(model=None, session_maker=None, exists_func=None):
    if not model or not session_maker or not exists_func: return False
    LANGLIST = [(lang.get('name'), lang.get('iso639_2_b').upper()) for lang in iso639.data]
    ACTIVELIST = ['Afrikaans', 'Danish', 'English', 'Ndebele', 'Sepedi', 'Sesotho', 'Swati', 'Tsonga', 'Tswana', 'Unknown', 'Venda', 'Xhosa', 'isiZulu']
    for name, code in LANGLIST:
        DBSession = session_maker()

        name = str(name).encode("latin-1", "replace").decode("latin-1")
        code = str(code).encode("latin-1", "replace").decode("latin-1")

        active = False
        if str(name) in ACTIVELIST:
            active = True

        exists = exists_func(db=session_maker(), value=code)
        if not exists:
            new = model()
            new.code = code
            new.name = name
            new.bln_active = active
            new.added_by = 1
            DBSession.add(new)
            DBSession.commit()
            #print('Bootstrapping', model, name, active)

        DBSession.close()

def create_countries(Country=None, Region=None, session_maker=None, country_exists_func=None, region_exists_func=None):
    if not Country or not Region or not session_maker or not country_exists_func or not region_exists_func: return False
    REGION_LIST = ['Eastern Cape', 'Free State', 'Gauteng', 'Kwazulu-Natal', 'Limpopo', 'Mpumalanga', 'North West', 'Northern Cape', 'Western Cape', 'Tshwane']
    DBSession = session_maker()
    for country in iso3166.countries:
        DBSession = session_maker()

        name = country.name.encode("latin-1", "replace").decode("latin-1")
        code = country.alpha2.encode("latin-1", "replace").decode("latin-1")

        active = False
        if code == 'ZA':
            active = True

        exists = country_exists_func(db=session_maker(), value=code)
        if not exists:
            new = Country()
            new.code = code
            new.name = name
            new.bln_active = active
            new.added_by = 1
            DBSession.add(new)
            DBSession.commit()
            #print('Bootstrapping', Country, name, active)

            if active:
                for name in REGION_LIST:
                    exists = region_exists_func(db=session_maker(), value=name)
                    if not exists:
                        region = Region()
                        region.country_id = new.id
                        region.name = name
                        region.bln_active = True
                        region.added_by = 1
                        DBSession.add(region)
                        DBSession.commit()
                        #print('Bootstrapping', Region, region, active)

        DBSession.close()

def create_all(utilities_controller_dict=None):
    if not utilities_controller_dict: return False
    tables = utilities_controller_dict.get("tables")
    cruds = utilities_controller_dict.get("cruds")
    db = utilities_controller_dict.get("db")
    session_maker = db.get("session_maker")

    Country = tables.get("Country")
    country_cruds = cruds.get("country")
    country_exists_func = country_cruds.get("get_first_country_where_code")

    Region = tables.get("Region")
    region_cruds = cruds.get("region")
    region_exists_func = region_cruds.get("get_first_region_where_name")

    create_countries(Country, Region, session_maker, country_exists_func, region_exists_func)

    Language = tables.get("Language")
    language_cruds = cruds.get("language")
    language_exists_func = language_cruds.get("get_first_language_where_code")
    create_languages(Language, session_maker, language_exists_func)

    Currency = tables.get("Currency")
    currency_cruds = cruds.get("currency")
    currency_exists_func = currency_cruds.get("get_first_currency_where_code")
    create_currencies(Currency, session_maker, currency_exists_func)
    return True
