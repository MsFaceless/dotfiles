# -*- coding: utf-8 -*-
"""Device controller module"""
from tg import predicates

import math
import string
from webob.static import FileApp
from tg import expose, require, redirect, validate, flash, url, request, response, predicates, use_wsgi_app
from pkg_resources import resource_filename

from calmerchant_app.model import *

from sqlalchemy import or_, desc
from datetime import timedelta

from calmerchant_app.lib.base import BaseController
from calmerchant_app.lib.tg_utils import *
from calmerchant_app.lib.tg_decorators import time_it, CustomNotAnonymous
from calmerchant_app.lib.gateway_utils import *
from calmerchant_app.lib.csv_creator import CsvWriter
from calmerchant_app.lib.xlsx_creator import ExcelWriter

from calmerchant_app.controllers.common import CommonController

COMMON = CommonController()
DAYSDIFF = 30

FILENAME = os.path.abspath(resource_filename('calmerchant_app', 'public'))
PUBLIC_DIRNAME = os.path.join(FILENAME)
PDF_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'pdf')

REPORT_PAGE_SIZE = 100000

class TransactionController(BaseController):

    @require(CustomNotAnonymous())
    @expose('calmerchant_app.templates.generic')
    def index(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        print()
        print(usernow, usernow.myimali_username)
        print()

        toolbar = self.get_transaction_search_toolbar()
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card ">
                    <div class="card-header">
                        <h4 class="card-title">My Transactions</h4>
                        {toolbar}
                    </div>
                    <div id="transactionDiv" class="card-body">
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        $('#transactionDiv').load('/transaction/get_transaction_table', function(){
            return false;
        });
        """
        return dict(title="Transactions | Calabash", html=html, javascript=javascript)

    def get_selectbox_transaction_type(self, *args, **kwargs):
        usernow = request.identity.get('user', {})

        dbase_query = []
        result = get_transaction_type_list(usernow.myimali_username)
        success = result.get('success', False)
        if success:
            dbase_query = result.get('data', [])

        outputlist = []
        for name in dbase_query:
            display_name = name.title()

            if display_name == 'Commission':
                display_name = 'Service Fees'

            if display_name == 'Purchase':
                display_name = 'Sales'

            outputlist.append({
                'id': name,
                'name': display_name,
            })
        kwargs['id'] = 'tranType'
        kwargs['case_sensitive'] = True
        kwargs['outputlist'] = outputlist
        kwargs['empty_message'] = 'All transactions'
        return create_selectbox_html(**kwargs)

    @expose()
    def get_transaction_search_toolbar(self, *args, **kwargs):
        tran_type_select = self.get_selectbox_transaction_type()
        to_date = datetime.now()
        from_date = datetime.now() - timedelta(days=DAYSDIFF)
        html = f"""
        <div class="row px-3">
            <div class="ml-auto col-md-3">
                <label>From date:</label>
                <input id="startDate" type="text" class="form-control datepicker" value="{from_date}">
            </div>
            <div class="col-md-3">
                <label>To date:</label>
                <input id="endDate" type="text" class="form-control datepicker" value="{to_date}">
            </div>
            <div class="col-md-3">
                <label>&nbsp;</label>
                {tran_type_select}
            </div>
            <div class="col-md-3">
                <label>&nbsp;</label>
                <input id="searchPhrase" type="text" class="form-control" placeholder="Search Trx or details..."/>
            </div>
        </div>
        <div class="row px-3">
            <div class="col-md-12 text-right">
                <button id="btnSearch" class="btn btn-sm btn-info ml-2">Search</button>
                <button id="btnReset" class="btn btn-sm btn-info ml-2">Reset</button>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-sm btn-info ml-2 dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Download Report
                    </button>
                    <div class="dropdown-menu" aria-labelledby="btnGrDownload">
                        <span class="dropdown-item btnDownload" data-type="xlsx">Download Excel</span>
                        <span class="dropdown-item btnDownload" data-type="csv">Download CSV</span>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
        $(document).ready(function(){
            createDatepicker('#startDate');
            createDatepicker('#endDate');
            var startDate = $('#startDate');
            var endDate = $('#endDate');
            var transactionDiv = $('#transactionDiv');
            var tranType = $('#tranType');
            var searchPhrase = $('#searchPhrase');
            $(tranType).on('change', function(){
                var kwargs = {
                    'transaction_type': $(tranType).val(),
                    'search_phrase': $(searchPhrase).val(),
                    'from_date': $(startDate).val(),
                    'to_date': $(endDate).val(),
                    'page': 1,
                }
                $(transactionDiv).load('/transaction/get_transaction_table', kwargs, function(data){
                    return 'false';
                });
            });
            $('#btnSearch').click(function(){
                var kwargs = {
                    'transaction_type': $(tranType).val(),
                    'search_phrase': $(searchPhrase).val(),
                    'from_date': $(startDate).val(),
                    'to_date': $(endDate).val(),
                    'page': 1,
                }
                $(transactionDiv).load('/transaction/get_transaction_table', kwargs, function(data){
                    return 'false';
                });
            });

            $('.btnDownload').click(function(e){
                e.stopPropagation();
                var kwargs = 'transaction_type=' + $(tranType).val()
                kwargs += '&search_phrase=' + $(searchPhrase).val()
                kwargs += '&from_date=' + $(startDate).val()
                kwargs += '&to_date=' + $(endDate).val()
                kwargs += '&type=' + $(this).data('type')
                var href_with_formserial = '/transaction/download_transactions?'+ kwargs
                $.get(href_with_formserial, function(data){
                    window.location = href_with_formserial;
                    return false;
                });
                return false;
            });
            $('#btnReset').click(function(){
                $.redirect('/transaction');
            });
        });
        </script>
        """
        return html + javascript

    @expose()
    def download_transactions(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        file_type = kwargs.get('type', 'xlsx')
        datename = str(datetime.now()).split(' ')[0]
        filename = f"Transactions {datename}.{file_type}"
        filepath = os.path.join(PDF_DIRNAME, filename)
        ensure_dir(filepath)

        kwargs['username'] = usernow.myimali_username
        kwargs['page_size'] = REPORT_PAGE_SIZE

        page = self.get_gateway_transaction_dbase_query(**kwargs)

        outputlist = []
        for item in page.pop('items', []):

            details = item.get('other', '')
            transaction_type = item.get('type', '')
            if transaction_type == 'commission':
                details = 'Service Fees'
            if transaction_type == 'refund':
                details = 'Refund'

            amount = str_to_int(item.get('amount', 0))
            item_id = item.get('id', None)

            outputlist.append({
                'trx_id': item.get('TrxId', ''),
                'details': details,
                'reference': item.get('paymentReference', ''),
                'date': item.get('datetime', ''),
                'amount': get_currency_by_locale(amount),
            })

        theadlist=[
            'Trx Id',
            'Details',
            'Reference',
            'Date',
            'Amount',
        ]

        writer_payload = {
                'filepath': filepath,
                'headers': theadlist,
                'records': outputlist,
                }
        if file_type == 'xlsx':
            writer = ExcelWriter(**writer_payload)
            success = writer.generate_file()
            response.headers["Content-Type"] = 'application/vnd.ms-excel'
        if file_type == 'csv':
            writer = CsvWriter(**writer_payload)
            success = writer.generate_file()
            response.headers["Content-Type"] = 'text/csv'

        response.headers["Content-Disposition"] = 'attachment; filename="' + filename + '"'
        filecontent = FileApp(filepath)
        return use_wsgi_app(filecontent)

    def get_gateway_transaction_dbase_query(self, *args, **kwargs):

        page = get_paginated_transaction_history(kwargs)
        if not page.get('success'):
            return None

        data = page.get('data', None)
        if not data:
            return None

        return data

    @expose()
    def get_transaction_table(self, *args, **kwargs):
        usernow = request.identity.get('user', {})

        kwargs['username'] = usernow.myimali_username
        page = self.get_gateway_transaction_dbase_query(**kwargs)
        if not page:
            return ''
        outputlist = []
        for item in page.pop('items', []):

            item_id = item.get('id', None)
            details = item.get('other', '')
            transaction_type = item.get('type', '')
            amount = str_to_int(item.get('amount', 0))

            if transaction_type == 'commission':
                details = f'{details} - Service Fees'

            if transaction_type == 'refund':
                details = f'{details} - Refund'

            outputlist.append({
                'transaction_id': item.get('TrxId', ''),
                'details': details,
                'reference': item.get('paymentReference', ''),
                'datetime': item.get('datetime', ''),
                'amount': get_currency_by_locale(amount),
                'actions': f'<div data-transaction-id="{item_id}" class="btn btn-sm btn-info transactionSelect">VIEW</div>'
            })
        dbcolumnlist=[
            'transaction_id',
            'details',
            'reference',
            'datetime',
            'amount',
            'actions',
        ]
        theadlist=[
            'Trx ID',
            'Details',
            'Reference',
            'Date',
            'Amount',
            'Actions',
        ]
        tdclasslist = [
            '',
            '',
            '',
            '',
            'text-right',
            'w-10p text-center',
        ]

        html_table = build_html_table(outputlist, dbcolumnlist, theadlist, 'transaction_table', tdclasslist)
        
        if not outputlist:
            return html_table

        current_page = page.get('current_page', 1)
        total_pages = page.get('pages', 1)
        pagination = f"""
            <div class="row mt-4">
                <ul id="pagination" class="pagination ml-auto" data-current-page="{current_page}" data-total-pages="{total_pages}"></ul>
            </div>
        """
        javascript = """
        <script>
            var pagination = $('#pagination');

            var kwargs = {
                'transaction_type': $('#tranType').val(),
                'search_phrase': $('#searchPhrase').val(),
                'from_date': $('#startDate').val(),
                'to_date': $('#endDate').val(),
                'page': 1,
            }

            pagination.twbsPagination({
                totalPages: $(pagination).data('totalPages'),
                initiateStartPageClick:false,
                hideOnlyOnePage:true,
                startPage: $(pagination).data('currentPage'),
                first: '',
                last: '',
                onPageClick: function (event, page) {
                    kwargs['page'] = page;
                    $('#transactionDiv').load('/transaction/get_transaction_table', kwargs);
                    return false;
                }
            });

            $('.transactionSelect').click(function(){
                var kwargs = {
                    'transaction_id': $(this).data('transactionId'),
                }
                console.log('kwargs', kwargs);
                $.redirect('/transaction/view', kwargs);
            });
        </script>
        """        
        return html_table + pagination + javascript

    def get_refund_button(self, transaction=None, *args, **kwargs):
        if not transaction:
            print('no transaction')
            return ''

        transaction_type = transaction.get('type', None)
        if transaction_type =='commission':
            print('type is commission')
            return ''

        TrxId = transaction.get('TrxId', None)
        refund_options = get_transaction_refund_options(TrxId)
        if not refund_options:
            print('not refund options')
            return ''

        refund_options_success = refund_options.get('success', False)
        if not refund_options_success:
            print('not refund_options_success')
            return ''

        refund_options_data = refund_options.get('data', {})
        refund_options_data_success = refund_options_data.get('success', False)
        if not refund_options_data_success:
            print('not refund_options_data_success')
            return ''

        refund_amount = int(refund_options_data.get('TotalRefundable', 0)) / 100
        if refund_amount <= 0:
            print('refund_amount <= 0')
            return ''

        transaction_id = transaction.get('id', None)
        coupon_type = refund_options_data.get('RefundType', None)
        html = f"""
        <button id='btnRefund' transaction_id='{transaction_id}' TrxId='{TrxId}'
                coupon_type='{coupon_type}' refund_amount='{refund_amount}'
                class='btn btn-danger ml-auto mr-3'>
                    Refund
        </button>"""
        return html

    @require(CustomNotAnonymous())
    @expose('calmerchant_app.templates.generic')
    def view(self, *args, **kwargs):
        transaction_id = kwargs.get('transaction_id', None)
        if not transaction_id:
            flash('No Transaction selected.', 'danger')
            redirect('/transaction')

        result = get_transaction_by_id(transaction_id)
        success = result.get('success', False)
        if not success:
            flash('The transaction you are trying to view was not found.')
            redirect('/transaction')

        transaction = result.get('data', {})
        transaction_form = self.get_transaction_form(**{'transaction': transaction})
        refund_btn = self.get_refund_button(transaction)
        html=f"""
            <div class="row">
                <div class="col-md-6">
                    <div class="card ">
                        <div class="card-header d-flex align-items-center">
                            <div class="col-md-6">
                                <h4 id="deviceHeader" class="card-title">Show Transaction</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="btnBack" class="btn btn-info">Back to Transaction List</button>
                            </div>
                        </div>
                        <div class="card-body ">
                            {transaction_form}
                            <div class="row">
                                {refund_btn}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id='div_refund_form'>
            </div>
        """
        javascript = """
        $('#btnBack, #btnCancel').click(function () {
            $.redirect('/transaction');
        });
        $('#btnRefund').click(function () {
            var kwargs = 'TrxId='+$(this).attr('TrxId');
            kwargs += '&refund_amount='+$(this).attr('refund_amount');
            kwargs += '&transaction_id='+$(this).attr('transaction_id');
            kwargs += '&coupon_type='+$(this).attr('coupon_type');
            $('#div_refund_form').load('/transaction/get_refund_form', kwargs, function(data){
                return 'false';
            });
        });
        """
        return dict(title="Show Transaction | Calabash", html=html, javascript=javascript)

    @expose()
    def get_refund_form(self, *args, **kwargs):
        if not request.identity:
            return ''
        usernow = request.identity.get('user', {})

        transaction_id = kwargs.get('transaction_id', None)
        coupon_type = kwargs.get('coupon_type', None)
        TrxId = kwargs.get('TrxId', None)

        refund_amount = float(kwargs.get('refund_amount', 0))

        refund_display = get_currency_by_locale(refund_amount, cents=False)

        refund_amount = format(refund_amount, '.2f')

        name_dict = {
        'input_wrapper_class': 'row col-md-6',
        'input_id': 'refund_amount',
        'label_val': f'Amount (max {refund_display})',
        'input_attrs': f'max="{refund_amount}" step="0.01" required',
        'input_val': f'value="{refund_amount}"',
        'input_type': 'number',
        }
        reference_dict = {
        'input_wrapper_class': 'row col-md-6',
        'input_id': 'reference',
        'label_val': f'Reference',
        'input_type': 'text',
        }
        params_list = [
            name_dict,
            reference_dict,
        ]
        form = build_html_form('refund_form', params_list)
        html=f"""
        <div class="row">
            <div class="col-md-6">
                <div class="card ">
                    <div class="card-header d-flex align-items-center">
                        <div class="col-md-6">
                            <h4 id="deviceHeader" class="card-title">Refund (max {refund_display})</h4>
                        </div>
                        <div class="col-md-6 text-right">
                        </div>
                    </div>
                    <div class="card-body ">
                        {form}
                        <div class="col-md-12 text-right">
                            <button id="btnRefundTransaction" username='{usernow.myimali_username}' coupon_type='{coupon_type}' transaction_id='{transaction_id}' class="btn btn-danger">Submit</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
            var refundForm = $('#refund_form');
            setFormValidation(refundForm);
            $('#btnRefundTransaction').click(function(){
                var valid = FormIsValid(refundForm);
                if (valid){
                    Swal.fire({
                        title: 'Are you sure?',
                        text: "You won't be able to revert this!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#41b853',
                        cancelButtonColor: '#ff1a6e',
                        confirmButtonText: 'Yes, Refund!'
                    }).then((result) => {
                        if (result.value) {
                            $('#dialogdiv').load('/processing_dialog');
                            var kwargs = {
                                'transaction_id': $(this).attr('transaction_id'),
                                'coupon_type': $(this).attr('coupon_type'),
                                'amount': $('#refund_amount').val(),
                                'max_amount': $('#refund_amount').attr('max'),
                                'reference': $('#reference').val(),
                            };
                            console.log(kwargs);
                            $.post('/transaction/get_user_merchant_refund?', kwargs, function(data){
                                var result = JSON.parse(data);
                                if(result.success === 'true'){

                                    $(document).trigger('modalClose');
                                    Swal.fire(
                                        'Refunded!',
                                        'This transaction has been refunded.',
                                        'success'
                                    ).then((result) => {
                                        $.redirect('/transaction');
                                    });
                                    return false;

                                };
                                return false;
                            });
                        }
                    });
                };
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_user_merchant_refund(self, *args, **kwargs):
        transaction_id = kwargs.get('transaction_id', None)
        if not transaction_id:
            print('no id return')
            return json.dumps({'success': 'false'})

        result = get_transaction_by_id(transaction_id)
        success = result.get('success', False)
        if not success:
            print('could not find transaction')
            return json.dumps({'success': 'false'})

        transaction = result.get('data', {})
        if not transaction:
            print('no trx return')
            return json.dumps({'success': 'false'})

        amount = float(kwargs.get('amount', 0))
        max_amount = float(kwargs.get('max_amount', 0))
        if amount > max_amount:
            return json.dumps({'success': 'false',
                'message': 'Refund amount cannot be larger than the maximum refund amount.', 'status': 'danger'})

        refund_amount = float(amount) * 100
        refund_amount = int(refund_amount)

        other = transaction.get('other', None)
        TrxId = transaction.get('TrxId', None)
        username = transaction.get('username', None)
        coupon_type = kwargs.get('coupon_type', None)

        reference = kwargs.get('reference', None)
        if not reference:
            reference = f'Refund of {refund_amount} from {username} to {other}'

        kwargs = {
            'merchant_username' : username,
            'refund_username' : other,
            'transaction_id' : TrxId,
            'amount' : refund_amount,
            'coupon_type' : coupon_type,
            'reference' : reference,
        }
        result = refund_user_from_merchant(kwargs)
        success = result.get('success', False)
        if success:
            return json.dumps({'success': 'true'})
        return json.dumps({'success': 'false'})

    @expose()
    def get_transaction_form(self, *args, **kwargs):
        transaction = kwargs.get('transaction', None)

        transaction_type = transaction.get('type', '').title()
        if transaction_type == 'Commission':
            transaction_type = 'Service Fees'

        type_dict = {
            'wrapper_class': 'row col-md-12',
            'label_val': 'Type',
            'input_type': 'custom',
            'input_field': f'<div class="ml-2">{transaction_type}</div>'
        }

        transaction_date = transaction.get('date', None)
        transaction_date = str_to_date(transaction_date, '%Y%m%d').date()
        date_dict = {
            'wrapper_class': 'row col-md-12',
            'label_val': 'Date',
            'input_type': 'custom',
            'input_field': f'<div class="ml-2">{transaction_date}</div>'
        }

        transaction_time = transaction.get('time', None)
        time_dict = {
            'wrapper_class': 'row col-md-12',
            'label_val': 'Time',
            'input_type': 'custom',
            'input_field': f'<div class="ml-2">{transaction_time}</div>'
        }

        amount = transaction.get('amount', None)
        this_amount = get_currency_by_locale(amount)
        amount_dict = {
            'wrapper_class': 'row col-md-12',
            'label_val': 'Amount',
            'input_type': 'custom',
            'input_field': f'<div class="ml-2">{this_amount}</div>'
        }

        balance = transaction.get('balance', None)
        balance = get_currency_by_locale(balance)
        balance_dict = {
            'wrapper_class': 'row col-md-12',
            'label_val': 'Balance',
            'input_type': 'custom',
            'input_field': f'<div class="ml-2">{balance}</div>'
        }

        params_list = [
            type_dict,
            date_dict,
            time_dict,
            amount_dict,
            balance_dict,
        ]

        transaction_id = transaction.get('id', None)
        if transaction:
            device_id_dict = {
                'input_id': 'id',
                'input_type': 'hidden',
                'input_val': f'value="{transaction_id}"'
                }
            params_list.append(device_id_dict)

        return build_html_form('transaction_form', params_list)

    @expose()
    def save_device(self, *args, **kwargs):
        return json.dumps({'success': 'false', 'message': 'Do not save anything', 'status': 'danger'})
