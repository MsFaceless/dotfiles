# -*- coding: utf-8 -*-
"""Payment controller module"""
from tg import predicates

import string
# from tg.i18n import ugettext as _
# from tg import predicates
from tg import expose, require, redirect, validate, flash, url, request, response, predicates

from calmerchant_app.model import *

from calmerchant_app.lib.base import BaseController
from calmerchant_app.controllers.common import CommonController
from calmerchant_app.lib.tg_utils import *
from calmerchant_app.lib.tg_decorators import time_it, CustomNotAnonymous
from sqlalchemy import desc
from calmerchant_app.lib.gateway_utils import *

COMMON = CommonController()

class PaymentController(BaseController):

    @require(CustomNotAnonymous())
    @expose('calmerchant_app.templates.generic')
    def index(self, *args, **kwargs):
        return redirect('/payment/payout')
        COMMON.sync_beneficiaries()
        COMMON.sync_merchant_sales_roles()
        beneficiary_table = self.get_beneficiary_htmltbl()
        agent_table = self.get_agent_htmltbl()
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h4>Payments</h4>
                    </div>
                    <div class="card-body pt-0">
                        <div class="nav-tabs-navigation mb-1">
                            <div class="nav-tabs-wrapper">
                                <ul id="tabs" class="nav nav-tabs" role="tablist">
                                    <li class="nav-item">
                                        <a class="nav-link active" data-toggle="tab" href="#payment" role="tab" aria-expanded="true">Pay Beneficiaries</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" data-toggle="tab" href="#payAgents" role="tab" aria-expanded="false">Pay Agents</a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <div id="paymentsContent" class="tab-content">
                            <div class="tab-pane active" id="payment" role="tabpanel" aria-expanded="true">
                                <div id="paymentDiv" class="mt-3">
                                    {beneficiary_table}
                                </div>
                                <div class="row d-flex align-items-center">
                                    <div class="ml-auto">Total Amount: <span id="totalAmount" class="font-weight-bold">R 0.00</span></div>
                                    <button id="btnPayBeneficiaries" class="btn btn-info mx-3">Make Payment</button>
                                </div>
                            </div>
                            <div class="tab-pane" id="payAgents" role="tabpanel" aria-expanded="false">
                                <div id="payAgentsDiv" class="mt-3">
                                    <div class="row text-left">
                                        <div class="col-md-12">
                                            {agent_table}
                                            <div class="row">
                                                <button id="btnPayAgents" class="btn btn-info ml-auto">Make Payment</button>
                                                <button class="btn btn-info ml-1 mr-3 btnCancel">Cancel</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        var payment_form = $('#payment_form');
        setFormValidation(payment_form);
        $('#btnPay').click(function(){
            var valid = FormIsValid(payment_form);
            if(valid){
                var formserial = getFormData(payment_form);
                $.post('/payment/pay_beneficiary', formserial, function(data){
                    var result = JSON.parse(data);
                    showNotification(result.status, result.message);
                    if(result.success === 'true'){
                        $.redirect('/payment');
                    };
                    return false;
                });
            }
        });
        $('.btnCancel').click(function(){
            $.redirect('/');
        })
        $('#btnPayAgents').click(function(){
            var dataList = [];
            $('.paymentAmt').each(function(i){
                var thisItem = {
                    'agent': $(this).attr('agent'),
                    'amount': $(this).val(),
                };
                dataList.push(thisItem);
            });
            var kwargs = {data: JSON.stringify(dataList)};
            $.post('/payment/pay_multiple_agents', kwargs, function(){
                return false;
            });
        });
        var totalAmount = 0.00;
        $('.beneficiaryAmt').change(function(){
            totalAmount = 0
            $('.beneficiaryAmt').each(function(n){
                if($(this).val() !== 0 && $(this).val() !== ''){
                    totalAmount = totalAmount + parseFloat($(this).val());
                }
                var displayAmount = (totalAmount.toFixed(2)).toString();
                $('#totalAmount').html('R ' + displayAmount);
                return 'false';
            });
        });
        $('#btnPayBeneficiaries').click(function(){
            var dataList = [];
            $('.beneficiary_row').each(function(i){
                var beneficiaryAmt = $(this).find('.beneficiaryAmt');
                var paymentRef = $(this).find('.paymentRef');
                var thisItem = {
                    'beneficiary_id': $(beneficiaryAmt).attr('beneficiary_id'),
                    'amount': $(beneficiaryAmt).val(),
                    'payment_ref': $(paymentRef).val(),
                };
                dataList.push(thisItem);
            });
            var kwargs = {data: JSON.stringify(dataList)};
            $.post('/payment/pay_beneficiaries', kwargs, function(){
                return false;
            });
        });
        """
        return dict(title="Payments | Calabash", html=html, javascript=javascript)

    @expose()
    def pay_multiple_agents(self, *args, **kwargs):
        data_list = json.loads(kwargs.get('data', json.dumps({})))
        if not data_list:
            print('DEBUG: NO values in list')
            return json.dumps({'success': 'false', 'message': 'You need to have Agents to make a bulk payment.', 'status': 'danger'})

        for item in data_list:
            agent_id = item.get('agent', None)
            if not agent_id:
                continue
            agent = DBSession.query(User). \
                filter(User.user_id == agent_id). \
                order_by(desc(User.user_id)). \
                first()
            if not agent:
                print('DEBUG: NO agent found for agent_id provided')
                return json.dumps({'success': 'false', 'message': 'Something went wrong, please try again.', 'status': 'danger'})

            amount = item.get('amount', None)
            if not amount:
                continue
        return json.dumps({'success': 'true'})

    @expose()
    def pay_beneficiaries(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        data_list = json.loads(kwargs.get('data', []))
        if not data_list:
            print('DEBUG: NO payment list received')
            return json.dumps({'success': 'false', 'message': 'Please add a beneficiary before making a payment', 'status': 'danger'})
        for item in data_list:
            amount = str_to_float(item.get('amount', None))
            if not amount:
                continue
            amount = int(amount*100)
            beneficiary_id = item.get('beneficiary_id', None)
            if not beneficiary_id:
                print('DEBUG: NO beneficiary_id present')
                return json.dumps({'success': 'false', 'message': 'Please select a beneficiary before making payment', 'status': 'danger'})
            recipient = Beneficiary.by_id(beneficiary_id)
            if not recipient:
                print('DEBUG: NO Beneficiary record from beneficiary ID provided')
                return json.dumps({'success': 'false', 'message': f'Could not find the beneficiary for id "{beneficiary_id}" provided', 'status': 'danger'})
            payment_ref = item.get('payment_ref', None)
            if not payment_ref:
                print('DEBUG: NO payment reference in kwargs')
                return json.dumps({'success': 'false', 'message': 'Please ensure that all payment references are supplied.', 'status': 'danger'})
            result = make_user_transfer(usernow.myimali_username, recipient.username, amount, payment_ref)
            # NOTE --> result = {'success': False, 'data': 'Both Users must be customers'}

        return json.dumps({'success': True})

    @expose()
    def get_payment_form(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        merchant_balance = get_balance_by_username(usernow.myimali_username)
        available_balance = 'R0.00'
        if merchant_balance:
            available_balance = get_currency_by_locale(float(merchant_balance))
        from_dict = {
            'wrapper_class': 'row col-md-12',
            'input_id': 'from',
            'label_val': 'From Account',
            'input_type': 'custom',
            'input_field': f'<div>Main Wallet (Bal: {available_balance})</div>'
        }
        select_to_account = {
            'wrapper_class': 'row col-md-12',
            'label_attrs': 'required',
            'label_val': 'To Beneficiary',
            'input_type': 'custom',
            'input_field': self.get_selectbox_to_beneficiary(**{'id': 'beneficiary_id', 'required': True})
        }
        amount_dict = {
            'wrapper_class': 'row col-md-12',
            'label_attrs': 'required',
            'input_id': 'amount',
            'label_val': 'Payment Amount',
            'input_attrs': 'required',
            'input_val': ''
        }
        params_list = [
        from_dict,
        select_to_account,
        amount_dict,
        ]
        return build_html_form('payment_form', params_list)

    def get_selectbox_to_beneficiary(self, *args, **kwargs):
        dbase_query = DBSession.query(Beneficiary).filter(Beneficiary.active).order_by(Beneficiary.name.asc()).all()
        kwargs['case_sensitive'] = True
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.id} for m in dbase_query]
        return create_selectbox_html(**kwargs)

    @expose()
    def get_payment_history(self, *args, **kwargs):
        beneficiary_id = kwargs.get('beneficiary_id', None)
        beneficiary = Beneficiary.by_id(beneficiary_id)
        transaction_history = []
        if beneficiary:
            transaction_history = DBSession.query(TransactionHistory). \
                filter(TransactionHistory.is_negative == False). \
                filter(TransactionHistory.myimali_username == beneficiary.username). \
                order_by(TransactionHistory.datetime.desc()). \
                all()
        outputlist = []
        for item in transaction_history:
            outputlist.append({
                'date': item.date,
                'amount': item.amount,
                })
        dbcolumnlist=[
                'date',
                'amount',
                ]
        theadlist=[
                'Date Paid',
                'Amount',
                ]
        tdclasslist = [
                '',
                'text-right',
                ]
        table_options = """
        <script>
		$('#payment_history_table').DataTable({
			"pagingType": "full_numbers",
			"lengthMenu": [[10, 25, 50, -1], [10, 25, 50, 'All']],
			"dom": "<'toolbar'f>" +
				"<'row'<'col-md-12't>>" +
				"<'row'<'col-md-6 d-flex'<'mt-1'l><'ml-2'i>><'col-md-6'p>>",
			responsive: true,
			language: {
				search: "_INPUT_",
				searchPlaceholder: "Search records",
				infoEmpty: "",
                emptyTable: "No transactions to show...",
			}
		});
        </script>
        """
        return build_html_datatable(outputlist, dbcolumnlist, theadlist, "payment_history_table", tdclasslist) + table_options

    @expose()
    def pay_beneficiary(self, *args, **kwargs):
        return json.dumps({'success': 'true'})

    @expose()
    def get_agent_htmltbl(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        dbase_query = DBSession.query(UserMerchantAgentLink). \
            filter(UserMerchantAgentLink.user_id_merchant == usernow.user_id). \
            filter(UserMerchantAgentLink.active == True). \
            all()
        outputlist = []
        for item in dbase_query:
            agent = DBSession.query(User). \
                filter(User.user_id == item.user_id_agent). \
                first()
            outputlist.append({
                'name': agent.display_name,
                'reference': agent.myimali_reference,
                'amount': f'<input type="text" agent="{agent.user_id}" class="form-control paymentAmt" name="amount">',
                'last_payment_date': '',
                'last_payment_amount': '',
                })
        dbcolumnlist=[
                'name',
                'reference',
                'amount',
                'last_payment_date',
                'last_payment_amount',
                ]
        theadlist=[
                'Agent Name',
                'Reference',
                'Amount',
                'Date Paid',
                'Last Amount',
                ]
        tdclasslist = [
                '',
                '',
                'w-15p',
                '',
                'text-right',
                ]
        table_options = """
        <script>
		$('#agent_table').DataTable({
			"pagingType": "full_numbers",
			"lengthMenu": [[10, 25, 50, -1], [10, 25, 50, 'All']],
			"dom": "<'toolbar'f>" +
				"<'row'<'col-md-12't>>" +
				"<'row'<'col-md-6 d-flex'<'mt-1'l><'ml-2'i>><'col-md-6'p>>",
			responsive: true,
			language: {
				search: "_INPUT_",
				searchPlaceholder: "Search records",
				infoEmpty: "",
                emptyTable: "No agents to show...",
			}
		});
        </script>
        """
        return build_html_datatable(outputlist, dbcolumnlist, theadlist, "agent_table", tdclasslist) + table_options

    @expose()
    def get_beneficiary_htmltbl(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        dbase_query = DBSession.query(Beneficiary). \
            filter(Beneficiary.active == True). \
            filter(Beneficiary.beneficiary_type_id == COMMON.get_beneficiary_type_id('calabash')). \
            all()
        outputlist = []
        for item in dbase_query:
            last_payment = DBSession.query(TransactionHistory). \
                filter(TransactionHistory.other == item.username). \
                order_by(TransactionHistory.date.desc()). \
                first()
            outputlist.append({
                'name': item.name,
                'reference': item.reference,
                'amount': f'<input type="text" beneficiary_id="{item.id}" class="form-control beneficiaryAmt" placeholder="0.00">',
                'pmt_ref': f'<input type="text" class="form-control paymentRef" placeholder="Payment Reference">',
                'last_payment_date': last_payment.date if last_payment else '',
                'last_payment_amount': get_currency_by_locale(last_payment.amount) if last_payment else '',
                })
        dbcolumnlist=[
                'name',
                'reference',
                'amount',
                'pmt_ref',
                'last_payment_date',
                'last_payment_amount',
                ]
        theadlist=[
                'Agent Name',
                'Reference',
                'Amount',
                'Payment Reference',
                'Date Paid',
                'Last Amount',
                ]
        tdclasslist = [
                '',
                '',
                'w-15p',
                'w-15p',
                '',
                'text-right',
                ]
        trclass = 'beneficiary_row'
        table_options = """
        <script>
		$('#beneficiary_table').DataTable({
			"pagingType": "full_numbers",
			"lengthMenu": [[10, 25, 50, -1], [10, 25, 50, 'All']],
			"dom": "<'toolbar'f>" +
				"<'row'<'col-md-12't>>" +
				"<'row'<'col-md-6 d-flex'<'mt-1'l><'ml-2'i>><'col-md-6'p>>",
			responsive: true,
			language: {
				search: "_INPUT_",
				searchPlaceholder: "Search records",
				infoEmpty: "",
                emptyTable: "No beneficiaries to show...",
			}
		});
        </script>
        """
        return build_html_datatable(outputlist, dbcolumnlist, theadlist, "beneficiary_table", tdclasslist, trclass) + table_options

    @require(CustomNotAnonymous())
    @expose('calmerchant_app.templates.generic')
    def payout(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        account_table = self.get_payout_htmltbl()

        available_balance = get_currency_by_locale(0)
        merchant_balance = get_balance_by_username(usernow.myimali_username)
        if merchant_balance:
            available_balance = get_currency_by_locale(float(merchant_balance), cents=False)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex align-items-center">
                            <div class="col-md-6">
                                <h4 class="card-title">Payout <span class="text-muted">(Current balance: {available_balance})
                                    <i class="fas fa-info-circle ml-2" data-container="body" data-toggle="tooltip" data-placement="right"
                                        title="Please note that you can only link bank accounts that are either in your personal name or in the name of
                                        the business.  Once the account is added, an automated process will validate with the chosen bank."
                                        aria-hidden="true" data-original-title="" title="">
                                    </i></span>

                                </h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="bankAccountBtn" merchant_id="2" class="btn btn-info">Link new Bank account</button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body pt-0">
                        <div id="paymentDiv" class="mt-3">
                            {account_table}
                        </div>
                        <div class="row d-flex align-items-center">
                            <div class="ml-auto">Total Amount: <span id="totalAmount" class="font-weight-bold">R 0.00</span></div>
                            <button id="btnTransfer" class="btn btn-info mx-3" disabled>Make Transfer</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        var btnTransfer = $('#btnTransfer');
        $('#bankAccountBtn').click(function(){
            $.redirect('/payment/link_new_account');
        });
        var totalAmount = 0.00;
        $('.settleAmt').change(function(){
            totalAmount = 0
            $('.settleAmt').each(function(n){
                if($(this).val() !== 0 && $(this).val() !== ''){
                    totalAmount = totalAmount + parseFloat($(this).val());
                }
                var displayAmount = (totalAmount.toFixed(2)).toString();
                $('#totalAmount').html('R ' + displayAmount);
                return 'false';
            });
            if (totalAmount > 0){
                btnTransfer.removeAttr("disabled");
            } else {
                btnTransfer.attr("disabled", "disabled");
            }
        });
        btnTransfer.click(function(){
            var dataList = [];
            $('.settlement_row').each(function(i){
                var settleAmt = $(this).find('.settleAmt');
                var paymentRef = $(this).find('.paymentRef');
                var thisItem = {
                    'account_id': $(settleAmt).data('accountId'),
                    'amount': $(settleAmt).val(),
                };
                dataList.push(thisItem);
            });
            var kwargs = {data: JSON.stringify(dataList), total_amount: totalAmount};
            $.post('/payment/settle_accounts', kwargs, function(data){
                var result = JSON.parse(data);
                showNotification(result.status, result.message);
                return false;
            });
        });
        """
        return dict(title="Payout | Calabash", html=html, javascript=javascript)

    @expose()
    def settle_accounts(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        merchant_balance = get_balance_by_username(usernow.myimali_username)
        total_amount = kwargs.get('total_amount', None)
        if not total_amount:
            return json.dumps({'success': False, 'message': 'You need to complete at least one payment amount.', 'status': 'danger'})
        if str_to_float(total_amount) > round(float(merchant_balance), 2):
            return json.dumps({'success': False, 'message': 'The total amount exceeds your available balance, please amend and try again.', 'status': 'danger'})
        data = json.loads(kwargs.get('data', []))
        if not data:
            return json.dumps({'success': False, 'message': 'You need to complete at least one payment amount.', 'status': 'danger'})
        settle_dict = {
            'username': usernow.myimali_username,
            'data': []
        }

        for i, item in enumerate(data):
            amount = item.get('amount', None)
            if not amount:
                continue
            account_id = item.get('account_id', None)
            if not account_id:
                return json.dumps({'success': False, 'message': 'Something went wrong while processing this request, please try again.', 'status': 'danger'})
            cents_amount = int(str_to_float(amount) * 100)
            item['amount'] = cents_amount
            account_dict = {
                'amount': cents_amount,
                'account_id': account_id
            }
            settle_dict['data'].append(account_dict)
        r = payout_to_multiple_accounts(json.dumps(settle_dict))
        success = r.get('success', False)
        if not success:
            data = r.get('data', None)
            print(f'DEBUG SETTLE ACCOUNTS: Success was false')
            return json.dumps({'success': False, 'data': data})
        return json.dumps({'success': True})

    @expose()
    def get_new_bank_account_form(self, *args, **kwargs):
        bank_account_form = COMMON.get_bank_account_htmlform()
        external_type_id = COMMON.get_beneficiary_type_id('external')
        html = f"""
        {bank_account_form}
        <div class="text-right">
            <button id="btnSave" data-beneficiary-type-id="{external_type_id}" class="btn btn-info ml-auto">Save</button>
            <button id="btnCancel" class="btn btn-info ml-1 mr-3">Cancel</button>
        </div>
        """
        javascript = """
        <script>
        var bank_account_form = $('#bank_account_form');
        setFormValidation(bank_account_form);
        $('#btnSave').click(function(){
            var beneficiaryTypeId = $(this).data('beneficiaryTypeId');
            var valid = FormIsValid(bank_account_form);
            if(valid){
                var formserial = getFormData(bank_account_form);
                formserial['beneficiary_type_id'] = beneficiaryTypeId;
                formserial['branch_code'] = $('#bank_type_id option:selected').data('branchCode');
                $.post('/payment/save_bank_account', formserial, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $.redirect('/payment/payout');
                    };
                    return false;
                });
            }
        });
        $('#btnCancel').click(function(){
            $.redirect('/payment/payout');
        });
        </script>
        """
        return html + javascript

    @require(CustomNotAnonymous())
    @expose('calmerchant_app.templates.generic')
    def link_new_account(self, *args, **kwargs):
        calabash_type = COMMON.get_beneficiary_type_id('external')
        account_form = self.get_new_bank_account_form()
        html=f"""
        <div class="row">
            <div class="col-md-6">
                <div class="card ">
                    <div class="card-header d-flex align-items-center">
                        <div class="col-md-6">
                            <h4 id="beneficiaryHeader" data-calabash-type-id="{calabash_type}" class="card-title">Link Bank Account</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="btnBack" class="btn btn-info">Back to Payout List</button>
                        </div>
                    </div>
                    <div class="card-body ">
                        <div id="beneficiaryFormDiv">
                            {account_form}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        $('#btnBack').click(function(){
            $.redirect('/payment/payout');
        });
        """
        return dict(title="Payout Account | Calabash", html=html, javascript=javascript)

    @expose()
    def get_payout_htmltbl(self, *args, **kwargs):
        if not request.identity:
            return ''
        usernow = request.identity.get('user', {})
        result = self.sync_bank_accounts()
        dbase_query = DBSession.query(BankAccount).\
            filter(BankAccount.added_by == usernow.user_id).\
            filter(BankAccount.active)

        current_page = str_to_int(kwargs.get('page', 1))
        page = paginate(**{'query': dbase_query, 'page': current_page})

        bank = BankController()
        outputlist = []
        for item in page.pop('items', []):
            placeholder = '' if item.is_verified else 'placeholder="not verified"'
            disabled = '' if item.is_verified else 'disabled'
            outputlist.append({
                'account_name': item.account_name,
                'account_number': item.account_number,
                'bank': bank.get_bank_name(item.bank_id),
                'account_type': bank.get_account_type_name(item.account_type_id),
                'payment_amount': f'<input type="text" data-id="{item.id}" class="form-control settleAmt" {placeholder} {disabled} name="amount">',
                'actions': f'<button type="button" class="btn btn-sm btn-danger removeBtn" data-id="{item.id}">Remove</button>'
                })
        dbcolumnlist=[
                'account_name',
                'account_number',
                'bank',
                'account_type',
                'payment_amount',
                'actions'
                ]
        theadlist=[
                'Account Name',
                'Account Number',
                'Bank',
                'Account Type',
                'Payment Amount',
                'Actions'
                ]
        tdclasslist = [
                '',
                '',
                'w-15p',
                '',
                '',
                'text-center',
                ]
        trclass = 'settlement_row'
        params = {
            'page': page,
            'table_wrapper_id': '#paymentDiv',
            'refresh_target': '/payment/get_payout_htmltbl'
        }
        table_options = """
        <script>
        $('.removeBtn').click(function(){
            var kwargs = $(this).data();
            $.post('/payment/remove_banking_details', kwargs, function(data){
                var result = JSON.parse(data);
                showNotification(result.status, result.message);
                if(result.success === true){
                    $('#paymentDiv').load('/payment/get_payout_htmltbl', function(data){return false;});
                }
                return false;
            });
        });
        </script>
        """
        return build_html_table(outputlist, dbcolumnlist, theadlist, "settlementTable", tdclasslist, trclass, **params) + table_options

    def sync_bank_accounts(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        response = get_banking_details(usernow.myimali_username)
        if response.get('success'):
            data_list = response.get('data', [])
            for item in data_list:
                account_name = item.get('vAccountName', None)
                account_number = item.get('vAccountNumber', None)
                initials = item.get('vIntials', None)
                bank_id = item.get('vBankType', None)
                account_type_id = item.get('vAccountType', None)
                myimali_account_id = item.get('vAccountId', None)
                verified = item.get('verified', False)

                account_exists = DBSession.query(BankAccount).\
                    filter(BankAccount.account_name == account_name).\
                    filter(BankAccount.account_number == account_number).\
                    filter(BankAccount.initials == initials).\
                    filter(BankAccount.bank_id == bank_id).\
                    filter(BankAccount.account_type_id == account_type_id).\
                    first()

                if account_exists:
                    continue

                this = BankAccount()
                this.myimali_account_id = myimali_account_id
                this.account_name = account_name
                this.recipient_ref = account_name
                this.account_type_id = account_type_id
                this.bank_id = bank_id
                this.account_number = account_number
                this.initials = initials
                this.verified = verified
                this.added_by = usernow.user_id
                this.added = datetime.now()
                this.active = True
                DBSession.add(this)
                DBSession.flush()

                if usernow.bln_kyced:
                    self.save_bank_account_to_gateway(this)
        return True


    @expose()
    def remove_banking_details(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        account_id = kwargs.get('id', None)
        if not account_id:
            print('DEBUG REMOVE BANKING DETAILS: account_id not present in kwargs')
            return json.dumps({'success': False, 'message': 'Please select an account to delete.', 'status': 'danger'})
        bank_account = BankAccount.by_id(account_id)

        if bank_account:
            bank_account.active = False
            DBSession.flush()
        else:
            return json.dumps({'success': False, 'message': 'Please select an account to delete.', 'status': 'danger'})

        if bank_account.myimali_account_id:
            this = delete_banking_details({
                'account_id': bank_account.myimali_account_id,
                'username': usernow.myimali_username
            })
        return json.dumps({'success': True, 'message': 'This account has successfully been deleted.', 'status': 'success'})

    @expose()
    def save_bank_account(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        result = COMMON.get_or_create_bank_account(**kwargs)
        if not result.get('success'):
            message = result.get('message', 'We could not create Bank Account from the data provided.')
            return json.dumps({'success': False, 'message': message, 'status': 'danger'})

        if not usernow.bln_kyced:
            return json.dumps({'success': True, 'message': 'Bank Account successfully added.', 'status': 'success'})

        bank_account = result.get('data', None)
        if not bank_account:
            return json.dumps({'success': False, 'message': 'We could not create Bank Account from the data provided.', 'status': 'danger'})
        return json.dumps({'success': True, 'message': 'Bank Account successfully added.', 'status': 'success'})

    def save_bank_account_to_gateway(self, bank_account=None, *args, **kwargs):
        if not bank_account:
            print('DEBUG BANK ACCOUNT TO GATEWAY: No bank_account in args.')
            return json.dumps({'success': False, 'message': 'Activation on this bank account is pending.', 'status': 'warning'})

        usernow = request.identity.get('user', {})
        params = {
            'username': usernow.myimali_username,
            'display_name': usernow.display_name,
            'bank_type_id': bank_account.bank_id,
            'account_type_id': bank_account.account_type_id,
            'branch_code': bank_account.branch_code,
            'account_number': bank_account.account_number,
            'initials': bank_account.initials,
        }
        result = add_banking_details(params)
        success = result.get('success', None)
        if not success:
            message = result.get('data', 'Something went wrong while processing this request, please try again.')
            return json.dumps({'success': False, 'message': message, 'status': 'danger'})
        return json.dumps({'success': True, 'message': 'Account successfully added.', 'status': 'success'})


class BankController(BaseController):

    def __init__(self):
        config_obj = get_banking_config()
        self.banks = config_obj.get('banks', [])
        self.account_types = config_obj.get('accounts', [])

    def get_bank_by_id(self, bank_id=None):
        if not bank_id: return {}
        for bank in self.banks:
            if str(bank_id) == bank.get('value'):
                return bank
        return {}

    def get_bank_name(self, bank_id=None, *args, **kwargs):
        if not bank_id: return ''
        bank = self.get_bank_by_id(bank_id)
        return bank.get('display', '')

    def get_account_type_by_id(self, account_type_id=None, *args, **kwargs):
        if not account_type_id: return {}
        for account_type in self.account_types:
            if str(account_type_id) == account_type.get('value'):
                return account_type
        return {}

    def get_account_type_name(self, account_type_id=None, *args, **kwargs):
        if not account_type_id: return ''
        account_type = self.get_account_type_by_id(account_type_id)
        return account_type.get('display', '')
