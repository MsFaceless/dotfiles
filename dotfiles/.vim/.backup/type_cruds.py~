from sqlalchemy.orm import Session
from model.type_tables import active_type_tables
from cruds.crud_utils import get_returnable_dict

active_type_cruds = {}

def create_type_create_function(model_name, Model):
    
    def create(db: Session, name: str):
        db_type = Model()
        db_type.name = name

        db.add(db_type)
        returnable = False
        try: 
            db.commit()
            db.refresh(db_type)
            returnable = get_returnable_dict(db_type)
            db.flush()
        except: 
            db.rollback()
        finally: 
            db.close()
        return returnable
    
    function_name = f"create_{model_name.lower()}"
    setattr(create, "__name__", function_name)
    setattr(create, "__qualname__", function_name)
    return create

def create_type_read_by_name_function(model_name, Model):

    def get_by_name(db: Session, name: str):
        db_type = db.query(Model). \
                filter(Model.name==name). \
                first()

        returnable = False
        if db_type: returnable = get_returnable_dict(db_type)
        return returnable
    
    function_name = f"get_{model_name.lower()}_by_name"
    setattr(get_by_name, "__name__", function_name)
    setattr(get_by_name, "__qualname__", function_name)
    return get_by_name

def create_type_read_by_id_function(model_name, Model):

    def get_by_id(db: Session, type_id: int):
        db_type = db.query(Model). \
                filter(Model.id==type_id). \
                first()

        returnable = False
        if db_type: returnable = get_returnable_dict(db_type)
        return returnable
    
    function_name = f"get_{model_name.lower()}_by_id"
    setattr(get_by_id, "__name__", function_name)
    setattr(get_by_id, "__qualname__", function_name)
    return get_by_id

def create_type_read_all_function(model_name, Model):

    def get_all(db: Session, limit: int=10):
        db_type = db.query(Model). \
                limit(limit). \
                all()
                
        returnable = False
        if db_type and isinstance(db_type, list): returnable = [item for item in db_type]
        return returnable
    
    function_name = f"get_all_{model_name.lower()}"
    setattr(get_all, "__name__", function_name)
    setattr(get_all, "__qualname__", function_name)
    return get_all

def generate_type_cruds():
    for model_name, Model in active_type_tables.items():
        cruds_dict = {}

        type_create = create_type_create_function(model_name, Model)
        cruds_dict['create'] = type_create

        type_get_by_id = create_type_read_by_id_function(model_name, Model)
        cruds_dict['get_by_id'] = type_get_by_id

        type_get_by_name = create_type_read_by_name_function(model_name, Model)
        cruds_dict['get_by_name'] = type_get_by_name

        type_get_all = create_type_read_all_function(model_name, Model)
        cruds_dict['get_all'] = type_get_all

        active_type_cruds[model_name.lower()] = cruds_dict

    return True
