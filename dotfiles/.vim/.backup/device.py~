# -*- coding: utf-8 -*-
"""Device controller module"""
from tg import predicates

import string
# from tg.i18n import ugettext as _
# from tg import predicates
from tg import expose, require, redirect, validate, flash, url, request, response, predicates

from calmerchant_app.model import *

from calmerchant_app.lib.base import BaseController
from calmerchant_app.controllers.common import CommonController
from calmerchant_app.lib.tg_utils import *
from calmerchant_app.lib.tg_decorators import time_it, CustomNotAnonymous
from calmerchant_app.lib.gateway_utils import *
from calmerchant_app.lib.phos.phos_requests import PhosWebScraper

COMMON = CommonController()

class DeviceController(BaseController):

    @require(CustomNotAnonymous())
    @expose('calmerchant_app.templates.generic')
    def index(self, *args, **kwargs):
        dbase_query = DBSession.query(Device). \
                all()
        outputlist = []
        for device in dbase_query:
            outputlist.append({
                'name': device.name,
                'uuid' : device.device_uuid,
                'added': device.added,
                'active': get_binary_check_or_cross(**{'value': device.active}),
                'actions': f'<div device_id="{device.id}" class="btn btn-sm btn-info deviceSelect">VIEW</div>'
                })
        dbcolumnlist=[
                'name',
                'uuid',
                'added',
                'active',
                'actions',
                ]
        theadlist=[
                'Name',
                'Device ID',
                'Date',
                'Active',
                'Actions',
                ]
        tdclasslist = [
                '',
                '',
                '',
                'text-center',
                'w-10p text-center',
                ]
        device_table = build_html_datatable(outputlist, dbcolumnlist, theadlist, "device_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card ">
                    <div class="card-header d-flex align-items-center">
                        <div class="col-md-6">
                            <h4 class="card-title">My Devices</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="btnNewDevice" class="btn btn-info">Register a New Device</button>
                        </div>
                    </div>
                    <div class="card-body ">
                        {device_table}
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        $('#btnNewDevice').click(function () {
            $.redirect('/device/new');
        });
        $('.deviceSelect').click(function () {
            var kwargs = {
                'device_id': $(this).attr('device_id'),
            }
            $.redirect('/device/edit', kwargs);
        });
        $('#device_table').DataTable({
			"pagingType": "full_numbers",
			"lengthMenu": [[10, 25, 50, -1], [10, 25, 50, 'All']],
			"dom": "<'toolbar'f>" +
				"<'row'<'col-md-12't>>" +
				"<'row'<'col-md-6 d-flex'<'mt-1'l><'ml-2'i>><'col-md-6'p>>",
            "columns": [
                    null,
                    null,
                    null,
                    null,
                    { "orderable": false }
                ],
			responsive: true,
			language: {
				search: "_INPUT_",
				searchPlaceholder: "Search records",
				infoEmpty: "",
                emptyTable: "No devices linked...",
			}
		});
        """
        return dict(title="Devices | Calabash", html=html, javascript=javascript)

    def get_selectbox_device_type(self, *args, **kwargs):
        dbase_query = DBSession.query(DeviceType).order_by(DeviceType.name.asc()).all()
        kwargs['case_sensitive'] = True
        kwargs['outputlist'] = [{'name' : m.name, 'id' : m.id} for m in dbase_query]
        return create_selectbox_html(**kwargs)

    @expose()
    def get_device_form(self, *args, **kwargs):
        device = kwargs.get('device', None)
        name_dict = {
        'wrapper_class': 'row col-md-12',
        'label_attrs': 'required',
        'input_id': 'name',
        'label_val': 'Name',
        'input_attrs': 'required',
        'input_val': f'value="{device.name}"' if device else ''
        }
        device_input = f'<input type="text" class="form-control" id="device_uuid" name="device_uuid" required>'
        device_uuid_dict = {
        'wrapper_class': 'row col-md-12',
        'label_attrs': 'required',
        'input_id': 'device_uuid',
        'label_val': 'Device ID',
        'input_type': 'custom',
        'input_field': f'<div class="ml-2">{device.device_uuid}</div>' if device else device_input
        }
        selectbox_device_type = self.get_selectbox_device_type(**{'id': 'device_type_id', 'required': True})
        selected_type = DBSession.query(DeviceType).filter(DeviceType.id == device.device_type_id).first() if device else ''
        select_device_type = {
            'wrapper_class': 'row col-md-12',
            'label_attrs': 'required',
            'label_val': 'Device Type',
            'input_type': 'custom',
            'input_field': f'<div class="ml-2">{selected_type.name}</div>' if device else selectbox_device_type
        }
        params_list = [
        name_dict,
        device_uuid_dict,
        select_device_type,
        ]
        if device:
            device_id_dict = {
                'input_id': 'id',
                'input_type': 'hidden',
                'input_val': f'value="{device.id}"'
                }
            params_list.append(device_id_dict)
        return build_html_form('device_form', params_list)

    @require(CustomNotAnonymous())
    @expose('calmerchant_app.templates.generic')
    def new(self, *args, **kwargs):
        device_form = self.get_device_form(**kwargs)
        html=f"""
        <div class="row">
            <div class="col-md-6">
                <div class="card ">
                    <div class="card-header d-flex align-items-center">
                        <div class="col-md-6">
                            <h4 id="deviceHeader" class="card-title">New Device</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="btnBack" class="btn btn-info">Back to Device List</button>
                        </div>
                    </div>
                    <div class="card-body ">
                        {device_form}
                    </div>
                    <div class="text-right">
                        <button id="btnSave" class="btn btn-info ml-auto">Save</button>
                        <button id="btnCancel" class="btn btn-info ml-1 mr-3">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        var deviceHeader = $('#deviceHeader');
        var device_form = $('#device_form');
        setFormValidation(device_form);
        $('#btnSave').click(function(){
            var device_form_valid = FormIsValid(device_form);
            if(device_form_valid ){
                var formserial = new Object;
                formserial = getFormData(device_form);
                $.post('/device/save_device', formserial, function(data){
                    var result = JSON.parse(data);
                    showNotification(result.status, result.message);
                    if(result.success === 'true'){
                        $.redirect('/device');
                    };
                    return false;
                });
            }
        });
        $('#btnBack, #btnCancel').click(function(){
            $.redirect('/device');
        });
        """
        return dict(title="New Device | Calabash", html=html, javascript=javascript)

    @require(CustomNotAnonymous())
    @expose('calmerchant_app.templates.generic')
    def edit(self, *args, **kwargs):
        device_id = kwargs.get('device_id', None)
        if not device_id:
            flash('DEBUG: No Device selected.', 'danger')
            redirect('/device')
        device = DBSession.query(Device). \
            filter(Device.id == device_id). \
            first()
        if not device:
            flash('The device you are trying to view is not currently active in the database.')
            redirect('/device')
        device_form = self.get_device_form(**{'device': device})
        html=f"""
        <div class="row">
            <div class="col-md-6">
				<div id="div_devices"></div>
			</div>
            <div class="col-md-6">
                <div class="card ">
                    <div class="card-header d-flex align-items-center">
                        <div class="col-md-6">
                            <h4 id="deviceHeader" class="card-title">Edit Device</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="btnBack" class="btn btn-info">Back to Device List</button>
                        </div>
                    </div>
                    <div class="card-body ">
                        {device_form}
                    </div>
                    <div class="row col-md-12 pr-0">
                        <button id="btnDeactivate" class="btn btn-danger ml-3"
                            data-device-id="{device_id}">Deactivate</button>
                        <button id="btnSave" class="btn btn-info ml-auto">Save</button>
                        <button id="btnCancel" class="btn btn-info ml-1">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        $('#div_devices').load('/device/get_device_transaction_history_htmltbl');
        var deviceHeader = $('#deviceHeader');
        var device_form = $('#device_form');
        var bank_account_form = $('#bank_account_form');
        setFormValidation(device_form);
        setFormValidation(bank_account_form);
        $('#btnSave').click(function(){
            var device_form_valid = FormIsValid(device_form);
            var bank_account_form_valid = FormIsValid(bank_account_form);
            if(
                device_form_valid &&
                bank_account_form_valid
            ){
                var formserial = new Object;
                formserial['device_form'] = getFormData(device_form);
                formserial['bank_account_form'] = getFormData(bank_account_form);
                var formdata = {data: JSON.stringify(formserial)};
                $.post('/device/save_device', formdata, function(data){
                    var result = JSON.parse(data);
                    showNotification(result.status, result.message);
                    if(result.success === 'true'){
                        $.redirect('/device');
                    };
                    return false;
                });
            }
        });
        $('#btnBack, #btnCancel').click(function () {
            $.redirect('/device');
        });
        $('#btnDeactivate').click(function () {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#41b853',
                cancelButtonColor: '#ff1a6e',
                confirmButtonText: 'Yes, Deactivate!'
            }).then((result) => {
                if (result.value) {
                    var kwargs = {
                        'device_id': $(this).data('deviceId'),
                    }
                    $.post('/device/deactivate_device?', kwargs, function (data) {
                        var result = JSON.parse(data);
                        if (result.success === 'true') {
                            Swal.fire(
                                'Deactivated!',
                                'This device has been deactivated.',
                                'success'
                            ).then((result) => {
                                $.redirect('/device');
                            })
                        };
                        return false;
                    });
                }
            });
        });
        var device_type_id = $('#device_type_id');
        var bankAccountDiv = $('#bankAccountDiv');
        $(device_type_id).on('change', function(){
            var external_type_id = $(deviceHeader).data('externalTypeId');
            if ($(device_type_id).val() == external_type_id){
                $(bankAccountDiv).removeAttr('hidden');
                $('#bank_account_form > .form-group').children('.form-control').removeAttr('disabled');
            } else {
                $(bankAccountDiv).attr('hidden', 'hidden');
                $('#bank_account_form > .form-group').children('.form-control').attr('disabled', 'disabled');
            };
            return false;
        });
        """
        return dict(title="Edit device | Calabash", html=html, javascript=javascript)

    @expose()
    def get_device_transaction_history_htmltbl(self, *args, **kwargs):
        dbase_query = DeviceTransactionHistory.get_all('datetime')
        outputlist = []
        for device in dbase_query:
            outputlist.append({
                'datetime' : device.datetime,
                'terminal' : device.terminal,
                'card_type' : device.card_type,
                'amount' : get_currency_by_locale(device.amount, cents=False),
                'status' : device.status,
                })
        dbcolumnlist=[
            'datetime',
            'terminal',
            'card_type',
            'amount',
            'status',
                ]
        theadlist=[
            'Date',
            'Terminal',
            'Card Type',
            'Amount',
            'Status',
                ]
        tdclasslist = [
            '',
            '',
            '',
            'text-right',
            '',
                ]
        htmltbl = build_html_datatable(outputlist, dbcolumnlist, theadlist, "device_transaction_table", tdclasslist)
        html = f"""
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">Transaction History</h4>
            </div>
            <div class="card-body">
                <div id='div_table' class="table-responsive">
                    {htmltbl}
                </div>
            </div>
        </div>
        """
        style = """
        <style>
            #div_table {
                max-height: 60vh;
                overflow: auto;
            }
        </style>
        """
        return html + style

    @expose()
    def deactivate_device(self, *args, **kwargs):
        device_id = kwargs.get('device_id', None)
        if not device_id:
            print('DEBUG: NO device_id')
            return json.dumps({'success': 'false', 'message': 'Something went wrong, please try again.', 'status': 'danger'})
        this = Device.by_id(device_id)
        if not this:
            print('DEBUG: NO device')
            return json.dumps({'success': 'false', 'message': 'Something went wrong, please try again.', 'status': 'danger'})
        this.active = False
        DBSession.flush()
        flash('Device was successfully deactivated.', 'success')
        return json.dumps({'success': 'true'})

    @expose()
    def save_device(self, *args, **kwargs):
        name = kwargs.get('name', None)
        if not name:
            print('DEBUG: NO name')
            return json.dumps({'success': 'false', 'message': 'Name cannot be empty', 'status': 'danger'})
        device_uuid = kwargs.get('device_uuid', None)
        if not device_uuid:
            print('DEBUG: NO device_uuid')
            return json.dumps({'success': 'false', 'message': 'Device_uuid cannot be empty', 'status': 'danger'})
        device_type_id = kwargs.get('device_type_id', None)
        if not device_type_id:
            print('DEBUG: NO device_type_id')
            return json.dumps({'success': 'false', 'message': 'Device_type_id cannot be empty', 'status': 'danger'})
        if kwargs.get('id'):
            return self.save_edit_device(**kwargs)
        return self.save_new_device(**kwargs)

    def save_new_device(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        this = Device()
        this.merchant_id = usernow.user_id
        this.name = kwargs.get('name', None)
        this.device_uuid = kwargs.get('device_uuid', None)
        this.device_type_id = kwargs.get('device_type_id', None)
        this.added_by = usernow.user_id
        this.added = datetime.now()
        this.active = True
        DBSession.add(this)
        DBSession.flush()
        flash('Device was successfully registered.', 'success')
        return json.dumps({'success': 'true'})

    def save_edit_device(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        device_id = kwargs.get('id', None)
        if not device_id:
            print('DEBUG: NO device_id')
            return json.dumps({'success': 'false', 'message': 'Something went wrong, please try again.', 'status': 'danger'})
        this = Device.by_id(device_id)
        this.merchant_id = usernow.user_id
        this.name = kwargs.get('name', None)
        DBSession.add(this)
        DBSession.flush()
        flash('Device was successfully updated.', 'success')
        return json.dumps({'success': 'true'})
