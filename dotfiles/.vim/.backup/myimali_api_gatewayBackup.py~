#!/bin/python

from datetime import datetime, timedelta

import os
import logging
import requests

from dotenv import dotenv_values

env_vars = dotenv_values()

KEY = env_vars.get('MYIMALI_KEY', None)
BASE_URL = env_vars.get('MYIMALI_BASE_URL', None)

LOGGER = logging.getLogger(__name__)

LIMIT = 100

class MyImaliApiGateway:

    def __repr__(self):
        return f'<MyImaliApiGateway: base_url={self.base_url}>'

    def __init__(self, **kwargs):
        self.api_key = kwargs.get('api_key', KEY)
        self.base_url = kwargs.get('base_url', BASE_URL)

    def register_customer(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('Missing username')
            return False

        password = kwargs.get('password', None)
        if not password:
            LOGGER.warning('Missing password')
            return False

        email = kwargs.get('email', None)
        if not email:
            LOGGER.warning('Missing email')
            return False

        mobile_number = kwargs.get('mobile_number', None)
        if not mobile_number:
            LOGGER.warning('Missing mobile_number')
            mobile_number = kwargs.get('mobile', None)
        if not mobile_number:
            LOGGER.warning('Missing mobile')
            return False

        first_name = kwargs.get('first_name', None)
        if not first_name:
            LOGGER.warning('Missing first_name')
            first_name = kwargs.get('firstName', None)
        if not first_name:
            LOGGER.warning('Missing firstName')
            return False

        surname = kwargs.get('surname', None)
        if not surname:
            LOGGER.warning('Missing surname')
            return False

        request_kwargs = {
            'vUsername' : username,
            'vPassword' : password,
            'vEmail' : email,
            'vMobile' : mobile_number,
            'vFirstName' : first_name,
            'vSurname' : surname,
            'vSendMail' : 'no',
        }

        target = f'{self.base_url}/public/registerCustomer'
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }

        r = requests.post(target, headers=headers, data=request_kwargs)
        print(r.text)

        try:
            result = r.json()
        except:
            result = {}
        response = {
            'success': result.get('success', False),
            'reference_number': result.get("REF", None),
            }
        kwargs.pop('password')
        response.update(kwargs)
        if result.get('error', None):
            response.update({
                'success': False,
                'error': result.get('error'),
                'error_code': result.get('errorCode'),
            })
        return response

    def kyc_identity_number(self, **kwargs):
        temp_cache = kwargs.get('temp_cache', False)
        if temp_cache:
            photo_name = "temp_id_photo"

        identity_number = kwargs.get('identity_number', None)
        if not identity_number:
            LOGGER.warning('MYIMALI kyc_identity_number failed: no identity_number')
            return False

        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('MYIMALI kyc_identity_number failed: no username')
            return False

        email = kwargs.get('email', None)
        if not email:
            LOGGER.warning('MYIMALI kyc_identity_number failed: no email')
            return False

        photo_path = kwargs.get('photo_path', None)
        if not photo_path:
            LOGGER.warning('MYIMALI kyc_identity_number failed: no photo_path')
            return False

        document_path = kwargs.get('document_path', None)
        if not document_path:
            LOGGER.warning('MYIMALI kyc_identity_number failed: no document_path')
            return False

        photo_name = os.path.basename(photo_path)
        document_name = os.path.basename(document_path)

        request_kwargs = {
            'vKycType' : 'lite',
            'vIdentityDocumentType' : 'id',
            'vIdNumber' : identity_number,
            'vUsername' : username,
            'vReviewedNotifyType' : 'mail',
            'vReviewedNotifyEmail' : email,
        }
        rfiles = [
            ('vCustomerPhotoUpload', (photo_name, open(photo_path, 'rb'), 'image/png')),
            ('vIdBookOrCardUpload', (document_name, open(document_path, 'rb'), 'image/png'))
        ]
        headers = {
            'API' : self.api_key,
        }
        target = f'{self.base_url}/public/submitKycApplication'

        LOGGER.info(f'Do the {target} request now')
        LOGGER.info(headers)
        LOGGER.info(rfiles)
        LOGGER.info(request_kwargs)
        #r = requests.post(target, data=request_kwargs, files=rfiles, headers=headers)
        #return r.json()
        return True

    def kyc_merchant(self, **kwargs):
        temp_cache = kwargs.get('temp_cache', False)
        temp_path = os.path.join(os.path.abspath(os.path.curdir), '../temp')
        print(temp_path)

        return False

        if temp_cache:
            photo_name = "temp_id_photo"

        identity_number = kwargs.get('identity_number', None)
        if not identity_number:
            LOGGER.warning('MYIMALI kyc_identity_number failed: no identity_number')
            return False

        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('MYIMALI kyc_identity_number failed: no username')
            return False

        email = kwargs.get('email', None)
        if not email:
            LOGGER.warning('MYIMALI kyc_identity_number failed: no email')
            return False

        photo_path = kwargs.get('photo_path', None)
        if not photo_path:
            LOGGER.warning('MYIMALI kyc_identity_number failed: no photo_path')
            return False

        document_path = kwargs.get('document_path', None)
        if not document_path:
            LOGGER.warning('MYIMALI kyc_identity_number failed: no document_path')
            return False

        photo_name = os.path.basename(photo_path)
        document_name = os.path.basename(document_path)

        request_kwargs = {
            'vKycType' : 'lite',
            'vIdentityDocumentType' : 'id',
            'vIdNumber' : identity_number,
            'vUsername' : username,
            'vReviewedNotifyType' : 'mail',
            'vReviewedNotifyEmail' : email,
        }
        rfiles = [
            ('vCustomerPhotoUpload', (photo_name, open(photo_path, 'rb'), 'image/png')),
            ('vIdBookOrCardUpload', (document_name, open(document_path, 'rb'), 'image/png'))
        ]
        headers = {
            'API' : self.api_key,
        }
        target = f'{self.base_url}/public/submitKycApplication'

        LOGGER.info(f'Do the {target} request now')
        LOGGER.info(headers)
        LOGGER.info(rfiles)
        LOGGER.info(request_kwargs)
        #r = requests.post(target, data=request_kwargs, files=rfiles, headers=headers)
        #return r.json()
        return True


    def kyc_passport(self, **kwargs):
        age = kwargs.get('age', None)
        if not age:
            return False

        username = kwargs.get('username', None)
        if not username:
            return False

        email = kwargs.get('email', None)
        if not email:
            return False

        first_name = kwargs.get('first_name', None)
        if not first_name:
            return False

        surname = kwargs.get('surname', None)
        if not surname:
            return False

        passport_number = kwargs.get('passport_number', None)
        if not passport_number:
            return False

        gender = kwargs.get('gender', None)
        if not gender:
            return False

        date_of_birth = kwargs.get('date_of_birth', None)
        if not date_of_birth:
            return False

        citizenship = kwargs.get('citizenship', None)
        if not citizenship:
            return False

        photo_path = kwargs.get('photo_path', None)
        if not photo_path:
            return False

        document_path = kwargs.get('document_path', None)
        if not document_path:
            return False

        photo_name = os.path.basename(photo_path)
        document_name = os.path.basename(document_path)

        request_kwargs = {
            # Only required for passport
            'vFirstNames' : first_name,
            'vSurName' : surname,
            'vGender' : gender,
            'vDob' : date_of_birth,
            'vAge' : age,
            'vCitizenship' : citizenship,

            # Same keys as identity number
            'vKycType' : 'lite',
            'vIdentityDocumentType' : 'passport',
            'vPassportNumber' : passport_number,
            'vUsername' : username,
            'vReviewedNotifyType' : 'mail',
            'vReviewedNotifyEmail' : email,
        }
        files = [
            ('vCustomerPhotoUpload', (photo_name, open(photo_path, 'rb'), 'image/png')),
            ('vPassportUpload', (document_name, open(document_path, 'rb'), 'image/png'))
        ]
        headers = {
            'API' : self.api_key,
        }
        target = f'{self.base_url}/public/submitKycApplication'
        r = requests.post(target, data=request_kwargs, files=files, headers=headers)
        return r.json()

    def get_balance(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            return False

        request_kwargs = {
            'vUsername' : username,
            }

        headers = {
            'API' : self.api_key,
            'Content-Type': 'application/x-www-form-urlencoded',
        }

        target = f'{self.base_url}/public/getCoupons'
        r = requests.post(target, data=request_kwargs, headers=headers)
        return r.json()

    def get_transaction_history(self, **kwargs):
        coupon_type = kwargs.get('coupon_type', 'iMali')

        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('MYIMALI get_transaction_history failed: no username')
            return False


        request_kwargs = {
            'vUsername' : username,
            'vCouponType': coupon_type,
        }
        headers = {
            'API' : self.api_key,
            'Content-Type': 'application/x-www-form-urlencoded',
        }
        target = f'{self.base_url}/public/statement'

        try:
            r = requests.post(target, data=request_kwargs, headers=headers)
        except Exception as e:
            LOGGER.warning(f'MYIMALI get_transaction_history failed: {e}')
            return False

        return r.json()

    def make_transfer(self, **kwargs):
        from_username = kwargs.get('from_username', None)
        if not from_username:
            return False

        to_username = kwargs.get('to_username', None)
        if not to_username:
            return False

        amount = kwargs.get('amount', None)
        if not amount:
            return False

        request_kwargs = {
            'vFromUsername' : from_username,
            'vToUsername': to_username,
            'vAmount': amount,
            }

        headers = {
            'API' : self.api_key,
            'Content-Type': 'application/x-www-form-urlencoded',
        }

        target = f'{self.base_url}/public/transfer'
        r = requests.post(target, data=request_kwargs, headers=headers)
        try:
            return_data = r.json()
        except:
            return False
        return return_data

    def register_merchant(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('Missing username')
            return False

        password = kwargs.get('password', None)
        if not password:
            LOGGER.warning('Missing password')
            return False

        email = kwargs.get('email', None)
        if not email:
            LOGGER.warning('Missing email')
            return False

        mobile_number = kwargs.get('mobile_number', None)
        if not mobile_number:
            mobile_number = kwargs.get('mobile', None)
        if not mobile_number:
            LOGGER.warning('Missing mobile_number')
            return False

        first_name = kwargs.get('first_name', None)
        if not first_name:
            first_name = kwargs.get('firstName', None)
        if not first_name:
            LOGGER.warning('Missing first_name')
            return False

        surname = kwargs.get('surname', None)
        if not surname:
            LOGGER.warning('Missing surname')
            return False

        request_kwargs = {
            'vUsername' : username,
            'vPassword' : password,
            'vEmail' : email,
            'vMobile' : mobile_number,
            'vFirstName' : first_name,
            'vSurname' : surname,
            'vSendMail' : 'no',
        }

        target = f'{self.base_url}/public/registerMerchant'
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers, data=request_kwargs)

        try:
            result = r.json()
        except Exception as e:
            LOGGER.warning(e)
            result = {}
        response = {
            'success': result.get('success', False),
            'reference_number': result.get("REF", None),
        }
        kwargs.pop('password')
        response.update(kwargs)
        if result.get('error', None):
            response.update({
                'success': False,
                'error': result.get('error', None),
                'error_code': result.get('errorCode', None),
            })
        return response

    def make_merchant_sale(self, **kwargs):
        merchant_username = kwargs.get('merchant_username', None)
        if not merchant_username:
            LOGGER.warning('No merchant_username')
            return False

        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('No username')
            return False

        token = kwargs.get('token', 'iMali')
        if not token:
            LOGGER.warning('No token')
            return False

        amount = kwargs.get('amount', None)
        if not amount:
            LOGGER.warning('No amount')
            return False

        request_kwargs = {
            'vMerchant': merchant_username,
            'vUsername' : username,
            'vToken' : token,
            'vAmount' : amount,
        }

        target = f'{self.base_url}/public/sale'
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }

        r = requests.post(target, headers=headers, data=request_kwargs)
        try:
            result = r.json()
        except Exception as e:
            LOGGER.warning(str(e))
            result = False
        return result

    def register_salesrole(self, **kwargs):
        merchant_username = kwargs.get('merchant_username', None)
        if not merchant_username:
            merchant_username = kwargs.get('merchant', None)
        if not merchant_username:
            return False

        username = kwargs.get('username', None)
        if not username:
            return False

        password = kwargs.get('password', None)
        if not password:
            return False

        email = kwargs.get('email', None)
        if not email:
            return False

        mobile_number = kwargs.get('mobile_number', None)
        if not mobile_number:
            mobile_number = kwargs.get('mobile', None)
        if not mobile_number:
            return False

        first_name = kwargs.get('first_name', None)
        if not first_name:
            return False

        surname = kwargs.get('surname', None)
        if not surname:
            return False

        request_kwargs = {
            'vMerchant': merchant_username,
            'vUsername' : username,
            'vPassword' : password,
            'vEmail' : email,
            'vMobile' : mobile_number,
            'vFirstName' : first_name,
            'vSurname' : surname,
            'vSendMail' : 'no',
        }

        target = f'{self.base_url}/public/registerSalesRole'
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }

        try:
            r = requests.post(target, headers=headers, data=request_kwargs)
        except requests.exceptions.ConnectionError:
            return False

        try:
            result = r.json()
        except:
            result = {}
        response = {
            'success': result.get('success', False),
            'reference_number': result.get("REF", None),
            }
        kwargs.pop('password')
        response.update(kwargs)
        if result.get('error', None):
            response.update({
                'success': False,
                'error': result.get('error'),
                'error_code': result.get('errorCode'),
            })
        return response

    def add_beneficiary(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            return False

        beneficiary_username = kwargs.get('beneficiary_username', None)
        if not beneficiary_username:
            return False

        beneficiary_reference_number = kwargs.get('beneficiary_reference_number', None)
        if not beneficiary_reference_number:
            beneficiary_reference_number = kwargs.get('reference', None)
        if not beneficiary_reference_number:
            return False

        beneficiary_name = kwargs.get('beneficiary_name', None)
        if not beneficiary_name:
            return False

        request_kwargs = {
            'vUsername' : username,
            'vBeneficiaryUsername' : beneficiary_username,
            'vReference' : beneficiary_reference_number,
            'vBeneficiaryName' : beneficiary_name,
        }

        target = f'{self.base_url}/public/addBeneficiary'
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }

        r = requests.post(target, headers=headers, data=request_kwargs)

        try:
            result = r.json()
        except:
            result = False
        return result

    def delete_beneficiary(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            return False

        beneficiary_name = kwargs.get('beneficiary_name', None)
        if not beneficiary_name:
            return False

        request_kwargs = {
            'vUsername' : username,
            'vBeneficiaryName' : beneficiary_name,
        }

        target = f'{self.base_url}/public/deleteBeneficiary'
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }

        r = requests.post(target, headers=headers, data=request_kwargs)

        try:
            result = r.json()
        except:
            result = False
        return result

    def bulk_transfer(self, **kwargs):

        from_username = kwargs.get('from_username', None)
        if not from_username:
            return False

        recipients = kwargs.get('recipients', None)
        if not recipients:
            return False

        vrecipients = [{
            'vUsername': recipient.get("username", None),
            'vAmount': recipient.get('amount', None),
        } for recipient in recipients]

        request_kwargs = {
            'vUsername' : from_username,
            'vRecipientList' : vrecipients,
        }

        target = f'{self.base_url}/public/bulkTransfer'

        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/json',
        }

        r = requests.post(target, headers=headers, json=request_kwargs)

        try:
            result = r.json()
        except:
            result = False
        return result

    def get_bulk_transfer_batch_result(self, **kwargs):

        batch_id = kwargs.get('batch_id', None)
        if not batch_id:
            return False

        request_kwargs = {
            'batchId' : batch_id,
        }

        target = f'{self.base_url}/public/getBulkTransferBatchResult'

        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }

        r = requests.post(target, headers=headers, data=request_kwargs)

        try:
            result = r.json()
        except:
            result = False
        return result

    def user_refund(self, **kwargs):

        merchant_username = kwargs.get('merchant_username', None)
        if not merchant_username:
            merchant_username = kwargs.get('fromUsername', None)
        if not merchant_username:
            return False

        refund_username = kwargs.get('refund_username', None)
        if not refund_username:
            refund_username = kwargs.get('toUsername', None)
        if not refund_username:
            return False

        transaction_id = kwargs.get('transaction_id', None)
        if not transaction_id:
            transaction_id = kwargs.get('trxId', None)
        if not transaction_id:
            return False

        amount = kwargs.get('amount', None)
        if not amount:
            return False

        coupon_type = kwargs.get('coupon_type', None)
        if not coupon_type:
            coupon_type = kwargs.get('couponType', None)
        if not coupon_type:
            return False

        request_kwargs = {
            'vFromUsername': merchant_username,
            'vToUsername' : refund_username,
            'vTrxId' : transaction_id,
            'vCouponType' : coupon_type,
            'vAmount' : amount,
        }

        target = f'{self.base_url}/public/refund'
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }

        r = requests.post(target, headers=headers, data=request_kwargs)

        try:
            result = r.json()
        except:
            result = False
        return result

    def get_transaction_refund_options(self, **kwargs):

        transaction_id = kwargs.get('transaction_id', None)
        if not transaction_id:
            transaction_id = kwargs.get('trxId', None)
        if not transaction_id:
            return False

        request_kwargs = {
            'vTrxId' : transaction_id,
        }

        target = f'{self.base_url}/public/getRefund'
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }

        r = requests.post(target, headers=headers, data=request_kwargs)

        try:
            result = r.json()
        except:
            result = False
        return result

    def dontuse_get_all_beneficiary_info(self, **kwargs):

        username = kwargs.get('username', None)
        if not username: return False

        request_kwargs = {
            'vUsername': username,
        }

        target = "getAllBeneficiaryInfo"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }

        r = requests.post(target, headers=headers, data=request_kwargs)

        try:
            result = r.json()
        except:
            result = False
        return result

    def dontuse_get_balances(self, **kwargs):

        username = kwargs.get('username', None)
        if not username:
            return False

        request_kwargs = {
            'vUsername': username,
        }

        target = "GetBalances"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }

        r = requests.post(target, headers=headers, data=request_kwargs)

        try:
            result = r.json()
        except:
            result = False
        return result

    def get_user_profile(self, **kwargs):

        username = kwargs.get('username', None)
        if not username:
            return False

        request_kwargs = {
            'vUsername': username,
        }

        target = "public/getUserProfile"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }

        try:
            r = requests.post(target, headers=headers, data=request_kwargs)
        except requests.exceptions.ConnectionError:
            return False

        try:
            result = r.json()
        except:
            result = False
        return result

    def get_merchant_salesroles(self, **kwargs):

        merchant_username = kwargs.get('merchant_username', None)
        if not merchant_username:
            merchant_username = kwargs.get('MerchantUsername', None)
        if not merchant_username:
            return False

        request_kwargs = {
            'vMerchantUsername': merchant_username,
        }

        target = "public/getMerchantSaleRoles"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }

        r = requests.post(target, headers=headers, data=request_kwargs)

        try:
            result = r.json()
        except:
            result = False
        return result

    def get_user_beneficiaries(self, **kwargs):

        username = kwargs.get('username', None)
        if not username:
            username = kwargs.get('username', None)
        if not username:
            return False

        request_kwargs = {
            'vUsername': username,
        }

        target = "public/getUserBeneficiaries"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }

        r = requests.post(target, headers=headers, data=request_kwargs)

        try:
            result = r.json()
        except:
            result = False
        return result

    def get_product_list_airtime(self, **kwargs):
        target = "public/vas/products/airtime"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers)
        try:
            result = r.json()
        except:
            result = False
        return result

    def get_product_list_data(self, **kwargs):
        target = "public/vas/products/data"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers)
        try:
            result = r.json()
        except:
            result = False
        return result

    def purchase_mobile(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            return False

        product_code = kwargs.get('product_code', None)
        if not product_code:
            return False

        mobile_number = kwargs.get('mobile_number', None)
        if not mobile_number:
            return False

        amount = kwargs.get('amount', None)
        if not amount:
            return False

        request_kwargs = {
            'vUsername': username,
            'vProductCode': product_code,
            'vMobileNumber': mobile_number,
            'vAmount': amount,
        }

        target = "public/vas/purchase/mobile"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers, data=request_kwargs)
        try:
            result = r.json()
        except:
            result = False
        return result

###############################################################################
# GROUPS
###############################################################################

    def create_group(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('create_group failed: no username')
            return False

        groupname = kwargs.get('groupname', None)
        if not groupname:
            LOGGER.warning('create_group failed: no groupname')
            return False

        request_kwargs = {
            'vAuthUsername': username,
            'vGroupName': groupname,
        }

        target = "public/groups/create"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers, data=request_kwargs)
        try:
            result = r.json()
        except:
            result = False
        return result

    def remove_group(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('remove_group failed: no username')
            return False

        groupname = kwargs.get('groupname', None)
        if not groupname:
            LOGGER.warning('remove_group failed: no groupname')
            return False

        request_kwargs = {
            'vAuthUsername': username,
            'vGroupName': groupname,
        }

        target = "public/groups/remove"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers, data=request_kwargs)
        try:
            result = r.json()
        except:
            result = False
        return result

    def leave_group(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('leave_group failed: no username')
            return False

        groupname = kwargs.get('groupname', None)
        if not groupname:
            LOGGER.warning('leave_group failed: no groupname')
            return False

        request_kwargs = {
            'vUsername': username,
            'vGroupName': groupname,
        }

        target = "public/groups/user/leave"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers, data=request_kwargs)
        try:
            result = r.json()
        except:
            result = False
        return result

    def add_user(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('add_user failed: no username')
            return False

        groupname = kwargs.get('groupname', None)
        if not groupname:
            LOGGER.warning('add_user failed: no groupname')
            return False

        to_username = kwargs.get('to_username', None)
        if not to_username:
            LOGGER.warning('add_user failed: no to_username')
            return False

        admin = kwargs.get('admin', None)
        if not admin:
            LOGGER.warning('add_user failed: no admin')
            return False

        request_kwargs = {
            'vAuthUsername': username,
            'vUsername': to_username,
            'vGroupName': groupname,
            'vAdmin': admin,
        }

        target = "public/groups/user/add"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers, data=request_kwargs)
        try:
            result = r.json()
        except:
            result = False
        return result

    def remove_user(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('remove_user failed: no username')
            return False

        groupname = kwargs.get('groupname', None)
        if not groupname:
            LOGGER.warning('remove_user failed: no groupname')
            return False

        remove_username = kwargs.get('remove_username', None)
        if not remove_username:
            LOGGER.warning('remove_user failed: no remove_username')
            return False

        request_kwargs = {
            'vAuthUsername': username,
            'vUsername': remove_username,
            'vGroupName': groupname,
        }

        target = "public/groups/user/remove"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers, data=request_kwargs)
        try:
            result = r.json()
        except:
            result = False
        return result

    def update_user(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('update_user failed: no username')
            return False

        groupname = kwargs.get('groupname', None)
        if not groupname:
            LOGGER.warning('update_user failed: no groupname')
            return False

        to_username = kwargs.get('to_username', None)
        if not to_username:
            LOGGER.warning('update_user failed: no to_username')
            return False

        admin = kwargs.get('admin', None)
        if not admin:
            LOGGER.warning('update_user failed: no admin')
            return False

        request_kwargs = {
            'vAuthUsername': username,
            'vUsername': to_username,
            'vGroupName': groupname,
            'vAdmin': admin,
        }

        target = "public/groups/user/update"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers, data=request_kwargs)
        try:
            result = r.json()
        except:
            result = False
        return result

    def user_deposit(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('user_deposit failed: no username')
            return False

        groupname = kwargs.get('groupname', None)
        if not groupname:
            LOGGER.warning('user_deposit failed: no groupname')
            return False

        amount = kwargs.get('amount', None)
        if not amount:
            LOGGER.warning('user_deposit failed: no amount')
            return False

        request_kwargs = {
            'vUsername': username,
            'vGroupName': groupname,
            'vAmount' : amount,
        }

        target = "public/groups/user/deposit"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers, data=request_kwargs)
        try:
            result = r.json()
        except:
            result = False
        return result

    def user_transfer(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('user_transfer failed: no username')
            return False

        groupname = kwargs.get('groupname', None)
        if not groupname:
            LOGGER.warning('user_transfer failed: no groupname')
            return False

        amount = kwargs.get('amount', None)
        if not amount:
            LOGGER.warning('user_transfer failed: no amount')
            return False

        to_username = kwargs.get('to_username', None)
        if not to_username:
            LOGGER.warning('user_transfer failed: no to_username')
            return False

        request_kwargs = {
            'vAuthUsername': username,
            'vGroupName': groupname,
            'vAmount' : amount,
            'vToUsername' : to_username,
        }

        target = "public/groups/user/transfer"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers, data=request_kwargs)
        try:
            result = r.json()
        except:
            result = False
        return result

    def user_withdraw(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('user_withdraw failed: no username')
            return False

        groupname = kwargs.get('groupname', None)
        if not groupname:
            LOGGER.warning('user_withdraw failed: no groupname')
            return False

        amount = kwargs.get('amount', None)
        if not amount:
            LOGGER.warning('user_withdraw failed: no amount')
            return False

        request_kwargs = {
            'vAuthUsername': username,
            'vGroupName': groupname,
            'vAmount' : amount,
        }

        target = "public/groups/user/withdraw"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers, data=request_kwargs)
        try:
            result = r.json()
        except:
            result = False
        return result

    def user_sale(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('user_sale failed: no username')
            return False

        groupname = kwargs.get('groupname', None)
        if not groupname:
            LOGGER.warning('user_sale failed: no groupname')
            return False

        amount = kwargs.get('amount', None)
        if not amount:
            LOGGER.warning('user_sale failed: no amount')
            return False

        merchant_username = kwargs.get('merchant_username', None)
        if not merchant_username:
            LOGGER.warning('user_sale failed: no merchant_username')
            return False

        request_kwargs = {
            'vAuthUsername': username,
            'vGroupName': groupname,
            'vAmount' : amount,
            'vMerchant' : merchant_username,
        }

        target = "public/groups/user/sale"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers, data=request_kwargs)
        try:
            result = r.json()
        except:
            result = False
        return result

    def get_group_statement(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('get_group_statement failed: no username')
            return False

        groupname = kwargs.get('groupname', None)
        if not groupname:
            LOGGER.warning('get_group_statement failed: no groupname')
            return False

        request_kwargs = {
            'vUsername': username,
            'vGroupName': groupname,
            'vLimit' : LIMIT,
        }

        target = "public/groups/statement"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers, data=request_kwargs)
        try:
            result = r.json()
        except:
            result = False
        return result

    def get_group_detail(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('get_group_detail failed: no username')
            return False

        groupname = kwargs.get('groupname', None)
        if not groupname:
            LOGGER.warning('get_group_detail failed: no groupname')
            return False

        request_kwargs = {
            'vUsername': username,
            'vGroupName': groupname,
        }

        target = "public/groups/detail"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers, data=request_kwargs)
        try:
            result = r.json()
        except:
            result = False
        return result

    def get_user_groups(self, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            LOGGER.warning('get_user_groups failed: no username')
            return False

        request_kwargs = {
            'vUsername': username,
        }

        target = "public/groups/user/groups"
        headers = {
            'API' : self.api_key,
            'Content-Type' : 'application/x-www-form-urlencoded',
        }
        r = requests.post(target, headers=headers, data=request_kwargs)
        try:
            result = r.json()
        except:
            result = False
        return result

if __name__ == "__main__":

    m = MyImaliApiGateway()
    #print(dir(m))

    r = m.get_user_profile(**{'username' : 'tmutero'})
    print(r)

    camdict = {
        'username' : 'camilla',
        'passport_number' : '123456',
        'email' : 'camilla@dotxmltech.com',
        'photo_path' : '/home/camilla/pictures/me/heavy_breathing.jpg',
        'document_path' : '/home/camilla/pictures/me/heavy_breathing.jpg',
        'first_name' : 'Camilla',
        'surname' : 'Buys',
        'gender' : 'female',
        'date_of_birth' : '1-1-1970',
        'age' : '30',
        'citizenship' : 'South African',
    }
    #r = m.kyc_passport(**camdict)
    #print(r)
