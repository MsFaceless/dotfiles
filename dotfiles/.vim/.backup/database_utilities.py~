from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
import os

def get_service_dbdict(config=None):
    if not config: return False
    db_name = os.getenv('DBNAME')
    db_user = os.getenv('DBUSER')
    db_pass = os.getenv('DBPASS')
    db_port = os.getenv('DBPORT')
    db_ipaddress = os.getenv('DBIPADDRESS')
    db_endpoint = f'mysql://{db_user}:{db_pass}@{db_ipaddress}:{db_port}/{db_name}'

    db_engine = create_engine(db_endpoint, echo=False, pool_size=1000, max_overflow=500, pool_timeout=10, pool_recycle=280, strategy='threadlocal')
    db_session = sessionmaker(bind=db_engine)
    db_base = declarative_base()
    try: db_engine.connect()
    except: return False

    #DBSession = db_session()
    db_dict = {'engine':db_engine, 'base':db_base, 'session':db_session}
    return db_dict

def get_db_connection():
    config_dict = {
            "db_name":"vaultdb",
            "db_user":"developer",
            "db_pass":"developpass",
            "db_port":"3306",
            "db_ipaddress":"127.0.0.1",
            }
    db_dict = get_service_dbdict(config_dict)
    return db_dict

db_connection = get_db_connection()
DBSession = db_connection.get('session')()
def get_db_session(uninstantiated=False): 
    if DBSession.is_active: return DBSession
    else: 
        DBSession.close_all()
        my_db_connection = get_db_connection()
        my_db_session = my_db_connection.get('session')()
