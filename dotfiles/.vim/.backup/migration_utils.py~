import requests
import pandas as pd
import os


class RocketApp:
    def __init__(self, **kwargs):

        self.username = kwargs.get("username")
        self.password = kwargs.get("password")
        self.base_url = kwargs.get("base_url")
        self.remember = 2252000
        self.auth_headers = {
            'login': self.username,
            'password': self.password,
            'remember': self.remember,
        }
        self.session = requests.Session()
        self.login()

    def login(self):
        login_request = self.session.post(f"{self.base_url}/login_handler", data=self.auth_headers)
        return True

    def post_to_rocketapp(self, endpoint, data):
        target = f"{self.base_url}/{endpoint}"
        r = self.session.post(target, data=data)
        print(r.status_code)
        if r.status_code == 200:
            jsondata = r.json()
            print(jsondata)
            return jsondata
        else:
            print(r.text)
        return False

    def get_from_rocketapp(self, endpoint, data):
        target = f"{self.base_url}/{endpoint}"
        r = self.session.get(target, json=data)
        if r.status_code == 200:
            return True
        return False


class DataFrameBuilder:

    def __init__(self):
        self.directory_name = 'NAExtract'
        self.file_name = ''
        self.separator = '\x03'
        self.relevant_columns = []
        self.rename_columns_dict = {}
        self.dataframe = None
        self.fail_message = None

    def set_file_name(self, file_name: str):
        self.file_name = file_name
        return self

    def set_separator(self, separator: str):
        self.separator = separator
        return self

    def set_relevant_columns(self, relevant_columns: list):
        self.relevant_columns.extend(relevant_columns)
        return self

    def set_new_column_names(self, old_new_columns_dict: dict):
        self.rename_columns_dict.update(old_new_columns_dict)
        return self

    def set_directory_name(self, directory_name: str):
        self.directory_name = directory_name
        return self

    def create_dataframe(self):
        try:
            file_path = os.path.join(self.directory_name, self.file_name)
            temp= pd.read_csv(file_path, sep=self.separator)
            print(temp.columns)
            df = pd.read_csv(file_path, sep=self.separator, usecols=self.relevant_columns)
        except IOError as e:
            print("Could not read file")
            print(e)
            self.fail_message = {"success": False, "data": "Could not read file"}
            return self
        if df.empty:
            self.fail_message = {"success": False, "data": "Empty DataFrame"}
        else:
            self.dataframe = df
        return self

    def rename_columns(self):
        if not self.fail_message:
            self.dataframe.rename(columns=self.rename_columns_dict, inplace=True)
        return self

    def return_dataframe(self):
        if not self.fail_message:
            return {"success": True, "data": self.dataframe}
        else:
            return self.fail_message


class CleanDataFrame:

    def __init__(self):
        self.date_format = '%d-%m-%Y'

    def remove_rows_with_certain_value(self, dataframe: pd.DataFrame, column_name: str, value_to_remove):
        dataframe = dataframe[dataframe[column_name] != value_to_remove]
        return dataframe

    def keep_rows_equal_to_certain_value(self, dataframe: pd.DataFrame, column_name: str, value_to_keep):
        dataframe = dataframe[dataframe[column_name] == value_to_keep]
        return dataframe

    def convert_date_columns_to_correct_format(self, dataframe: pd.DataFrame, column_name: str):
        dataframe[column_name] = pd.to_datetime(dataframe[column_name])
        dataframe[column_name] = dataframe[column_name].dt.strftime(self.date_format)
        return dataframe
