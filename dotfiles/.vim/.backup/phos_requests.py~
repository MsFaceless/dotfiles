from datetime import datetime, timezone
from dotenv import dotenv_values

import requests
from bs4 import BeautifulSoup
import hmac
import hashlib

env_vars = dotenv_values()

WEBUSERNAME=env_vars.get("USERNAME")
WEBPASSWORD=env_vars.get("PASSWORD")
base_url = "https: //phos.cloud"

class PhosWebScraper():
    def __init__(self):
        self.session = requests.Session()
        self.get_login_page_dict()
        self.auth_session()

    def get_login_page_dict(self):
        target = f"{base_url}/login"
        r = self.session.get(target)
        soup = BeautifulSoup(r.text)

        login_form = soup.find('form', attrs={'action': '/login_check'})
        csrf_token_input = login_form.find('input', attrs={'name': '_csrf_token'})
        csrf_token_value = csrf_token_input.attrs.get('value', None)
        if not login_form or not csrf_token_input or not csrf_token_value: return {}

        login_dict = {
                'email': WEBUSERNAME,
                'password': WEBPASSWORD,
                '_csrf_token': csrf_token_value,
                }
        self.login_dict = login_dict
        if login_dict: return True
        return False

    def auth_session(self):
        target = f"{base_url}/login_check"
        r = self.session.post(target, data=self.login_dict)
        self.authed_headers = r.request.headers
        return r.request.headers

    def get_transactions(self):
        outputlist = []
        target = f"{base_url}/transactions"
        r = self.session.get(target, headers=self.authed_headers)
        soup = BeautifulSoup(r.text)
        transaction_table_html = soup.find("table", attrs={"class": "table table-light"})
        if not transaction_table_html:
            return outputlist

        transaction_table_rows = transaction_table_html.find_all('tr')
        headers_html = transaction_table_rows.pop(0)
        headers = [header.text for header in headers_html.find_all('td')]
        for row in transaction_table_rows:
            this_row = {}
            row_items_html = row.find_all('td')
            for i, header in enumerate(headers):
                row_item_td = row_items_html[i]
                row_item_text =  row_item_td.text
                this_row[header] = row_item_text.strip()
            outputlist.append(this_row)

        return outputlist

    def get_transactions_today(self):
        target = f"{base_url}/transactions"
        r = self.session.get(target, headers=self.authed_headers)
        soup = BeautifulSoup(r.text)
        transaction_table_html = soup.find("table", attrs={"class": "table table-light"})
        transaction_table_rows = transaction_table_html.find_all('tr')
        headers_html = transaction_table_rows.pop(0)
        headers = [header.text for header in headers_html.find_all('td')]
        outputlist = []
        date_format = '%Y-%m-%d'
        todate = datetime.now().strftime(date_format)
        for row in transaction_table_rows:
            this_row = {}
            row_items_html = row.find_all('td')
            for i, header in enumerate(headers):
                row_item_td = row_items_html[i]
                row_item_text =  row_item_td.text
                this_row[header] = row_item_text.strip()
            outputlist.append(this_row)

        filtered_list = []
        for row in outputlist:
            thedate = row.get('Date').split(" ")[0]
            if str(thedate) == str(todate): filtered_list.append(row)
        return filtered_list

    def get_transactions_by_device_id(self, device_id='b4a518ecdd098813', start_date=None, end_date=None):
        outputlist = []
        target = f"{base_url}/transactions"
        extra_headers = {
                "transaction_filter[deviceId]": f"{device_id}",
                #"transaction_filter[startDate]": None,
                #"transaction_filter[endDate]": None,
                #"transaction_filter[status]": None,
                #"transaction_filter[trnType]": None,
                }
        r = self.session.get(target, data=extra_headers, headers=self.authed_headers)
        soup = BeautifulSoup(r.text)
        transaction_table_html = soup.find("table", attrs={"class": "table table-light"})
        if not transaction_table_html:
            return outputlist

        transaction_table_rows = transaction_table_html.find_all('tr')
        headers_html = transaction_table_rows.pop(0)
        headers = [header.text for header in headers_html.find_all('td')]
        date_format = '%Y-%m-%d'
        todate = datetime.now().strftime(date_format)
        for row in transaction_table_rows:
            this_row = {}
            row_items_html = row.find_all('td')
            for i, header in enumerate(headers):
                row_item_td = row_items_html[i]
                row_item_text =  row_item_td.text
                this_row[header] = row_item_text.strip()
            outputlist.append(this_row)
        return outputlist

    def get_devices(self):
        outputlist = []
        target = f"{base_url}/terminals"
        r = self.session.get(target, headers=self.authed_headers)
        soup = BeautifulSoup(r.text)
        devices_table_html = soup.find("table", attrs={"class": "table table-light"})
        if not devices_table_html:
            return outputlist

        devices_table_rows = devices_table_html.find_all('tr')
        headers_html = devices_table_rows.pop(0)
        headers = [header.text for header in headers_html.find_all('td')]
        date_format = '%Y-%m-%d'
        todate = datetime.now().strftime(date_format)
        for row in devices_table_rows:
            this_row = {}
            row_items_html = row.find_all('td')
            for i, header in enumerate(headers):
                row_item_td = row_items_html[i]
                row_item_text =  row_item_td.text
                this_row[header] = row_item_text.strip()
            outputlist.append(this_row)
        return outputlist
