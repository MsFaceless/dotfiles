#!/bin/python


###############################################################################
# lib/type_utils.py
###############################################################################

"merchant_ownership_type": {'Sole Proprietor (Private Individual)', 'Company (PTY/Ltd)', 'Close corporation (CC)', 'Trust'},

###############################################################################
# model/sqlamodel.py
###############################################################################

MerchantOwnershipType = get_type_table(model_name='MerchantOwnership', table_name='merchant_ownership')

tbl_merchant_magic_link = {
    '__tablename__': 'tbl_merchant_magic_link',
    'username': common_columns.get('description_not_nullable')(),
    'reference': common_columns.get('description_not_nullable')(),
    'guid': common_columns.get('description_not_nullable')(),
    'expiry': common_columns.get('datetime_not_nullable')(),
}
MerchantMagicLink = get_phat_table(model_name='MerchantMagicLink', columndict=tbl_merchant_magic_link)

tbl_merchant_details = {
    '__tablename__': 'tbl_merchant_details',
    'wallet_id': common_columns.get('integer_not_nullable')(),
    'username': common_columns.get('description_not_nullable')(),
    'company_name': common_columns.get('description')(),
    'trading_name': common_columns.get('description')(),
    'store_name': common_columns.get('description')(),
    'industry_id': common_columns.get('integer')(),
    'merchant_ownership_type_id': common_columns.get('integer')(),

    'registration_number': common_columns.get('description')(),
    'address_line1': common_columns.get('description')(),
    'address_line2': common_columns.get('description')(),
    'address_city': common_columns.get('description')(),
    'address_province': common_columns.get('description')(),
    'address_postal_code': common_columns.get('description')(),
}
MerchantDetails = get_phat_table(model_name='MerchantDetails', columndict=tbl_merchant_details)

tbl_merchant_industry = {
    '__tablename__': 'tbl_merchant_industry',
    'name': common_columns.get('description')(),
    'bln_custom': common_columns.get('boolean_default_false_not_nullable')(),
}
MerchantIndustry = get_phat_table(model_name='MerchantIndustry', columndict=tbl_merchant_industry)

###############################################################################
# websetup/bootstrap.py
###############################################################################

industrylist = [
    'Apparel & Accessories',
    'Books, Music & Videos',
    'Computer & Electronics',
    'Digital',
    'Entertainment',
    'Food & Beverage',
    'Gaming',
    'Gifts & Gadgets',
    'Health & Beauty',
    'Outdoor & Furniture',
    'Services',
    'Toys & Hobbies',
    'Other (Please Supply)',

]
for name in industrylist:
    kwargs = {
        'table_name' : 'MerchantIndustry',
        'name' : name,
    }
    exists = MerchantIndustry.by_attr_first('name', kwargs.get('name', None))
    if not exists:
        result = CRUDS.create_entry(**kwargs)
        transaction.commit()

###############################################################################
# controllers/registration.py
###############################################################################


    def save_merchant_details(self, *args, **kwargs):
        industry_other = MerchantIndustry.by_attr_first('name', 'Other (Please Supply)')
        if not industry_other:
            return False
        try:
            industry_other_id = int(industry_other.id)
        except:
            return False

        try:
            merchant_industry_id = int(kwargs.get('merchant_industry_id', industry_other_id))
        except:
            return False

        if merchant_industry_id == industry_other_id:
            industry = kwargs.get('industry', None)
            exists = DBSession.query(MerchantIndustry). \
                    filter(MerchantIndustry.name == industry). \
                    filter(MerchantIndustry.bln_custom == True). \
                    filter(MerchantIndustry.active == True). \
                    first()
            if exists:
                merchant_industry_id = exists.id
            else:
                new = MerchantIndustry()
                new.name = industry
                new.bln_custom = True
                DBSession.add(new)
                DBSession.flush()
                merchant_industry_id = new.id

        wallet_id = kwargs.get('wallet_id', None)
        username = kwargs.get('username', None)

        detail = DBSession.query(MerchantDetails). \
                filter(MerchantDetails.wallet_id==wallet_id). \
                filter(MerchantDetails.username==username). \
                filter(MerchantDetails.active==True). \
                first()
        if detail:
            company_name = kwargs.get('company_name', None)
            if not company_name:
                company_name = detail.company_name

            trading_name = kwargs.get('trading_name', None)
            if not trading_name:
                trading_name = detail.trading_name

            store_name = kwargs.get('store_name', None)
            if not store_name:
                store_name = detail.store_name

            detail.wallet_id = wallet_id
            detail.username = username
            detail.company_name = company_name
            detail.trading_name = trading_name
            detail.store_name = store_name
            detail.industry_id = merchant_industry_id
            detail.merchant_ownership_type_id = kwargs.get('merchant_ownership_type_id', None)
            DBSession.flush()
        else:
            detail = MerchantDetails()
            detail.wallet_id = wallet_id
            detail.username = username
            detail.company_name = kwargs.get('company_name', None)
            detail.trading_name = kwargs.get('trading_name', None)
            detail.store_name = kwargs.get('store_name', None)
            detail.merchant_ownership_type_id = kwargs.get('merchant_ownership_type_id', None)
            detail.industry_id = merchant_industry_id
            DBSession.add(detail)
            DBSession.flush()
        return True

    def send_magic_link(self, *args, **kwargs):
        email = kwargs.get('email', None)
        first_name = kwargs.get('firstName', None)

        guid = self.get_unique_guid()

        link = MerchantMagicLink()
        link.username = kwargs.get('username', None)
        link.reference = kwargs.get('reference_number', None)
        link.guid = guid
        link.expiry = datetime.now() + timedelta(hours = LINK_EXPIRY_IN_HOURS)
        DBSession.add(link)
        DBSession.flush()

        magic_link = f'{MERCHANT_DOMAIN}/reset/{guid}'
        plain_text = self.get_plain_text(first_name, magic_link)
        rich_text = self.get_rich_text(first_name, magic_link)

        e = CalabashCampusEmailCreator()
        e.add_subject('Password Reset | CΛLΛBΛSH CΛMPUS')
        e.add_to_address(email)
        e.add_plain_text(plain_text)
        e.add_rich_text(rich_text)
        e.send(False)
        return

    def get_unique_guid(self, *args, **kwargs):
        guid = hashlib.md5(str(uuid.uuid4()).encode('utf-8')).hexdigest()
        exists = MerchantMagicLink.by_attr_first('guid', guid)
        if exists:
            return self.get_unique_guid()
        return guid

    def get_plain_text(self, first_name=None, magic_link=None, *args, **kwargs):
        if not first_name or not magic_link:
            return ''
        return """
        Dear {first_name}, \n\n
        To reset your password, please copy the following link and paste it in your browser: {magic_link}<br/>
        """

    def get_rich_text(self, first_name=None, magic_link=None, *args, **kwargs):
        if not first_name or not magic_link:
            return ''

        return """
        Dear {first_name}; <br/> <br/>
        To reset your password, please click on the the following link: <br/>
        <a target='_blank' href="{magic_link}"> {magic_link} </a> <br/>
        <p> If the link is not clickable, please copy and paste it into your browser.  </p>
        """

    @safe_headers
    @expose('json')
    def get_merchant_by_guid(self, *args, **kwargs):
        guid = kwargs.get('guid', None)
        link = MerchantMagicLink.by_attr_first('guid', guid)
        if not link:
            return error_response('Link not found for guid')
        if link.expiry < datetime.now():
            return error_response('Link has expired for guid')
        return self.get_user_profile(**{'username' : link.username})

    @safe_headers
    @expose('json')
    def get_merchant_details(self, *args, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            return error_response('No username supplied.')

        detail = MerchantDetails.by_attr_first('username', username)
        if not detail:
            return error_response('No details for username.')

        outputdict = detail.__dict__
        outputdict.pop('_sa_instance_state')
        outputdict.pop('username')
        outputdict.pop('added_by')
        outputdict.pop('active')
        outputdict.pop('added')
        outputdict.pop('id')
        return success_response(outputdict)

    def update_merchant_details(self, *args, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            return False

        detail = MerchantDetails.by_attr_first('username', username)
        if not detail:
            return False

        detail.merchant_ownership_type_id = kwargs.get('merchant_ownership_type_id', None)
        detail.registration_number = kwargs.get('registration_number', None)
        detail.address_line1 = kwargs.get('address_line1', None)
        detail.address_line2 = kwargs.get('address_line2', None)
        detail.address_city = kwargs.get('address_city', None)
        detail.address_province = kwargs.get('address_province', None)
        detail.address_postal_code = kwargs.get('address_postal_code', None)
        DBSession.flush()
        return True

    def save_kyc_file(self, username=None, encoding=None, filename=None, savename='', *args, **kwargs):
        if not username or not encoding or not filename:
            return False

        save_filename = f'{username}_{savename}'
        upload_dict = {'image' : encoding,
                       'filename' : filename,
                       'username' : username,
                       'save_filename' : save_filename }
        image_uploader = ImageUploader(**upload_dict)
        success = image_uploader.upload()
        return success

    def save_merchant_documents(self, *args, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            return False

        result = self.update_merchant_details(**kwargs)
        if not result:
            return False

        photo_b64 = kwargs.get('photo_b64', None)
        photo_filename = kwargs.get('photo_filename', None)
        if photo_b64 and photo_filename:
            photo_result = self.save_kyc_file(username, photo_b64, photo_filename, 'photo')
            if not photo_result:
                return False

        address_b64 = kwargs.get('address_b64', None)
        address_filename = kwargs.get('address_filename', None)
        if address_b64 and address_filename:
            address_result = self.save_kyc_file(username, address_b64, address_filename, 'address')
            if not address_result:
                return False

        account_b64 = kwargs.get('account_b64', None)
        account_filename = kwargs.get('account_filename', None)
        if account_b64 and account_filename:
            account_result = self.save_kyc_file(username, account_b64, account_filename, 'account')
            if not account_result:
                return False

        registration_b64 = kwargs.get('registration_b64', None)
        registration_filename = kwargs.get('registration_filename', None)
        if registration_b64 and registration_filename:
            registration_result = self.save_kyc_file(username, registration_b64, registration_filename, 'registration')
            if not registration_result:
                return False

        vat_b64 = kwargs.get('vat_b64', None)
        vat_filename = kwargs.get('vat_filename', None)
        if vat_b64 and vat_filename:
            vat_result = self.save_kyc_file(username, vat_b64, vat_filename, 'vat')
            if not vat_result:
                return False

        document_b64 = kwargs.get('document_b64', None)
        document_filename = kwargs.get('document_filename', None)
        if document_b64 and document_filename:

            if isinstance(document_b64, list):
                for i, document_b64 in enumerate(document_b64):
                    filename = document_filename[i]
                    document_result = self.save_kyc_file(username, document_b64, filename, f'document{i+1}')
                    if not document_result:
                        return False

            else:
                document_result = self.save_kyc_file(username, document_b64, document_filename, 'document')
                if not document_result:
                    return False

        return True

