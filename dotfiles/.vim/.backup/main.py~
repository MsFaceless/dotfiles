#!/bin/python

from fastapi import FastAPI, Depends
from pydantic import BaseModel, validator, ValidationError
from pydantic_sqlalchemy import sqlalchemy_to_pydantic
from startup.startup import active_controllers
from lib.responseutils import *
from decimal import Decimal
from sqlalchemy import func, desc, asc, or_
from typing import Optional, List
import random
from datetime import datetime, date, time
from lib.validatorutils import SearchValidator, BaseValidator, repack_validator_dict
from lib.crudutils import get_returnable_dict
import iso4217

TENANTID = 24
Member_app = FastAPI(title="Member", root_path="/Member", version='0.0.1')
#Member_controller_dict = active_controllers.get('Member')
#Member_controller_validators = Member_controller_dict.get('validators')
#Member_controller_cruds = Member_controller_dict.get('cruds')
#Member_controller_db = Member_controller_dict.get('db')

entity_controller_dict = active_controllers.get('entity')
entity_controller_validators = entity_controller_dict.get('validators')
entity_controller_cruds = entity_controller_dict.get('cruds')
entity_controller_tables = entity_controller_dict.get('tables')
entity_controller_db = entity_controller_dict.get('db')

policy_controller_dict = active_controllers.get('policy')
policy_controller_validators = policy_controller_dict.get('validators')
policy_controller_cruds = policy_controller_dict.get('cruds')
policy_controller_tables = policy_controller_dict.get('tables')
policy_controller_db = policy_controller_dict.get('db')

product_controller_dict = active_controllers.get('product')
product_controller_validators = product_controller_dict.get('validators')
product_controller_cruds = product_controller_dict.get('cruds')
product_controller_tables = product_controller_dict.get('tables')
product_controller_db = product_controller_dict.get('db')

utilities_controller_dict = active_controllers.get('utilities')
utilities_controller_validators = utilities_controller_dict.get('validators')
utilities_controller_cruds = utilities_controller_dict.get('cruds')
utilities_controller_tables = utilities_controller_dict.get('tables')
utilities_controller_db = utilities_controller_dict.get('db')

def get_db(controller_dict=None):
    session_maker = controller_dict.get("session_maker")
    return session_maker()

ints_list = [i for i in range(1, 65000)]
names_list = [f"Name_{i}" for i in range(1, 5000)]
codes_list = [f"Code_{i}" for i in range(1, 5000)]

beneficiaries_list = [{
            "Name":random.choice(ints_list),
            "TenantName":f"Tenant{random.choice(names_list)}",
            "CurrencyCode":f"Currency{random.choice(codes_list)}",
            "CurrencySymbol":f"CurrencySymbol_{random.choice(ints_list)}",
            "CountryCode":f"Country{random.choice(codes_list)}",
            "CountryName":f"Country{random.choice(names_list)}",
            } for i in range(0, 50) ]

class Beneficiary(BaseModel):
    Name: int
    TenantName: str
    CurrencyCode: str
    CurrencySymbol: str
    CountryCode: str
    CountryName: str

    @validator("*")
    def validate_string_length(cls, v):
        if isinstance(v, str):
            if not 0 < len(v) <= 50: raise StringLengthException
        return v

class CheckBeneficiaryResponse(BaseModel):
    Success: bool = False
    Message: str
    HasBeneficiary: bool = None
    Name: str = None
    DateOfBirth: date = "1900-01-01"
    Gender: str = None
    MSISDN: str = None
    InformBeneficiary: bool = None

def unicode_50(string_value: str):
    if not 0 < len(string_value) <= 50: return False
    return True

entity_organisation_cruds = entity_controller_cruds.get("entityorganisation")
get_entity_organisation_by_id = entity_organisation_cruds.get("get_by_id")
get_first_entity_organisation_by_id = entity_organisation_cruds.get("get_first_entityorganisation_where_id")

entity_organisation_client_cruds = entity_controller_cruds.get("entityorganisationclient")
get_first_entity_organisation_client_where_entity_organisation_id = entity_organisation_client_cruds.get("get_first_entityorganisationclient_where_entity_organisation_id")

entity_person_cruds = entity_controller_cruds.get("entityperson")
entity_table = entity_controller_tables.get("Entity")
entity_person_table = entity_controller_tables.get("EntityPerson")
get_entity_person_by_id = entity_person_cruds.get("get_by_id")

entity_person_gender_type_cruds = entity_controller_cruds.get("entitypersongendertype")
get_first_entity_person_gender_type_by_id = entity_person_gender_type_cruds.get("get_first_entitypersongendertype_where_id")

entity_contact_cruds = entity_controller_cruds.get("entitycontact")
get_all_entitycontact_by_entity_id = entity_contact_cruds.get("get_all_entitycontact_where_entity_id")
get_first_entitycontact_by_entity_id = entity_contact_cruds.get("get_first_entitycontact_where_entity_id")

entity_person_identity_cruds = entity_controller_cruds.get("entitypersonidentity")
entity_person_identity_table = entity_controller_tables.get("EntityPersonIdentity")
entity_person_identity_type_cruds = entity_controller_cruds.get("entitypersonidentitytype")
get_first_entity_person_identity_type_where_name = entity_person_identity_type_cruds.get("get_first_entitypersonidentitytype_where_name")

policy_cruds = policy_controller_cruds.get("policy")
get_first_policy_where_policy_owner_entity_id = policy_cruds.get("get_first_policy_where_policy_owner_entity_id")
get_all_policy_where_policy_owner_entity_id = policy_cruds.get("get_all_policy_where_policy_owner_entity_id")

policy_benefit_cruds = policy_controller_cruds.get("policybenefit")
get_all_policybenefit_where_policy_id = policy_benefit_cruds.get("get_all_policybenefit_where_policy_id")
get_first_policybenefit_where_policy_id = policy_benefit_cruds.get("get_first_policybenefit_where_policy_id")

policy_benefit_beneficiary_cruds = policy_controller_cruds.get("policybenefitbeneficiary")
policy_benefit_beneficiary_table = policy_controller_tables.get("PolicyBenefitBeneficiary")
get_first_policy_benefit_beneficiary_where_policy_benefit_id = policy_benefit_beneficiary_cruds.get("get_first_policybenefitbeneficiary_where_policy_benefit_id")

entity_organisation_client_person_link_cruds = entity_controller_cruds.get("entityorganisationclientpersonlink")
get_first_entity_organisation_client_person_link_where_entity_organisation_id = entity_organisation_client_person_link_cruds.get("get_first_entityorganisationclientpersonlink_where_entity_organisation_client_id")
get_first_entity_organisation_client_person_link_where_entity_person_id = entity_organisation_client_person_link_cruds.get("get_first_entityorganisationclientpersonlink_where_entity_person_id")
get_all_entity_organisation_client_person_link_where_entity_person_id = entity_organisation_client_person_link_cruds.get("get_all_entityorganisationclientpersonlink_where_entity_person_id")

def get_member_by_msisdn(msisdn: str):
    returnable = {}
    temp_dbsession = get_db(entity_controller_db)

    msisdn_identity_type_record = get_first_entity_person_identity_type_where_name(db=get_db(entity_controller_db), value="msisdn")
    msisdn_identity_type_id = msisdn_identity_type_record.get("id")

    msisdn_found = temp_dbsession.query(entity_person_identity_table). \
            filter(entity_person_identity_table.bln_active==True). \
            filter(entity_person_identity_table.entity_person_identity_type_id==msisdn_identity_type_id). \
            filter(entity_person_identity_table.value==msisdn). \
            first()

    if msisdn_found: returnable = get_returnable_dict(msisdn_found)
    temp_dbsession.close()
    return returnable

@Member_app.get("/CheckBeneficiary", response_model=CheckBeneficiaryResponse)
def check_beneficiary(TenantID: int, MSISDN: str, GroupID: int):
    if not TenantID or not MSISDN or not GroupID: return {"Message": "Connection Failure"}
    if TenantID != TENANTID: return {"Message": "The Tenant Id is invalid."}
    if not unicode_50(MSISDN): return {"Message":"MSISDNText must be of length 1 - 50"}

    entity_organisation_is_client = get_first_entity_organisation_client_where_entity_organisation_id(db=get_db(entity_controller_db), value=GroupID)
    if not entity_organisation_is_client: return {"Message":"The Group is not Enrolled."}

    msisdn_record = get_member_by_msisdn(MSISDN)

    if not msisdn_record: return {"Message":"The member MSISDN is not found."}

    entity_person_id = msisdn_record.get("entity_person_id")

    entity_organisation_client_person_link_exists = get_first_entity_organisation_client_person_link_where_entity_person_id(db=get_db(entity_controller_db), value=entity_person_id)
    #print("Check if entity_organisation_client_person_link_exists")
    #print(entity_organisation_client_person_link_exists)

    if not entity_organisation_client_person_link_exists: return {"Message":"The member MSISDN is not found."}
    #print("printing if msisdn is found")
    #print(msisdn_record)

    entity_person = get_entity_person_by_id(db=get_db(entity_controller_db), target_id=entity_person_id)
    entity_id = entity_person.get('entity_id')

    policy = get_first_policy_where_policy_owner_entity_id(db=get_db(entity_controller_db), value=entity_id)
    if not policy: return {"Message": "The member MSISDN has no policy"}
    policy_id = policy.get('id', None)

    benefit = get_first_policybenefit_where_policy_id(db=get_db(entity_controller_db), value=policy_id)
    #print(benefit)
    if not benefit: return {"Message": "The member MSISDN has no benefit"}
    policy_benefit_id = benefit.get('id', None)

    beneficiary = get_first_policy_benefit_beneficiary_where_policy_benefit_id(db=get_db(entity_controller_db), value=policy_benefit_id)
    if not beneficiary: return {"Message": "The member MSISDN has no beneficiary"}
    beneficiary_entity_id = beneficiary.get('entity_id', None)
    beneficiary_entity_person = get_entity_person_by_id(db=get_db(entity_controller_db), target_id=beneficiary_entity_id)

    name = beneficiary_entity_person.get('firstname', None)
    date_of_birth = beneficiary_entity_person.get('date_of_birth', None)

    entity_person_gender_type_id = beneficiary_entity_person.get('entity_person_gender_type_id', None)
    gender_type = get_first_entity_person_gender_type_by_id(db=get_db(entity_controller_db), value=entity_person_gender_type_id)
    gender = gender_type.get('name', '').title()

    contacts = get_all_entitycontact_by_entity_id(db=get_db(entity_controller_db), value=beneficiary_entity_id)
    for contact in contacts:
        contact = contact.get('value', None)

    notify = beneficiary.get('notify', False)
    return {
            "Success": True,
            "Message":"The beneficiary has been found",
            "HasBeneficiary": True,
            "Name":name,
            "DateOfBirth":datetime.strftime(date_of_birth, "%Y-%m-%d"),
            "Gender": gender,
            "MSISDN": contact,
            "InformBeneficiary": notify,
            }

class Member(BaseModel):
    GroupID: int
    GroupName: str
    IsDeceased: bool
    IsEnrolled: bool
    EnrolDate: date
    Status: str
    Message: str
    ProductCode: str
    ProductDescription: str
    CurrencyCode: str
    CurrencySymbol: str
    CoverAmount: Decimal
    CoverExpiry: date

    @validator("*")
    def validate_string_length(cls, v):
        if isinstance(v, str):
            if not 0 < len(v): raise StringLengthException
        return v

class CheckMemberResponse(BaseModel):
    Success: int = False
    Message: str
    MemberLists: List[Member] = []

    @validator("*")
    def validate_string_length(cls, v):
        if isinstance(v, str):
            if not 0 < len(v): raise StringLengthException
        return v

@Member_app.get("/CheckMember", response_model=CheckMemberResponse)
def check_member(TenantID: int, MSISDN: str):
    if not TenantID or not MSISDN: return {"Message": "Connection Failure"}
    if TenantID != TENANTID: return {"Message": "The Tenant Id is invalid."}
    if not unicode_50(MSISDN): return {"Message":"MSISDNText must be of length 1 - 50"}

    msisdn_identity_type_record = get_first_entity_person_identity_type_where_name(db=get_db(entity_controller_db), value="msisdn")
    msisdn_identity_type_id = msisdn_identity_type_record.get("id")

    msisdn_record = get_member_by_msisdn(MSISDN)
    if not msisdn_record: return {"Message":"The member MSISDN is not found."}

    entity_person_id = msisdn_record.get("entity_person_id")

    entity_person = get_entity_person_by_id(db=get_db(entity_controller_db), target_id=entity_person_id)

    org_client_list = get_all_entity_organisation_client_person_link_where_entity_person_id(db=get_db(entity_controller_db), value=entity_person_id)
    if not org_client_list: return {"Message": "The member is found but does not belong to any groups."}

    memberlist = []
    for link in org_client_list:
        client_id = link.get('entity_organisation_client_id', None)
        if not client_id:
            continue

        client = get_first_entity_organisation_client_where_entity_organisation_id(db=get_db(entity_controller_db), value=client_id)
        if not client:
            continue

        organisation_id = client.get('entity_organisation_id', None)
        org = get_first_entity_organisation_by_id(db=get_db(entity_controller_db), value=organisation_id)
        if not org:
            continue

        memberlist.append({
            "GroupID": organisation_id,
            "GroupName": org.get('name', None),
            "IsDeceased": entity_person.get('is_deceased', False),
            "IsEnrolled": True,
            "Status": "Member",
            "Message": "None",
            "ProductCode": "None",
            "ProductDescription": "None",
            "CurrencyCode": "None",
            "CurrencySymbol": "None",
            "CoverAmount": float(0),
            "EnrolDate": link.get('added', None),
            "CoverExpiry": datetime.strptime('1990-01-01', '%Y-%m-%d'),
            })
    return {
            "Success": True,
            "Message":"The member is found, all group info attached",
            "MemberLists": memberlist,
            }

class CreateBeneficiaryRequest(BaseModel):
    TenantID: int
    GroupID: int
    MemberMSISDN: str
    BeneficiaryMSISDN: str
    BeneficiaryName: str
    BeneficiaryGender: str
    BeneficiaryDOB: date
    BeneficiaryPin: str
    InformBeneficiary: bool

class CreateBeneficiaryResponse(BaseModel):
    Success: bool = False
    Message: str

@Member_app.post("/CreateBeneficiary", response_model=CreateBeneficiaryResponse)
def create_beneficiary(validator: CreateBeneficiaryRequest):
    if not validator.TenantID: return {"Message": "Connection Failure"}
    if validator.TenantID != TENANTID: return {"Message": "The Tenant Id is invalid."}
    for k, v in validator.dict().items():
        if isinstance(v, str):
            if not unicode_50(v): return {"Message": "One or more Text fields failed length < 50 check"}
    if validator.MemberMSISDN == validator.BeneficiaryMSISDN: return {"Message": "Member and Beneficiary cannot be the same."}

    msisdn_identity_type_record = get_first_entity_person_identity_type_where_name(db=get_db(entity_controller_db), value="msisdn")
    msisdn_identity_type_id = msisdn_identity_type_record.get("id")

    MemberMSISDN = validator.MemberMSISDN
    msisdn_record = get_member_by_msisdn(MemberMSISDN)

    if not msisdn_record: return {"Message":"The member MSISDN is not found."}
    entity_person_id = msisdn_record.get('entity_person_id')

    entity_person = get_entity_person_by_id(db=get_db(entity_controller_db), target_id=entity_person_id)

    org_client_list = get_all_entity_organisation_client_person_link_where_entity_person_id(db=get_db(entity_controller_db), value=entity_person_id)
    if not org_client_list: return {"Success":True, "Message":"The member MSISDN is invalid."}

    policies = get_all_policy_where_policy_owner_entity_id(db=get_db(entity_controller_db), value=entity_person_id)
    for policy in policies:
        policy_id = policy.get('id', None)

        benefits = get_all_policybenefit_where_policy_id(db=get_db(entity_controller_db), value=policy_id)
        for benefit in benefits:
            policy_benefit_id = benefit.get('id', None)
            beneficiary = get_first_policy_benefit_beneficiary_where_policy_benefit_id(db=get_db(entity_controller_db), value=policy_benefit_id)
            if beneficiary:
                return {"Success":True, "Message":"The member MSISDN already has a beneficiary"}

    temp_dbsession = get_db(entity_controller_db)
    beneficiary_msisdn_found = temp_dbsession.query(entity_person_identity_table). \
            filter(entity_person_identity_table.bln_active==True). \
            filter(entity_person_identity_table.entity_person_identity_type_id==msisdn_identity_type_id). \
            filter(entity_person_identity_table.value==validator.BeneficiaryMSISDN). \
            first()
    if beneficiary_msisdn_found:
        entity_person = get_entity_person_by_id(db=get_db(entity_controller_db), target_id=entity_person_id)
        entity_id = entity_person.get('entity_id')

    else:
        entity = entity_table()
        entity.entity_type_id = 1
        temp_dbsession.add(entity)
        temp_dbsession.flush()
        entity_id = entity.id

        entity_person = entity_person_table()
        entity_person.entity_id = entity.id
        entity_person.surname = ''
        entity_person.firstname = validator.BeneficiaryName
        entity_person.preferred_name = validator.BeneficiaryName
        entity_person.entity_person_gender_type_id = 2
        entity_person.entity_person_title_id = 1
        entity_person.language_id = 123
        entity_person.date_of_birth = validator.BeneficiaryDOB
        entity_person.is_deceased = False
        temp_dbsession.add(entity_person)
        temp_dbsession.flush()

    policies = get_all_policy_where_policy_owner_entity_id(db=get_db(entity_controller_db), value=entity_person_id)
    for policy in policies:
        policy_id = policy.get('id', None)
        benefits = get_all_policybenefit_where_policy_id(db=get_db(entity_controller_db), value=policy_id)
        for benefit in benefits:
            policy_benefit_id = benefit.get('id', None)
            new = policy_benefit_beneficiary_table()
            new.policy_benefit_id = policy_benefit_id
            new.entity_id = entity_id
            new.share_of_sum_insured_percentage = 100
            new.notify = validator.InformBeneficiary
            new.relationship_type_id = 1
            temp_dbsession.add(new)
            temp_dbsession.flush()
    temp_dbsession.close()
    return {
            "Success": True,
            "Message":f"You have added {validator.BeneficiaryName} to GroupID {validator.GroupID} underwritten by Old Mutual. Ts & Cs apply",
            }

class BeneficiaryClaimEntry(BaseModel):
    ClaimID: int
    MemberMSISDN: str
    MemberName: str
    Status: str
    VoucherIDList: str
    ClaimStatusReason: str
    CreatedDateTime: datetime
    GroupID: int

class GetBeneficiaryClaimsResponse(BaseModel):
    Success: bool = False
    Message: str
    BeneficiaryClaimEntries: List[BeneficiaryClaimEntry] = []

@Member_app.get("/GetBeneficiaryClaims", response_model=GetBeneficiaryClaimsResponse)
def get_beneficiary_claims(TenantID: int, BeneficiaryMSISDN: str):
    # SKIPPING SINCE NOT DONE
    if not TenantID or not BeneficiaryMSISDN: return {"Message": "Connection Failure"}
    if TenantID != TENANTID: return {"Message": "The Tenant Id is invalid."}
    if not unicode_50(BeneficiaryMSISDN): return {"Message":"BeneficiaryMSISDN must be of length 1 - 50"}

    return {"Message":"The beneficiary MSISDN was not found."}
    #msisdn_in_member_table = True if random.choice([0, 1]) else False
    #if not msisdn_in_member_table: return {"Message":"The beneficiary MSISDN was not found."}

    member_is_beneficiary_to_claims = True if random.choice([0, 1]) else False
    if not member_is_beneficiary_to_claims: return {"Message": "The Beneficiary has not yet registered any claims."}

    return {
            "Success": True,
            "Message":"The Beneficiary has the following registered claims.",
            "BeneficiaryClaimEntries":[
                {
                    "ClaimID":random.choice(ints_list),
                    "MemberMSISDN": f"MemberMSISDN_{random.choice(ints_list)}",
                    "MemberName": f"MemberName_{random.choice(ints_list)}",
                    "Status": f"Status_{random.choice(ints_list)}",
                    "VoucherIDList": ", ".join(str(random.choice(ints_list)) for x in range(10)),
                    "ClaimStatusReason": f"ClaimStatusReason_{random.choice(ints_list)}",
                    "CreatedDateTime": datetime.strptime("10:10:10 10-10-2010", "%H:%M:%S %d-%m-%Y"),
                    "GroupID": random.choice(ints_list),
                    } for x in range(random.choice([x for x in range(1, 100)]))]
            }

class GetMemberResponse(BaseModel):
    Success: bool = False
    Message: str
    IdNumber: str = None
    Language: str = None
    Name: str = None
    Gender: str = None
    DateOfBirth: date = None

@Member_app.get("/GetMember", response_model=GetMemberResponse)
def get_member(TenantID: int, MSISDN: str):
    if not TenantID or not MSISDN: return {"Message": "Connection Failure"}
    if TenantID != TENANTID: return {"Message": "The Tenant Id is invalid."}
    if not unicode_50(MSISDN): return {"Message":"MSISDN must be of length 1 - 50"}

    msisdn_identity_type_record = get_first_entity_person_identity_type_where_name(db=get_db(entity_controller_db), value="msisdn")
    msisdn_identity_type_id = msisdn_identity_type_record.get("id")

    msisdn_record = get_member_by_msisdn(MSISDN)

    if not msisdn_record: return {"Message":"The member MSISDN is not found."}
    entity_person_id = msisdn_found.entity_person_id
    entity_person = get_entity_person_by_id(db=get_db(entity_controller_db), target_id=entity_person_id)

    name = entity_person.get('firstname', None)
    surname = entity_person.get('surname', None)
    full_name = f'{name} {surname}'

    entity_person_gender_type_id = entity_person.get('entity_person_gender_type_id', None)
    gender_type = get_first_entity_person_gender_type_by_id(db=get_db(entity_controller_db), value=entity_person_gender_type_id)
    gender = gender_type.get('name', '').title()
    date_of_birth = entity_person.get('date_of_birth', None)

    identity_number_identity_type_record = get_first_entity_person_identity_type_where_name(db=get_db(entity_controller_db), value="identity_number")
    identity_number_identity_type_id = identity_number_identity_type_record.get("id")

    identity_number_found = temp_dbsession.query(entity_person_identity_table). \
            filter(entity_person_identity_table.bln_active==True). \
            filter(entity_person_identity_table.entity_person_identity_type_id==identity_number_identity_type_id). \
            filter(entity_person_identity_table.entity_person_id==entity_person_id). \
            first()
    if identity_number_found:
        identity_number = identity_number_found.value
    else:
        identity_number = MSISDN

    temp_dbsession.close()
    return {
            "Success": True,
            "Message":"MSISDN found.",
            "IdNumber": identity_number,
            "Language": 'English',
            "Name": full_name,
            "Gender": gender,
            "DateOfBirth":datetime.strftime(date_of_birth, "%Y-%m-%d"),
            }

class LifeCoverEntry(BaseModel):
    ProductId: int
    VoucherId: int
    Product: str
    CurrencyCode: str
    CurrencySymbol: str
    Cover: Decimal
    ValidFromDate: date
    ValidToDate: date
    VoucherState: str

class LookupLifeCoverResponse(BaseModel):
    Success: bool = False
    Message: str
    CurrencyCode: str = None
    CurrencySymbol: str = None
    TotalCover: Decimal = None
    LifeCoverEntryList: List[LifeCoverEntry] = []

currency_cruds = utilities_controller_cruds.get("currency")
get_first_currency_where_code = currency_cruds.get("get_first_currency_where_code")

entity_organisation_client_cruds = entity_controller_cruds.get("entityorganisationclient")
get_entity_organisation_client_by_id = entity_organisation_client_cruds.get("get_by_id")

entity_organisation_product_owner_cruds = entity_controller_cruds.get("entityorganisationproductowner")
get_entity_organisation_product_owner_by_id = entity_organisation_product_owner_cruds.get("get_by_id")
get_first_entity_organisation_product_owner_where_entity_organisation_id = entity_organisation_product_owner_cruds.get("get_first_entityorganisationproductowner_where_entity_organisation_id")


policy_benefit_insured_life_cruds = policy_controller_cruds.get("policybenefitinsuredlife")
get_all_policy_benefit_insured_life_where_entity_person_id = policy_benefit_insured_life_cruds.get("get_all_policybenefitinsuredlife_where_entity_person_id")

policy_benefit_cruds = policy_controller_cruds.get("policybenefit")
get_policy_benefit_by_id = policy_benefit_cruds.get("get_by_id")

product_benefit_cruds = product_controller_cruds.get("benefit")
get_product_benefit_by_id = product_benefit_cruds.get("get_by_id")

product_cruds = product_controller_cruds.get("product")
get_product_by_id = product_cruds.get("get_by_id")

policy_cruds = policy_controller_cruds.get("policy")
get_policy_by_id = policy_cruds.get("get_by_id")

policy_date_type_cruds = policy_controller_cruds.get("policydatetype")
get_policy_date_type_by_name = policy_date_type_cruds.get("get_first_policydatetype_where_name")
policy_date_table = policy_controller_tables.get("PolicyDate")

policy_benefit_sum_insured_cruds = policy_controller_cruds.get("policybenefitsuminsured")
get_first_policy_benefit_sum_insured_where_policy_benefit_id = policy_benefit_sum_insured_cruds.get("get_first_policybenefitsuminsured_where_policy_benefit_id")

policy_status_table = policy_controller_tables.get("PolicyStatus")
policy_status_type_cruds = policy_controller_cruds.get("policystatustype")
get_policy_status_type_by_id = policy_status_type_cruds.get("get_by_id")

@Member_app.get("/LookupLifeCover", response_model=LookupLifeCoverResponse)
def lookup_life_cover(TenantID: int, GroupID: int, MSISDN: str):
    if not TenantID or not MSISDN: return {"Message": "Connection Failure"}
    if TenantID != TENANTID: return {"Message": "The Tenant Id is invalid."}
    if not GroupID: return {"Message": "The GroupID is invalid or not Supplied."}
    if not unicode_50(MSISDN): return {"Message":"BeneficiaryMSISDN must be of length 1 - 50"}

    # do the member thing
    #group_record = get_first_entity_organisation_where_entity_organisation_id(get_db(entity_controller_db), value=GroupID)
    #print(group_record)
    msisdn_record = get_member_by_msisdn(MSISDN)
    if not msisdn_record: return {"Success":True, "Message":f"The Member MSISDN was not found."}

    entity_person_id = msisdn_record.get("entity_person_id")

    entity_person = get_entity_person_by_id(db=get_db(entity_controller_db), target_id=entity_person_id)

    org_client = get_first_entity_organisation_client_person_link_where_entity_person_id(db=get_db(entity_controller_db), value=entity_person_id)
    if not org_client: return {"Message": "The member is found but does not belong to any groups."}

    currency_record = get_first_currency_where_code(db=get_db(entity_controller_db), value='SZL')
    entity_organisation_client_id = org_client.get("entity_organisation_client_id")
    organisation_client_record = get_entity_organisation_client_by_id(db=get_db(entity_controller_db), target_id=entity_organisation_client_id)
    if not organisation_client_record: return {"Message": "The Group is not enrolled."}
 
    entity_id = entity_person.get("entity_id")
    policy_benefit_insured_life_list = get_all_policy_benefit_insured_life_where_entity_person_id(db=get_db(entity_controller_db), value=entity_person_id)

    group_entity_organisation_product_owner_record = get_first_entity_organisation_product_owner_where_entity_organisation_id(db=get_db(entity_controller_db), value=GroupID)
    group_entity_organisation_id = group_entity_organisation_product_owner_record.get("entity_organisation_id")

    
    life_cover_entry_list = [
            {
                "ValidFromDate": datetime.strptime("10:10:10 10-10-2010", "%H:%M:%S %d-%m-%Y"),
                "ValidToDate": datetime.strptime("11:11:11 11-11-2011", "%H:%M:%S %d-%m-%Y"),
                "VoucherState": f"VoucherState_{random.choice(ints_list)}",
                "Cover": float(f"{random.choice(ints_list)}.{random.choice(ints_list)}")
            } for x in range(10)]

    life_cover_list = []
    policy_date_valid_from_type_record = get_policy_date_type_by_name(db=get_db(policy_controller_db), value="valid_from")
    policy_date_valid_from_type_id = policy_date_valid_from_type_record.get("id")

    policy_date_valid_to_type_record = get_policy_date_type_by_name(db=get_db(policy_controller_db), value="valid_to")
    policy_date_valid_to_type_id = policy_date_valid_to_type_record.get("id")

    for policy_benefit_insured_life in policy_benefit_insured_life_list:
        policy_benefit_id = policy_benefit_insured_life.get("policy_benefit_id")
        policy_benefit = get_policy_benefit_by_id(db=get_db(policy_controller_db), target_id=policy_benefit_id)
        policy_benefit_product_benefit_id = policy_benefit.get("product_benefit_id")
        policy_id = policy_benefit.get("policy_id")
        policy = get_policy_by_id(db=get_db(policy_controller_db), target_id=policy_id)
        policy_number = policy.get("policy_number")

        product_benefit = get_product_benefit_by_id(db=get_db(product_controller_db), target_id=policy_benefit_product_benefit_id)
        product_id = product_benefit.get('product_id')
        product = get_product_by_id(db=get_db(product_controller_db), target_id=product_id)
        matched_entity_organisation_product_owner_id = product.get("entity_organisation_product_owner_id")
        entity_organisation_product_owner = get_entity_organisation_product_owner_by_id(db=get_db(entity_controller_db), target_id=matched_entity_organisation_product_owner_id)
        matched_entity_organisation_id = entity_organisation_product_owner.get("entity_organisation_id")
        matched_entity_organisation = get_entity_organisation_by_id(db=get_db(entity_controller_db), target_id=matched_entity_organisation_id)
        product_name = product.get("name")

        if not matched_entity_organisation_id == group_entity_organisation_id: continue

        policy_benefit_sum_insured_record = get_first_policy_benefit_sum_insured_where_policy_benefit_id(db=get_db(policy_controller_db), value=policy_benefit_id)
        if not policy_benefit_sum_insured_record: cover = 0.00
        else: cover = policy_benefit_sum_insured_record.get("initial_sum_insured_amount")


        temp_dbsession = get_db(policy_controller_db)
        valid_from_policy_date_record = temp_dbsession.query(policy_date_table). \
                filter(policy_date_table.bln_active==True). \
                filter(policy_date_table.policy_date_type_id==policy_date_valid_from_type_id). \
                filter(policy_date_table.policy_id==policy_id). \
                order_by(desc(policy_date_table.added)). \
                first()
        valid_from_dict = get_returnable_dict(valid_from_policy_date_record)
        temp_dbsession.close()

        temp_dbsession = get_db(policy_controller_db)
        valid_to_policy_date_record = temp_dbsession.query(policy_date_table). \
                filter(policy_date_table.bln_active==True). \
                filter(policy_date_table.policy_date_type_id==policy_date_valid_to_type_id). \
                filter(policy_date_table.policy_id==policy_id). \
                order_by(desc(policy_date_table.added)). \
                first()
        valid_to_dict = get_returnable_dict(valid_to_policy_date_record)
        temp_dbsession.close()

        temp_dbsession = get_db(policy_controller_db)
        policy_status_record = temp_dbsession.query(policy_status_table). \
                filter(policy_status_table.bln_active==True). \
                filter(policy_status_table.current_status==True). \
                filter(policy_status_table.policy_id==policy_id). \
                first()
        print(policy_status_record)
        policy_status_dict = get_returnable_dict(policy_status_record)

        policy_status_type_id = policy_status_dict.get("policy_status_type_id")
        policy_status_type = get_policy_status_type_by_id(db=get_db(policy_controller_db), target_id=policy_status_type_id)
        temp_dbsession.close()

        life_cover_dict = {
                "ProductId":product_id,
                "VoucherId":policy_number,
                "Product":product_name,
                "CurrencyCode": currency_record.get("code"),
                "CurrencySymbol": "E",
                "ValidFromDate":valid_from_dict.get("date"),
                "ValidToDate":valid_to_dict.get("date"),
                "Cover":cover,
                "VoucherState":f"{policy_status_type.get('name').capitalize()}",
                }

        life_cover_list.append(life_cover_dict)
        
    returnable = {
            "Success": True,
            "Message":"MSISDN found.",
            "CurrencyCode": currency_record.get("code"),
            "CurrencySymbol": "E",
            }

    # get product, policies

    returnable['LifeCoverEntryList'] = life_cover_list
    total_cover = sum(entry.get("Cover") for entry in life_cover_list)
    returnable["TotalCover"] = total_cover
    return  returnable

class UpdateBeneficiaryRequest(BaseModel):
    TenantID: int
    GroupID: int
    MSISDN: str
    BeneficiaryMSISDN: str
    Name: str
    Gender: str
    DateOfBirth: date
    InformBeneficiary: bool

class Text(BaseModel):
    value: str

class UpdateBeneficiaryResponse(BaseModel):
    Success: bool = False
    Message: str

@Member_app.post("/UpdateBeneficiary", response_model=UpdateBeneficiaryResponse)
def update_beneficiary(validator: UpdateBeneficiaryRequest):
    if validator.TenantID != TENANTID: return {"Message": "The Tenant Id is invalid."}
    if not validator.MSISDN: return {"Message": "The Member MSISDN is invalid"}
    if not validator.BeneficiaryMSISDN: return {"Message": "The Beneficiary MSISDN is invalid"}
    if not validator.Name: return {"Message": "The Beneficiary Name is invalid"}
    if validator.BeneficiaryMSISDN == validator.MSISDN: return {"Message": "Member and Beneficiary cannot be the same"}

    msisdn_in_member_table_and_registered_for_group = True if random.choice([0, 1]) else False
    if not msisdn_in_member_table_and_registered_for_group: return {"Success":True, "Message":f"The MSISDN is not valid."}

    beneficiary_msisdn_record_exists = True if random.choice([0, 1]) else False
    beneficiary_is_registered_as_enrolled_for_this_group = True if random.choice([0, 1]) else False
    if beneficiary_is_registered_as_enrolled_for_this_group: return {"Success": True, "Message":"There are no valid fields to be updated."}

    new_member_created_for_this_beneficiary_or_existing_lead_and_linked_as_beneficiary = True if random.choice([0, 1]) else False
    if new_member_created_for_this_beneficiary_or_existing_lead_and_linked_as_beneficiary: return {"Success": True, "Message": "The beneficiary details have been successfully updated."}

    existing_member_and_no_different_fields = True if random.choice([0, 1]) else False
    returnable = {"Message":"No Valid route Found"}
    if existing_member_and_no_different_fields: returnable =  {"Success":True, "Message":"Change was successful, Beneficiary is also a main member on another policy and must change own person details"}
    elif not existing_member_and_no_different_fields: returnable = {"Success":True, "Message":"Change was unsuccessful, Beneficiary is also a main member on another policy and must change own person details"}
    send_sms_to_beneficiary = False
    if validator.InformBeneficiary: send_sms_to_beneficiary = True
    return returnable

class UpdateMemberRequest(BaseModel):
    TenantID: int
    MSISDN: str
    Name: str
    Gender: str
    DateOfBirth: date
    Language: str
    IDNumber: str
    PIN: str

class UpdateMemberResponse(BaseModel):
    Success: bool = False
    Message: str

@Member_app.post("/UpdateMember", response_model=UpdateMemberResponse)
def update_member(validator: UpdateMemberRequest):
    if validator.TenantID != TENANTID: return {"Message": "The Tenant Id is invalid."}
    if not validator.MSISDN: return {"Message": "The Member MSISDN is not specified"}
    if not validator.Name: return {"Message": "The Member Name is invalid"}

    msisdn_in_member_table = True if random.choice([0, 1]) else False
    if not msisdn_in_member_table: return {"Success":True, "Message":f"The MSISDN is invalid."}

    member_deceased = True if random.choice([0, 1]) else False
    if member_deceased: return {"Success": True, "Message": "The member is deceased, Nothing updated."}

    differing_fields = True if random.choice([0, 1]) else False
    returnable = {}
    if not differing_fields: returnable = {"Success":True, "Message":"There are no fields that have been updated."}
    elif differing_fields: returnable = {"Success":True, "Message":"There are some fields that have been updated."}
    return returnable
