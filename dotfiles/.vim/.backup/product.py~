# -*- coding: utf-8 -*-
"""Product controller module"""

from webob.static import FileApp
from tg import predicates, require
from tg import response, use_wsgi_app
from tg import expose, redirect, validate, url, request

from tg.i18n import ugettext as _
from tg.i18n import lazy_ugettext as l_

from rocket.model import *

from rocket.lib.tg_utils import *
from rocket.lib.base import BaseController
from rocket.lib.type_utils import TypeDictionary
from rocket.lib.tgfileuploader import FileUploader

from rocket.controllers.common import CommonController

from sqlalchemy import func, desc, asc, or_
from sqlalchemy.orm.session import make_transient

FILENAME = os.path.abspath(resource_filename('rocket', 'public'))
PUBLIC_DIRNAME = os.path.join(FILENAME)
PDF_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'pdf')
UPLOADS_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'uploads')

SEARCHKEY_PRODUCT = 'Product_SearchKeyword'
SEARCHKEY_CLAIMQUESTION = 'ClaimQuestions_SearchKeyword'
SEARCHKEY_PRODUCTALLOCATION = 'BenefitAllocation_SearchKeyword'
SEARCHKEY_GENERALLEDGERACCOUNTS = 'GeneralLedgerAccount_SearchKeyword'

IMG_ACTIVE = "<img src='/images/icon_check.png' />"
IMG_INACTIVE = "<img src='/images/icon_cross.png' />"

LIMIT = 20
TYPEUTIL = TypeDictionary()
COMMON = CommonController()

FIXED = TYPEUTIL.get_id_of_name('benefit_price_type', 'fixed')
RATE_TABLE = TYPEUTIL.get_id_of_name('benefit_price_type', 'rate_table')

INDIVIDUAL = TYPEUTIL.get_id_of_name('benefit_purchase_type', 'individual')

CLAIM = TYPEUTIL.get_id_of_name('benefit_allocation_type', 'claim')
REFUND = TYPEUTIL.get_id_of_name('benefit_allocation_type', 'refund')
PURCHASE = TYPEUTIL.get_id_of_name('benefit_allocation_type', 'purchase')
REDEMPTION = TYPEUTIL.get_id_of_name('benefit_allocation_type', 'redemption')
ACQUISITION = TYPEUTIL.get_id_of_name('benefit_allocation_type', 'acquisition')

PRINCIPAL = TYPEUTIL.get_id_of_name('benefit_insured_life_relationship_type', 'principal')

BUSINESS = TYPEUTIL.get_id_of_name('benefit_asset_type', 'business')
EMPLOYEE = TYPEUTIL.get_id_of_name('benefit_asset_type', 'employee')
PROPERTY = TYPEUTIL.get_id_of_name('benefit_asset_type', 'property')
LANDLORD = TYPEUTIL.get_id_of_name('benefit_asset_type', 'landlord')
VEHICLE = TYPEUTIL.get_id_of_name('benefit_asset_type', 'vehicle')
ASSET_SHOW_LIFE_INSURED_FORM_LIST = [BUSINESS, EMPLOYEE, LANDLORD]

class ProductController(BaseController):

    @expose()
    def _default(self, *args, **kwargs):
        return 'This page is not available.'

    ###############################################################################
    # Suspense Accounts
    ###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def suspense_accounts(self, *args, **kwargs):
        html = ""
        javascript = ""
        title = "Suspense Accounts"
        return dict(title=title, html=html, javascript=javascript)

    ###############################################################################
    # General Ledger Accounts - GL Accounts
    ###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def gl_accounts(self, *args, **kwargs):
        html = self.get_general_ledger_accounts_html(*args, **kwargs)
        javascript = self.get_javascript_general_ledger_accounts_onload()
        title = "General Ledger Accounts"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_general_ledger_accounts_html(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        kwargs['searchkey'] = SEARCHKEY_GENERALLEDGERACCOUNTS
        searchphrase = COMMON.get_searchphrase(**kwargs)
        general_ledger_accountstable = self.get_general_ledger_accounts_htmltbl(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">General Ledger Accounts</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_general_ledger_accounts" class="btn btn-primary ml-auto">Create New General Ledger Account</button>
                            </div>
                        </div>
                        <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                <input type="text" class="form-control search" name="searchphrase" id='searchphrase'  value='{searchphrase}' placeholder="Search">
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary" id='action_search'>Search</button>
                                <button class="btn btn-primary" id='btn_reset'>Reset</button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive" id='div_gl_account'>
                            {general_ledger_accountstable}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            $("#create_general_ledger_accounts").click(function(){
                $('#dialogdiv').load('/product/get_modal_new_general_ledger_accounts?', function(data){
                    return false;
                });
            });
            $('#action_search').click(function(){
                var kwargs = 'searchphrase='+$('#searchphrase').val();
                $('#div_gl_account').load('/product/get_general_ledger_accounts_htmltbl', kwargs, function(data){
                    return false;
                });
            })
            $('#btn_reset').click(function(){
                $('#searchphrase').val('').focus();
                $('#div_gl_account').load('/product/get_general_ledger_accounts_htmltbl', 'reset=true', function(data){
                    return false;
                });
            })
        </script>
        """
        return html + javascript

    @expose()
    def get_general_ledger_accounts_htmltbl(self, *args, **kwargs):
        dbase_query = self.get_general_ledger_accounts_list(*args, **kwargs)
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'name': "<div class='edit general_ledger_accounts_edit' general_ledger_accounts_id='{1}'>{0}</div>".format(
                    item.gl_name, item.id),
                'debit_account': item.debit_account,
                'credit_account': item.credit_account,
                'gl_key': item.gl_key,
            })
        dbcolumnlist = [
            'name',
            'debit_account',
            'credit_account',
            'gl_key',
        ]
        theadlist = [
            'Name',
            'Debit Account',
            'Credit Account',
            'GL Key',
        ]
        tdclasslist = [
            'action_link',
            'text-center',
            'text-center',
            'text-right',
        ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, 'gl_accounttable', tdclasslist)
        javascript = """
            <script nonce='1234'>
              $(".general_ledger_accounts_edit").click(function(){
                  var kwargs = 'general_ledger_accounts_id='+$(this).attr('general_ledger_accounts_id');
                  $('#dialogdiv').load('/product/get_modal_edit_general_ledger_accounts?', kwargs, function(data){
                      return false;
                      });
                  });
                  </script>
              """
        return html + javascript

    @expose()
    def get_javascript_general_ledger_accounts_onload(self, *args, **kwargs):
        javascript = """
        """
        return javascript

    @expose()
    def get_modal_new_general_ledger_accounts(self, *args, **kwargs):
        html = """
            <div class="modal fade" id="dialog_new_general_ledger_accounts" tabindex="-1" role="dialog" aria-labelledby="mygeneral_ledger_accountsLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">New General Ledger Account</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_general_ledger_accounts'>
                                    <div class="col-md-12">
                                        <div class="form-group row">
                                                <label class="col-md-3 col-form-label" required for="name">Name</label>
                                                <div class="col-md-9">
                                                        <input id="name" type="text" name="name" class="form-control" required='true'>
                                                </div>
                                        </div>
                                </div>
                                    <div class="col-md-12">
                                        <div class="form-group row">
                                                <label class="col-md-3 col-form-label" required for="debit_account">Debit Account</label>
                                                <div class="col-md-9">
                                                        <input id="debit_account" type="text" name="debit_account" class="form-control" required='true'>
                                                </div>
                                        </div>
                                </div>
                                    <div class="col-md-12">
                                        <div class="form-group row">
                                                <label class="col-md-3 col-form-label" required for="credit_account">Credit Account</label>
                                                <div class="col-md-9">
                                                        <input id="credit_account" type="text" name="credit_account" class="form-control" required='true'>
                                                </div>
                                        </div>
                                </div>
                                    <div class="col-md-12">
                                        <div class="form-group row">
                                                <label class="col-md-3 col-form-label" required for="gl_key">Gl Key</label>
                                                <div class="col-md-9">
                                                        <input id="gl_key" type="text" name="gl_key" class="form-control" required='true'>
                                                </div>
                                        </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_general_ledger_accounts' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary general_ledger_accounts_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
        <script nonce='1234'>
            setFormValidation('#form_new_general_ledger_accounts');
            $('#save_new_general_ledger_accounts').click(function(){
                var valid = FormIsValid("#form_new_general_ledger_accounts");
                if(valid){
                    var formserial = getFormData('#form_new_general_ledger_accounts');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/product/save_new_general_ledger_accounts?', data, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect('/product/gl_accounts');
                            };
                        showNotification(result.status, result.data);
                        return false;
                        });
                    }
                });
            $('.general_ledger_accounts_back').click(function(){
                $('#dialog_new_general_ledger_accounts').modal('hide');
                });
            $('#dialog_new_general_ledger_accounts').modal();
        </script>
        """
        return html + javascript

    @expose()
    def get_modal_edit_general_ledger_accounts(self, *args, **kwargs):
        general_ledger_accounts_id = kwargs.get('general_ledger_accounts_id', None)
        if not general_ledger_accounts_id:
            return ''
        this = self.get_general_ledger_accounts_by_id(*args, **kwargs)
        if not this:
            return ''
        checked = 'checked' if this.bln_active else ''
        html = f"""
        <div class="modal fade" id="dialog_edit_general_ledger_accounts" tabindex="-1" role="dialog" aria-labelledby="mygeneral_ledger_accountsLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">Edit General Ledger Account</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_edit_general_ledger_accounts'>
                            <div style='display: none' class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="general_ledger_accounts_id">ID</label>
                                    <div class="col-md-9">
                                        <input id="id" type="text" name="general_ledger_accounts_id" value="{this.id}" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="name">Name</label>
                                    <div class="col-md-9">
                                        <input id="name" type="text" name="name" value="{this.gl_name}" class="form-control" required='true' disabled='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="debit_account">Debit Account</label>
                                    <div class="col-md-9">
                                        <input id="debit_account" type="text" name="debit_account" value="{this.debit_account}" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="credit_account">Credit Account</label>
                                    <div class="col-md-9">
                                        <input id="credit_account" type="text" name="credit_account" value="{this.credit_account}" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="gl_key">Gl Key</label>
                                    <div class="col-md-9">
                                        <input id="gl_key" type="text" name="gl_key" value="{this.gl_key}" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-3 col-form-label" for="active" required>Active</label>
                                    <div class="col-9">
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                <span class="form-check-sign"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_edit_general_ledger_accounts' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary general_ledger_accounts_back" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            setFormValidation('#form_edit_general_ledger_accounts');
            $('#save_edit_general_ledger_accounts').click(function(){
                var valid = FormIsValid("#form_edit_general_ledger_accounts");
                if(valid){
                    var formserial = getFormData('#form_edit_general_ledger_accounts');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/product/save_edit_general_ledger_accounts?', data, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect('/product/gl_accounts');
                        };
                        showNotification(result.status, result.data);
                        return false;
                        });
                    }
                });
            $('.general_ledger_accounts_back').click(function(){
                $('#dialog_edit_general_ledger_accounts').modal('hide');
            });
            $('#dialog_edit_general_ledger_accounts').modal();
        </script>
        """
        return html + javascript

    @expose()
    def save_new_general_ledger_accounts(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data:
            return json.dumps({'success': False, 'data': 'No data provided', 'status': 'danger'})
        usernow = request.identity.get('user', {})
        gl_name = data.get('name', None)
        exists = DBSession.query(GeneralLedgerAccount). \
            filter(GeneralLedgerAccount.gl_name == gl_name). \
            filter(GeneralLedgerAccount.bln_active == True). \
            first()
        if exists: return json.dumps(
            {'success': False, 'data': 'An account with this name already exists', 'status': 'danger'})
        this = GeneralLedgerAccount()
        this.gl_name = gl_name
        this.debit_account = data.get('debit_account', None)
        this.credit_account = data.get('credit_account', None)
        this.gl_key = data.get('gl_key', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id, 'status': 'success'})

    @expose()
    def save_edit_general_ledger_accounts(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data:
            return json.dumps({'success': False, 'data': 'No data provided', 'status': 'danger'})
        usernow = request.identity.get('user', {})
        this = self.get_general_ledger_accounts_by_id(**data)
        if not this:
            return json.dumps( {'success': False, 'data': 'No general_ledger_accounts found for id provided', 'status': 'danger'})
        this.debit_account = data.get('debit_account', None)
        this.credit_account = data.get('credit_account', None)
        this.gl_key = data.get('gl_key', None)
        if not data.get('active', None): this.bln_active = False
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id, 'status': 'success'})

    @expose()
    def get_general_ledger_accounts_by_id(self, *args, **kwargs):
        return DBSession.query(GeneralLedgerAccount). \
            filter(GeneralLedgerAccount.id == kwargs.get('general_ledger_accounts_id', None)). \
            first()

    @expose()
    def get_general_ledger_accounts_list(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_GENERALLEDGERACCOUNTS
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()
        if searchphrase:
            searchphrase = "%" + searchphrase + "%"
            dbase_query = DBSession.query(GeneralLedgerAccount). \
                filter(or_(GeneralLedgerAccount.gl_key.like(searchphrase),
                           GeneralLedgerAccount.gl_name.like(searchphrase),
                           GeneralLedgerAccount.debit_account.like(searchphrase),
                           GeneralLedgerAccount.credit_account.like(searchphrase), )). \
                filter(GeneralLedgerAccount.bln_active == True). \
                order_by(asc(GeneralLedgerAccount.gl_name)). \
                limit(LIMIT)
            return dbase_query

        else:
            dbase_query = DBSession.query(GeneralLedgerAccount). \
                filter(GeneralLedgerAccount.bln_active == True). \
                order_by(asc(GeneralLedgerAccount.gl_name)). \
                limit(LIMIT)
        return dbase_query

    @expose()
    def get_selectbox_gl_accounts(self, *args, **kwargs):
        kwargs['required'] = True
        kwargs['id'] = kwargs.get('id', 'gl_account_id')
        dbase_query = DBSession.query(GeneralLedgerAccount). \
                filter(GeneralLedgerAccount.bln_active == True). \
                order_by(GeneralLedgerAccount.gl_name.asc()). \
                all()
        kwargs['outputlist'] = [{'name': x.gl_name, 'id': x.id} for x in dbase_query]
        selectbox_gl_accounts = create_selectbox_html(**kwargs)
        html = f"""
        <div class="col-md-12">
            <div class="form-group row">
                <label class="col-md-3 col-form-label" required for="gl_account_id">GL Account</label>
                <div class="col-md-9">
                    {selectbox_gl_accounts}
                </div>
            </div>
        </div>
        """
        return html

    ###############################################################################
    # Allocations
    ###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def allocations(self, *args, **kwargs):
        html = self.get_allocations_html(*args, **kwargs)
        javascript = self.get_javascript_allocations_onload()
        title = "Allocations"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_allocations_html(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        kwargs['searchkey'] = SEARCHKEY_PRODUCTALLOCATION
        searchphrase = COMMON.get_searchphrase(**kwargs)
        allocationstable = self.get_allocation_htmltbl(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Allocations</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_allocations" class="btn btn-primary ml-auto">Create New Allocation</button>
                        </div>
                    </div>
                      <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                <input type="text" class="form-control search" name="searchphrase" id='searchphrase'  value='{searchphrase}' placeholder="Search">
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary" id='action_search'>Search</button>
                                <button class="btn btn-primary" id='btn_reset'>Reset</button>
                            </div>
                        </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive" id='div_allocation_table'>
                        {allocationstable}
                    </div>
                </div>
                </div>
            </div>
        """
        javascript = """
              <script nonce='1234'>
             $("#create_allocations").click(function(){
                $('#dialogdiv').load('/product/get_modal_new_allocations?', function(data){
                    return false;
                });
            });
                    $('#action_search').click(function(){
                       var kwargs = 'searchphrase='+$('#searchphrase').val();
                       $('#div_allocation_table').load('/product/get_allocation_htmltbl', kwargs, function(data){
                           return false;
                       });
                   })
                   $('#btn_reset').click(function(){
                    $('#searchphrase').val('').focus();
                       $('#div_allocation_table').load('/product/get_allocation_htmltbl', 'reset=true', function(data){
                           return false;
                       });
                   })
                   </script>
                   """
        return html + javascript

    @expose()
    def get_allocation_htmltbl(self, *args, **kwargs):
        dbase_query = self.get_allocations_list(*args, **kwargs)
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'name': f"<div class='allocations_edit' allocation_id='{item.id}'>{item.name}</div>",
            })
        dbcolumnlist = [
            'name',
        ]
        theadlist = [
            'Name',
        ]
        tdclasslist = [
            'action_link',
        ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "allocations_table", tdclasslist)
        javascript = """
           <script nonce='1234'>
              $(".allocations_edit").click(function(){
                var kwargs = 'allocation_id='+$(this).attr('allocation_id');
                $('#dialogdiv').load('/product/get_modal_edit_allocations?', kwargs, function(data){
                    return false;
                });
            });
            </script>
            """
        return html + javascript

    @expose()
    def get_javascript_allocations_onload(self, *args, **kwargs):
        javascript = """


            """
        return javascript

    @expose()
    def get_modal_new_allocations(self, *args, **kwargs):
        html = """
            <div class="modal fade" id="dialog_new_allocations" tabindex="-1" role="dialog" aria-labelledby="myallocationsLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">New Allocation</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_allocations'>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                            <label class="col-md-3 col-form-label" required for="name">Name</label>
                                            <div class="col-md-9">
                                                    <input id="name" type="text" name="name" class="form-control" required='true'>
                                            </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_allocations' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary allocations_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
        <script nonce='1234'>
            setFormValidation('#form_new_allocations');
            $('#save_new_allocations').click(function(){
                 var valid = FormIsValid("#form_new_allocations");
                 if(valid){
                    var formserial = getFormData('#form_new_allocations');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/product/save_new_allocations?', data, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect('/product/allocations');
                        };
                        return false;
                    });
                 }
            });
            $('.allocations_back').click(function(){
                $('#dialog_new_allocations').modal('hide');
            });
            $('#dialog_new_allocations').modal();
        </script>
        """
        return html + javascript

    @expose()
    def get_modal_edit_allocations(self, *args, **kwargs):
        allocation_id = kwargs.get('allocation_id', None)
        if not allocation_id:
            return ''
        this = self.get_allocations_by_id(*args, **kwargs)
        if not this:
            return ''
        checked = 'checked' if this.bln_active else ''
        html = f"""
            <div class="modal fade" id="dialog_edit_allocations" tabindex="-1" role="dialog" aria-labelledby="myallocationsLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">Edit Allocation</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_edit_allocations'>
                                <div style='display: none' class="col-md-6">
                                        <div class="form-group row">
                                                <label class="col-md-3 col-form-label" required for="allocation_id">ID</label>
                                                <div class="col-md-9">
                                                        <input id="id" type="text" name="allocation_id" value="{this.id}" class="form-control" required='true'>
                                                </div>
                                        </div>
                                </div>
                                <div class="col-md-12">
                                        <div class="form-group row">
                                                <label class="col-md-3 col-form-label" required for="name">Name</label>
                                                <div class="col-md-9">
                                                        <input id="name" type="text" name="name" value="{this.name}" class="form-control" required='true'>
                                                </div>
                                        </div>
                                </div>
                              <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-3 col-form-label" for="active" required>Active</label>
                                    <div class="col-9">
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                <span class="form-check-sign"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_edit_allocations' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary allocations_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
        <script nonce='1234'>
            setFormValidation('#form_edit_allocations');
            $('#save_edit_allocations').click(function(){
                var valid = FormIsValid("#form_edit_allocations");
                if(valid){
                    var formserial = getFormData('#form_edit_allocations');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/product/save_edit_allocations?', data, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect('/product/allocations');
                        };
                        return false;
                    });
                }
            });
            $('.allocations_back').click(function(){
                $('#dialog_edit_allocations').modal('hide');
            });
            $('#dialog_edit_allocations').modal();
        </script>
        """
        return html + javascript

    @expose()
    def save_new_allocations(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data:
            return json.dumps({'success': False, 'data': 'No data provided'})
        usernow = request.identity.get('user', {})
        this = BenefitAllocation()
        this.name = data.get('name', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def save_edit_allocations(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data:
            return json.dumps({'success': False, 'data': 'No data provided'})
        usernow = request.identity.get('user', {})
        this = self.get_allocations_by_id(**data)
        if not this:
            return json.dumps({'success': False, 'data': 'No allocations found for id provided'})
        this.name = data.get('name', None)
        if not data.get('active', None):
            this.bln_active = False
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def get_allocations_by_id(self, *args, **kwargs):
        return DBSession.query(BenefitAllocation). \
            filter(BenefitAllocation.id == kwargs.get('allocation_id', None)). \
            first()

    @expose()
    def get_allocations_list(self, *args, **kwargs):

        usernow = request.identity.get('user', None)
        kwargs['searchkey'] = SEARCHKEY_PRODUCTALLOCATION
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()

        if searchphrase:
            searchphrase = "%" + searchphrase + "%"
            dbase_query = DBSession.query(BenefitAllocation). \
                filter(BenefitAllocation.name.like(searchphrase)). \
                filter(BenefitAllocation.bln_active == 1). \
                order_by(asc(BenefitAllocation.name)).limit(LIMIT)
        else:
            dbase_query = DBSession.query(BenefitAllocation). \
                filter(BenefitAllocation.bln_active == 1). \
                order_by(asc(BenefitAllocation.name)). \
                limit(LIMIT)
        return dbase_query

    def get_selectbox_allocation_types(self, *args, **kwargs):
        kwargs['required'] = True
        kwargs['id'] = kwargs.get('id', 'benefit_allocation_type_id')

        benefit_id = kwargs.get('benefit_id', None)
        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            kwargs['outputdict'] = TYPEUTIL.get_dict_of_types('benefit_allocation_type')
            return create_selectbox_html(**kwargs)

        zero = float(0)
        if benefit.premium > zero and benefit.sum_insured > zero:
            kwargs['outputdict'] = TYPEUTIL.get_dict_of_types('benefit_allocation_type')
            return create_selectbox_html(**kwargs)

        if benefit.premium > zero and not benefit.sum_insured:
            exclude_list = [CLAIM, REDEMPTION, REFUND]
        elif benefit.sum_insured > zero and not benefit.premium:
            exclude_list = [PURCHASE, ACQUISITION]

        outputlist = []
        dbase_query = BenefitAllocationType.get_all('name')
        for item in dbase_query:
            if item.id not in exclude_list:
                outputlist.append({
                    'id' : item.id,
                    'name' : item.name
                })

        kwargs['outputlist'] = outputlist
        return create_selectbox_html(**kwargs)

    def get_selectbox_allocations(self, *args, **kwargs):
        kwargs['required'] = True
        kwargs['id'] = kwargs.get('id', 'benefit_allocation_id')
        dbase_query = BenefitAllocation.get_all('name')
        kwargs['outputlist'] = [{'name': x.name, 'id': x.id} for x in dbase_query]
        selectbox = create_selectbox_html(**kwargs)
        html = f"""
        <div class="col-md-12">
            <div class="form-group row">
                <label class="col-md-3 col-form-label" required for="allocation_id">Allocation Name</label>
                <div class="col-md-9">
                    {selectbox}
                </div>
            </div>
        </div>
        """
        return html

    def get_selectbox_payment_received_type(self, *args, **kwargs):
        kwargs['required'] = False
        kwargs['id'] = kwargs.get('id', 'payment_received_type_id')
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("payment_received_type")
        selectbox = create_selectbox_html(**kwargs)
        html = f"""
        <div class="col-md-12">
            <div class="form-group row">
                <label class="col-md-3 col-form-label" for="payment_received_type_id">Transaction Type</label>
                <div class="col-md-9">
                    {selectbox}
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_selectbox_allocation_calculation_types(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        report_only = str_to_bool(kwargs.get('report_only', False))
        benefit_allocation_link_id = kwargs.get('benefit_allocation_link_id', None)
        benefit_allocation_calculation_type_id = kwargs.get('benefit_allocation_calculation_type_id', None)

        if benefit_allocation_calculation_type_id:
            kwargs['selected'] = benefit_allocation_calculation_type_id
        else:
            if not report_only:
                if benefit.premium_increase_percentage or benefit.sum_insured_increase_percentage:
                    kwargs['selected'] = TYPEUTIL.get_id_of_name('benefit_allocation_calculation_type', 'percentage')
                    kwargs['disabled'] = True

        kwargs['required'] = True
        kwargs['id'] = kwargs.get('id', 'benefit_allocation_calculation_type_id')
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("benefit_allocation_calculation_type")
        selectbox = create_selectbox_html(**kwargs)
        html = f"""
        <div class="col-md-12">
            <div class="form-group row">
                <label class="col-md-3 col-form-label" required for="benefit_allocation_calculation_type_id">Calculation Type</label>
                <div class="col-md-9">
                    {selectbox}
                </div>
            </div>
        </div>
        <div id='div_calculation_result_fields' benefit_allocation_link_id='{benefit_allocation_link_id}'></div>
        """
        javascript = """
        <script nonce='1234'>
            $('#benefit_allocation_calculation_type_id').change(function(){
                var selected = $('#benefit_allocation_calculation_type_id option:selected').val();
                var benefit_allocation_link_id = $('#div_calculation_result_fields').attr('benefit_allocation_link_id');
                var kwargs = 'benefit_allocation_calculation_type_id='+selected;
                kwargs += '&benefit_allocation_link_id=' + benefit_allocation_link_id;
                $('#div_calculation_result_fields').load('/product/get_calculation_type_result_html', kwargs, function(data){
                    return false;
                });
            });
            $('#benefit_allocation_calculation_type_id').trigger('change');
        </script>
        """
        return html + javascript

    @expose()
    def get_calculation_type_result_html(self, *args, **kwargs):
        benefit_allocation_link_id = kwargs.get('benefit_allocation_link_id', None)
        benefit_allocation_calculation_type_id = str_to_int(kwargs.get('benefit_allocation_calculation_type_id', 0))
        if not benefit_allocation_calculation_type_id:
            return ''

        amount = TYPEUTIL.get_id_of_name('benefit_allocation_calculation_type', 'amount')
        factor = TYPEUTIL.get_id_of_name('benefit_allocation_calculation_type', 'factor')
        percentage = TYPEUTIL.get_id_of_name('benefit_allocation_calculation_type', 'percentage')

        name = None
        value = ''
        if benefit_allocation_calculation_type_id == amount:
            name = 'amount'
            link = BenefitAllocationLinkCalculationAmount.by_attr_first('benefit_allocation_link_id', benefit_allocation_link_id)
            if link and link.amount:
                value = getcurrency(link.amount)

        if benefit_allocation_calculation_type_id == factor:
            name = 'factor'
            link = BenefitAllocationLinkCalculationFactor.by_attr_first('benefit_allocation_link_id', benefit_allocation_link_id)
            if link and link.factor:
                value = int(link.factor)

        if benefit_allocation_calculation_type_id == percentage:
            name = 'percentage'
            link = BenefitAllocationLinkCalculationPercentage.by_attr_first('benefit_allocation_link_id', benefit_allocation_link_id)
            if link and link.percentage:
                value = int(link.percentage)

        if not name:
            return ''

        html = f"""
        <div class="col-md-12">
            <div class="form-group row">
                <label class="col-md-3 col-form-label" required for="{name}">{name.title()}</label>
                <div class="col-md-9">
                    <input type="number" class="form-control" name="{name}" id='{name}' value='{value}'/>
                </div>
            </div>
        </div>
        """
        return html

    ###############################################################################
    # Product - List
    ###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def index(self, *args, **kwargs):
        html = self.get_product_html(*args, **kwargs)
        javascript = self.get_javascript_product_onload()
        title = _("Products")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_product_html(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        kwargs['searchkey'] = SEARCHKEY_PRODUCT
        searchphrase = COMMON.get_searchphrase(**kwargs)
        selectbox_product_states = self.get_selectbox_product_states(
            **{'id': 'product_state_id', 'class_names': 'col-md-4', })
        selectbox_product_types = self.get_selectbox_product_types(
            **{'id': 'product_type_id', 'class_names': 'col-md-4', })
        producttable = self.get_product_htmltbl(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Products</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_product" class="btn btn-primary ml-auto">Create New Product</button>
                            </div>
                        </div>
                        <div class="row d-flex align-items-center">
                            <div class="col-md-8 d-flex">
                                <input type="text" class="form-control search" name="searchphrase" id='searchphrase'  value='{searchphrase}' placeholder="Search by Code or Description">
                                {selectbox_product_states}
                                {selectbox_product_types}
                            </div>
                            <div class="col-md-4 pl-0">
                                <button class="btn btn-primary" id='action_search'>Search</button>
                                <button class="btn btn-primary" id='btn_reset'>Reset</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div id='div_product_table' class="table-responsive">
                            {producttable}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_javascript_product_onload(self, *args, **kwargs):
        javascript = """
        $("#create_product").click(function(){
            $('#dialogdiv').load('/product/get_modal_new_product?', function(data){
                return false;
            });
        });
        $(".edit_product").click(function(){
            var product_id = $(this).attr('product_id');
            var product_state = $(this).attr('product_state');
            if (product_state == 'active') {
                $('#dialogdiv').load('/product/get_product_status_warning_modal?', {'product_id': product_id}, function(data) {
                    return false
                });
            } else {
            $.redirect('/product/edit_product', {'product_id' : product_id})};
        });
        var search_kwargs = {};
        $('#product_state_type_id').change(function(){
            var selected = $('#product_state_type_id option:selected').val();
            var kwargs = {'product_state_type_id': selected};

            search_kwargs = Object.assign(search_kwargs, kwargs);
        });
        $('#product_type_id').change(function(){
            var selected = $('#product_type_id option:selected').val();
            var kwargs = {'product_type_id': selected};

            search_kwargs = Object.assign(search_kwargs, kwargs);
        });
        $('#action_search').click(function(){
            var searchphrase = $('#searchphrase').val();
            var kwargs = {'searchphrase': searchphrase};
            search_kwargs = Object.assign(search_kwargs, kwargs);
            $('#div_product_table').load('/product/get_product_htmltbl', search_kwargs, function(data){
                return false;
            });
        })
        $('#btn_reset').click(function(){
            $('#searchphrase').val('').focus();
            $('#product_state_type_id').val("0");
            $('#product_state_type_id').trigger('change')
            $('#product_type_id').val("0");
            $('#product_type_id').trigger('change')
            search_kwargs = {};
            $('#div_product_table').load('/product/get_product_htmltbl', 'reset=true', function(data){
                return false;
            });
        })
        """
        return javascript

    @expose()
    def get_product_status_warning_modal(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        product = Product.by_id(product_id)
        if not product:
            return ''

        html = f"""
        <div class="modal fade" id="dialog_product_status_warning_modal" tabindex="-1" role="dialog" aria-labelledby="myproduct_status_warningLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">Edit Active Product: {product.name}?</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_product_activate'>
                            <p>Are you sure that you want to Edit an Active Product?</p>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-outline-primary product_status_warning_back">No</button>
                        <button class="btn btn-primary product_status_warning_yes" product_id='{product_id}'>Yes</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            setFormValidation('#form_product_activate');
            $('.product_status_warning_back').click(function(){
                $('#dialog_product_status_warning_modal').modal('hide');
            });
            $('.product_status_warning_yes').click(function() {
                var product_id = $(this).attr('product_id');
                var formserial = $('#form_product_activate').serialize();
                formserial += '&product_id='+product_id;
                $.post('/product/get_active_to_sandbox?', formserial, function(data) {
                    $('#dialog_product_status_warning_modal').modal('hide');
                    var product_id = data
                    $.redirect('/product/edit_product', {'product_id': product_id});
                        return false;
                });
            });
            $('#dialog_product_status_warning_modal').modal();
        </script>
        """
        return html + javascript

    @expose()
    def get_active_to_sandbox(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        return self.clone_product(product_id)

    def clone_product(self, old_product_id: int):
        """This method loops over ALL product tables"""
        usernow = request.identity.get('user', {})
        old_product = Product.by_id(old_product_id)
        if not old_product:
            return

        # Change Old Product State to Expired
        expired_id = TYPEUTIL.get_id_of_name('product_state_type', 'expired')
        sandbox_id = TYPEUTIL.get_id_of_name('product_state_type', 'sandbox')

        old_product.product_state_type_id = expired_id
        DBSession.flush()

        # Clone Product and set status to Sandbox
        DBSession.expunge(old_product)
        make_transient(old_product)
        old_product.id = None
        old_product.added_by = usernow.id
        old_product.product_state_type_id = sandbox_id

        DBSession.add(old_product)
        DBSession.flush()
        new_product_id = old_product.id

        # Clone Product Premium Frequency Option
        old_product_premium_frequency_option_query = DBSession.query(ProductPremiumFrequencyOption). \
            filter(ProductPremiumFrequencyOption.product_id == old_product_id). \
            filter(ProductPremiumFrequencyOption.bln_active == True). \
            all()

        for old_product_premium_frequency in old_product_premium_frequency_option_query:
            DBSession.expunge(old_product_premium_frequency)
            make_transient(old_product_premium_frequency)
            old_product_premium_frequency.product_id = new_product_id
            old_product_premium_frequency.id = None
            old_product_premium_frequency.added_by = usernow.id

            DBSession.add(old_product_premium_frequency)
            DBSession.flush()

        """
        # Clone Product Payment Type Link
        old_product_payment_type_link = ProductPaymentTypeLink.by_attr_first('product_id', old_product_id)
        if old_product_payment_type_link:
            DBSession.expunge(old_product_payment_type_link)
            make_transient(old_product_payment_type_link)
            old_product_payment_type_link.product_id = new_product_id
            old_product_payment_type_link.id = None
            old_product_payment_type_link.added_by = usernow.id

            DBSession.add(old_product_payment_type_link)
            DBSession.flush()
        """

        # Update Product History Link
        product_history_link = ProductHistoryLink()
        product_history_link.product_id = new_product_id
        product_history_link.previous_product_id = old_product_id
        product_history_link.added_by = usernow.id

        DBSession.add(product_history_link)
        DBSession.flush()

        # Clone Product Messages
        old_product_message_query = DBSession.query(ProductMessage). \
            filter(ProductMessage.product_id == old_product_id). \
            filter(ProductMessage.bln_active == True). \
            all()

        for old_product_message in old_product_message_query:
            old_product_message_id = old_product_message.id
            DBSession.expunge(old_product_message)
            make_transient(old_product_message)
            old_product_message.product_id = new_product_id
            old_product_message.id = None
            old_product_message.added_by = usernow.id

            DBSession.add(old_product_message)
            DBSession.flush()
            new_product_message_id = old_product_message.id

            # Clone Product Message Media
            old_product_message_media_query = DBSession.query(ProductMessageMedia). \
                filter(ProductMessageMedia.bln_active == True). \
                filter(ProductMessageMedia.product_message_id == old_product_message_id). \
                all()

            for old_media in old_product_message_media_query:
                DBSession.expunge(old_media)
                make_transient(old_media)
                old_media.id = None
                old_media.add_by = usernow.id
                old_media.product_message_id = new_product_message_id

                DBSession.add(old_media)
                DBSession.flush()

            # Clone Product Message Reminders
            old_product_message_reminder_query = DBSession.query(ProductMessageReminder). \
                filter(ProductMessageReminder.bln_active == True). \
                filter(ProductMessageReminder.product_message_id == old_product_message_id). \
                all()

            for old_reminder in old_product_message_reminder_query:
                DBSession.expunge(old_reminder)
                make_transient(old_reminder)
                old_reminder.id = None
                old_reminder.add_by = usernow.id
                old_reminder.product_message_id = new_product_message_id

                DBSession.add(old_reminder)
                DBSession.flush()

        # Clone Product System Document Link
        old_product_system_document_link_query = DBSession.query(ProductSystemDocumentLink). \
            filter(ProductSystemDocumentLink.bln_active == True). \
            filter(ProductSystemDocumentLink.product_id == old_product_id). \
            all()

        for old_system_document_link in old_product_system_document_link_query:
            DBSession.expunge(old_system_document_link)
            make_transient(old_system_document_link)
            old_system_document_link.id = None
            old_system_document_link.added_by = usernow.id
            old_system_document_link.product_id = new_product_id

            DBSession.add(old_system_document_link)
            DBSession.flush()

        # Clone Benefits
        old_benefit_query = DBSession.query(Benefit). \
            filter(Benefit.product_id == old_product_id). \
            filter(Benefit.bln_active == True). \
            all()

        for old_benefit in old_benefit_query:
            old_benefit_id = old_benefit.id

            DBSession.expunge(old_benefit)
            make_transient(old_benefit)
            old_benefit.product_id = new_product_id
            old_benefit.added_by = usernow.id
            old_benefit.id = None

            DBSession.add(old_benefit)
            DBSession.flush()
            new_benefit_id = old_benefit.id

            # Clone Benefit Claim Count
            old_benefit_claim_count = BenefitClaimCount.by_attr_first('benefit_id', old_benefit_id)
            if old_benefit_claim_count:
                DBSession.expunge(old_benefit_claim_count)
                make_transient(old_benefit_claim_count)
                old_benefit_claim_count.id = None
                old_benefit_claim_count.benefit_id = new_benefit_id
                old_benefit_claim_count.added_by = usernow.id

                DBSession.add(old_benefit_claim_count)
                DBSession.flush()

            # Clone Benefit Periods
            old_benefit_period_query = DBSession.query(BenefitPeriod). \
                filter(BenefitPeriod.benefit_id == old_benefit_id). \
                filter(BenefitPeriod.bln_active == True). \
                all()

            for old_benefit_period in old_benefit_period_query:
                DBSession.expunge(old_benefit_period)
                make_transient(old_benefit_period)
                old_benefit_period.id = None
                old_benefit_period.benefit_id = new_benefit_id
                old_benefit_period.added_by = usernow.id

                DBSession.add(old_benefit_period)
                DBSession.flush()

            # Clone Benefit Insured Life
            old_benefit_insured_life_query = DBSession.query(BenefitInsuredLife). \
                filter(BenefitInsuredLife.bln_active == True).\
                filter(BenefitInsuredLife.benefit_id == old_benefit_id). \
                all()

            for old_insured_life in old_benefit_insured_life_query:

                DBSession.expunge(old_insured_life)
                make_transient(old_insured_life)
                old_insured_life.id = None
                old_insured_life.added_by = usernow.id
                old_insured_life.benefit_id = new_benefit_id

                DBSession.add(old_insured_life)
                DBSession.flush()

            # Clone Benefit Insured Non Life
            old_benefit_insured_non_life_query = DBSession.query(BenefitInsuredNonLife). \
                filter(BenefitInsuredNonLife.bln_active == True). \
                filter(BenefitInsuredNonLife.benefit_id == old_benefit_id). \
                all()

            for old_insured_non_life in old_benefit_insured_non_life_query:

                DBSession.expunge(old_insured_non_life)
                make_transient(old_insured_non_life)
                old_insured_non_life.id = None
                old_insured_non_life.added_by = usernow.id
                old_insured_non_life.benefit_id = new_benefit_id

                DBSession.add(old_insured_non_life)
                DBSession.flush()

            # Clone Benefit Message
            old_benefit_message_query = DBSession.query(BenefitMessage). \
                filter(BenefitMessage.benefit_id == old_benefit_id). \
                filter(BenefitMessage.bln_active == True). \
                all()

            for old_benefit_message in old_benefit_message_query:
                old_benefit_message_id = old_benefit_message.id
                DBSession.expunge(old_benefit_message)
                make_transient(old_benefit_message)
                old_benefit_message.product_id = new_product_id
                old_benefit_message.id = None
                old_benefit_message.added_by = usernow.id

                DBSession.add(old_benefit_message)
                DBSession.flush()
                new_benefit_message_id = old_benefit_message.id

                # Clone Benefit Message Media
                old_benefit_message_media_query = DBSession.query(BenefitMessageMedia). \
                    filter(BenefitMessageMedia.bln_active == True). \
                    filter(BenefitMessageMedia.product_message_id == old_benefit_message_id). \
                    all()

                for old_benefit_media in old_benefit_message_media_query:
                    DBSession.expunge(old_benefit_media)
                    make_transient(old_benefit_media)
                    old_benefit_media.id = None
                    old_benefit_media.add_by = usernow.id
                    old_benefit_media.product_message_id = new_benefit_message_id

                    DBSession.add(old_benefit_media)
                    DBSession.flush()

                # Clone Benefit Message Reminders
                old_product_benefit_reminder_query = DBSession.query(BenefitMessageReminder). \
                    filter(BenefitMessageReminder.bln_active == True). \
                    filter(BenefitMessageReminder.product_message_id == old_benefit_message_id). \
                    all()

                for old_benefit_reminder in old_product_benefit_reminder_query:
                    DBSession.expunge(old_benefit_reminder)
                    make_transient(old_benefit_reminder)
                    old_benefit_reminder.id = None
                    old_benefit_reminder.add_by = usernow.id
                    old_benefit_reminder.product_message_id = new_benefit_message_id

                    DBSession.add(old_benefit_reminder)
                    DBSession.flush()

            # Clone Benefit Claim Question Link
            old_benefit_claim_question_link_query = DBSession.query(BenefitClaimQuestionLink). \
                filter(BenefitClaimQuestionLink.bln_active == True). \
                filter(BenefitClaimQuestionLink.benefit_id == old_benefit_id). \
                all()

            for old_claim_question_link in old_benefit_claim_question_link_query:
                DBSession.expunge(old_claim_question_link)
                make_transient(old_claim_question_link)
                old_claim_question_link.id = None
                old_claim_question_link.added_by = usernow.id
                old_claim_question_link.benefit_id = new_benefit_id

                DBSession.add(old_claim_question_link)
                DBSession.flush()

            # Clone Benefit Exclusion
            old_benefit_exclusion_query = DBSession.query(BenefitExclusion). \
                filter(BenefitExclusion.benefit_id == old_benefit_id). \
                filter(BenefitExclusion.bln_active == True). \
                all()

            for old_exclusion in old_benefit_exclusion_query:
                old_benefit_exclusion_id = old_exclusion.id

                DBSession.expunge(old_exclusion)
                make_transient(old_exclusion)
                old_exclusion.id = None
                old_exclusion.added_by = usernow.id
                old_exclusion.benefit_id = new_benefit_id

                DBSession.add(old_exclusion)
                DBSession.flush()
                new_benefit_exclusion_id = old_exclusion.id

                # Clone Benefit Exclusion Expiry Days
                old_benefit_exclusion_expiry_days_query = DBSession.query(BenefitExclusionExpiryDays). \
                    filter(BenefitExclusionExpiryDays.benefit_exclusion_id == old_benefit_exclusion_id). \
                    filter(BenefitExclusionExpiryDays.bln_active == True). \
                    all()

                for old_exclusion_days in old_benefit_exclusion_expiry_days_query:

                    DBSession.expunge(old_exclusion_days)
                    make_transient(old_exclusion_days)
                    old_exclusion_days.id = None
                    old_exclusion_days.added_by = usernow.id
                    old_exclusion_days.benefit_exclusion_id = new_benefit_exclusion_id

                    DBSession.add(old_exclusion_days)
                    DBSession.flush()

                # Clone Benefit Exclusion Expiry Count
                old_benefit_exclusion_expiry_count_query = DBSession.query(BenefitExclusionExpiryCount). \
                    filter(BenefitExclusionExpiryCount.benefit_exclusion_id == old_benefit_exclusion_id). \
                    filter(BenefitExclusionExpiryCount.bln_active == True). \
                    all()

                for old_exclusion_count in old_benefit_exclusion_expiry_count_query:

                    DBSession.expunge(old_exclusion_count)
                    make_transient(old_exclusion_count)
                    old_exclusion_count.id = None
                    old_exclusion_count.added_by = usernow.id
                    old_exclusion_count.benefit_exclusion_id = new_benefit_exclusion_id

                    DBSession.add(old_exclusion_count)
                    DBSession.flush()

            # Clone Benefit Payout Frequency Option
            old_benefit_payout_frequency_option_query = DBSession.query(BenefitPayoutFrequencyOption). \
                filter(BenefitPayoutFrequencyOption.benefit_id == old_benefit_id). \
                filter(BenefitPayoutFrequencyOption.bln_active == True). \
                all()

            for old_payout_frequency_option in old_benefit_payout_frequency_option_query:
                DBSession.expunge(old_payout_frequency_option)
                make_transient(old_payout_frequency_option)
                old_payout_frequency_option.id = None
                old_payout_frequency_option.added_by = usernow.id
                old_payout_frequency_option.benefit_id = new_benefit_id

                DBSession.add(old_payout_frequency_option)
                DBSession.flush()

            # Clone Benefit Allocation Link
            old_benefit_allocation_query = DBSession.query(BenefitAllocationLink). \
                filter(BenefitAllocationLink.benefit_id == old_benefit_id). \
                filter(BenefitAllocationLink.bln_active == True). \
                all()

            for old_benefit_allocation in old_benefit_allocation_query:
                old_benefit_allocation_id = old_benefit_allocation.id

                DBSession.expunge(old_benefit_allocation)
                make_transient(old_benefit_allocation)
                old_benefit_allocation.id = None
                old_benefit_allocation.added_by = usernow.id
                old_benefit_allocation.benefit_id = new_benefit_id

                DBSession.add(old_benefit_allocation)
                DBSession.flush()
                new_benefit_allocation_id = old_benefit_allocation.id

                benefit_allocation_calculation_type = TYPEUTIL.get_name('benefit_allocation_calculation_type',
                                                                        old_benefit_allocation.benefit_allocation_calculation_type_id)

                # Clone Benefit Allocation Link Calculation Percentage
                if benefit_allocation_calculation_type == 'percentage':
                    old_benefit_allocation_link_calculation_percentage = BenefitAllocationLinkCalculationPercentage.by_attr_first('benefit_allocation_link_id', old_benefit_allocation_id)
                    if old_benefit_allocation_link_calculation_percentage:
                        DBSession.expunge(old_benefit_allocation_link_calculation_percentage)
                        make_transient(old_benefit_allocation_link_calculation_percentage)
                        old_benefit_allocation_link_calculation_percentage.id = None
                        old_benefit_allocation_link_calculation_percentage.added_by = usernow.id
                        old_benefit_allocation_link_calculation_percentage.benefit_allocation_link_id = new_benefit_allocation_id

                        DBSession.add(old_benefit_allocation_link_calculation_percentage)
                        DBSession.flush()

                # Clone Benefit Allocation Link Calculation Amount
                if benefit_allocation_calculation_type == 'amount':
                    old_benefit_allocation_link_calculation_amount = BenefitAllocationLinkCalculationAmount.by_attr_first(
                        'benefit_allocation_link_id', old_benefit_allocation_id)
                    if old_benefit_allocation_link_calculation_amount:
                        DBSession.expunge(old_benefit_allocation_link_calculation_amount)
                        make_transient(old_benefit_allocation_link_calculation_amount)
                        old_benefit_allocation_link_calculation_amount.id = None
                        old_benefit_allocation_link_calculation_amount.added_by = usernow.id
                        old_benefit_allocation_link_calculation_amount.benefit_allocation_link_id = new_benefit_allocation_id

                        DBSession.add(old_benefit_allocation_link_calculation_amount)
                        DBSession.flush()

                # Clone Benefit Allocation Link Calculation Factor
                if benefit_allocation_calculation_type == 'factor':
                    old_benefit_allocation_link_calculation_factor = BenefitAllocationLinkCalculationFactor.by_attr_first(
                        'benefit_allocation_link_id', old_benefit_allocation_id)
                    if old_benefit_allocation_link_calculation_factor:
                        DBSession.expunge(old_benefit_allocation_link_calculation_factor)
                        make_transient(old_benefit_allocation_link_calculation_factor)
                        old_benefit_allocation_link_calculation_factor.id = None
                        old_benefit_allocation_link_calculation_factor.added_by = usernow.id
                        old_benefit_allocation_link_calculation_factor.benefit_allocation_link_id = new_benefit_allocation_id

                        DBSession.add(old_benefit_allocation_link_calculation_factor)
                        DBSession.flush()

            # Clone Benefit Loaders
            old_benefit_loader_link_query = DBSession.query(BenefitLoaderLink). \
                filter(BenefitLoaderLink.benefit_id == old_benefit_id). \
                filter(BenefitLoaderLink.bln_active == True). \
                all()

            for old_benefit_loader_link in old_benefit_loader_link_query:
                DBSession.expunge(old_benefit_loader_link)
                make_transient(old_benefit_loader_link)
                old_benefit_loader_link.id = None
                old_benefit_loader_link.added_by = usernow.id
                old_benefit_loader_link.benefit_id = new_benefit_id

                DBSession.add(old_benefit_loader_link)
                DBSession.flush()
        return str(new_product_id)

    @expose()
    def get_product_htmltbl(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        outputlist = []
        dbase_query = self.get_product_dbase_query(**kwargs)
        for item in dbase_query:

            active = IMG_ACTIVE
            disable_text = 'disable'
            if not item.bln_active:
                active = IMG_INACTIVE
                disable_text = 'enable'

            product_state = TYPEUTIL.get_name('product_state_type', item.product_state_type_id)

            org = EntityOrganisation.by_id(item.entity_organisation_product_owner_id)
            outputlist.append({
                'name': f"<div class='edit_product' product_id='{item.id}' product_state='{product_state}'>{item.code}: {item.name}</div>",
                'type': TYPEUTIL.get_pretty_name('product_type', item.product_type_id),
                'entity_organisation_product_owner_id': org.name if org else '',
                'policy_number_prefix': item.policy_number_prefix,
                'state': TYPEUTIL.get_pretty_name('product_state_type', item.product_state_type_id),
                'active': active,
                'disable': f"<div class='product_active' active='{item.bln_active}' product_id='{item.id}' desc='{item.name}'>{disable_text}</div>",
            })
        dbcolumnlist = [
            'name',
            'type',
            'entity_organisation_product_owner_id',
            'policy_number_prefix',
            'state',
            'active',
            'disable',
        ]
        theadlist = [
            'Name',
            'Type',
            'Product Owner',
            'Policy No. Prefix',
            'State',
            'Active',
            '',
        ]
        tdclasslist = [
            'action_link',
            '',
            '',
            '',
            '',
            'text-center',
            'action_link text-right',
        ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "product_table", tdclasslist)
        javascript = """
        <script nonce='1234'>
            $(".product_active").click(function(){
                var text = $(this).html();
                var desc = $(this).attr('desc');
                var product_id = $(this).attr('product_id');
                var kwargs = {
                    'text': text,
                    'desc': desc,
                    'product_id': product_id,
                }
                $('#dialogdiv').load('/product/get_product_enable_disable_modal?', kwargs)
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_product_enable_disable_modal(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        product = Product.by_attr_first_ignore_active('id', product_id)
        if not product:
            return ''

        text = kwargs.get('text', None)
        desc = kwargs.get('desc', None)

        html = f"""
        <div class="modal fade" id="dialog_product_enable_disable_modal" tabindex="-1" role="dialog" aria-labelledby="myproduct_enable_disableLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">{str(text).capitalize()}: {desc}?</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_product_enable_disable'>
                            <p>Are you sure that you want to {text} '{desc}'?</p>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-outline-primary product_enable_disable_back">No</button>
                        <button class="btn btn-primary product_enable_disable_yes" product_id='{product_id}'>Yes</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            setFormValidation('#form_product_enable_disable');
            $('.product_enable_disable_back').click(function(){
                $('#dialog_product_enable_disable_modal').modal('hide');
            });
            $('.product_enable_disable_yes').click(function() {
                var product_id = $(this).attr('product_id');
                var formserial = $('#form_product_activate').serialize();
                formserial += '&product_id='+product_id;
                $.post('/product/toggle_product_active?', formserial, function(data){
                    $.redirect('/product/index');
                    return false;
                });
            });
            $('#dialog_product_enable_disable_modal').modal();
        </script>
        """
        return html + javascript

    @expose()
    def get_product_dbase_query(self, *args, **kwargs):
        product_state_type_id = kwargs.get('product_state_type_id', None)
        if product_state_type_id:
            if product_state_type_id == "0":
                product_state_type_id = None
        product_type_id = kwargs.get('product_type_id', None)
        if product_type_id:
            if product_type_id == "0":
                product_type_id = None

        kwargs['searchkey'] = SEARCHKEY_PRODUCT
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()

        expired = TYPEUTIL.get_id_of_name('product_state_type', 'expired')
        dbase_query = DBSession.query(Product). \
                filter(Product.product_state_type_id != expired)

        if searchphrase:
            searchphrase = "%" + searchphrase + "%"
            dbase_query = dbase_query.filter(or_(Product.name.like(searchphrase),
                                                 Product.code.like(searchphrase)))

        if product_type_id:
            dbase_query = dbase_query.filter(Product.product_type_id == product_type_id)

        if product_state_type_id:
            dbase_query = dbase_query.filter(Product.product_state_type_id == product_state_type_id)

        dbase_query = dbase_query.order_by(asc(Product.code)).limit(LIMIT)

        return dbase_query

    def get_selectbox_product_states(self, *args, **kwargs):
        kwargs['id'] = 'product_state_type_id'
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("product_state_type")
        return create_selectbox_html(**kwargs)

    def get_selectbox_product_types(self, *args, **kwargs):
        kwargs['id'] = 'product_type_id'
        kwargs['required'] = True
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("product_type")
        return create_selectbox_html(**kwargs)

    def get_selectbox_product_frequency(self, *args, **kwargs):
        kwargs['id'] = 'frequency_type_id'
        kwargs['required'] = True
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("frequency_type")
        return create_selectbox_html(**kwargs)

    @expose()
    def toggle_product_active(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        product = DBSession.query(Product).filter(Product.id == product_id).first()
        if product.bln_active:
            product.bln_active = False
        else:
            product.bln_active = True
        DBSession.flush()
        return 'true'

    ###############################################################################
    # Product - Modal - New
    ###############################################################################

    @expose()
    def get_modal_new_product(self, *args, **kwargs):
        selectbox_product_types = self.get_selectbox_product_types()
        selectbox_product_owner = self.get_selectbox_product_owner()
        html = f"""
        <div class="modal fade" id="dialog_new_product" tabindex="-1" role="dialog" aria-labelledby="myproductLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">New Product</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_new_product'>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-5 col-form-label" required for="product_type_id">Product Type</label>
                                    <div class="col-md-7">
                                        {selectbox_product_types}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-5 col-form-label" required for="entity_organisation_product_owner_id">Product Owner</label>
                                    <div class="col-md-7">
                                        {selectbox_product_owner}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-5 col-form-label" required for="code">Code</label>
                                    <div class="col-md-7">
                                        <input id="code" type="text" name="code" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-5 col-form-label" required for="name">Name</label>
                                    <div class="col-md-7">
                                        <input id="name" type="text" name="name" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-5 col-form-label" for="name">Policy No. Prefix</label>
                                    <div class="col-md-7">
                                        <input id="policy_number_prefix" type="text" name="policy_number_prefix" class="form-control">
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-5 col-form-label" for="has_excess">Has Excess</label>
                                    <div class="col-7">
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="checkbox" name="has_excess" id="has_excess"/>
                                                <span class="form-check-sign"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_new_product' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary" id="product_back" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            setFormValidation('#form_new_product');
            $('#save_new_product').click(function(){
                 var valid = FormIsValid("#form_new_product");
                 if(valid){
                    var formserial = $('#form_new_product').serialize();
                    $.post('/product/save_new_product_and_main_benefit?', formserial, function(data){
                        $.redirect('/product/edit_product', {'product_id' : data});
                        return false;
                    });
                 }
            });
            $('#product_back').click(function(){
                $('#dialog_new_product').modal('hide');
            });
            $('#dialog_new_product').modal();
        </script>
        """
        return html + javascript

    def get_selectbox_product_owner(self, *args, **kwargs):
        kwargs['id'] = 'entity_organisation_product_owner_id'
        kwargs['required'] = True
        outputlist = []
        dbase_query = EntityOrganisationProductOwner.get_all('entity_organisation_id')
        for i in dbase_query:
            ent = EntityOrganisation.by_id(i.entity_organisation_id)
            if ent:
                outputlist.append({'id': i.id, 'name': ent.name})
        kwargs['outputlist'] = outputlist
        return create_selectbox_html(**kwargs)

    @expose()
    def save_new_product_and_main_benefit(self, *args, **kwargs):
        usernow = request.identity.get('user', {})

        has_excess = kwargs.get('has_excess', None)
        if has_excess:
            has_excess = True
        else:
            has_excess = False

        product = Product()
        product.code = kwargs.get('code', None)
        product.name = kwargs.get('name', None)
        product.product_type_id = kwargs.get('product_type_id', None)
        product.policy_number_prefix = kwargs.get('policy_number_prefix', None)
        product.product_state_type_id = TYPEUTIL.get_id_of_name('product_state_type', 'sandbox')
        product.entity_organisation_product_owner_id = kwargs.get('entity_organisation_product_owner_id', None)
        product.has_excess = has_excess
        product.added_by = usernow.id
        DBSession.add(product)
        DBSession.flush()

        premium_frequency = ProductPremiumFrequencyOption()
        premium_frequency.added_by = usernow.id
        premium_frequency.bln_active = True
        premium_frequency.product_id = product.id
        premium_frequency.adjustment_factor = 1
        premium_frequency.frequency_type_id = TYPEUTIL.get_id_of_name('frequency_type', 'monthly')
        DBSession.add(premium_frequency)
        DBSession.flush()

        benefit = Benefit()
        benefit.product_id = product.id
        benefit.is_main_benefit = True
        benefit.is_compulsory = True
        benefit.limit_claims = False
        benefit.added_by = usernow.id
        benefit.premium = 0
        benefit.sum_insured = 0
        DBSession.add(benefit)
        DBSession.flush()
        return str(product.id)

    ###############################################################################
    # Product - Edit
    ###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def edit_product(self, *args, **kwargs):
        html = self.get_product_edit_html(*args, **kwargs)
        javascript = self.get_javascript_edit_product_onload()
        title = f"""Edit Product"""
        return dict(title=title, html=html, javascript=javascript)

    def get_product_edit_html(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return redirect('/product/index')

        product = Product.by_id(product_id)
        if not product:
            return redirect('/product/index')

        # HEADER
        card_header = self.get_edit_product_card_header(product)

        # TAB 1
        tab_product_details_content = self.get_edit_product_details(product)

        # TAB 2
        tab_product_benefits_content = self.get_edit_product_benefits(product)

        # TAB 3
        tab_product_transactions_content = ""

        # TAB 4
        tab_product_messaging_content = ""

        # TAB 5
        tab_product_documents_content = ""

        # TAB 6
        tab_product_summary_content = ""

        html = f"""
        {card_header}
        <div class="row">
            <div class="col-md-12 ml-auto mr-auto">
                <div class="col-md-12 ml-auto mr-auto">
                    <ul class="nav nav-pills nav-pills-primary justify-content-center" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link" data-toggle="tab" href="#tab_product_details" role="tablist">
                                Details
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-toggle="tab" href="#tab_product_benefits" role="tablist">
                                Benefits
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link disabled" data-toggle="tab" href="#tab_product_messaging" role="tablist">
                                Messaging
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link disabled" data-toggle="tab" href="#tab_product_documents" role="tablist">
                                Documents
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link disabled" data-toggle="tab" href="#tab_product_summary" role="tablist">
                                Summary
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="tab-content tab-space tab-subcategories">
                    <div class="tab-pane active" id="tab_product_details">
                        {tab_product_details_content}
                    </div>
                    <div class="tab-pane" id="tab_product_benefits">
                        {tab_product_benefits_content}
                    </div>
                    <div class="tab-pane" id="tab_product_messaging">
                        {tab_product_messaging_content}
                    </div>
                    <div class="tab-pane" id="tab_product_documents">
                        {tab_product_documents_content}
                    </div>
                    <div class="tab-pane" id="tab_product_summary">
                        {tab_product_summary_content}
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    def get_javascript_edit_product_onload(self, *args, **kwargs):
        javascript = """
        $("#has_excess").change(function(){
            if(this.checked){
                var kwargs = 'product_id=' + $('#product_id').val();
                $('#div_product_excess_link').load('/product/get_product_excess_link_html', kwargs, function(data){
                    return false;
                });
                $('#div_apply_benefit_excess').show();

            }else{
                $('#div_product_excess_link').empty();
                $('#div_apply_benefit_excess').hide();

            };
        });
        $('#has_excess').trigger('change');

        setFormValidation('#form_edit_product');
        $('#save_edit_product').click(function(){
             var valid = FormIsValid("#form_edit_product");
             if(valid){
                var formserial = $('#form_edit_product').serialize();
                $.post('/product/save_edit_product?', formserial, function(data){
                    return false;
                });
             }
        });
        $('#continue_edit_product').click(function(){
             var valid = FormIsValid("#form_edit_product");
             if(valid){
                var formserial = $('#form_edit_product').serialize();
                $.post('/product/save_edit_product?', formserial, function(data){
                    $('#tab_product_benefits').load('/product/get_edit_product_benefits', formserial, function(data){
                        $('.nav-link[href="#tab_product_benefits"]').trigger('click')
                        return false;
                    });
                    return false;
                });
             }
        });
        $('#continue_product').click(function(){
            $('.nav-link[href="#tab_product_benefits"]').trigger('click')
        });

        // REMOVE
        // $('#continue_product').click();
        """
        return javascript

    ###############################################################################
    # Product - Edit - Card Header
    ###############################################################################

    def get_edit_product_card_header(self, product=None, *args, **kwargs):
        if not product:
            return ''
        product_type_name = TYPEUTIL.get_pretty_name('product_type', product.product_type_id)
        html = f"""
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-8">
                            <h4 class="card-title">Edit {product_type_name} Product: {product.code} - {product.name}</h4>
                        </div>
                        <div class="col-md-4 text-right">
                            <button product_id="{product.id}" class="btn btn-primary ml-auto" id="product_back">Back to Products</button>
                        </div>
                    </div>
                    <div class="row d-flex">
                        <div class="col-md-12">
                            <hr>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            $('#product_back').click(function(){
                $.redirect('/product/index');
            });
        </script>
        """
        return html + javascript

    def get_edit_product_details(self, product=None, *args, **kwargs):
        if not product:
            return ''
        premium_frequency = DBSession.query(ProductPremiumFrequencyOption). \
            filter(ProductPremiumFrequencyOption.product_id == product.id). \
            first()

        if not premium_frequency:
            usernow = request.identity.get('user', {})
            premium_frequency = ProductPremiumFrequencyOption()
            premium_frequency.added_by = usernow.id
            premium_frequency.bln_active = True
            premium_frequency.product_id = product.id
            premium_frequency.adjustment_factor = 1
            premium_frequency.frequency_type_id = TYPEUTIL.get_id_of_name('frequency_type', 'monthly')
            DBSession.add(premium_frequency)
            DBSession.flush()

        hidden_input = get_hidden_input(**{'id': 'product_id', 'value': product.id})
        hidden_input2 = get_hidden_input(**{'id': 'product_premium_frequency_id', 'value': premium_frequency.id})
        selectbox_product_type = self.get_selectbox_product_types(**{'selected': product.product_type_id})
        selectbox_product_owner = self.get_selectbox_product_owner(**{'selected': product.entity_organisation_product_owner_id})
        selectbox_premium_frequency = self.get_selectbox_product_frequency( **{'selected': premium_frequency.frequency_type_id})

        has_excess_checked = ''
        if product.has_excess:
            has_excess_checked = 'checked'

        has_excess_on_all_benefits_checked = ''
        if product.apply_excess_on_all_benefits:
            has_excess_on_all_benefits_checked = 'checked'

        policy_number_prefix = product.policy_number_prefix if product.policy_number_prefix else ''
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('Details')}</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id='save_edit_product' class="btn btn-outline-primary">Save</button>
                                <button id='continue_edit_product' class="btn btn-outline-primary">Save & Continue</button>
                                <button id='continue_product' class="btn btn-primary">Continue</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <form id="form_edit_product">
                            {hidden_input}
                            {hidden_input2}
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-4 col-form-label" required>{_('Product Type')}</label>
                                        <div class="col-md-8">
                                            {selectbox_product_type}
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <label class="col-md-4 col-form-label" required>{_('Product Owner')}</label>
                                        <div class="col-md-8">
                                            {selectbox_product_owner}
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <label class="col-md-4 col-form-label" required>{_('Premium Frequency')}</label>
                                        <div class="col-md-8">
                                            {selectbox_premium_frequency}
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <label class="col-md-4 col-form-label">{_('Add Excess')}</label>
                                        <div class="col-md-8">
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="checkbox" name="has_excess" id="has_excess" {has_excess_checked}/>
                                                    <span class="form-check-sign"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-4 col-form-label">{_('Code')}</label>
                                        <div class="col-md-8">
                                            <input id="code" name="code" type="text"  class="form-control" required='true' value='{product.code}'>
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <label class="col-md-4 col-form-label" required>{_('Name')}</label>
                                        <div class="col-md-8">
                                            <input id="name" type="text" name="name" class="form-control" required='true' value='{product.name}'>
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <label class="col-md-4 col-form-label">{_('Policy No. Prefix')}</label>
                                        <div class="col-md-8">
                                            <input id="policy_number_prefix" name="policy_number_prefix" type="text"  class="form-control" value='{policy_number_prefix}'>
                                        </div>
                                    </div>
                                    <div class="form-group row" id='div_apply_benefit_excess'>
                                        <label class="col-md-4 col-form-label">{_('Apply Excess to All Benefits')}</label>
                                        <div class="col-md-8">
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="checkbox" name="apply_excess_on_all_benefits"
                                                           id="apply_excess_on_all_benefits" {has_excess_on_all_benefits_checked}/>
                                                    <span class="form-check-sign"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div id='div_product_excess_link'></div>
        """
        return html

    @expose()
    def get_product_excess_link_html(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        product = Product.by_id(product_id)
        if not product:
            return ''

        product.has_excess = True
        DBSession.flush()

        available_inner, used_inner = self.get_available_used_excess(product_id)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('Product Excess')}</h4>
                            </div>
                            <div class="col-md-6 text-right">
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div id='div_used' class="col-md-6 rightborder">
                                <h6 class="card-title">Product Excess</h6>
                                {used_inner}
                            </div>
                            <div id='div_available' class="col-md-6">
                                <h6 class="card-title">Available Excess</h6>
                                {available_inner}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            $('#div_available .segment').click(function(){
                var kwargs = 'product_id=' + $(this).attr('product_id');
                kwargs += '&excess_id='+$(this).attr('excess_id');
                $.post('/product/save_new_product_excess_link?', kwargs, function(data){
                    $('#div_product_excess_link').load('/product/get_product_excess_link_html', kwargs, function(data){
                        return false;
                    });
                    return false;
                });
            });
            $('#div_used .segment').click(function(){
                var kwargs = 'product_id=' + $(this).attr('product_id');
                kwargs += '&excess_id='+$(this).attr('excess_id');
                $.post('/product/delete_product_excess_link?', kwargs, function(data){
                    $('#div_product_excess_link').load('/product/get_product_excess_link_html', kwargs, function(data){
                        return false;
                    });
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def save_new_product_excess_link(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        new = ProductExcessLink()
        new.product_id = kwargs.get('product_id', None)
        new.excess_id = kwargs.get('excess_id', None)
        new.added_by = usernow.id
        DBSession.add(new)
        DBSession.flush()
        return ''

    @expose()
    def delete_product_excess_link(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        product_id = kwargs.get('product_id', None)
        excess_id = kwargs.get('excess_id', None)
        this = DBSession.query(ProductExcessLink). \
                filter(ProductExcessLink.product_id == product_id). \
                filter(ProductExcessLink.excess_id == excess_id). \
                first()
        if this:
            DBSession.delete(this)
            DBSession.flush()
        return ''

    def get_available_used_excess(self, product_id=None, benefit_id=None, *args, **kwargs):
        avail, used = '', ''
        if not product_id and not benefit_id:
            return avail, used

        dbase_query = Excess.get_all('id')

        """
        # REMOVE
        if not dbase_query:
            for i in range(1, 6):
                new = Excess()
                new.amount = i * 1000
                DBSession.add(new)
                DBSession.flush()
            dbase_query = Excess.get_all('id')
        """

        if product_id:
            link_list = ProductExcessLink.by_attr_all('product_id', product_id)
        if benefit_id:
            link_list = BenefitExcessLink.by_attr_all('benefit_id', benefit_id)
        used_idlist = [int(x.excess_id) for x in link_list]

        for excess in dbase_query:
            amount = get_currency_by_locale(excess.amount, cents=False)
            element = f"""
            <div class='segment' product_id='{product_id}' benefit_id='{benefit_id}' excess_id='{excess.id}'>
                {amount}
            </div>
            """
            if int(excess.id) in used_idlist:
                used += element
            else:
                avail += element

        return avail, used

    @expose()
    def save_edit_product(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        product_id = kwargs.get('product_id', None)
        product_premium_frequency_id = kwargs.get('product_premium_frequency_id', None)
        monthly_frequency_type_id = TYPEUTIL.get_id_of_name('frequency_type', 'monthly')
        if not product_id:
            return ''

        product = Product.by_id(product_id)
        if not product:
            return ''

        has_excess = kwargs.get('has_excess', None)
        if has_excess:
            has_excess = True
        else:
            has_excess = False

        apply_excess_on_all_benefits = kwargs.get('apply_excess_on_all_benefits', None)
        if apply_excess_on_all_benefits:
            apply_excess_on_all_benefits = True

        product.code = kwargs.get('code', product.code)
        product.name = kwargs.get('name', product.name)
        product.product_type_id = kwargs.get('product_type_id', product.product_type_id)
        product.policy_number_prefix = kwargs.get('policy_number_prefix', product.policy_number_prefix)
        product.entity_organisation_product_owner_id = kwargs.get('entity_organisation_product_owner_id', product.entity_organisation_product_owner_id)
        product.has_excess = has_excess
        product.apply_excess_on_all_benefits = apply_excess_on_all_benefits
        DBSession.flush()

        if not product_premium_frequency_id:
            premium_frequency = ProductPremiumFrequencyOption()
            premium_frequency.added_by = usernow.id
            premium_frequency.bln_active = True
            premium_frequency.product_id = product.id
            premium_frequency.adjustment_factor = 1
            premium_frequency.frequency_type_id = kwargs.get('frequency_type_id', monthly_frequency_type_id)
            DBSession.add(premium_frequency)
            product_premium_frequency_id = premium_frequency.id
        else:
            premium_frequency = ProductPremiumFrequencyOption.by_id(product_premium_frequency_id)
            if not premium_frequency:
                return ''

            premium_frequency.adjustment_factor = 1
            premium_frequency.frequency_type_id = kwargs.get('frequency_type_id', monthly_frequency_type_id)

        DBSession.flush()
        return ''

    ###############################################################################
    # Product - Edit - Benefits
    ###############################################################################

    @expose()
    def get_edit_product_benefits(self, product=None, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if product_id:
            product = Product.by_id(product_id)

        if not product:
            return ''

        kwargs['product'] = product
        kwargs['product_id'] = product.id
        benefits_htmltbl = self.get_benefits_html_table(**kwargs)
        accord1 = get_accordion_item(**{
            'div': 'div_benefit_setup',
            'name': 'Setup',
            'heading': 'heading_setup',
            'collapse': 'collapse_setup',
        })
        accord2 = get_accordion_item(**{
            'div': 'div_benefit_insured',
            'name': 'Insured',
            'heading': 'heading_insured',
            'collapse': 'collapse_insured',
        })
        accord3 = get_accordion_item(**{
            'div': 'div_benefit_cover',
            'name': 'Cover & Exclusions',
            'heading': 'heading_cover',
            'collapse': 'collapse_cover',
        })
        accord4 = get_accordion_item(**{
            'div': 'div_benefit_loaders',
            'name': 'Loaders',
            'heading': 'heading_loaders',
            'collapse': 'collapse_loaders',
        })
        accord5 = get_accordion_item(**{
            'div': 'div_benefit_claim_questions',
            'name': 'Claim Questions',
            'heading': 'heading_claim_questions',
            'collapse': 'collapse_claim_questions',
        })
        accord6 = get_accordion_item(**{
            'div': 'div_benefit_premium',
            'name': 'Premium & Sum Insured',
            'heading': 'heading_premium',
            'collapse': 'collapse_premium',
        })
        accord7 = get_accordion_item(**{
            'div': 'div_benefit_allocations',
            'name': 'Allocations',
            'heading': 'heading_allocations',
            'collapse': 'collapse_allocations',
        })
        accord8 = get_accordion_item(**{
            'div': 'div_benefit_waiting_periods',
            'name': 'Dates and Waiting Periods',
            'heading': 'heading_waiting_periods',
            'collapse': 'collapse_waiting_periods',
        })


        accord9 = ''
        if product.has_excess and not product.apply_excess_on_all_benefits:
            accord9 = get_accordion_item(**{
                'div': 'div_benefit_excess',
                'name': 'Excess',
                'heading': 'heading_excess',
                'collapse': 'collapse_excess',
            })

        accord10 = get_accordion_item(**{
            'div': 'div_benefit_summary',
            'name': 'Summary',
            'heading': 'heading_summary',
            'collapse': 'collapse_summary',
        })

        html = f"""
        <div class="row">
            <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{_('Benefits')}</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_benefit" product_id='{product.id}' class="btn btn-outline-primary ml-auto">New Benefit</button>
                            <button id='continue_to_messaging' product_id='{product.id}' class="btn btn-primary">Continue</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 rightborder" id="div_product_benefit_htmltbl">
                            {benefits_htmltbl}
                        </div>
                        <div class="col-md-6">
                            <div id="accordion" role="tablist" aria-multiselectable="false" class="card-collapse">
                                {accord1}
                                {accord2}
                                {accord3}
                                {accord4}
                                {accord5}
                                {accord6}
                                {accord7}
                                {accord8}
                                {accord9}
                                {accord10}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            $("#create_new_benefit").click(function(){
                var kwargs = 'product_id='+$(this).attr('product_id');
                $.post('/product/save_new_benefit?', kwargs, function(data){
                    kwargs += '&benefit_id=' + data;
                    $('#tab_product_benefits').load('/product/get_edit_product_benefits?', kwargs, function(data){
                        return false;
                    });
                    return false;
                });
            });
            $("#continue_to_messaging").click(function(){
                var kwargs = 'product_id='+$(this).attr('product_id');
                $('#tab_product_messaging').load('/product/get_edit_product_messaging?', kwargs, function(data){
                    $('.nav-link[href="#tab_product_messaging"]').removeClass('disabled').trigger('click');
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def save_new_benefit(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        product_id = kwargs.get('product_id', None)
        benefit = Benefit()
        benefit.product_id = product_id
        benefit.is_main_benefit = False
        benefit.added_by = usernow.id
        benefit.premium = 0
        benefit.sum_insured = 0
        benefit.limit_claims = False
        DBSession.add(benefit)
        DBSession.flush()
        return str(benefit.id)

    @expose()
    def get_benefits_html_table(self, *args, **kwargs):
        product = kwargs.get('product', None)
        product_id = kwargs.get('product_id', None)
        benefit_id = kwargs.get('benefit_id', None)
        if not product:
            if not product_id:
                benefit = Benefit.by_id(benefit_id)
                if benefit:
                    product_id = benefit.product_id
            if not product_id:
                return ''
            product = Product.by_id(product_id)
        if not product:
            return ''

        dbase_query = DBSession.query(Benefit). \
            filter(Benefit.product_id == product.id). \
            filter(Benefit.bln_active == True). \
            order_by(Benefit.is_main_benefit.desc()). \
            order_by(Benefit.is_compulsory.desc()). \
            order_by(Benefit.name.asc()). \
            all()

        empty_message = '<span class="text-danger font-weight-bold">Not Set</span>'
        outputlist = []
        for item in dbase_query:

            cover = empty_message
            if item.cover_and_exclusion_id:
                cover_and_exclusion = CoverAndExclusion.by_id(item.cover_and_exclusion_id)
                if cover_and_exclusion:
                    cover = cover_and_exclusion.code

            insured_type = empty_message
            if item.benefit_insured_type_id:
                insured_type = TYPEUTIL.get_pretty_name('benefit_insured_type', item.benefit_insured_type_id)

            asset_type = 'Life'
            if not item.is_life:
                asset_type = 'Non Life'
                insured_non_life = BenefitInsuredNonLife.by_attr_first('benefit_id', item.id)
                if insured_non_life and insured_non_life.benefit_asset_type_id:
                    asset_type = TYPEUTIL.get_pretty_name('benefit_asset_type', insured_non_life.benefit_asset_type_id)

            is_compulsory = IMG_INACTIVE
            if item.is_compulsory:
                is_compulsory = IMG_ACTIVE
            if item.is_main_benefit:
                is_compulsory = IMG_ACTIVE

            name = empty_message
            if item.name:
                name = item.name

            outputlist.append({
                'name': f"<div class='benefit_name' benefit_id='{item.id}'>{name}</div>",
                'benefit_cover': f"<div class='benefit_cover' benefit_id='{item.id}'>{cover}</div>",
                'benefit_insured_type': insured_type,
                'benefit_asset_type': asset_type,
                'is_main_benefit': is_compulsory,
                'open': f"<div class='open_benefit' benefit_id='{item.id}'>open</div>",
                #'delete': f"<div class='delete_benefit' product_id='{product_id}' benefit_id='{item.id}'>delete</div>",
            })
        dbcolumnlist = [
            'name',
            'benefit_cover',
            'benefit_insured_type',
            'benefit_asset_type',
            'is_main_benefit',
            'open',
            #'delete',
        ]
        theadlist = [
            'Name',
            'Cover',
            'Insured',
            'Asset',
            'Compulsory'
            '',
            #'',
        ]
        tdclasslist = [
            '',
            '',
            '',
            '',
            'text-center',
            'text-right action_link',
            #'text-right action_link',
        ]
        table_opts = {'table_class': 'table-responsive-xl'}
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "benefitstable", tdclasslist, **table_opts)
        javascript = """
        <script nonce='1234'>
            $(".delete_benefit").click(function(){
                var kwargs = 'benefit_id='+$(this).attr('benefit_id');
                kwargs += '&product_id=' + $(this).attr('product_id');
                $.post('/product/delete_benefit?', kwargs, function(data){
                    $('#div_product_benefit_htmltbl').load('/product/get_benefits_html_table?', kwargs, function(data){
                        return false;
                    });
                    return false;
                });
            });
            $(".open_benefit").click(function(){
                $('#benefitstable tr').removeClass('bg-light font-weight-bold');
                $(this).closest('tr').addClass('bg-light font-weight-bold');
                $('.accordion_content').empty();
                var kwargs = 'benefit_id='+$(this).attr('benefit_id');
                $('#div_benefit_setup').load('/product/get_benefit_setup?', kwargs, function(data){
                    toggleAccordCollapse('collapse_setup');
                    return false;
                });
            });
            var benefitId = $('input#benefit_id').val();
            $(".open_benefit[benefit_id=" + benefitId + "]").closest('tr').addClass('bg-light font-weight-bold');
        </script>
        """
        return html + javascript

    @expose()
    def delete_benefit(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''
        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''
        benefit.bln_active = False
        DBSession.flush()
        return ''

    ###############################################################################
    # Product - Edit - Benefits: Accord 1: Setup
    ###############################################################################

    @expose()
    def get_benefit_setup(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        hidden_input = get_hidden_input(**{'id': 'benefit_id', 'value': benefit_id})
        name = benefit.name if benefit.name else ''
        is_life = 'checked' if benefit.is_life else ''
        limit_claims = 'checked' if benefit.limit_claims else ''
        number_of_claims = benefit.number_of_claims if benefit.number_of_claims else ''

        is_compulsory = ''
        is_compulsory_disabled = ''
        if benefit.is_compulsory:
            is_compulsory = 'checked'
        if benefit.is_main_benefit:
            is_compulsory = 'checked'
            is_compulsory_disabled = 'disabled'

        selected_insured = ''
        if benefit.benefit_insured_type_id:
            selected_insured = benefit.benefit_insured_type_id

        selected_insurer = benefit.entity_organisation_insurer_id if benefit.entity_organisation_insurer_id else ''
        selectbox_insurer = self.get_selectbox_insurer(**{'selected': selected_insurer})

        selected_purchase_type = benefit.benefit_purchase_type_id if benefit.benefit_purchase_type_id else INDIVIDUAL
        selectbox_benefit_purchase_type = self.get_selectbox_purchase_type(**{'selected': selected_purchase_type})
        selectbox_benefit_insured_type = self.get_selectbox_benefit_insured_type(**{'selected': selected_insured})

        html = f"""
        <form id="form_benefit_setup">
            {hidden_input}
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" required>{_('Purchase Type')}</label>
                    <div class="col-md-8">
                        {selectbox_benefit_purchase_type}
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" required>{_('Insurer')}</label>
                    <div class="col-md-8">
                        {selectbox_insurer}
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" required>{_('Insured Type')}</label>
                    <div class="col-md-8">
                        {selectbox_benefit_insured_type}
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" required>{_('Name')}</label>
                    <div class="col-md-8">
                        <input id="name" type="text" name="name" class="form-control" required='true' value='{name}'>
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-4 col-form-label" for="active">Compulsory</label>
                    <div class="col-8">
                        <div class="form-check">
                            <label class="form-check-label">
                                <input class="form-check-input" type="checkbox" name="is_compulsory" id="is_compulsory"{is_compulsory} {is_compulsory_disabled}/>
                                <span class="form-check-sign"></span>
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-4 col-form-label" for="active">Life</label>
                    <div class="col-8">
                        <div class="form-check">
                            <label class="form-check-label">
                                <input class="form-check-input" type="checkbox" name="is_life" id="is_life" {is_life}/>
                                <span class="form-check-sign"></span>
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-4 col-form-label" for="active">Limit Claims</label>
                    <div class="col-8">
                        <div class="form-check">
                            <label class="form-check-label">
                                <input class="form-check-input" type="checkbox" name="limit_claims" id="limit_claims" {limit_claims}/>
                                <span class="form-check-sign"></span>
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group row" id='div_number_of_claims'>
                    <label class="col-md-4 col-form-label">{_('Number of Claims')}</label>
                    <div class="col-md-8">
                        <input id="number_of_claims" type="number" name="number_of_claims" class="form-control" value='{number_of_claims}'>
                    </div>
                </div>
            </div>
        </form>
        <div class="row">
            <div class="col-md-12 text-right">
                <button id='save_benefit_setup' benefit_id='{benefit_id}' class="btn btn-outline-primary">Save</button>
                <button id='continue_benefit_setup' benefit_id='{benefit_id}' class="btn btn-primary">Save & Continue</button>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        $('#limit_claims').change(function(){
            if(this.checked){
                $('#div_number_of_claims').show();
            }else{
                $('#div_number_of_claims').hide();
            };
        });
        $('#limit_claims').trigger('change');

        setFormValidation('#form_benefit_setup');

        nextSteps('#save_benefit_setup', 'collapse_setup');
        nextSteps('#continue_benefit_setup', 'collapse_insured');

        function nextSteps(elem, accord_to_collapse){
            $(elem).click(function(){
                var benefit_id = $(this).attr('benefit_id');
                var valid = FormIsValid("#form_benefit_setup");
                if(valid){
                    var formserial = $('#form_benefit_setup').serialize();
                    $('#benefit_purchase_type_id').attr('disabled', 'disabled');
                    $('#benefit_insured_type_id').attr('disabled', 'disabled');
                    $('#entity_organisation_insurer_id').attr('disabled', 'disabled');
                    $.post('/product/save_benefit_setup?', formserial, function(data){
                        var kwargs = 'benefit_id='+data;
                        $('#div_benefit_insured').load('/product/get_benefit_insured?', kwargs, function(data){
                            $('#benefit_purchase_type_id').removeAttr('disabled');
                            $('#benefit_insured_type_id').removeAttr('disabled');
                            $('#entity_organisation_insurer_id').removeAttr('disabled');
                            $('#div_product_benefit_htmltbl').load('/product/get_benefits_html_table?', kwargs, function(data){
                                return false;
                            });
                            toggleAccordCollapse(accord_to_collapse);
                            return false;
                        });
                        return false;
                    });
                };
            });
        };
        </script>
        """
        return html + javascript

    def get_selectbox_insurer(self, *args, **kwargs):
        kwargs['id'] = 'entity_organisation_insurer_id'
        kwargs['required'] = True
        outputlist = []
        dbase_query = EntityOrganisationInsurer.get_all('entity_organisation_id')
        for i in dbase_query:
            ent = EntityOrganisation.by_id(i.entity_organisation_id)
            if ent:
                outputlist.append({'id': i.id, 'name': ent.name})
        kwargs['outputlist'] = outputlist
        return create_selectbox_html(**kwargs)

    def get_selectbox_purchase_type(self, *args, **kwargs):
        kwargs['id'] = 'benefit_purchase_type_id'
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("benefit_purchase_type")
        return create_selectbox_html(**kwargs)

    @expose()
    def save_benefit_setup(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        benefit_purchase_type_id = kwargs.get('benefit_purchase_type_id', None)
        if benefit_purchase_type_id:
            benefit.benefit_purchase_type_id = benefit_purchase_type_id

        benefit_insured_type_id = kwargs.get('benefit_insured_type_id', None)
        if benefit_insured_type_id:
            benefit.benefit_insured_type_id = benefit_insured_type_id

        entity_organisation_insurer_id = kwargs.get('entity_organisation_insurer_id', None)
        if entity_organisation_insurer_id:
            benefit.entity_organisation_insurer_id = entity_organisation_insurer_id

        benefit.name = kwargs.get('name', None)

        is_compulsory = kwargs.get('is_compulsory', False)
        if is_compulsory:
            is_compulsory = True
        benefit.is_compulsory = is_compulsory

        is_life = kwargs.get('is_life', False)
        if is_life:
            is_life = True
        benefit.is_life = is_life

        limit_claims = kwargs.get('limit_claims', False)
        if limit_claims:
            limit_claims = True
        benefit.limit_claims = limit_claims
        benefit.number_of_claims = kwargs.get('number_of_claims', None)

        DBSession.flush()
        return str(benefit_id)

    ###############################################################################
    # Product - Edit - Benefits: Accord 2: Insured
    ###############################################################################

    @expose()
    def get_benefit_insured(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        if benefit.is_life:
            return self.get_benefit_insured_life(benefit)

        return self.get_benefit_insured_non_life(benefit)

    def get_benefit_insured_non_life(self, benefit=None, *args, **kwargs):
        if not benefit:
            return ''

        selected = None
        description = ''
        hidden_input = ''

        insured = BenefitInsuredNonLife.by_attr_first('benefit_id', benefit.id)
        if insured:
            hidden_input = get_hidden_input(**{'id': 'insured_id', 'value': insured.id})
            if insured.description:
                description = insured.description
            if insured.benefit_asset_type_id:
                selected = insured.benefit_asset_type_id

        hidden_input_benefit_id = get_hidden_input(**{'id': 'benefit_id', 'value': benefit.id})
        selectbox_benefit_asset_type = self.get_selectbox_benefit_asset_type(**{'selected': selected})
        html = f"""
        <form id='form_benefit_insured_non_life'>
            {hidden_input}
            {hidden_input_benefit_id}
            <div class="form-group row">
                <label class="col-md-4 col-form-label" required>{_('Asset Type')}</label>
                <div class="col-md-8">
                    {selectbox_benefit_asset_type}
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" required>{_('Description')}</label>
                <div class="col-md-8">
                    <textarea required="true" name='description' type="text" class="form-control" rows="3" maxlength='250'>{description}</textarea>
                </div>
            </div>
        </form>
        <div id='div_benefit_insured_life_html'></div>
        <div class="row">
            <div class="col-md-12 text-right">
                <button id='save_benefit_insured' benefit_id='{benefit.id}' class="btn btn-outline-primary">Save</button>
                <button id='continue_benefit_insured' benefit_id='{benefit.id}' class="btn btn-primary">Save & Continue</button>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        $("#benefit_asset_type_id").change(function(){
            var kwargs = 'benefit_asset_type_id=' + $('#benefit_asset_type_id option:selected').val();
            kwargs += '&benefit_id=' + $('#save_benefit_insured').attr('benefit_id');
            $('#div_benefit_insured_life_html').load('/product/get_benefit_insured_life?', kwargs, function(data){
                return false;
            });
        });
        $("#benefit_asset_type_id").trigger('change');

        setFormValidation('#form_benefit_insured_non_life');

        nextSteps('#save_benefit_insured', 'collapse_insured');
        nextSteps('#continue_benefit_insured', 'collapse_cover');

        function nextSteps(elem, accord_to_collapse){
            $(elem).click(function(){

                 var life_valid = true;
                 var life_form = $('#form_benefit_insured_life');
                 if(life_form.length == 1){
                     var life_valid = FormIsValid("#form_benefit_insured_life");
                 };
                 var valid = FormIsValid("#form_benefit_insured_non_life");

                 if(valid && life_valid){

                    var life_formserial = ''
                    if(life_form.length == 1){
                        var life_formserial = $('#form_benefit_insured_life').serialize();
                    };
                    var formserial = $('#form_benefit_insured_non_life').serialize();

                    $('#benefit_asset_type_id').attr('disabled', 'disabled');
                    $.post('/product/save_benefit_insured_life?', life_formserial, function(data){
                        return false;
                    });
                    $.post('/product/save_benefit_insured_non_life?', formserial, function(data){
                        var kwargs = 'benefit_id='+data;
                        $('#div_benefit_cover').load('/product/get_benefit_cover?', kwargs, function(data){
                            $('#div_product_benefit_htmltbl').load('/product/get_benefits_html_table?', kwargs, function(data){
                                $('#benefit_asset_type_id').removeAttr('disabled');
                                return false;
                            });
                            toggleAccordCollapse(accord_to_collapse);
                            return false;
                        });
                        return false;
                    });
                 };
            });

        };
        </script>
        """
        return html + javascript

    def get_selectbox_benefit_asset_type(self, *args, **kwargs):
        kwargs['id'] = 'benefit_asset_type_id'
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("benefit_asset_type")
        return create_selectbox_html(**kwargs)

    @expose()
    def save_benefit_insured_non_life(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        benefit_id = kwargs.get('benefit_id', None)
        description = kwargs.get('description', None)
        benefit_asset_type_id = kwargs.get('benefit_asset_type_id', None)
        if not benefit_id:
            return ''

        insured_id = kwargs.get('insured_id', None)
        if insured_id:
            insured = BenefitInsuredNonLife.by_id(insured_id)
            if not insured:
                return ''

            insured.benefit_asset_type_id = benefit_asset_type_id
            insured.description = description
            DBSession.flush()
        else:
            insured = BenefitInsuredNonLife()
            insured.benefit_id = benefit_id
            insured.benefit_asset_type_id = benefit_asset_type_id
            insured.description = description
            insured.added_by = usernow.id
            DBSession.add(insured)
            DBSession.flush()
        return str(benefit_id)

    @expose()
    def get_benefit_insured_life(self, benefit=None, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        benefit_asset_type_id = kwargs.get('benefit_asset_type_id', None)
        if not benefit and not benefit_id:
            return ''
        if not benefit and benefit_id:
            benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        selected = PRINCIPAL
        hidden_input = ''
        insured = BenefitInsuredLife.by_attr_first('benefit_id', benefit.id)
        if insured:
            hidden_input = get_hidden_input(**{'id': 'insured_id', 'value': insured.id})
            if insured.benefit_insured_life_relationship_type_id:
                selected = insured.benefit_insured_life_relationship_type_id

        expiry_age = insured.expiry_age if insured and insured.expiry_age else 0
        minimum_age = insured.minimum_age if insured and insured.minimum_age else 1
        maximum_lives = insured.maximum_lives if insured and insured.maximum_lives else 0
        maximum_entry_age = insured.maximum_entry_age if insured and insured.maximum_entry_age else 0

        hidden_input_benefit_id = get_hidden_input(**{'id': 'benefit_id', 'value': benefit.id})
        selectbox_relationship_type = self.get_selectbox_benefit_insured_life_relationship_type(**{'selected': selected})

        button_html = f"""
        <div class="row">
            <div class="col-md-12 text-right">
                <button id='save_benefit_insured' benefit_id='{benefit.id}' class="btn btn-outline-primary">Save</button>
                <button id='continue_benefit_insured' benefit_id='{benefit.id}' class="btn btn-primary">Save & Continue</button>
            </div>
        </div>
        """
        relationship_type_html = f"""
        <div class="form-group row">
            <label class="col-md-4 col-form-label" required>{_('Relationship Type')}</label>
            <div class="col-md-8">
                {selectbox_relationship_type}
            </div>
        </div>
        """
        if benefit_asset_type_id:
            if not int(benefit_asset_type_id) in ASSET_SHOW_LIFE_INSURED_FORM_LIST:
                return ''
            button_html = ""
            relationship_type_html = ""

        html = f"""
        <form id="form_benefit_insured_life">
            {hidden_input}
            {hidden_input_benefit_id}
            {relationship_type_html}
            <div class="form-group row">
                <label class="col-md-4 col-form-label" required>{_('Maximum Entry Age')}</label>
                <div class="col-md-8">
                    <input id="maximum_entry_age" type="number" name="maximum_entry_age" class="form-control" required='true' value='{maximum_entry_age}'>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" for="">{_('Expiry Age')}</label>
                <div class="col-md-8">
                    <input id="expiry_age" type="number" name="expiry_age" class="form-control" value='{expiry_age}'>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" required>{_('Maximum Lives')}</label>
                <div class="col-md-8">
                    <input id="maximum_lives" type="number" name="maximum_lives" class="form-control" required='true' value='{maximum_lives}'>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" required>{_('Minimum Age')}</label>
                <div class="col-md-8">
                    <input id="minimum_age" type="number" name="minimum_age" class="form-control" required='true' value='{minimum_age}'>
                </div>
            </div>
        </form>
        {button_html}
        """
        javascript = """
        <script nonce='1234'>
        setFormValidation('#form_benefit_insured_life');

        nextSteps('#save_benefit_insured', 'collapse_insured');
        nextSteps('#continue_benefit_insured', 'collapse_cover');

        function nextSteps(elem, accord_to_collapse){
            $(elem).click(function(){
                 var valid = FormIsValid("#form_benefit_insured_life");
                 if(valid){
                    var formserial = $('#form_benefit_insured_life').serialize();
                    $('#benefit_insured_life_relationship_type_id').attr('disabled', 'disabled');
                    $.post('/product/save_benefit_insured_life?', formserial, function(data){
                        var kwargs = 'benefit_id='+data;
                        $('#div_benefit_cover').load('/product/get_benefit_cover?', kwargs, function(data){
                            $('#div_product_benefit_htmltbl').load('/product/get_benefits_html_table?', kwargs, function(data){
                                return false;
                            });
                            $('#benefit_insured_life_relationship_type_id').removeAttr('disabled');
                            toggleAccordCollapse(accord_to_collapse);
                            return false;
                        });
                        return false;
                    });
                 };
            });
        };
        </script>
        """
        if button_html:
            return html + javascript
        return html

    def get_selectbox_benefit_insured_life_relationship_type(self, *args, **kwargs):
        kwargs['id'] = 'benefit_insured_life_relationship_type_id'
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("benefit_insured_life_relationship_type")
        return create_selectbox_html(**kwargs)

    @expose()
    def save_benefit_insured_life(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        maximum_age = kwargs.get('maximum_age', None)
        has_maximum_age = True if maximum_age else False

        relationship_type_id = kwargs.get('benefit_insured_life_relationship_type_id', PRINCIPAL)

        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        insured_id = kwargs.get('insured_id', None)
        if insured_id:

            insured = BenefitInsuredLife.by_attr_first('benefit_id', benefit_id)
            if not insured:
                return ''

            insured.benefit_id = kwargs.get('benefit_id', None)
            insured.benefit_insured_life_relationship_type_id = relationship_type_id
            insured.maximum_entry_age = kwargs.get('maximum_entry_age', None)
            insured.expiry_age = kwargs.get('expiry_age', None)
            insured.maximum_lives = kwargs.get('maximum_lives', None)
            insured.minimum_age = kwargs.get('minimum_age', None)
            DBSession.flush()
            return str(benefit_id)

        insured = BenefitInsuredLife()
        insured.benefit_id = kwargs.get('benefit_id', None)
        insured.benefit_insured_life_relationship_type_id = relationship_type_id
        insured.maximum_entry_age = kwargs.get('maximum_entry_age', None)
        insured.expiry_age = kwargs.get('expiry_age', None)
        insured.maximum_lives = kwargs.get('maximum_lives', None)
        insured.minimum_age = kwargs.get('minimum_age', None)
        insured.added_by = usernow.id
        DBSession.add(insured)
        DBSession.flush()
        return str(benefit_id)

    ###############################################################################
    # Product - Edit - Benefits: Accord 3: Cover & Exclusions
    ###############################################################################

    def get_selectbox_benefit_cover(self, *args, **kwargs):
        benefit = kwargs.get('benefit', None)
        if not benefit:
            return ''

        usedlist = []
        coverlist = BenefitCover.by_attr_all('benefit_id', benefit.id)
        for c in coverlist:
            usedlist.append(int(c.cover_and_exclusion_id))

        excludelist = BenefitExclusion.by_attr_all('benefit_id', benefit.id)
        for e in excludelist:
            usedlist.append(int(e.cover_and_exclusion_id))

        outputlist = []
        dbase_query = CoverAndExclusion.by_attr_all('is_cover', True)
        for i in dbase_query:
            if int(i.id) in usedlist:
                continue
            outputlist.append({'id': i.id, 'name': i.code, })

        kwargs['required'] = True
        kwargs['outputlist'] = outputlist
        kwargs['id'] = 'cover_and_exclusion_id'
        return create_selectbox_html(**kwargs)

    @expose()
    def get_benefit_cover(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        selected_frequency = None
        selected_number_of_payouts = None

        benefit_payout_frequency_option = BenefitPayoutFrequencyOption.by_attr_first('benefit_id', benefit_id)
        if benefit_payout_frequency_option:
            selected_frequency = benefit_payout_frequency_option.frequency_type_id if benefit_payout_frequency_option.frequency_type_id else None
            selected_number_of_payouts = benefit_payout_frequency_option.number_of_payouts if benefit_payout_frequency_option.number_of_payouts else None

        if not selected_frequency:
            single = TYPEUTIL.get_id_of_name('frequency_type', 'single')
            if single:
                selected_frequency = single

        available_inner, used_inner = self.get_available_used_benefit_exclusion(benefit_id)
        cover_available_inner, cover_used_inner = self.get_available_used_benefit_cover(benefit_id)

        selected = None
        if benefit.cover_and_exclusion_id:
            selected = benefit.cover_and_exclusion_id

        selectbox_cover = self.get_selectbox_benefit_cover(**{'selected': selected, 'benefit': benefit})
        selectbox_frequency_of_payouts = self.get_selectbox_frequency_of_payouts(**{'selected': selected_frequency})
        number_of_payouts = self.get_number_of_payouts(selected=selected_number_of_payouts)

        hidden_input_benefit_id = get_hidden_input(**{'id': 'benefit_id', 'value': benefit.id})
        html = f"""
        <form id="form_benefit_cover">
            {hidden_input_benefit_id}
            <div class="form-group row">
                <label class="col-md-4 col-form-label" required>{_('Cover Type')}</label>
                <div class="col-md-8">
                    {selectbox_cover}
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" required>{_('Frequency of Payouts')}</label>
                <div class="col-md-8">
                    {selectbox_frequency_of_payouts}
                </div>
            </div>
            {number_of_payouts}
        </form>
        <hr>
        <div class="row" style='max-height: 20vh; overflow-y: auto;'>
            <div id='used' class="col-md-6 rightborder">
                <h6 class="card-title">Attached Cover</h6>
                {cover_used_inner}
            </div>
            <div id='avail' class="col-md-6">
                <h6 class="card-title">Available Cover</h6>
                {cover_available_inner}
            </div>
        </div>
        <hr>
        <div class="row" style='max-height: 20vh; overflow-y: auto;'>
            <div id='used' class="col-md-6 rightborder">
                <h6 class="card-title">Attached Exclusions</h6>
                {used_inner}
            </div>
            <div id='avail' class="col-md-6">
                <h6 class="card-title">Available Exclusion</h6>
                {available_inner}
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 text-right">
                <button id='save_benefit_cover' benefit_id='{benefit_id}' class="btn btn-outline-primary">Save</button>
                <button id='continue_benefit_cover' benefit_id='{benefit_id}' class="btn btn-primary">Save & Continue</button>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        setFormValidation('#form_benefit_cover');

        $("#used .cover_segment").click(function(){
            var kwargs = 'benefit_id='+$(this).attr('benefit_id');
            kwargs += '&cover_and_exclusion_id='+$(this).attr('cover_and_exclusion_id');
            $.post('/product/delete_benefit_cover?', kwargs, function(data){
                var kwargs = 'benefit_id='+data;
                $('#div_benefit_cover').load('/product/get_benefit_cover?', kwargs, function(data){
                    return false;
                });
                return false;
            });
        });
        $("#avail .cover_segment").click(function(){
            var kwargs = 'benefit_id='+$(this).attr('benefit_id');
            kwargs += '&cover_and_exclusion_id='+$(this).attr('cover_and_exclusion_id');
            $.post('/product/save_new_benefit_cover?', kwargs, function(data){
                var kwargs = 'benefit_id='+data;
                $('#div_benefit_cover').load('/product/get_benefit_cover?', kwargs, function(data){
                    return false;
                });
                return false;
            });
        });

        $("#used .exclusion_segment").click(function(){
            var kwargs = 'benefit_id='+$(this).attr('benefit_id');
            kwargs += '&cover_and_exclusion_id='+$(this).attr('cover_and_exclusion_id');
            $.post('/product/delete_benefit_exclusion?', kwargs, function(data){
                var kwargs = 'benefit_id='+data;
                $('#div_benefit_cover').load('/product/get_benefit_cover?', kwargs, function(data){
                    return false;
                });
                return false;
            });
        });
        $("#avail .exclusion_segment").click(function(){
            var kwargs = 'benefit_id='+$(this).attr('benefit_id');
            kwargs += '&cover_and_exclusion_id='+$(this).attr('cover_and_exclusion_id');
            $('#dialogdiv').load('/product/get_modal_new_benefit_exclusion?', kwargs, function(data){
                return false;
            });
        });

        $("#cover_and_exclusion_id").change(function(){
            var benefit_id = $('#save_benefit_cover').attr('benefit_id');
            var selected = $('#cover_and_exclusion_id option:selected').val();
            var kwargs = 'benefit_id='+benefit_id+'&cover_and_exclusion_id='+selected;
            $.post('/product/save_benefit_cover_type?', kwargs, function(data){
                $('#div_benefit_cover').load('/product/get_benefit_cover?', kwargs, function(data){
                    return false;
                });
                return false;
            });
        });

        nextSteps('#save_benefit_cover', 'collapse_cover');
        nextSteps('#continue_benefit_cover', 'collapse_loaders');

        function nextSteps(elem, accord_to_collapse){
            $(elem).click(function(){
                 var valid = FormIsValid("#form_benefit_cover");
                 if(valid){
                    var formserial = $('#form_benefit_cover').serialize();
                    $('#cover_and_exclusion_id').attr('disabled', 'disabled');
                    $('#frequency_type').attr('disabled', 'disabled');
                    $.post('/product/save_benefit_cover?', formserial, function(data){
                        var kwargs = 'benefit_id='+data;
                        $('#div_benefit_loaders').load('/product/get_benefit_loaders?', kwargs, function(data){
                            $('#div_product_benefit_htmltbl').load('/product/get_benefits_html_table?', kwargs, function(data){
                                return false;
                            });
                            toggleAccordCollapse(accord_to_collapse);
                            return false;
                        });
                        return false;
                    });
                 };
            });
        };
        </script>
        """
        return html + javascript

    def get_selectbox_frequency_of_payouts(self, *args, **kwargs):
        kwargs['id'] = 'frequency_type'
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("frequency_type")
        return create_selectbox_html(**kwargs)

    def get_number_of_payouts(self, selected):
        if selected:
            number_of_payouts = selected
        else:
            number_of_payouts = 1

        return f"""
        <div class="form-group row">
            <label class="col-md-4 col-form-label" required>{_('Number of Payouts')}</label>
            <div class="col-md-8">
                <input id="number_of_payouts" type="number" name="number_of_payouts" class="form-control" required='true' value='{number_of_payouts}'>
            </div>
        </div>
        """

    def get_available_used_benefit_cover(self, benefit_id=None, *args, **kwargs):
        avail, used = '', ''
        if not benefit_id:
            return avail, used

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return avail, used

        attached_covers = BenefitCover.by_attr_all('benefit_id', benefit_id)
        used_cover_and_exclusion_idlist = [int(x.cover_and_exclusion_id) for x in attached_covers]

        if benefit.cover_and_exclusion_id:
            used_cover_and_exclusion_idlist.append(int(benefit.cover_and_exclusion_id))

        dbase_query = CoverAndExclusion.by_attr_all('is_cover', True)
        for i in dbase_query:

            if benefit.cover_and_exclusion_id and int(benefit.cover_and_exclusion_id) == i.id:
                continue

            excl = BenefitExclusion.by_attr_first('cover_and_exclusion_id', i.id)
            if excl:
                continue

            name = i.code
            element = f"""
            <div class='segment cover_segment' benefit_id='{benefit_id}'
                 cover_and_exclusion_id='{i.id}'> {name}
            </div>
            """

            if int(i.id) in used_cover_and_exclusion_idlist:
                used += element

            else:
                avail += element

        return avail, used

    def get_available_used_benefit_exclusion(self, benefit_id=None, *args, **kwargs):
        avail, used = '', ''
        if not benefit_id:
            return avail, used

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return avail, used

        used_cover_and_exclusion_idlist = []
        attached_covers = BenefitCover.by_attr_all('benefit_id', benefit_id)
        for item in attached_covers:
            this_id = int(item.cover_and_exclusion_id)
            if not this_id in used_cover_and_exclusion_idlist:
                used_cover_and_exclusion_idlist.append(this_id)

        attached_exclusions = BenefitExclusion.by_attr_all('benefit_id', benefit_id)
        for item in attached_exclusions:
            this_id = int(item.cover_and_exclusion_id)
            if not this_id in used_cover_and_exclusion_idlist:
                used_cover_and_exclusion_idlist.append(this_id)

        DAYS = TYPEUTIL.get_id_of_name('benefit_exclusion_expiry_type', 'number_of_days')
        COUNT = TYPEUTIL.get_id_of_name('benefit_exclusion_expiry_type', 'number_of_premiums')

        dbase_query = CoverAndExclusion.by_attr_all('is_exclusion', True)
        for cover_and_exclusion in dbase_query:

            if benefit.cover_and_exclusion_id == cover_and_exclusion.id:
                continue

            name = cover_and_exclusion.code

            if int(cover_and_exclusion.id) in used_cover_and_exclusion_idlist:

                excl = DBSession.query(BenefitExclusion). \
                        filter(BenefitExclusion.benefit_id == benefit_id). \
                        filter(BenefitExclusion.cover_and_exclusion_id == cover_and_exclusion.id). \
                        first()
                if not excl:
                    continue

                if excl.benefit_exclusion_expiry_type_id == DAYS:
                    link = BenefitExclusionExpiryDays.by_attr_first('benefit_exclusion_id', excl.id)
                    desc = f'{link.number_of_days} Days'

                elif excl.benefit_exclusion_expiry_type_id == COUNT:
                    link = BenefitExclusionExpiryCount.by_attr_first('benefit_exclusion_id', excl.id)
                    desc = f'{link.count} Count'

                else:
                    desc = 'Infinite'

                element = f"""
                <div class='segment exclusion_segment' benefit_id='{benefit_id}'
                     cover_and_exclusion_id='{cover_and_exclusion.id}'> {name} ({desc})
                </div>
                """
                used += element

            else:
                element = f"""
                <div class='segment exclusion_segment' benefit_id='{benefit_id}'
                     cover_and_exclusion_id='{cover_and_exclusion.id}'> {name}
                </div>
                """
                avail += element

        return avail, used

    @expose()
    def get_modal_new_benefit_exclusion(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        if not cover_and_exclusion_id:
            return ''

        cover_and_exclusion = CoverAndExclusion.by_id(cover_and_exclusion_id)
        if not cover_and_exclusion:
            return ''

        cover = cover_and_exclusion.code

        hidden_input_benefit_id = get_hidden_input(**{'id': 'benefit_id', 'value': benefit_id})
        selectbox_benefit_exclusion_expiry_types = self.get_selectbox_benefit_exclusion_expiry_types()
        hidden_input = get_hidden_input(**{'id': 'cover_and_exclusion_id', 'value': cover_and_exclusion_id})
        html = f"""
        <div class="modal fade" id="dialog_new_benefit_exclusion" tabindex="-1" role="dialog" aria-labelledby="mybenefit_exclusionLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">Adding Exclusion: {cover}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_new_benefit_exclusion'>
                            {hidden_input}
                            {hidden_input_benefit_id}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="benefit_exclusion_expiry_type_id">Expiry Type</label>
                                    <div class="col-md-9">
                                        {selectbox_benefit_exclusion_expiry_types}
                                    </div>
                                </div>
                            </div>
                            <div id="expiry_type_fields" class="col-md-12">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_new_benefit_exclusion' benefit_id="{benefit_id}" class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary benefit_exclusion_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            $('#benefit_exclusion_expiry_type_id').change(function(){
                var selected = $('#benefit_exclusion_expiry_type_id option:selected').val();
                var kwargs = 'benefit_exclusion_expiry_type_id='+selected;
                $('#expiry_type_fields').load('/product/get_benefit_expiry_type_fields?', kwargs, function(data){
                    return false;
                });
            });
            $('#benefit_exclusion_expiry_type_id').trigger('change');

            var form_id = '#form_new_benefit_exclusion'
            setFormValidation(form_id);
            $('#save_new_benefit_exclusion').click(function(){
                 var benefit_id = $(this).attr('benefit_id');
                 var valid = FormIsValid(form_id);
                 if(valid){
                    var formserial = $(form_id).serialize();
                    $('#dialog_new_benefit_exclusion').modal('hide');
                    $.post('/product/save_new_benefit_exclusion?', formserial, function(data){
                        var kwargs = 'benefit_id='+data;
                        $('#div_benefit_cover').load('/product/get_benefit_cover?', kwargs, function(data){
                            return false;
                        });
                        return false;
                    });
                 };
            });
            $('.benefit_exclusion_back').click(function(){
                $('#dialog_new_benefit_exclusion').modal('hide');
            });
            $('#dialog_new_benefit_exclusion').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def get_benefit_expiry_type_fields(self, *args, **kwargs):
        selected = kwargs.get('benefit_exclusion_expiry_type_id', None)
        if not selected: return ''
        selected = int(selected)
        infinite = TYPEUTIL.get_id_of_name('benefit_exclusion_expiry_type', 'infinite')
        days = TYPEUTIL.get_id_of_name('benefit_exclusion_expiry_type', 'number_of_days')
        count = TYPEUTIL.get_id_of_name('benefit_exclusion_expiry_type', 'number_of_premiums')

        if selected == infinite:
            return ""

        if selected == days:
            return f"""
            <div class="form-group row">
                <label class="col-md-3 col-form-label" required for="exclusion_expiry_days">Num Days</label>
                <div class="col-md-9">
                    <input id="exclusion_expiry_days" type="number" name="exclusion_expiry_days" class="form-control" required='true'>
                </div>
            </div>
            """

        if selected == count:
            return f"""
            <div class="form-group row">
                <label class="col-md-3 col-form-label" required for="exclusion_expiry_count">Num Premiums</label>
                <div class="col-md-9">
                    <input id="exclusion_expiry_count" type="number" name="exclusion_expiry_count" class="form-control" required='true'>
                </div>
            </div>
            """

        return ''

    @expose()
    def delete_benefit_exclusion(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        this = DBSession.query(BenefitExclusion). \
            filter(BenefitExclusion.benefit_id == benefit_id). \
            filter(BenefitExclusion.cover_and_exclusion_id == cover_and_exclusion_id). \
            first()
        if this:
            DBSession.delete(this)
            DBSession.flush()
        return str(benefit_id)

    @expose()
    def delete_benefit_cover(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        this = DBSession.query(BenefitCover). \
            filter(BenefitCover.benefit_id == benefit_id). \
            filter(BenefitCover.cover_and_exclusion_id == cover_and_exclusion_id). \
            first()
        if this:
            DBSession.delete(this)
            DBSession.flush()
        return str(benefit_id)

    @expose()
    def save_new_benefit_cover(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        usernow = request.identity.get('user', {})
        this = BenefitCover()
        this.benefit_id = benefit_id
        this.cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return str(benefit_id)

    @expose()
    def save_new_benefit_exclusion(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        usernow = request.identity.get('user', {})
        this = BenefitExclusion()
        this.benefit_id = kwargs.get('benefit_id', None)
        this.cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        this.benefit_exclusion_expiry_type_id = kwargs.get('benefit_exclusion_expiry_type_id', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()

        days = TYPEUTIL.get_id_of_name('benefit_exclusion_expiry_type', 'number_of_days')
        count = TYPEUTIL.get_id_of_name('benefit_exclusion_expiry_type', 'number_of_premiums')

        if int(this.benefit_exclusion_expiry_type_id) == days:
            link = BenefitExclusionExpiryDays()
            link.benefit_exclusion_id = this.id
            link.number_of_days = kwargs.get('exclusion_expiry_days', None)
            link.added_by = usernow.id
            DBSession.add(link)
            DBSession.flush()

        if int(this.benefit_exclusion_expiry_type_id) == count:
            link = BenefitExclusionExpiryCount()
            link.benefit_exclusion_id = this.id
            link.count = kwargs.get('exclusion_expiry_count', None)
            link.added_by = usernow.id
            DBSession.add(link)
            DBSession.flush()

        return benefit_id

    def get_selectbox_benefit_exclusion_expiry_types(self, *args, **kwargs):
        kwargs['id'] = 'benefit_exclusion_expiry_type_id'
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("benefit_exclusion_expiry_type")
        return create_selectbox_html(**kwargs)

    @expose()
    def save_benefit_cover_type(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        if str(cover_and_exclusion_id) == 'undefined':
            return ''

        benefit.cover_and_exclusion_id = cover_and_exclusion_id
        DBSession.flush()
        return str(benefit_id)

    @expose()
    def save_benefit_cover(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''
        benefit.cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        DBSession.flush()

        freq = BenefitPayoutFrequencyOption.by_attr_first('benefit_id', benefit_id)
        if freq:
            freq.number_of_payouts = kwargs.get('number_of_payouts', None)
            freq.frequency_type_id = kwargs.get('frequency_type', None)
        else:
            freq = BenefitPayoutFrequencyOption()
            freq.benefit_id = benefit_id
            freq.number_of_payouts = kwargs.get('number_of_payouts', None)
            freq.frequency_type_id = kwargs.get('frequency_type', None)
            DBSession.add(freq)
        return str(benefit_id)

    ###############################################################################
    # Product - Edit - Benefits: Accord 4: Loaders
    ###############################################################################

    @expose()
    def get_benefit_loaders(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        available_inner, used_inner = self.get_available_used_benefit_loader_html(benefit_id)
        html = f"""
        <div class="row">
            <div id='div_used' class="col-md-6 rightborder">
                <h6 class="card-title">Loaders</h6>
                {used_inner}
            </div>
            <div id='div_available' class="col-md-6">
                <h6 class="card-title">Available</h6>
                {available_inner}
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 text-right">
                <button id='continue_benefit_loader' benefit_id='{benefit_id}' class="btn btn-primary">Continue</button>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            function SegmentClick(selector, href){
                $(selector).click(function(data){
                    var benefit_id = $(this).attr('benefit_id');
                    var kwargs = 'benefit_id='+benefit_id;
                    kwargs += '&loader_question_id='+$(this).attr('loader_question_id');
                    $.post(href, kwargs, function(data){
                        var kwargs = 'benefit_id='+data;
                        $('#div_benefit_loaders').load('/product/get_benefit_loaders?', kwargs, function(data){
                            return false;
                        });
                        return false;
                    });
                });
            };
            SegmentClick('#div_used .loader_segment', '/product/save_delete_benefitloader');
            SegmentClick('#div_available .loader_segment', '/product/save_new_benefitloader');
            $("#continue_benefit_loader").click(function(){
                var kwargs = 'benefit_id='+$(this).attr('benefit_id');
                $('#div_benefit_claim_questions').load('/product/get_benefit_claim_questions?', kwargs, function(data){
                    toggleAccordCollapse('collapse_claim_questions');
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    def get_available_used_benefit_loader_html(self, benefit_id=None, *args, **kwargs):
        avail, used = '', ''
        loaderlist = LoaderQuestion.get_all('text')
        linklist = BenefitLoaderLink.by_attr_all('benefit_id', benefit_id)
        idlist = [int(x.loader_question_id) for x in linklist]
        for item in loaderlist:
            effect = TYPEUTIL.get_pretty_name('loader_question_premium_effect_type',
                                              item.loader_question_premium_effect_type_id)
            answer_count = LoaderQuestionAnswer.by_attr_count('loader_question_id', item.id)
            element = f"""
                <div class='loader_segment' benefit_id='{benefit_id}' loader_question_id='{item.id}'>
                    {item.text} (Effect: {effect}) (Questions: {answer_count})
                </div> """
            if int(item.id) in idlist:
                used += element
            else:
                avail += element
        return avail, used

    @expose()
    def save_delete_benefitloader(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        loader_question_id = kwargs.get('loader_question_id', None)
        this = DBSession.query(BenefitLoaderLink). \
            filter(BenefitLoaderLink.benefit_id == benefit_id). \
            filter(BenefitLoaderLink.loader_question_id == loader_question_id). \
            one()
        DBSession.delete(this)
        DBSession.flush()
        return str(benefit_id)

    @expose()
    def save_new_benefitloader(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        usernow = request.identity.get('user', {})
        link = BenefitLoaderLink()
        link.benefit_id = kwargs.get('benefit_id', None)
        link.loader_question_id = kwargs.get('loader_question_id', None)
        link.added_by = usernow.id
        DBSession.add(link)
        DBSession.flush()
        return str(benefit_id)

    ###############################################################################
    # Product - Edit - Benefits: Accord 5: Claim Questions
    ###############################################################################

    @expose()
    def get_benefit_claim_questions(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        available_inner, used_inner = self.get_available_used_benefit_claim_question(benefit_id)
        html = f"""
        <div class="row">
            <div id='div_used' class="col-md-6 rightborder">
                <h6 class="card-title">Questions</h6>
                {used_inner}
            </div>
            <div id='div_avail' class="col-md-6">
                <h6 class="card-title">Available</h6>
                {available_inner}
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 text-right">
                <button id='continue_benefit_claim_question' benefit_id='{benefit_id}' class="btn btn-primary">Continue</button>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            $("#div_used .claim_question_segment").click(function(){
                var kwargs = 'benefit_id='+$(this).attr('benefit_id');
                kwargs += '&claim_question_id='+$(this).attr('claim_question_id');
                $.post('/product/save_delete_benefit_claim_question?', kwargs, function(data){
                    var kwargs = 'benefit_id='+data;
                    $('#div_benefit_claim_questions').load('/product/get_benefit_claim_questions?', kwargs, function(data){
                        return false;
                    });
                    return false;
                });
            });
            $("#div_avail .claim_question_segment").click(function(){
                var kwargs = 'benefit_id='+$(this).attr('benefit_id');
                kwargs += '&claim_question_id='+$(this).attr('claim_question_id');
                $('#dialogdiv').load('/product/get_modal_new_benefit_claim_question?', kwargs, function(data){
                    return false;
                });
            });
            $("#continue_benefit_claim_question").click(function(){
                var kwargs = 'benefit_id='+$(this).attr('benefit_id');
                $('#div_benefit_premium').load('/product/get_benefit_premium?', kwargs, function(data){
                    toggleAccordCollapse('collapse_premium');
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    def get_available_used_benefit_claim_question(self, benefit_id=None, *args, **kwargs):
        avail, used = '', ''
        claim_question_list = ClaimQuestion.get_all('id')
        linklist = BenefitClaimQuestionLink.by_attr_all('benefit_id', benefit_id)
        idlist = [int(x.claim_question_id) for x in linklist]
        for i in claim_question_list:
            element = f"""
            <div class='claim_question_segment' benefit_id='{benefit_id}' claim_question_id='{i.id}'>
                {i.text}
            </div>
            """
            if int(i.id) in idlist:
                used += element
            else:
                avail += element
        return avail, used

    @expose()
    def get_modal_new_benefit_claim_question(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        claim_question_id = kwargs.get('claim_question_id', None)
        if not claim_question_id:
            return ''

        claim_question = ClaimQuestion.by_id(claim_question_id)
        if not claim_question:
            return ''

        hidden_input = get_hidden_input(**{'id': 'claim_question_id', 'value': claim_question_id})
        hidden_input_benefit_id = get_hidden_input(**{'id': 'benefit_id', 'value': benefit_id})
        selectbox_claim_question_answers = self.get_selectbox_claim_question_answers(claim_question_id)
        html = f"""
        <div class="modal fade" id="dialog_new_benefit_claim_question" tabindex="-1" role="dialog" aria-labelledby="mybenefit_exclusionLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">Claim Question: {claim_question.text}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_new_benefit_claim_question'>
                            {hidden_input}
                            {hidden_input_benefit_id}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="claim_question_correct_answer_id">Correct Answer</label>
                                    <div class="col-md-9">
                                        {selectbox_claim_question_answers}
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_new_benefit_claim_question' benefit_id="{benefit_id}" class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary benefit_claim_question_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            var form_id = '#form_new_benefit_claim_question'
            setFormValidation(form_id);
            $('#save_new_benefit_claim_question').click(function(){
                 var benefit_id = $(this).attr('benefit_id');
                 var valid = FormIsValid(form_id);
                 if(valid){
                    var formserial = $(form_id).serialize();
                    $('#dialog_new_benefit_claim_question').modal('hide');
                    $.post('/product/save_new_benefit_claim_question?', formserial, function(data){
                        var kwargs = 'benefit_id='+data;
                        $('#div_benefit_claim_questions').load('/product/get_benefit_claim_questions?', kwargs, function(data){
                            toggleAccordCollapse('collapse_claim_questions');
                            return false;
                        });
                        return false;
                    });
                 };
            });
            $('.benefit_claim_question_back').click(function(){
                $('#dialog_new_benefit_claim_question').modal('hide');
            });
            $('#dialog_new_benefit_claim_question').modal();
        </script>
     	"""
        return html + javascript

    def get_selectbox_claim_question_answers(self, claim_question_id=None, *args, **kwargs):
        if not claim_question_id: return ''
        kwargs['required'] = True
        kwargs['id'] = 'claim_question_correct_answer_id'
        dbase_query = ClaimQuestionAnswer.by_attr_all('claim_question_id', claim_question_id)
        kwargs['outputlist'] = [{'id': i.id, 'name': i.answer_text} for i in dbase_query]
        return create_selectbox_html(**kwargs)

    @expose()
    def save_delete_benefit_claim_question(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        claim_question_id = kwargs.get('claim_question_id', None)

        this = DBSession.query(BenefitClaimQuestionLink). \
            filter(BenefitClaimQuestionLink.benefit_id == benefit_id). \
            filter(BenefitClaimQuestionLink.claim_question_id == claim_question_id). \
            one()
        DBSession.delete(this)
        DBSession.flush()
        return str(benefit_id)

    @expose()
    def save_new_benefit_claim_question(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        usernow = request.identity.get('user', {})
        link = BenefitClaimQuestionLink()
        link.benefit_id = kwargs.get('benefit_id', None)
        link.claim_question_id = kwargs.get('claim_question_id', None)
        link.claim_question_correct_answer_id = kwargs.get('claim_question_correct_answer_id', None)
        link.added_by = usernow.id
        DBSession.add(link)
        DBSession.flush()
        return str(benefit_id)

    ###############################################################################
    # Product - Edit - Benefits: Accord 6: Premium & Sum Insured
    ###############################################################################

    @expose()
    def get_benefit_premium(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        hidden_input_benefit_id = get_hidden_input(**{'id': 'benefit_id', 'value': benefit_id})

        selected = FIXED
        if benefit.benefit_price_type_id:
            selected = benefit.benefit_price_type_id
        selectbox_benefit_price_types = self.get_selectbox_benefit_price_types(**{'selected': selected})

        rounding_rates_html = ''
        selected = benefit.rounding_rate_id if benefit.rounding_rate_id else None
        selectbox_rounding_rates = self.get_selectbox_rounding_rates(**{'selected': selected})
        if selectbox_rounding_rates:
            rounding_rates_html = f"""
            <div class="form-group row">
                <label class="col-md-4 col-form-label">{_('Rounding Rate')}</label>
                <div class="col-md-8">
                    {selectbox_rounding_rates}
                </div>
            </div>
            """

        html = f"""
        <form id='form_benefit_premium'>
            {hidden_input_benefit_id}
            <div class="form-group row">
                <label class="col-md-4 col-form-label" required>{_('Price Type')}</label>
                <div class="col-md-8">
                    {selectbox_benefit_price_types}
                </div>
            </div>
            <div id="benefit_premium_fields">
            </div>
            {rounding_rates_html}
        </form>
        <div class="row">
            <div class="col-md-12 text-right">
                <button id='save_benefit_premium' benefit_id='{benefit_id}' class="btn btn-outline-primary">Save</button>
                <button id='continue_benefit_premium' benefit_id='{benefit_id}' class="btn btn-primary">Save & Continue</button>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        setFormValidation('#form_benefit_premium');
        $('#benefit_price_type_id').change(function(){
            var selected = $('#benefit_price_type_id option:selected').val();
            var kwargs = 'benefit_price_type_id='+selected;
            kwargs += '&benefit_id='+$('#save_benefit_premium').attr('benefit_id');
            $('#benefit_premium_fields').load('/product/get_benefit_premium_fields?', kwargs, function(data){
                return false;
            });
        });
        $('#benefit_price_type_id').trigger('change');

        nextSteps('#save_benefit_premium', 'collapse_premium');
        nextSteps('#continue_benefit_premium', 'collapse_allocations');

        function nextSteps(elem, accord_to_collapse){
            $(elem).click(function(){
                 var valid = FormIsValid("#form_benefit_premium");
                 if(valid){
                    var formserial = $('#form_benefit_premium').serialize();
                    $('#benefit_price_type_id').attr('disabled', 'disabled');
                    $.post('/product/save_benefit_premium?', formserial, function(data){
                        var kwargs = 'benefit_id='+data;
                        $('#div_benefit_allocations').load('/product/get_benefit_allocations?', kwargs, function(data){
                            toggleAccordCollapse(accord_to_collapse);
                            return false;
                        });
                        $('#benefit_price_type_id').removeAttr('disabled');
                        return false;
                    });
                 };
            });
        };
        </script>
        """
        return html + javascript

    @expose()
    def get_premium_and_sum_insured_limits(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        has_premium_limits = ''
        has_sum_insured_limits = ''

        minimum_premium, maximum_premium = 0, 0
        minimum_sum_insured, maximum_sum_insured = 0, 0

        if benefit.has_premium_limits:
            has_premium_limits = 'checked'
            limit = BenefitPremiumLimit.by_attr_first('benefit_id', benefit_id)
            if limit:
                minimum_premium = getcurrency(limit.minimum_premium)
                maximum_premium = getcurrency(limit.maximum_premium)

        if benefit.has_sum_insured_limits:
            has_sum_insured_limits = 'checked'
            limit = BenefitSumInsuredLimit.by_attr_first('benefit_id', benefit_id)
            if limit:
                minimum_sum_insured = getcurrency(limit.minimum_sum_insured)
                maximum_sum_insured = getcurrency(limit.maximum_sum_insured)

        limit_inputs = f"""
        <div class="form-group row">
            <label class="col-4 col-form-label" for="active">Limit Premium</label>
            <div class="col-8">
                <div class="form-check">
                    <label class="form-check-label">
                        <input class="form-check-input" type="checkbox" name="has_premium_limits" id="has_premium_limits" {has_premium_limits}/>
                        <span class="form-check-sign"></span>
                    </label>
                </div>
            </div>
        </div>
        <div id="premium_limit_fields" style='display: none;'>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" for="minimum_premium">Minimum Premium</label>
                <div class="col-md-8">
                    <input id="minimum_premium" type="number" name="minimum_premium" class="form-control" value='{minimum_premium}'>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" for="maximum_premium">Maximum Premium</label>
                <div class="col-md-8">
                    <input id="maximum_premium" type="number" name="maximum_premium" class="form-control" value='{maximum_premium}'>
                </div>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-4 col-form-label" for="active">Limit Sum Insured</label>
            <div class="col-8">
                <div class="form-check">
                    <label class="form-check-label">
                        <input class="form-check-input" type="checkbox" name="has_sum_insured_limits" id="has_sum_insured_limits" {has_sum_insured_limits}/>
                        <span class="form-check-sign"></span>
                    </label>
                </div>
            </div>
        </div>
        <div id="sum_insured_limit_fields" style='display: none;'>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" for="minimum_sum_insured">Minimum Sum Insured</label>
                <div class="col-md-8">
                    <input id="minimum_sum_insured" type="number" name="minimum_sum_insured" class="form-control" value='{minimum_sum_insured}'>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" for="maximum_sum_insured">Maximum Sum Insured</label>
                <div class="col-md-8">
                    <input id="maximum_sum_insured" type="number" name="maximum_sum_insured" class="form-control" value='{maximum_sum_insured}'>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            $('#has_premium_limits').change(function(){
                if(this.checked){
                    $('#premium_limit_fields').show();
                }else{
                    $('#premium_limit_fields').hide();
                };
            });
            $('#has_premium_limits').trigger('change');

            $('#has_sum_insured_limits').change(function(){
                if(this.checked){
                    $('#sum_insured_limit_fields').show();
                }else{
                    $('#sum_insured_limit_fields').hide();
                };
            });
            $('#has_sum_insured_limits').trigger('change');
        </script>
        """
        return limit_inputs + javascript

    def get_selectbox_benefit_price_types(self, *args, **kwargs):
        kwargs['id'] = 'benefit_price_type_id'
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("benefit_price_type")
        return create_selectbox_html(**kwargs)

    def get_selectbox_rounding_rates(self, *args, **kwargs):
        dbase_query = DBSession.query(RoundingRate).all()
        if not dbase_query:
            return ''
        outputlist = [{'id' : x.id, 'name' : x.name} for x in dbase_query]
        kwargs['id'] = 'rounding_rate_id'
        kwargs['outputlist'] = outputlist
        return create_selectbox_html(**kwargs)

    @expose()
    def get_benefit_premium_fields(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        selected = kwargs.get('benefit_price_type_id', None)
        if not selected:
            selected = FIXED
        selected = int(selected)
        annual_increase = self.get_benefit_premium_increase_fields(benefit_id=benefit_id)

        if selected == FIXED:
            benefit = Benefit.by_id(benefit_id)
            premium = sum_insured = 0
            if benefit.premium:
                premium = round(benefit.premium, 2)
            if benefit.sum_insured:
                sum_insured = round(benefit.sum_insured, 2)
            return f"""
            <div class="form-group row">
                <label class="col-md-4 col-form-label" required for="premium">Premium</label>
                <div class="col-md-8">
                    <input id="premium" type="number" name="premium" class="form-control" required='true' value='{premium}'>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" required for="sum_insured">Sum Insured</label>
                <div class="col-md-8">
                    <input id="sum_insured" type="number" name="sum_insured" class="form-control" required='true' value='{sum_insured}'>
                </div>
            </div>
            """ + annual_increase

        if selected == RATE_TABLE:
            return self.get_benefit_premium_fields_rate_table(**kwargs) + annual_increase

        return ''

    def get_benefit_premium_fields_rate_table(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        selected = None
        if benefit.rate_table_id:
            selected = benefit.rate_table_id

        if benefit.is_life:
            rate_table = self.get_selectbox_rate_tables_life(**{'selected': selected})

        else:
            kwargs['selected'] = selected
            rate_table = self.get_selectbox_rate_tables_non_life(**kwargs)

        sum_insured = ''
        if benefit.sum_insured:
            sum_insured = round(benefit.sum_insured, 2)

        limits = self.get_premium_and_sum_insured_limits(**kwargs)
        html = f"""
        <div class="form-group row">
            <label class="col-md-4 col-form-label" required for="rate_table_id">Rate Table</label>
            <div class="col-md-8">
                {rate_table}
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-4 col-form-label" for="sum_insured">Sum Insured</label>
            <div class="col-md-8">
                <input id="sum_insured" type="number" name="sum_insured" class="form-control" value='{sum_insured}'>
            </div>
        </div>
        {limits}
        """
        return html

    def get_selectbox_rate_tables_life(self, *args, **kwargs):
        kwargs['required'] = True
        kwargs['id'] = 'rate_table_id'
        dbase_query = RateTable.by_attr_all('is_life', True)
        kwargs['outputlist'] = [{'id': i.id, 'name': i.name} for i in dbase_query]
        return create_selectbox_html(**kwargs)

    def get_selectbox_rate_tables_non_life(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        benefit_insured_non_life = BenefitInsuredNonLife.by_attr_first('benefit_id', benefit_id)
        if not benefit_insured_non_life:
            dbase_query = []
        else:
            dbase_query = RateTable.by_attr_all('benefit_asset_type_id', benefit_insured_non_life.benefit_asset_type_id)
        kwargs['required'] = True
        kwargs['id'] = 'rate_table_id'
        kwargs['outputlist'] = [{'id': i.id, 'name': i.name} for i in dbase_query]
        return create_selectbox_html(**kwargs)

    @expose()
    def save_benefit_premium(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        has_premium_limits = kwargs.get('has_premium_limits', None)
        has_sum_insured_limits = kwargs.get('has_sum_insured_limits', None)

        benefit.benefit_price_type_id = kwargs.get('benefit_price_type_id', None)
        benefit.rounding_rate_id = kwargs.get('rounding_rate_id', None)
        benefit.premium_increase_percentage = kwargs.get('premium_increase_option', None)
        benefit.sum_insured_increase_percentage = kwargs.get('sum_insured_increase_option', None)
        benefit.premium = kwargs.get('premium', 0)
        benefit.sum_insured = kwargs.get('sum_insured', 0)
        benefit.rate_table_id = kwargs.get('rate_table_id', None)
        benefit.has_premium_limits = True if has_premium_limits else False
        benefit.has_sum_insured_limits = True if has_sum_insured_limits else False
        DBSession.flush()

        if has_premium_limits:
            premium_limit = BenefitPremiumLimit.by_attr_first('benefit_id', benefit_id)
            if premium_limit:
                premium_limit.minimum_premium = kwargs.get('minimum_premium', 0)
                premium_limit.maximum_premium = kwargs.get('maximum_premium', 0)
                DBSession.flush()

            else:
                premium_limit = BenefitPremiumLimit()
                premium_limit.benefit_id = benefit_id
                premium_limit.minimum_premium = kwargs.get('minimum_premium', 0)
                premium_limit.maximum_premium = kwargs.get('maximum_premium', 0)
                premium_limit.added_by = usernow.id
                DBSession.add(premium_limit)
                DBSession.flush()

        if has_sum_insured_limits:
            sum_insured_limit = BenefitSumInsuredLimit.by_attr_first('benefit_id', benefit_id)
            if sum_insured_limit:
                sum_insured_limit.minimum_sum_insured = kwargs.get('minimum_sum_insured', 0)
                sum_insured_limit.maximum_sum_insured = kwargs.get('maximum_sum_insured', 0)
                DBSession.flush()

            else:
                sum_insured_limit = BenefitSumInsuredLimit()
                sum_insured_limit.benefit_id = benefit_id
                sum_insured_limit.minimum_sum_insured = kwargs.get('minimum_sum_insured', 0)
                sum_insured_limit.maximum_sum_insured = kwargs.get('maximum_sum_insured', 0)
                sum_insured_limit.added_by = usernow.id
                DBSession.add(sum_insured_limit)
                DBSession.flush()

        return str(benefit_id)

    def get_benefit_premium_increase_fields(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        premium = sum_insured = 0
        if benefit.premium_increase_percentage:
            premium = benefit.premium_increase_percentage
        if benefit.sum_insured_increase_percentage:
            sum_insured = benefit.sum_insured_increase_percentage

        return f"""
        <div class="form-group row">
            <label class="col-md-4 col-form-label" required for="premium_increase_option">Annual Premium Increase %</label>
            <div class="col-md-8">
                <input id="premium_increase_option" type="number" name="premium_increase_option" class="form-control" required='true' value='{premium}'>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-4 col-form-label" required for="sum_insured_increase_option">Annual Sum Insured Increase %</label>
            <div class="col-md-8">
                <input id="sum_insured_increase_option" type="number" name="sum_insured_increase_option" class="form-control" required='true' value='{sum_insured}'>
            </div>
        </div>
        """

    ###############################################################################
    # Product - Edit - Benefits: Accord 7: Allocations
    ###############################################################################

    @expose()
    def get_benefit_allocations(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        dbase_query = BenefitAllocationLink.by_attr_all('benefit_id', benefit_id)
        outputlist = []
        for item in dbase_query:
            alloc = BenefitAllocation.by_id(item.benefit_allocation_id)
            if not alloc:
                continue

            value = ''
            amount = BenefitAllocationLinkCalculationAmount.by_attr_first('benefit_allocation_link_id', item.id)
            if amount:
                value = get_currency_by_locale(amount.amount, cents=False)

            factor = BenefitAllocationLinkCalculationFactor.by_attr_first('benefit_allocation_link_id', item.id)
            if factor:
                value = f"Factor: {factor.factor}"

            percentage = BenefitAllocationLinkCalculationPercentage.by_attr_first('benefit_allocation_link_id', item.id)
            if percentage:
                value = f"{percentage.percentage} %"

            gl_account = GeneralLedgerAccount.by_id(item.gl_account_id)
            if not gl_account:
                gl_account_name = "Not Set"
            else:
                gl_account_name = gl_account.gl_name

            outputlist.append({
                'name': f"<div class='edit benefit_allocation_edit action_link' benefit_id='{benefit_id}' benefit_allocation_link_id='{item.id}'>{alloc.name}</div>",
                'allocation_type': TYPEUTIL.get_pretty_name('benefit_allocation_type', item.benefit_allocation_type_id),
                'value': value,
                'gl_account_id': gl_account_name,
            })
        dbcolumnlist = [
            'name',
            'allocation_type',
            'value',
            'gl_account_id',
        ]
        theadlist = [
            'Name',
            'Allocation Type',
            'Value',
            'GL Account',
        ]
        tdclasslist = [
            '',
            '',
            'text-right',
            'text-right',
        ]
        benefit_allocation_htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "benefit_allocation_table", tdclasslist)
        html = f"""
        <div class="row">
            {benefit_allocation_htmltbl}
        </div>
        <div class="row">
            <div class="col-md-12 text-right">
                <button id='new_benefit_allocation' benefit_id='{benefit_id}' class="btn btn-outline-primary">New Allocation</button>
                <button id='continue_benefit_allocations' benefit_id='{benefit_id}' class="btn btn-primary">Continue</button>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            $("#new_benefit_allocation").click(function(){
                var kwargs = 'benefit_id='+$(this).attr('benefit_id');
                $('#dialogdiv').load('/product/get_modal_benefit_allocation?', kwargs, function(data){
                    return false;
                });
            });
            $(".benefit_allocation_edit").click(function(){
                var kwargs = 'benefit_allocation_link_id='+$(this).attr('benefit_allocation_link_id');
                kwargs += '&benefit_id='+$(this).attr('benefit_id');
                $('#dialogdiv').load('/product/get_modal_benefit_allocation?', kwargs, function(data){
                    return false;
                });
            });
            $("#continue_benefit_allocations").click(function(){
                var kwargs = 'benefit_id='+$(this).attr('benefit_id');
                $.post('/product/confirm_allocation_percentages?', kwargs, function(data){
                    var result = JSON.parse(data);

                    if(result.success){
                        $('#div_benefit_waiting_periods').load('/product/get_benefit_waiting_periods?', kwargs, function(data){
                            toggleAccordCollapse('collapse_waiting_periods');
                            return false;
                        });

                    }else{
                        showNotification(result.status, result.message);

                    };
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def confirm_allocation_percentages(self, *args, **kwargs):
        outputdict = {'success' : False, 'status' : 'danger', 'message' : 'No identifier supplied.'}
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return json.dumps(outputdict)

        outputdict['success'] = True
        return json.dumps(outputdict)

    def get_checkbox_report_only(self, bln_require_gl_account_id='', selected_glaccount='', *args, **kwargs):
        html = f"""
        <div class="col-md-12">
            <div class="form-group row">
                <label class="col-md-3 col-form-label" for="bln_require_gl_account_id">Report Only?</label>
                <div class="col-md-9">
                    <div class="form-check">
                        <label class="form-check-label">
                            <input selected_glaccount='{selected_glaccount}'
                                   class="form-check-input" type="checkbox"
                                   name="bln_require_gl_account_id" id="bln_require_gl_account_id"
                                   {bln_require_gl_account_id}
                            />
                            <span class="form-check-sign"></span>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_allocation_type_html(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''
        selectbox_allocation_types = self.get_selectbox_allocation_types(**kwargs)
        html = f"""
        <div class="col-md-12">
            <div class="form-group row">
                <label class="col-md-3 col-form-label" required for="benefit_allocation_type_id">Allocation Type</label>
                <div class="col-md-9">
                    {selectbox_allocation_types}
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_modal_benefit_allocation(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        benefit_allocation_link_id = kwargs.get('benefit_allocation_link_id', None)

        """
        # REMOVE
        kwargs['benefit_id'] = benefit_id = 1

        alloc = BenefitAllocationLink.by_attr_first('benefit_id', benefit_id)
        if not alloc:
            alloc = BenefitAllocationLink()
            alloc.benefit_id = benefit_id
            alloc.benefit_allocation_type_id = 1
            alloc.benefit_allocation_id = 1
            alloc.benefit_allocation_calculation_type_id = 1
            alloc.bln_require_gl_account_id = True
            alloc.gl_account_id = 1
            alloc.payment_received_type_id = 1
            DBSession.add(alloc)
            DBSession.flush()
        else:
            # can change things here
            pass
        kwargs['benefit_allocation_link_id'] = benefit_allocation_link_id = alloc.id
        """

        title = "New Allocation"
        hidden_input_link_id = ''
        bln_require_gl_account_id = ''
        selected_glaccount = ''
        selected_allocation_type = ''
        selected_payment_received_type = ''
        benefit_allocation_calculation_type_id = ''
        deactivate_html = ''

        if benefit_allocation_link_id:
            alloc = BenefitAllocationLink.by_id(benefit_allocation_link_id)
            if alloc:
                title = "Edit Allocation"
                hidden_input_link_id = get_hidden_input(**{'id': 'benefit_allocation_link_id', 'value': benefit_allocation_link_id})

                if alloc.bln_require_gl_account_id:
                    bln_require_gl_account_id = 'checked'
                else:
                    bln_require_gl_account_id = ''

                if alloc.gl_account_id:
                    selected_glaccount = alloc.gl_account_id

                if alloc.benefit_allocation_type_id:
                    kwargs['selected'] = alloc.benefit_allocation_type_id
                    selected_allocation_type = alloc.benefit_allocation_type_id

                if alloc.payment_received_type_id:
                    selected_payment_received_type = alloc.payment_received_type_id

                if alloc.benefit_allocation_calculation_type_id:
                    benefit_allocation_calculation_type_id = alloc.benefit_allocation_calculation_type_id

                deactivate_html = f"""
                <div class="col-md-12">
                    <div class="form-group row">
                        <label class="col-md-3 col-form-label" for="active">Active</label>
                        <div class="col-md-9">
                            <div class="form-check">
                                <label class="form-check-label">
                                    <input class="form-check-input" type="checkbox" name="active" id="active" checked/>
                                    <span class="form-check-sign"></span>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                """

        allocation_type_html = self.get_allocation_type_html(**kwargs)
        allocations_html = self.get_selectbox_allocations(**{'selected' : selected_allocation_type})
        payment_received_type_html = self.get_selectbox_payment_received_type(**{'selected' : selected_payment_received_type})
        checkbox_report_only = self.get_checkbox_report_only(bln_require_gl_account_id, selected_glaccount)
        hidden_input_benefit_id = get_hidden_input(**{'id': 'benefit_id', 'value': benefit_id})
        html = f"""
        <div class="modal fade" id="dialog_benefit_allocation" tabindex="-1" role="dialog" aria-labelledby="mybenefit_allocationLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">{title}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_benefit_allocation'>
                            {hidden_input_link_id}
                            {hidden_input_benefit_id}
                            {allocation_type_html}
                            {allocations_html}
                            {payment_received_type_html}
                            {checkbox_report_only}
                            <div id='div_glaccount_fields'></div>
                            <div id='div_calculation_type_fields'></div>
                            {deactivate_html}
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_benefit_allocation_link' benefit_allocation_calculation_type_id="{benefit_allocation_calculation_type_id}"
                                benefit_allocation_link_id='{benefit_allocation_link_id}' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary benefit_allocation_back" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            $('#bln_require_gl_account_id').change(function(){

                var benefit_id = $("#benefit_id").val()
                var benefit_allocation_calculation_type_id = $("#save_benefit_allocation_link").attr('benefit_allocation_calculation_type_id');
                var benefit_allocation_link_id = $("#save_benefit_allocation_link").attr('benefit_allocation_link_id');
                var calc_kwargs = 'benefit_id=' + benefit_id + '&benefit_allocation_calculation_type_id=' + benefit_allocation_calculation_type_id;
                calc_kwargs += '&benefit_allocation_link_id=' + benefit_allocation_link_id;

                if(this.checked){
                    calc_kwargs += '&report_only=true';
                    $('#div_glaccount_fields').empty();

                }else{
                    calc_kwargs += '&report_only=false';
                    var kwargs = 'selected='+$(this).attr('selected_glaccount');
                    $('#div_glaccount_fields').load('/product/get_selectbox_gl_accounts', kwargs, function(data){
                        return false;
                    });
                };

                $('#div_calculation_type_fields').load('/product/get_selectbox_allocation_calculation_types', calc_kwargs, function(data){
                    return false;
                });

            });
            $('#bln_require_gl_account_id').trigger('change');

            $('#save_benefit_allocation_link').click(function(){
                var valid = FormIsValid("#form_benefit_allocation");
                if(valid){
                    var formserial = $('#form_benefit_allocation').serialize();
                    $.post('/product/save_benefit_allocation', formserial, function(data){
                        var kwargs = 'benefit_id='+data;
                        $('#div_benefit_allocations').load('/product/get_benefit_allocations?', kwargs, function(data){
                            $('#dialog_benefit_allocation').modal('hide');
                            return false;
                        });
                        return false;
                    });
                };
            });
            $('#dialog_benefit_allocation').modal();
        </script>
        """
        return html + javascript

    @expose()
    def save_benefit_allocation(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        gl_account_id = kwargs.get('gl_account_id', None)
        benefit_allocation_id = kwargs.get('benefit_allocation_id', None)
        payment_received_type_id = kwargs.get('payment_received_type_id', None)
        benefit_allocation_link_id = kwargs.get('benefit_allocation_link_id', None)
        benefit_allocation_type_id = kwargs.get('benefit_allocation_type_id', None)
        benefit_allocation_calculation_type_id = kwargs.get('benefit_allocation_calculation_type_id', None)

        amount = kwargs.get('amount', None)
        factor = kwargs.get('factor', None)
        percentage = kwargs.get('percentage', None)

        bln_require_gl_account_id = kwargs.get('bln_require_gl_account_id', None)
        if bln_require_gl_account_id:
            bln_require_gl_account_id = True
        else:
            bln_require_gl_account_id = False

        active = kwargs.get('active', None)
        if active:
            active = True
        else:
            active = False

        if benefit_allocation_link_id:
            link = BenefitAllocationLink.by_id(benefit_allocation_link_id)
            link.benefit_allocation_type_id = benefit_allocation_type_id
            link.benefit_allocation_id = benefit_allocation_id
            link.benefit_allocation_calculation_type_id = benefit_allocation_calculation_type_id
            link.bln_require_gl_account_id = bln_require_gl_account_id
            link.gl_account_id = gl_account_id
            link.payment_received_type_id = payment_received_type_id
            link.bln_active = active
            DBSession.flush()

        else:
            link = BenefitAllocationLink()
            link.benefit_id = benefit_id
            link.benefit_allocation_type_id = benefit_allocation_type_id
            link.benefit_allocation_id = benefit_allocation_id
            link.benefit_allocation_calculation_type_id = benefit_allocation_calculation_type_id
            link.bln_require_gl_account_id = bln_require_gl_account_id
            link.gl_account_id = gl_account_id
            link.payment_received_type_id = payment_received_type_id
            DBSession.add(link)
            DBSession.flush()

        if amount:
            dbase_query = BenefitAllocationLinkCalculationPercentage.by_attr_all('benefit_allocation_link_id', link.id)
            for old in dbase_query:
                old.bln_active = False
                DBSession.flush()

            dbase_query = BenefitAllocationLinkCalculationFactor.by_attr_all('benefit_allocation_link_id', link.id)
            for old in dbase_query:
                old.bln_active = False
                DBSession.flush()

            child = BenefitAllocationLinkCalculationAmount.by_attr_first('benefit_allocation_link_id', link.id)
            if child:
                child.amount = amount
                DBSession.flush()
            else:
                child = BenefitAllocationLinkCalculationAmount()
                child.benefit_allocation_link_id = link.id
                child.amount = amount
                DBSession.add(child)
                DBSession.flush()

        if factor:
            dbase_query = BenefitAllocationLinkCalculationPercentage.by_attr_all('benefit_allocation_link_id', link.id)
            for old in dbase_query:
                old.bln_active = False
                DBSession.flush()

            dbase_query = BenefitAllocationLinkCalculationAmount.by_attr_all('benefit_allocation_link_id', link.id)
            for old in dbase_query:
                old.bln_active = False
                DBSession.flush()

            child = BenefitAllocationLinkCalculationFactor.by_attr_first('benefit_allocation_link_id', link.id)
            if child:
                child.factor = factor
                DBSession.flush()
            else:
                child = BenefitAllocationLinkCalculationFactor()
                child.benefit_allocation_link_id = link.id
                child.factor = factor
                DBSession.add(child)
                DBSession.flush()

        if percentage:
            dbase_query = BenefitAllocationLinkCalculationFactor.by_attr_all('benefit_allocation_link_id', link.id)
            for old in dbase_query:
                old.bln_active = False
                DBSession.flush()

            dbase_query = BenefitAllocationLinkCalculationAmount.by_attr_all('benefit_allocation_link_id', link.id)
            for old in dbase_query:
                old.bln_active = False
                DBSession.flush()

            child = BenefitAllocationLinkCalculationPercentage.by_attr_first('benefit_allocation_link_id', link.id)
            if child:
                child.percentage = percentage
                DBSession.flush()
            else:
                child = BenefitAllocationLinkCalculationPercentage()
                child.benefit_allocation_link_id = link.id
                child.percentage = percentage
                DBSession.add(child)
                DBSession.flush()

        return str(benefit_id)

    ###############################################################################
    # Product - Edit - Benefits: Accord 8: Dates and Waiting Periods
    ###############################################################################

    @expose()
    def get_benefit_waiting_periods(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        available_inner, used_inner = self.get_available_used_benefit_waiting_periods_html(benefit_id)

        hidden_input_benefit_id = get_hidden_input(**{'id': 'benefit_id', 'value': benefit.id})
        html = f"""
        <form id="form_benefit_waiting_periods">
            {hidden_input_benefit_id}
        </form>
        <div class="row">
            <div id='div_used' class="col-md-6 rightborder">
                <h6 class="card-title">Dates and Waiting Periods</h6>
                {used_inner}
            </div>
            <div id='div_available' class="col-md-6">
                <h6 class="card-title">Available</h6>
                {available_inner}
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 text-right">
                <button id='save_benefit_waiting_periods' benefit_id='{benefit_id}' class="btn btn-outline-primary">Save</button>
                <button id='continue_benefit_waiting_periods' benefit_id='{benefit_id}' class="btn btn-primary">Save & Continue</button>
            </div>
        </div>
        """
        javascript = """


        <script nonce='1234'>
        setFormValidation('#form_benefit_waiting_periods');
        $('#div_available .waiting_periods_segment').click(function(){
            var benefit_id = $(this).attr('benefit_id');
            var kwargs = 'benefit_id='+benefit_id;
            kwargs += '&period_effect_type_id='+$(this).attr('period_effect_type_id');
            $('#dialogdiv').load('/product/get_modal_new_waiting_period?'+kwargs, function(data){
                return false;
            });
        });
        $('#div_used .waiting_periods_segment').click(function(){
            var benefit_id = $(this).attr('benefit_id');
            var kwargs = 'benefit_id='+benefit_id;
            kwargs += '&period_effect_type_id='+$(this).attr('period_effect_type_id');
            $.post('/product/save_delete_benefitwaiting_periods', kwargs, function(data){
                var kwargs = 'benefit_id='+data;
                $('#div_benefit_waiting_periods').load('/product/get_benefit_waiting_periods?', kwargs, function(data){
                    return false;
                });
                return false;
            });
        });
        $("#continue_benefit_waiting_periods").click(function(){
            var div_excess = $('#collapse_excess');
            var valid = FormIsValid("#form_benefit_waiting_periods");
            if(valid){
                var formserial = $('#form_benefit_waiting_periods').serialize();
                var kwargs = 'benefit_id='+$(this).attr('benefit_id');
                if(div_excess.length == 1){
                    $('#div_benefit_excess').load('/product/get_benefit_excess?', kwargs, function(data){
                        toggleAccordCollapse('collapse_excess');
                        return false;
                    });
                }else{
                    $('#div_benefit_summary').load('/product/get_benefit_summary?', kwargs, function(data){
                        toggleAccordCollapse('collapse_summary');
                        return false;
                    });
                };
            }
        });
        </script>

        """
        return html + javascript

    def get_available_used_benefit_waiting_periods_html(self, benefit_id=None, *args, **kwargs):
        avail, used = '', ''
        waiting_period_list = list(TYPEUTIL.get_dict_of_types('benefit_period_effect_type').keys())
        benefit_period_list = BenefitPeriod.by_attr_all('benefit_id', benefit_id)
        used_periods_list = [x.benefit_period_effect_type_id for x in benefit_period_list]
        for i in benefit_period_list:
            period_effect = TYPEUTIL.get_pretty_name('benefit_period_effect_type', i.benefit_period_effect_type_id)
            period_type = TYPEUTIL.get_pretty_name('period_type', i.period_type_id)
            time_period = i.time_period
            element = f"""
                <div class='waiting_periods_segment' benefit_id='{benefit_id}' benefit_period_id='{i}' period_effect_type_id='{i.benefit_period_effect_type_id}'>
                    {period_effect} ({period_type}: {time_period})
                </div> """
            used += element
        for y in waiting_period_list:
            if y not in used_periods_list:
                period_effect = TYPEUTIL.get_pretty_name('benefit_period_effect_type', y)
                element = f"""
                    <div class='waiting_periods_segment' benefit_id='{benefit_id}' period_effect_type_id='{y}'>
                        {period_effect}
                    </div> """
                avail += element
        return avail, used

    @expose()
    def get_modal_new_waiting_period(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id:
            return ''

        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return ''

        period_effect_type_id = int(kwargs.get('period_effect_type_id', None))
        period_effect_type = TYPEUTIL.get_pretty_name('benefit_period_effect_type', period_effect_type_id)

        hidden_input = get_hidden_input(**{'id': 'period_effect_type_id', 'value': period_effect_type_id})
        hidden_input_benefit_id = get_hidden_input(**{'id': 'benefit_id', 'value': benefit_id})
        selectbox_period_type = self.get_selectbox_period_type()
        html = f"""
        <div class="modal fade" id="dialog_new_benefit_period" tabindex="-1" role="dialog" aria-labelledby="mybenefit_waiting_periodsLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">Date or Waiting Period: {period_effect_type}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_new_benefit_period'>
                            {hidden_input}
                            {hidden_input_benefit_id}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="period_type_id">Period Type</label>
                                    <div class="col-md-9">
                                        {selectbox_period_type}
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required>{_('Time Period')}</label>
                                    <div class="col-md-9">
                                        <input id="time_period" type="number" name="time_period" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_new_benefitwaiting_periods' benefit_id="{benefit_id}" class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary benefit_waiting_period_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            var form_id = '#form_new_benefit_period'
            setFormValidation(form_id);
            $('#save_new_benefitwaiting_periods').click(function(){
                 var benefit_id = $(this).attr('benefit_id');
                 var period_type_id = $(this).attr('period_type_id');
                 var period_effect_type_id = $(this).attr('period_effect_type_id');
                 var valid = FormIsValid(form_id);
                 if(valid){
                    var formserial = $(form_id).serialize();
                    $('#dialog_new_benefit_period').modal('hide');
                    $.post('/product/save_new_benefitwaiting_periods?', formserial, function(data){
                        var kwargs = 'benefit_id='+data;
                        // Do reload the UI here, cause it means the save post was completed
                        $('#div_benefit_waiting_periods').load('/product/get_benefit_waiting_periods?', kwargs, function(data){
                            return false;
                        });
                        return false;
                    });
                 };
            });
            $('.benefit_waiting_period_back').click(function(){
                $('#dialog_new_benefit_period').modal('hide');
            });
            $('#dialog_new_benefit_period').modal();
        </script>
     	"""
        return html + javascript

    def get_selectbox_period_type(self, *args, **kwargs):
        kwargs['id'] = 'period_type_id'
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("period_type")
        return create_selectbox_html(**kwargs)

    @expose()
    def save_delete_benefitwaiting_periods(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        period_effect_type_id = kwargs.get('period_effect_type_id', None)
        this = DBSession.query(BenefitPeriod). \
            filter(BenefitPeriod.benefit_id == benefit_id). \
            filter(BenefitPeriod.benefit_period_effect_type_id == period_effect_type_id). \
            first()
        if this:
            DBSession.delete(this)
            DBSession.flush()
        return str(benefit_id)

    @expose()
    def save_new_benefitwaiting_periods(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        usernow = request.identity.get('user', {})
        waiting_period = BenefitPeriod()
        waiting_period.benefit_id = kwargs.get('benefit_id', None)
        waiting_period.benefit_period_effect_type_id = kwargs.get('period_effect_type_id', None)
        waiting_period.period_type_id = kwargs.get('period_type_id', None)
        waiting_period.time_period = kwargs.get('time_period', None)
        waiting_period.added_by = usernow.id
        DBSession.add(waiting_period)
        DBSession.flush()
        return str(benefit_id)

    ###############################################################################
    # Product - Edit - Benefits: Accord 9: Excess
    ###############################################################################

    @expose()
    def get_benefit_excess(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id: return ''
        benefit = Benefit.by_id(benefit_id)
        if not benefit: return ''
        available_inner, used_inner = self.get_available_used_excess(benefit_id=benefit_id)
        html = f"""
        <div class="row">
            <div id='div_used' class="col-md-6 rightborder">
                <h6 class="card-title">Benefit Excess</h6>
                {used_inner}
            </div>
            <div id='div_available' class="col-md-6">
                <h6 class="card-title">Available Excess</h6>
                {available_inner}
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 text-right">
                <button id='continue_excess' benefit_id='{benefit_id}' class="btn btn-primary">Continue</button>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            $('#div_available .segment').click(function(){
                var kwargs = 'benefit_id=' + $(this).attr('benefit_id');
                kwargs += '&excess_id='+$(this).attr('excess_id');
                $.post('/product/save_new_benefit_excess_link?', kwargs, function(data){
                    $('#div_benefit_excess').load('/product/get_benefit_excess?', kwargs, function(data){
                        return false;
                    });
                    return false;
                });
            });
            $('#div_used .segment').click(function(){
                var kwargs = 'benefit_id=' + $(this).attr('benefit_id');
                kwargs += '&excess_id='+$(this).attr('excess_id');
                $.post('/product/delete_benefit_excess_link?', kwargs, function(data){
                    $('#div_benefit_excess').load('/product/get_benefit_excess?', kwargs, function(data){
                        return false;
                    });
                    return false;
                });
            });
            $("#continue_excess").click(function(){
                var kwargs = 'benefit_id=' + $(this).attr('benefit_id');
                $('#div_benefit_summary').load('/product/get_benefit_summary?', kwargs, function(data){
                    toggleAccordCollapse('collapse_summary');
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def save_new_benefit_excess_link(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        new = BenefitExcessLink()
        new.benefit_id = kwargs.get('benefit_id', None)
        new.excess_id = kwargs.get('excess_id', None)
        new.added_by = usernow.id
        DBSession.add(new)
        DBSession.flush()
        return ''

    @expose()
    def delete_benefit_excess_link(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        benefit_id = kwargs.get('benefit_id', None)
        excess_id = kwargs.get('excess_id', None)
        this = DBSession.query(BenefitExcessLink). \
                filter(BenefitExcessLink.benefit_id == benefit_id). \
                filter(BenefitExcessLink.excess_id == excess_id). \
                first()
        if this:
            DBSession.delete(this)
            DBSession.flush()
        return ''

    ###############################################################################
    # Product - Edit - Benefits: Accord 10: Summary
    ###############################################################################

    @expose()
    def get_benefit_summary(self, *args, **kwargs):
        benefit_id = kwargs.get('benefit_id', None)
        if not benefit_id: return ''
        benefit = Benefit.by_id(benefit_id)
        if not benefit: return ''

        benefit_summary_dict = self.benefit_summary(benefit_id=benefit_id)
        insured_details = ''
        for key, value in benefit_summary_dict.get('insured_details', {}).items():
            insured_details = insured_details + f"""
                                                <div class="col-md-14">
                                                    <div class="form-group row">
                                                        <div class="col-md-5">
                                                            <b>{key.title().replace('_', ' ')}:</b>
                                                        </div>
                                                        <div class="col-md-6">
                                                            {value}
                                                        </div>
                                                    </div>
                                                </div>
                                                """
        price_details = ''
        for key, value in benefit_summary_dict.get('price_details', {}).items():
            price_details = price_details + f"""
                                            <div class="col-md-14">
                                                <div class="form-group row">
                                                    <div class="col-md-5">
                                                        <b>{key.title().replace('_', ' ')}:</b>
                                                    </div>
                                                    <div class="col-md-6">
                                                        {value}
                                                    </div>
                                                </div>
                                            </div>
                                            """
        allocation_table = self.get_allocation_table(benefit_id=benefit_id)
        exclusions_used_inner = self.get_available_used_benefit_exclusion(benefit_id=benefit_id)[1]
        loaders_used_inner = self.get_available_used_benefit_loader_html(benefit_id=benefit_id)[1]
        waiting_periods_used_inner = self.get_available_used_benefit_waiting_periods_html(benefit_id=benefit_id)[1]

        html = f"""
            <div class="col-md-14">
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>Benefit:</b>
                    </div>
                    <div class="col-md-6">
                        {benefit_summary_dict.get('benefit_name', '')}
                    </div>
                </div>
            </div>
            <div class="col-md-14">
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>Main:</b>
                    </div>
                    <div class="col-md-6">
                        {benefit_summary_dict.get('is_main', '')}
                    </div>
                </div>
            </div>
            <div class="col-md-14">
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>Compulsory:</b>
                    </div>
                    <div class="col-md-6">
                        {benefit_summary_dict.get('compulsory', '')}
                    </div>
                </div>
            </div>
            <div class="col-md-14">
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>Insurer:</b>
                    </div>
                    <div class="col-md-6">
                        {benefit_summary_dict.get('insurer', '')}
                    </div>
                </div>
            </div>
            <div class="col-md-14">
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>Insured:</b>
                    </div>
                    <div class="col-md-6">
                        {benefit_summary_dict.get('insured', '')}
                    </div>
                </div>
            </div>
            {insured_details}
            <div class="col-md-14">
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>Cover Type:</b>
                    </div>
                    <div class="col-md-6">
                        {benefit_summary_dict.get('cover_type', '')}
                    </div>
                </div>
            </div>
            <div class="col-md-14">
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>Exclusions:</b>
                    </div>
                    <div class="col-md-6">
                        {exclusions_used_inner}
                    </div>
                </div>
            </div>
            <div class="col-md-14">
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>Loaders:</b>
                    </div>
                    <div class="col-md-6">
                        {loaders_used_inner}
                    </div>
                </div>
            </div>
            <div class="col-md-14">
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>Claim Questions:</b>
                    </div>
                    <div class="col-md-6">
                        {benefit_summary_dict.get('claim_questions', '')}
                    </div>
                </div>
            </div>
            <div class="col-md-14">
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>Price Type:</b>
                    </div>
                    <div class="col-md-6">
                        {benefit_summary_dict.get('price_type', '')}
                    </div>
                </div>
            </div>
            {price_details}
            <div class="col-md-14">
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>Allocations:</b>
                    </div>
                    <div class="col-md-6">
                        {allocation_table}
                    </div>
                </div>
            </div>
            <div class="col-md-14">
                <div class="form-group row">
                    <div class="col-md-5">
                        <b>Dates and Waiting Periods:</b>
                    </div>
                    <div class="col-md-6">
                        {waiting_periods_used_inner}
                    </div>
                </div>
            </div>
        """
        return html

    def benefit_summary(self, benefit_id):
        benefit = Benefit.by_id(benefit_id)
        if not benefit:
            return

        insured, insured_details = self.get_benefit_insured_summary(benefit)
        price_details = self.get_benefit_price_summary(benefit)

        benefit_summary_dict = {
            'benefit_name': benefit.name if benefit.name else 'Not Set',
            'is_main': benefit.is_main_benefit,
            'compulsory': benefit.is_compulsory,
            'insurer': EntityOrganisation.by_id(
                benefit.entity_organisation_insurer_id).name if benefit.entity_organisation_insurer_id else 'Not Set',
            'insured': insured,
            'insured_details': insured_details,
            'cover_type': self.get_benefit_cover_summary(benefit),
            'claim_questions': self.get_claim_question_and_answer_summary(benefit_id=benefit.id),
            'price_type': TYPEUTIL.get_pretty_name('benefit_price_type',
                                                   benefit.benefit_price_type_id) if benefit.benefit_price_type_id else "Not Set",
            'price_details': price_details,
        }
        return benefit_summary_dict

    def get_benefit_cover_summary(self, benefit):
        if benefit.cover_and_exclusion_id:
            cover_and_exclusion = CoverAndExclusion.by_id(benefit.cover_and_exclusion_id)
            if not cover_and_exclusion:
                cover_type_summary = "Not Set"
            else:
                cover_type_summary = cover_and_exclusion.code
            benefit_frequency_option = BenefitPayoutFrequencyOption.by_attr_first('benefit_id', benefit.id)
            frequency_of_payouts_summary = TYPEUTIL.get_pretty_name('frequency_type', benefit_frequency_option.frequency_type_id) if benefit_frequency_option else "Not Set"
            number_of_payouts_summary = benefit_frequency_option.number_of_payouts if benefit_frequency_option else "Not Set"
            return f"""{cover_type_summary} (Frequency of Payouts: {frequency_of_payouts_summary}) (Number of Payouts: {number_of_payouts_summary})"""
        return "Not Set"

    def get_benefit_insured_summary(self, benefit):
        insured = "Not Set"
        insured_details = {'description': "Not Set"}
        if benefit.is_life:
            life_insured = BenefitInsuredLife.by_attr_first('benefit_id', benefit.id)
            if life_insured:
                insured = TYPEUTIL.get_pretty_name('benefit_insured_life_relationship_type', life_insured.
                                                   benefit_insured_life_relationship_type_id)
                insured_details = {
                    'maximum_lives': life_insured.maximum_lives,
                    'maximum_entry_age': life_insured.maximum_entry_age,
                    'expiry_age': life_insured.expiry_age,
                    'minimum_age': life_insured.minimum_age,
                }
        else:
            asset_insured = BenefitInsuredNonLife.by_attr_first('benefit_id', benefit.id)
            if asset_insured:
                insured = TYPEUTIL.get_pretty_name('benefit_asset_type', asset_insured.benefit_asset_type_id)
                insured_details = {'description': asset_insured.description if asset_insured.description else 'Not Set'}
        return insured, insured_details

    def get_benefit_price_summary(self, benefit):
        if not benefit.benefit_price_type_id:
            return {}
        if TYPEUTIL.get_name('benefit_price_type', benefit.benefit_price_type_id) == 'fixed':
            price_details = {
                'premium': round(benefit.premium, 2),
                'sum_insured': round(benefit.sum_insured, 2),
                'annual_premium_increase': f"{benefit.premium_increase_percentage}%",
                'annual_sum_insured_increase': f"{benefit.sum_insured_increase_percentage}%",
            }

        else:
            if not benefit.rate_table_id:
                rate_table_name = "Not Set"
            else:
                rate_table = RateTable.by_id(benefit.rate_table_id)
                if not rate_table:
                    rate_table_name = "Not Set"
                else:
                    rate_table_name = rate_table.name
            price_details = {
                'rate_table': rate_table_name,
                'annual_premium_increase': f"{benefit.premium_increase_percentage}%",
                'annual_sum_insured_increase': f"{benefit.sum_insured_increase_percentage}%",
            }
            if benefit.has_premium_limits:
                benefit_rate_table_premium = BenefitPremiumLimit.by_attr_first('benefit_id', benefit.id)
                price_details.update({'minimum_premium': benefit_rate_table_premium.minimum_premium,
                                      'maximum_premium': benefit_rate_table_premium.maximum_premium})
            if benefit.has_sum_insured_limits:
                benefit_rate_table_sum_insured = BenefitSumInsuredLimit.by_attr_first('benefit_id', benefit.id)
                price_details.update({'minimum_sum_insured': benefit_rate_table_sum_insured.minimum_sum_insured,
                                      'maximum_sum_insured': benefit_rate_table_sum_insured.maximum_sum_insured})
        return price_details

    def get_allocation_table(self, benefit_id):
        dbase_query = BenefitAllocationLink.by_attr_all('benefit_id', benefit_id)
        alloc_list = []
        for item in dbase_query:
            alloc = BenefitAllocation.by_id(item.benefit_allocation_id)
            if not alloc:
                continue

            value = ''
            amount = BenefitAllocationLinkCalculationAmount.by_attr_first('benefit_allocation_link_id', item.id)
            if amount:
                value = f"Amount: {(amount.amount)}"

            factor = BenefitAllocationLinkCalculationFactor.by_attr_first('benefit_allocation_link_id', item.id)
            if factor:
                value = f"Factor: {factor.factor}"

            percentage = BenefitAllocationLinkCalculationPercentage.by_attr_first('benefit_allocation_link_id', item.id)
            if percentage:
                value = f"{percentage.percentage} %"

            gl_account = GeneralLedgerAccount.by_id(item.gl_account_id)
            if not gl_account:
                gl_account_name = "Not Set"
            else:
                gl_account_name = gl_account.gl_name
            alloc_list.append(
                f"{alloc.name} (Type: {TYPEUTIL.get_pretty_name('benefit_allocation_type', item.benefit_allocation_type_id)})({value})(GL Account: {gl_account_name})")
        alloc_html = ''
        for item in alloc_list:
            alloc_html = alloc_html + f"""{item}"""
        if not alloc_list:
            alloc_html = 'Not Set'
        return alloc_html

    def get_claim_question_and_answer_summary(self, benefit_id):
        dbase_query = DBSession.query(BenefitClaimQuestionLink). \
            filter(BenefitClaimQuestionLink.bln_active == True). \
            filter(BenefitClaimQuestionLink.benefit_id == benefit_id). \
            all()
        if not dbase_query:
            return 'Not Set'
        html = ''
        for i in dbase_query:
            claim_question = ClaimQuestion.by_id(i.claim_question_id)
            if not claim_question:
                claim_question_text = "Question not set"
            else:
                claim_question_text = claim_question.text
            claim_question_answer = ClaimQuestionAnswer.by_id(i.claim_question_correct_answer_id)
            if not claim_question_answer:
                claim_answer_text = "Answer not set"
            else:
                claim_answer_text = claim_question_answer.answer_text
            html += f"""
            <div>{claim_question_text}; Correct Answer: {claim_answer_text}</div>"""
        return html

    ###############################################################################
    # Product - Edit - Messaging
    ###############################################################################

    @expose()
    def get_edit_product_messaging(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if product_id:
            product = Product.by_id(product_id)

        if not product:
            return ''
        hidden_input_product_id = get_hidden_input(**{'id': 'product_id', 'value': product.id})

        messaging_table = self.get_messaging_table_html(**{'product_id': product_id})
        outputlist = self.get_available_message_type_outputlist(**{'product_id': product_id})
        new_button = ''
        if len(outputlist) > 0:
           new_button = f'<button id="newMessaging" data-product_id="{product_id}" class="btn btn-outline-primary">Add Message</button>'
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Product Messaging</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                {new_button}
                                <button id='continue_messaging' product_id='{product_id}' class="btn btn-primary">Continue</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div id="messagingTableDiv" class="card-body">
                        {messaging_table}
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            $('#continue_messaging').click(function(){
                var kwargs = 'product_id='+$(this).attr('product_id');
                $('#tab_product_documents').load('/product/get_edit_product_documents?', kwargs, function(data){
                    $('.nav-link[href="#tab_product_documents"]').removeClass('disabled').trigger('click');
                    return false;
                });
            });
            $('#newMessaging').click(function(){
                var kwargs = $(this).data();
                $('#dialogdiv').load('/product/get_messaging_modal', kwargs, function(data){
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_messaging_table_html(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_messaging_table_html: No product_id in kwargs')
            return ''

        dbase_query = ProductMessage.by_attr_all('product_id', product_id)

        outputlist = []
        for item in dbase_query:
            message_type = ''
            if item.product_message_type_id:
                message_type = self.get_type_label(ProductMessageType, item.product_message_type_id)
            elif item.benefit_message_type_id:
                message_type = self.get_type_label(BenefitMessageType, item.benefit_message_type_id)

            pretty_name = message_type.title()
            outputlist.append({
                'message_type': f'<span class="action_link editMessage" data-product_id="{product_id}" data-product_message_id="{item.id}">{pretty_name}</span>',
                'content': item.content,
            })
        dbcolumnlist = [
            'message_type',
            'content',
        ]
        theadlist = [
            'Message Type',
            'Message',
        ]
        tdclasslist = [
            '',
            '',
        ]
        javascript = """
        <script nonce='1234'>
            $('.editMessage').click(function(){
                var kwargs = $(this).data();
                $('#dialogdiv').load('/product/get_messaging_modal', kwargs, function(data){
                    return false;
                });
            });
        </script>
        """
        return build_html_table(outputlist, dbcolumnlist, theadlist, "messaging_table", tdclasslist) + javascript

    @expose()
    def get_messaging_modal(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        messaging_form = ''
        product_message_id = kwargs.get('product_message_id', None)
        if product_message_id:
            kwargs['product_message'] = ProductMessage.by_id(product_message_id)

        messaging_form = self.get_messaging_form(**kwargs)
        title = 'Update' if product_message_id else 'Create'
        popover = self.get_popover_text_merge_html(**kwargs)
        html = f"""
        <div class="modal fade" id="productMessagingModal" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12 d-flex align-items-center justify-content-between">
                            <h4 class="card-title">{title} Message</h4>
                            {popover}
                        </div>
                    </div>
                    <div class="modal-body">
                        {messaging_form}
                    </div>
                    <div class="modal-footer">
                        <button id='saveBtn' class="btn btn-primary" data-product_id="{product_id}">Save</button>
                        <button class="btn btn-outline-primary" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        var product_message_form = $('#product_message_form');
        setFormValidation(product_message_form);
        $('#saveBtn').click(function(){
            var kwargs = $(this) .data();
            var valid = FormIsValid(product_message_form);
            if(valid){
                var formserial = getFormData(product_message_form);
                $.post('/product/save_message', formserial, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $('#messagingTableDiv').load('/product/get_messaging_table_html', kwargs, function(){
                            $('#productMessagingModal').modal('hide');
                            return false;
                        });
                    } else {
                        showNotification(result.status, result.message);
                    };
                    return false;
                });
            }
        });
        $('#productMessagingModal').modal();
        </script>
     	"""
        return html + javascript

    def get_messaging_form(self, *args, **kwargs):
        product_message = kwargs.get('product_message', None)
        form_id = kwargs.get('form_id', 'product_message_form')

        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_messaging_form: No product_id in kwargs')

        hidden_product_id_dict = {
            'input_id': 'product_id',
            'input_type': 'hidden',
            'input_val': f'value="{product_id}"'
        }
        selectbox = ''
        if product_message:
            selected = None
            if product_message.product_message_type_id:
                selected = self.get_type_label(ProductMessageType, product_message.product_message_type_id)
            elif product_message.benefit_message_type_id:
                selected = self.get_type_label(BenefitMessageType, product_message.benefit_message_type_id)

            selectbox = self.get_selectbox_messaging_type(**{'product_id': product_id, 'selected': selected, 'disabled': True})
        else:
            selectbox = self.get_selectbox_available_messaging_type(**{'product_id': product_id}) # New

        message_type_dict = {
            'input_wrapper_class': 'form-group row col-md-12 d-flex align-items-center',
            'input_id': 'message_type',
            'label_val': _('Message type'),
            'input_type': 'custom',
            'input_field': selectbox
            }
        content = product_message.content if product_message else ''
        content_dict = {
            'input_wrapper_class': 'form-group row col-md-12 d-flex align-items-center',
            'input_id': 'content',
            'label_val': _('Message'),
            'input_attrs': f'maxlength="1024"',
            'input_type': 'custom',
            'input_field': f'<textarea class="form-control" name="content" id="content" rows="3">{content}</textarea>'
            }
        params_list = [
            hidden_product_id_dict,
            message_type_dict,
            content_dict,
        ]
        if product_message:
            product_message_id_dict = {
                'input_id': 'product_message_id',
                'input_type': 'hidden',
                'input_val': f'value="{product_message.id}"'
                }
            params_list.append(product_message_id_dict)
            hidden_product_message_type_id = {
                'input_id': 'product_message_type_id',
                'input_type': 'hidden',
                'input_val': f'value="{product_message.product_message_type_id}"'
            }
            params_list.append(hidden_product_message_type_id)
            hidden_benefit_message_type_id = {
                'input_id': 'benefit_message_type_id',
                'input_type': 'hidden',
                'input_val': f'value="{product_message.benefit_message_type_id}"'
            }
            params_list.append(hidden_benefit_message_type_id)
        return build_html_form(form_id, params_list)

    def get_selectbox_available_messaging_type(self, *args, **kwargs):
        outputlist = self.get_available_message_type_outputlist(**kwargs)
        kwargs['id'] = 'messaging_id'
        kwargs['outputlist'] = outputlist
        return create_selectbox_html(**kwargs)

    def get_available_message_type_outputlist(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id: return ''
        message_types = BenefitMessageType.get_all('name')
        message_types += ProductMessageType.get_all('name')

        product_messages = ProductMessage.by_attr_all('product_id', product_id)
        for item in product_messages:
            message_type = None
            if item.product_message_type_id:
                message_type = ProductMessageType.by_id(item.product_message_type_id)
                message_types.remove(message_type)
            elif item.benefit_message_type_id:
                message_type = BenefitMessageType.by_id(item.benefit_message_type_id)
                message_types.remove(message_type)
        outputlist = [{'name': m.name, 'id': m.name} for m in message_types]
        return outputlist

    def get_selectbox_messaging_type(self, *args, **kwargs):
        message_types = BenefitMessageType.get_all('name')
        message_types += ProductMessageType.get_all('name')
        kwargs['id'] = 'messaging_id'
        kwargs['outputlist'] = [{'name': m.name, 'id': m.name} for m in message_types]
        return create_selectbox_html(**kwargs)

    @expose()
    def save_message(self, *args, **kwargs):
        product_message_id = kwargs.get('product_message_id', None)
        if product_message_id:
            return self.save_edit_product_message(**kwargs)
        return self.save_new_product_message(**kwargs)

    def save_new_product_message(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('save_new_message: No product_id in kwargs')
            return json.dumps({'success': False, 'message': 'Product field cannot be empty', 'status': 'danger'})
        messaging_id = kwargs.get('messaging_id', None)
        if not messaging_id:
            log.warning('save_new_message: No messaging_id in kwargs')
            return json.dumps({'success': False, 'message': 'Message type field cannot be empty', 'status': 'danger'})
        content = kwargs.get('content', None)
        if not content:
            log.warning('save_new_message: No content in kwargs')
            return json.dumps({'success': False, 'message': 'Message field cannot be empty', 'status': 'danger'})

        this = ProductMessage()
        this.product_id = product_id
        this.product_message_type_id = self.get_type_id(ProductMessageType, messaging_id)
        this.benefit_message_type_id = self.get_type_id(BenefitMessageType, messaging_id)
        this.content = content
        this.communication_type_id = self.get_type_id(CommunicationType, 'email')
        this.added = datetime.now()
        this.bln_active = True
        DBSession.add(this)
        DBSession.flush()
        return json.dumps({'success': True, 'message': 'Message Created Successfully', 'status': 'success'})

    def save_edit_product_message(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('save_new_message: No product_id in kwargs')
            return json.dumps({'success': False, 'message': 'Product field cannot be empty', 'status': 'danger'})
        content = kwargs.get('content', None)
        if not content:
            log.warning('save_new_message: No content in kwargs')
            return json.dumps({'success': False, 'message': 'Message field cannot be empty', 'status': 'danger'})
        product_message_id = kwargs.get('product_message_id', None)
        if not product_message_id:
            log.warning('save_new_message: No product_message_id in kwargs')
            return json.dumps({'success': False, 'message': 'Message field cannot be empty', 'status': 'danger'})

        this = ProductMessage.by_id(str_to_int(product_message_id))
        if not this:
            log.warning(f'save_edit_product_message: ProductMessage record not found for product_message_id({product_message_id}) provided')
            return json.dumps({'success': False, 'message': 'The product you are trying to edit is not available', 'status': 'danger'})

        this.content = content
        this.edited = datetime.now()
        this.bln_edited = True
        this.edited_by = usernow.id
        DBSession.flush()
        return json.dumps({'success': True, 'message': 'Message Updated Successfully', 'status': 'success'})

    def get_popover_text_merge_html(self, *args, **kwargs):
        dbase_query = MailMerge.get_all('name')
        inner_html = ''
        for text in dbase_query:
            inner_html += f"""
            <div class='row'>
                <span class='col-6'>
                    {text.code}
                </span
                <span class='col-6'>
                    {text.name}
                </span>
            </div>
            """
        html = f"""
        <i class="now-ui-icons travel_info"
           id="text_merge"
           title="Options"
           data-content="{inner_html}">
        </i>
        """
        javascript = """
        <script nonce='1234'>
            $(document).ready(function(){
                $('#text_merge').popover({
                    html : true,
                })
                $('.nav-link').click(function(){
                    $('#text_merge').popover('hide');
                })
            });
        </script>
        """
        return html + javascript

    def get_product_message_active_by_product_id_and_message_type(self, product_id=None, product_message_type_id=None,
                                                                  *args, **kwargs):
        if not product_id: return None
        if not product_message_type_id: return None
        return DBSession.query(ProductMessage). \
            filter(ProductMessage.product_id == product_id). \
            filter(ProductMessage.product_message_type_id == product_message_type_id). \
            filter(ProductMessage.bln_active == True). \
            first()

    def get_type_id(self, cls, type_lbl):
        if not type_lbl: return None
        type_query = DBSession.query(cls). \
            filter(cls.name.like(type_lbl)). \
            first()
        if not type_query:
            return None
        return type_query.id

    def get_type_label(self, cls, type_id):
        if not type_id: return ''
        type_query = DBSession.query(cls). \
            filter(cls.id == type_id). \
            first()
        if not type_query:
            return None
        return type_query.name

    ###############################################################################
    # Product - Edit - Documents
    ###############################################################################

    @expose()
    def get_edit_product_documents(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        product_system_document_link_table = self.get_product_system_document_link_table_html(**kwargs)
        document_type_id = TYPEUTIL.get_id_of_name('system_document_type', 'product')
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Product Documents</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="link_new_document" class="btn btn-outline-primary ml-auto">Upload New Document</button>
                                <button id='continue_documents' product_id='{product_id}' class="btn btn-primary">Continue</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div id="productSystemDocumentLinkTable" class="table-responsive">
                            {product_system_document_link_table}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            $('.product_system_document_link_download').click(function(){
                var formserial = 'link_id='+$(this).attr('link_id');
                var href_with_formserial = '/product/download_document?'+formserial;
                window.location = href_with_formserial
            });
            $("#link_new_document").click(function(){
                var kwargs = 'product_id='+$("#continue_documents").attr('product_id');
                $('#dialogdiv').load('/product/get_modal_new_document_link?', kwargs, function(data){
                    return false;
                });
            });
            $('#continue_documents').click(function(){
                var kwargs = 'product_id='+$(this).attr('product_id');
                $('#tab_product_summary').load('/product/get_edit_product_summary?', kwargs, function(data){
                    $('.nav-link[href="#tab_product_summary"]').removeClass('disabled').trigger('click');
                    return false;
                });
            });
            $('.product_system_document_link_edit').click(function(){
                var kwargs = $(this).data();
                $('#dialogdiv').load('/product/get_modal_new_document_link', kwargs, function(data){
                    return false;
                })
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_product_system_document_link_table_html(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if product_id:
            product = Product.by_id(product_id)

        if not product:
            return ''

        dbase_query = ProductSystemDocumentLink.by_attr_all('product_id', product_id)
        outputlist = []
        for item in dbase_query:
            doc = SystemDocument.by_id(item.system_document_id)
            if not doc:
                doc_name = "Not Set"
            else:
                doc_name = doc.name

            download_link = ''
            if item.file_path:
                download_link = f"<div class='product_system_document_link_download action_link' link_id='{item.id}'>download</div>"

            outputlist.append({
                'name': f"<div class='edit product_system_document_link_edit action_link' data-product_id='{product_id}' data-link_id='{item.id}'>{doc_name}</div>",
                'file_path': remove_hash_from_filename(item.file_path),
                'download': download_link,
            })
        dbcolumnlist = [
            'name',
            'file_path',
            'download',
        ]
        theadlist = [
            'Name',
            'File Name',
            '',
        ]
        tdclasslist = [
            '',
            '',
            'text-right',
        ]
        return build_html_table(outputlist, dbcolumnlist, theadlist, "product_system_document_link_table", tdclasslist)

    @expose()
    def get_modal_new_document_link(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        hidden_input_product_id = get_hidden_input(**{'id': 'product_id', 'value': product_id})

        link_id = kwargs.get('link_id', None)
        product_link = ProductSystemDocumentLink.by_id(link_id)
        selected = product_link.system_document_id if product_link else None
        selectbox_document_documents = self.get_selectbox_product_document_documents(product_id, **{'selected': selected})
        name = product_link.name if product_link else ''
        description = product_link.description if product_link else ''
        title = 'Update Document' if product_link else 'Upload New Document'
        html = f"""
        <div class="modal fade" id="dialog_new_document_link" tabindex="-1" role="dialog" aria-labelledby="myproduct_system_document_linkLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">{title}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_new_document_link'>
                            {hidden_input_product_id}
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="name">Document</label>
                                <div class="col-md-9">
                                    <div id="documentTypeSelectDiv">
                                        {selectbox_document_documents}
                                    </div>
                                    <div class="text-right">
                                        <small>Document type not in the list?
                                            <span id="newSystemDocument" class="action_link">Create a new one here</span>
                                        </small>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required>{_('Name')}</label>
                                <div class="col-md-9">
                                    <input id="name" type="text" name="name" class="form-control" maxlength="100" required='true' value="{name}">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required>{_('Description')}</label>
                                <div class="col-md-9">
                                    <input id="description" type="text" name="description" maxlength="200" class="form-control" required='true' value="{description}">
                                </div>
                            </div>
                        </form>
                        <form id="systemDocform" style="display: none;"></form>
                        <div class="form-group row">
                            <label class="col-md-3 col-form-label" required >Upload</label>
                            <div class="col-md-9">
                                <div class='dropzone' id='dropzone_product_document'></div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button id='save_new_document_link' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        var form_id = '#form_new_document_link'
        setFormValidation(form_id);
        var documentDropzone = new Dropzone('#dropzone_product_document', {
            maxFiles: 1,
            maxFilesize: 256,
            parallelUploads: 1,
            uploadMultiple: false,
            autoProcessQueue: false,
            acceptedFiles: '.doc, .docx, .pdf',
            url: '/product/handle_document_upload',
            params: {
                // To pass extra keys into the uploader
            },
            success: function(file, response){
                var result = JSON.parse(response);
                if(result.success === true){
                    var formserial = $(form_id).serialize();
                    formserial += '&file_path='+result.name;
                    $('#dialog_new_document_link').modal('hide');
                    $.post('/product/save_new_product_system_document_link?', formserial, function(data){
                        var kwargs = 'product_id='+$('#product_back').attr('product_id');
                        $('#tab_product_documents').load('/product/get_edit_product_documents?', kwargs, function(data){
                            return false;
                        });
                        return false;
                    });
                };
            },
        });
        $('#save_new_document_link').click(function(){
             var valid = FormIsValid(form_id);
             if(valid){
                documentDropzone.processQueue();
             }
        });

        var systemDocform = $('#systemDocform');
        $('#newSystemDocument').click(function(){
            systemDocform.load('/product/get_product_system_document_form_inputs', function(){
                systemDocform.slideDown('slow');
                setFormValidation(systemDocform);
                return false;
            });
        });

        $('#dialog_new_document_link').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def get_product_system_document_form_inputs(self, *args, **kwargs):
        system_document_type_id = TYPEUTIL.get_id_of_name('system_document_type', 'product')

        hr_dict = { 'input_type': 'widget', 'widget': '<hr>'}
        title_dict = { 'input_type': 'widget', 'widget': '<h5>Create Document Type</h5>'}
        hidden_system_document_type_id_dict = {
            'input_id': 'system_document_type_id',
            'input_type': 'hidden',
            'input_val': f'value="{system_document_type_id}"'
        }
        name_dict = {
            'input_id': 'name',
            'label_attrs': 'required',
            'label_val': _('Name'),
            'input_attrs': f'maxlength="100" required',
        }
        description_dict = {
            'input_id': 'description',
            'label_attrs': 'required',
            'label_class': 'col-md-3 text-dark',
            'label_val': _('Description'),
            'input_type': 'custom',
            'input_field': f'<textarea class="form-control col-md-9" name="description" id="content" rows="3"></textarea>'
        }
        action_dict = {
            'input_type': 'widget',
            'widget': f"""
            <div class="text-right mt-2">
                <button type="button" id="cancelSystemDocument" class="btn btn-outline-warning">Cancel</button>
                <button type="button" id="saveSystemDocument" class="btn btn-warning">Save Document type</button>
            <div>
            """
        }
        params_list = [
            hr_dict,
            title_dict,
            hidden_system_document_type_id_dict,
            name_dict,
            description_dict,
            action_dict,
            hr_dict
        ]
        javascript = """
        <script nonce='1234'>
            $('#saveSystemDocument').click(function(){
                var valid = FormIsValid(systemDocform);
                if (valid){
                    var formserial = getFormData(systemDocform);
                    $.post('/product/save_product_system_document', formserial, function(data){
                        var result = JSON.parse(data);
                        if (result.success === true){
                            var kwargs = {
                                'selected': result.data
                            }
                            $('#documentTypeSelectDiv').load('/product/get_selectbox_product_document_documents', kwargs, function(){
                                systemDocform.slideUp('slow', function(){
                                    systemDocform.empty();
                                    return false;
                                });
                                return false;
                            });
                        }
                    });
                }
            });
            $('#cancelSystemDocument').click(function(){
                systemDocform.slideUp('slow', function(){
                    systemDocform.empty();
                    return false;
                });
                return false;
            });
        </script>
        """
        return build_html_form_inputs(params_list) + javascript

    @expose()
    def save_product_system_document(self, *args, **kwargs):
        result = self.get_or_create_system_document(**kwargs)
        return json.dumps(result)

    @expose()
    def save_new_product_system_document_link(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('save_new_product_system_document_link: No product_id in kwargs')

        system_document_id = kwargs.get('system_document_id', None)
        if not system_document_id:
            log.warning('save_new_product_system_document_link: No system_document_id in kwargs')

        name = kwargs.get('name', None)
        if not name:
            log.warning('save_new_product_system_document_link: No name in kwargs')
            return json.dumps({'success': False, 'message': 'Name field cannot be empty', 'status': 'danger'})
        description = kwargs.get('description', None)
        if not description:
            log.warning('save_new_product_system_document_link: No description in kwargs')
            return json.dumps({'success': False, 'message': 'Description field cannot be empty', 'status': 'danger'})
        order = kwargs.get('order', 1)
        if not order:
            log.warning('save_new_product_system_document_link: No order in kwargs')
            return json.dumps({'success': False, 'message': 'Order field cannot be empty', 'status': 'danger'})

        link = DBSession.query(ProductSystemDocumentLink). \
            filter(ProductSystemDocumentLink.product_id == product_id). \
            filter(ProductSystemDocumentLink.system_document_id == system_document_id). \
            filter(ProductSystemDocumentLink.bln_active == True). \
            first()

        if not link:
            link = ProductSystemDocumentLink()
            link.product_id = product_id
            link.system_document_id = system_document_id
            link.name = name
            link.description = description
            link.order = order
            link.file_path = kwargs.get('file_path', None)
            link.added_by = usernow.id
            DBSession.add(link)
            DBSession.flush()
        else:
            link.file_path = kwargs.get('file_path', None)
            link.name = name
            link.description = description
            link.order = order
            DBSession.flush()

        return json.dumps({'success': True, 'message': 'Document successfully created', 'status': 'success'})

    @expose()
    def get_selectbox_product_document_documents(self, product_id=None, *args, **kwargs):
        product_type = TYPEUTIL.get_id_of_name('system_document_type', 'product')
        dbase_query = SystemDocument.by_attr_all('system_document_type_id', product_type)
        kwargs['outputlist'] = [{'name': f"{x.name}: {x.description}", 'id': x.id} for x in dbase_query]
        kwargs['required'] = True
        kwargs['id'] = 'system_document_id'
        return create_selectbox_html(**kwargs)

    @expose()
    def handle_document_upload(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        kwargs['user_id'] = usernow.id
        kwargs['upload_dir'] = UPLOADS_DIRNAME
        kwargs['size_limit'] = 256000000  # 256 MB
        kwargs['allowed_extensions'] = ['.doc', '.docx', '.pdf']
        uploader = FileUploader(**kwargs)
        return uploader.handle_file_upload()

    @expose()
    def download_document(self, *args, **kwargs):
        link_id = kwargs.get('link_id', None)
        if not link_id: return ''
        link = ProductSystemDocumentLink.by_id(link_id)
        if not link: return ''
        output_pdf_filepath = os.path.join(UPLOADS_DIRNAME, link.file_path)
        if not os.path.exists(output_pdf_filepath): return ''
        response.headers["Content-Type"] = 'application/pdf'
        response.headers["Content-Disposition"] = 'attachment; filename="' + remove_hash_from_filename(
            link.file_path) + '"'
        filecontent = FileApp(output_pdf_filepath)
        return use_wsgi_app(filecontent)

    @expose()
    def get_product_system_document_link_modal(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        kwargs['form_id'] = 'product_system_document_type_link_form'
        document_form = self.get_product_system_document_type_link_form(**kwargs)
        html = f"""
        <div class="modal fade" id="product_system_document_link_modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">New Product System Document</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        {document_form}
                    </div>
                    <div class="modal-footer">
                        <button id='saveBtn' class="btn btn-primary" data-product_id="{product_id}">Save</button>
                        <button class="btn btn-outline-primary" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        var formId = $('#product_system_document_type_link_form');
        setFormValidation(formId);
        $('#saveBtn').click(function(){
            var kwargs = $(this).data();
            var valid = FormIsValid(formId);
            if (valid){
                var formserial = getFormData(formId);
                $.post('/product/save_new_product_system_document_link', formserial, function(data){
                    var result = JSON.parse(data);
                    if (result.success === true){
                        $('#productSystemDocumentLinkTable').load('/product/get_product_system_document_link_table_html', kwargs, function(data){
                            $('#product_system_document_link_modal').modal('hide');
                            return false;
                        });
                        return false;
                    } else {
                        showNotification(result.status, result.message);
                        return false;
                    }
                });
            }
        });
        $('#product_system_document_link_modal').modal();
        </script>
     	"""
        return html + javascript

    def get_product_system_document_type_link_form(self, *args, **kwargs):
        form_id = kwargs.get('form_id', 'product_system_document_type_link_form')

        product_id = kwargs.get('product_id', None)
        if not product_id:
            log.warning('get_messaging_form: No product_id in kwargs')

        hidden_product_id_dict = {
            'input_id': 'product_id',
            'input_type': 'hidden',
            'input_val': f'value="{product_id}"'
        }
        system_document_type_id = TYPEUTIL.get_id_of_name('system_document_type', 'product')
        hidden_system_document_type_id_dict = {
            'input_id': 'system_document_type_id',
            'input_type': 'hidden',
            'input_val': f'value="{system_document_type_id}"'
        }
        name_dict = {
            'input_wrapper_class': 'form-group row col-md-12 d-flex align-items-center',
            'input_id': 'name',
            'label_attrs': 'required',
            'label_val': _('Name'),
            'input_attrs': f'maxlength="100" required',
            }
        description_dict = {
            'input_wrapper_class': 'form-group row col-md-12 d-flex',
            'input_id': 'description',
            'label_attrs': 'required',
            'label_class': 'col-md-3 text-dark',
            'label_val': _('Description'),
            'input_type': 'custom',
            'input_field': f'<textarea class="form-control col-md-9" name="description" id="content" rows="3"></textarea>'
            }
        params_list = [
            hidden_product_id_dict,
            hidden_system_document_type_id_dict,
            name_dict,
            description_dict,
        ]
        return build_html_form(form_id, params_list)

    def get_or_create_system_document(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        name = kwargs.get('name', None)
        if not name:
            log.warning('get_or_create_system_document: No name in kwargs')
            return {'success': False}

        description = kwargs.get('description', None)
        if not description:
            log.warning('get_or_create_system_document: No description in kwargs')
            return {'success': False}

        system_document_type_id = kwargs.get('system_document_type_id', None)
        if not system_document_type_id:
            log.warning('get_or_create_system_document: No system_document_type_id in kwargs')
            return {'success': False}

        system_document_exists = DBSession.query(SystemDocument).\
            filter(SystemDocument.name == name).\
            filter(SystemDocument.system_document_type_id == system_document_type_id).\
            filter(SystemDocument.bln_active == True).\
            first()

        if system_document_exists:
            log.warning('get_or_create_system_document: System document already exists returning its id')
            return {'success': True, 'data': system_document_exists.id}

        this = SystemDocument()
        this.name = name
        this.description = description
        this.system_document_type_id = system_document_type_id
        this.added_by = usernow.id
        this.added = datetime.now()
        this.bln_edited = False
        this.bln_active = True
        DBSession.add(this)
        DBSession.flush()
        return {'success': True, 'data': this.id}

    ###############################################################################
    # Product - Edit - Summary
    ###############################################################################

    @expose()
    def get_edit_product_summary(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if product_id:
            product = Product.by_id(product_id)
        else:
            return ''

        if not product:
            return ''

        product_summary = self.product_summary(product_id=product_id, product=product)

        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Product Summary</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id='save_activate' product_id='{product_id}' class="btn btn-outline-primary">Save & Activate</button>
                                <button id='continue_summary' product_id='{product_id}' class="btn btn-primary">Continue</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        {product_summary}
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            $('#save_activate').click(function(){
                var kwargs = 'product_id='+$(this).attr('product_id');
                var formserial = $('#form_product_summary').serialize();
                $('#dialogdiv').load('/product/get_product_activate_modal?', kwargs, function(data){
                    return false;
                });
            });
            $('#continue_summary').click(function(){
                $.redirect('/product/index');
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_product_activate_modal(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        product = Product.by_id(product_id)
        if not product:
            return ''

        html = f"""
        <div class="modal fade" id="dialog_product_activate" tabindex="-1" role="dialog" aria-labelledby="myproduct_activateLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">Activate: {product.name}?</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_product_activate'>
                            <p>By Activating this product you move the product from a Sandbox State to an Active State</p>
                            <p>Do you wish to Activate this product?</p>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-outline-primary product_activate_back">Close</button>
                        <button class="btn btn-outline-primary product_activate_no">No</button>
                        <button class="btn btn-primary product_activate_yes" product_id='{product_id}'>Yes</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            setFormValidation('#form_product_activate');
            $('.product_activate_back').click(function(){
                $('#dialog_product_activate').modal('hide');
            });
            $('.product_activate_no').click(function() {
                $('#dialog_product_activate').modal('hide');
                $.redirect('/product/index');
                    return false;
            });
            $('.product_activate_yes').click(function() {
                var product_id = $(this).attr('product_id');
                var formserial = $('#form_product_activate').serialize();
                formserial += '&product_id='+product_id;
                $.post('/product/set_product_to_active?', formserial, function(data) {
                    $('#dialog_product_activate').modal('hide');
                    $.redirect('/product/index');
                        return false;
                });
            });
            $('#dialog_product_activate').modal();
        </script>
        """
        return html + javascript

    @expose()
    def set_product_to_active(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        product = Product.by_id(product_id)
        if not product:
            return ''

        active_type_id = TYPEUTIL.get_id_of_name('product_state_type', 'active')

        product.product_state_type_id = active_type_id
        DBSession.add(product)
        DBSession.flush()
        return str(product.id)

    @expose()
    def product_summary(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        product = kwargs.get('product', None)
        if not product:
            product = Product.by_id(product_id)
        if not product:
            return ''

        product_premium_frequency_option = ProductPremiumFrequencyOption.by_attr_first('product_id', product_id)
        main_benefit = DBSession.query(Benefit). \
            filter(Benefit.product_id == product_id). \
            filter(Benefit.is_main_benefit == True). \
            one()

        compulsory_benefits = self.get_compulsory_benefits(product_id=product_id)
        non_compulsory_benefits = self.get_non_compulsory_benefits(product_id=product_id)

        # Variables
        product_name = product.name

        product_type = "Not Set"
        if product.product_type_id:
            product_type = TYPEUTIL.get_pretty_name('product_type', product.product_type_id)

        product_code = "Not Set"
        if product.code:
            product_code = product.code

        product_owner = "Not Set"
        if product.entity_organisation_product_owner_id:
            entity_organisation = EntityOrganisation.by_id(product.entity_organisation_product_owner_id)
            if entity_organisation:
                product_owner = entity_organisation.name

        premium_frequency = "Not Set"
        if product_premium_frequency_option:
            premium_frequency = TYPEUTIL.get_pretty_name('frequency_type', product_premium_frequency_option.frequency_type_id)

        main_benefit_name = main_benefit.name
        main_benefit_cover = "Not Set"

        if main_benefit.cover_and_exclusion_id:
            cover_and_exclusion = CoverAndExclusion.by_id(main_benefit.cover_and_exclusion_id)
            if cover_and_exclusion:
                main_benefit_cover = cover_and_exclusion.code

        main_benefit_insured = "Not Set"
        get_main_benefit_insured = self.get_benefit_insured_summary(main_benefit)[0]
        if get_main_benefit_insured:
            main_benefit_insured = get_main_benefit_insured

        main_benefit_premium_type = "Not Set"
        price_type_id = main_benefit.benefit_price_type_id
        if price_type_id:
            main_benefit_premium_type = TYPEUTIL.get_pretty_name('benefit_price_type', price_type_id)

        documents_summary = self.get_documents_summary(product_id=product_id)

        html = f""" <div class="col-md-14">
                        <div class="form-group row">
                            <div class="col-md-5">
                                <b>Name:</b>
                            </div>
                            <div class="col-md-6">
                                {product_name}
                            </div>
                        </div>
                    </div>
                    <div class="col-md-14">
                        <div class="form-group row">
                            <div class="col-md-5">
                                <b>Type:</b>
                            </div>
                            <div class="col-md-6">
                                {product_type}
                            </div>
                        </div>
                    </div>
                    <div class="col-md-14">
                        <div class="form-group row">
                            <div class="col-md-5">
                                <b>Code:</b>
                            </div>
                            <div class="col-md-6">
                                {product_code}
                            </div>
                        </div>
                    </div>
                    <div class="col-md-14">
                        <div class="form-group row">
                            <div class="col-md-5">
                                <b>Owner:</b>
                            </div>
                            <div class="col-md-6">
                                {product_owner}
                            </div>
                        </div>
                    </div>
                    <div class="col-md-14">
                        <div class="form-group row">
                            <div class="col-md-5">
                                <b>Premium Frequency:</b>
                            </div>
                            <div class="col-md-6">
                                {premium_frequency}
                            </div>
                        </div>
                    </div>
                    <div class="col-md-14">
                        <div class="form-group row">
                            <div class="col-md-5">
                                <b>Main Benefit:</b>
                            </div>
                            <!--
                            <div class="col-md-6">
                                Name: {main_benefit_name}; Cover: {main_benefit_cover}; Insured: {main_benefit_insured}; Premium Type: {main_benefit_premium_type}
                            </div>
                            -->
                            <div class="col-md-6">
                                <b>{main_benefit_name}</b> {main_benefit_cover}; {main_benefit_insured}; {main_benefit_premium_type}
                            </div>
                        </div>
                    </div>
                    <div class="col-md-14">
                        <div class="form-group row">
                            <div class="col-md-5">
                                <b>Compulsory Benefits:</b>
                            </div>
                            <div class="col-md-6">
                                {compulsory_benefits}
                            </div>
                        </div>
                    </div>
                    <div class="col-md-14">
                        <div class="form-group row">
                            <div class="col-md-5">
                                <b>Non Compulsory Benefits:</b>
                            </div>
                            <div class="col-md-6">
                                {non_compulsory_benefits}
                            </div>
                        </div>
                    </div>
                    <div class="col-md-14">
                        <div class="form-group row">
                            <div class="col-md-5">
                                <b>Documents:</b>
                            </div>
                            <div class="col-md-6">
                                {documents_summary}
                            </div>
                        </div>
                    </div>
                """
        return html

    def get_compulsory_benefits(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        compulsory_benefits = DBSession.query(Benefit). \
            filter(Benefit.product_id == product_id). \
            filter(Benefit.is_main_benefit == False). \
            filter(Benefit.is_compulsory == True). \
            all()

        compulsory_benefits_divs = ""
        for i in compulsory_benefits:

            name = i.name

            cover = 'Not Set'
            if i.cover_and_exclusion_id:
                cover_and_exclusion = CoverAndExclusion.by_id(i.cover_and_exclusion_id)
                if not cover_and_exclusion:
                    continue
                cover = cover_and_exclusion.code

            benefit_insured = "Not Set"
            get_benefit_insured = self.get_benefit_insured_summary(i)[0]
            if get_benefit_insured:
                benefit_insured = get_benefit_insured

            price_type_id = i.benefit_price_type_id
            benefit_premium_type = "Not Set"
            if price_type_id:
                benefit_premium_type = TYPEUTIL.get_pretty_name('benefit_price_type', price_type_id)

            compulsory_benefits_divs += f"""<div><b>{name}</b>; {cover}; {benefit_insured}; {benefit_premium_type}</div>"""
        return compulsory_benefits_divs

    def get_non_compulsory_benefits(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        non_compulsory_benefits = DBSession.query(Benefit). \
            filter(Benefit.product_id == product_id). \
            filter(Benefit.is_compulsory == False). \
            all()

        non_compulsory_benefits_divs = ""
        for i in non_compulsory_benefits:

            name = i.name

            cover = 'Not Set'
            if i.cover_and_exclusion_id:
                cover_and_exclusion = CoverAndExclusion.by_id(i.cover_and_exclusion_id)
                if not cover_and_exclusion:
                    continue
                cover = cover_and_exclusion.code

            benefit_insured = "Not Set"
            get_benefit_insured = self.get_benefit_insured_summary(i)[0]
            if get_benefit_insured:
                benefit_insured = get_benefit_insured

            price_type_id = i.benefit_price_type_id
            benefit_premium_type = "Not Set"
            if price_type_id:
                benefit_premium_type = TYPEUTIL.get_pretty_name('benefit_price_type', price_type_id)

            non_compulsory_benefits_divs += f"""<div><b>{name}</b>; {cover}; {benefit_insured}; {benefit_premium_type}</div>"""
        return non_compulsory_benefits_divs

    def get_documents_summary(self, *args, **kwargs):
        product_id = kwargs.get('product_id', None)
        if not product_id:
            return ''

        dbase_query = ProductSystemDocumentLink.by_attr_all('product_id', product_id)
        if not dbase_query:
            return 'Not Set'

        html = ''
        for i in dbase_query:
            doc = SystemDocument.by_id(i.system_document_id)
            if not doc:
                continue
            name = doc.name
            file_name = remove_hash_from_filename(i.file_path)
            html += f""" <div>{name}; File Name: {file_name}</div>"""
        return html

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def excess(self, *args, **kwargs):
        html = self.get_active_excess_html(*args, **kwargs)
        javascript = self.get_javascript_excess_onload()
        title = "Excess"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_excess_html(self, *args, **kwargs):
        dbase_query = Excess.get_all('id')

        """
        # REMOVE
        if not dbase_query:
            for i in range(1, 3):
                new = Excess()
                new.amount = i * 1000
                DBSession.add(new)
                DBSession.flush()
            dbase_query = Excess.get_all('id')
        """

        outputlist = []
        for item in dbase_query:
            amount = get_currency_by_locale(item.amount, cents=False)
            outputlist.append({
                'amount' : f"<div class='edit action_link excess_edit' excess_id='{item.id}'>{amount}</div>",
                             })
        dbcolumnlist=[
                'amount',
                    ]
        theadlist=[
                'Amount',
                ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "excess_table")
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Excess</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_excess" class="btn btn-primary ml-auto">Create New Excess</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input type="text" class="form-control search" name="searchphrase" placeholder="Search">
                        </div>
                        <div class="col-md-8">
                            <button class="btn btn-primary action_search">Search</button>
                            <button class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {htmltbl}
                    </div>
                </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_javascript_excess_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_excess").click(function(){
            $('#dialogdiv').load('/product/get_modal_excess?', function(data){
                return false;
            });
        });
        $(".excess_edit").click(function(){
            var kwargs = 'excess_id='+$(this).attr('excess_id');
            $('#dialogdiv').load('/product/get_modal_excess?', kwargs, function(data){
                return false;
            });
        });
        """
        return javascript

    @expose()
    def get_modal_excess(self, *args, **kwargs):
        excess_id = kwargs.get('excess_id', None)
        excess = None
        hidden_input = ''
        if excess_id:
            excess = Excess.by_id(excess_id)
            hidden_input = get_hidden_input(**{'id': 'excess_id', 'value': excess_id})
        amount = round(excess.amount, 2) if excess else ''
        html = f"""
        <div class="modal fade" id="dialog_excess" tabindex="-1" role="dialog" aria-labelledby="myexcessLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">New Excess</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_excess'>
                        {hidden_input}
                                <div class="col-md-6">
					<div class="form-group row">
						<label class="col-md-3 col-form-label" required for="amount">Amount</label>
						<div class="col-md-9">
							<input id="amount" value="{amount}" type="text" name="amount" class="form-control" required='true'>
						</div>
					</div>
				</div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_excess' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary excess_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        var form_id = '#form_excess'
        setFormValidation(form_id);
        $('#save_excess').click(function(){
             var valid = FormIsValid(form_id);
             if(valid){
                var formserial = $(form_id).serialize();
                $.post('/product/save_excess?', formserial, function(data){
                    $.redirect('/product/excess');
                    return false;
                });
             }
        });
        $('.excess_back').click(function(){
            $('#dialog_excess').modal('hide');
        });
        $('#dialog_excess').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_excess(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        excess_id = kwargs.get('excess_id', None)
        if not excess_id:
            this = Excess()
            this.amount = kwargs.get('amount', None)
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
        else:
            this = Excess.by_id(excess_id)
            if not this: return 'false'
            this.amount = kwargs.get('amount', None)
            DBSession.flush()
        return str(this.id)

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def premium_rates(self, *args, **kwargs):
        html = self.get_active_rate_table_html(*args, **kwargs)
        javascript = self.get_javascript_rate_table_onload()
        title = "Rate Tables"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_rate_table_html(self, *args, **kwargs):
        dbase_query = RateTable.get_all('id')

        """
        # REMOVE
        if not dbase_query:
            dbase_query = BenefitAssetType.get_all('id')
            for asset in dbase_query:
                new = RateTable()
                new.code = f'{asset.name[0].upper()}R'
                new.name = f'Default {asset.name.title()} Rate'
                new.is_life = False
                new.base_value = 1000
                new.benefit_asset_type_id = asset.id
                DBSession.add(new)
                DBSession.flush()
            new = RateTable()
            new.code = 'LR'
            new.name = 'Default Life Rate'
            new.is_life = True
            new.base_value = 1000
            DBSession.add(new)
            DBSession.flush()
            dbase_query = RateTable.get_all('id')
        """

        outputlist = []
        for item in dbase_query:

            is_life = IMG_INACTIVE
            if item.is_life:
                is_life = IMG_ACTIVE

            asset_type = 'Life'
            if item.benefit_asset_type_id:
                asset = BenefitAssetType.by_id(item.benefit_asset_type_id)
                asset_type = asset.name.title()

            outputlist.append({
                'code' : f"<div class='edit action_link rate_table_edit' rate_table_id='{item.id}'>{item.code}</div>",
                'name' : item.name,
                #'is_life' : is_life,
                'base_value' : get_currency_by_locale(item.base_value, cents=False),
                'benefit_asset_type_id' : asset_type,
                'open': f"<div class='open_rate_table action_link' rate_table_id='{item.id}'>open</div>",
                             })
        dbcolumnlist=[
                'code',
                'name',
                #'is_life',
                'base_value',
                'benefit_asset_type_id',
                'open',
                    ]
        theadlist=[
                'Code',
                'Name',
                #'Life',
                'Base Value',
                'Asset Type',
                '',
                ]
        tdclasslist = [
                '',
                '',
                #'text-center',
                'text-right',
                'text-right',
                'text-right',
        ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "rate_table_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Rate Tables</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_rate_table" class="btn btn-primary ml-auto">Create New Rate Tables</button>
                            </div>
                        </div>
                        <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                <input type="text" class="form-control search" name="searchphrase" placeholder="Search">
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary action_search">Search</button>
                                <button class="btn btn-primary">Reset</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            {htmltbl}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_javascript_rate_table_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_rate_table").click(function(){
            $('#dialogdiv').load('/product/get_modal_rate_table?', function(data){
                return false;
            });
        });
        $(".rate_table_edit").click(function(){
            var kwargs = 'rate_table_id='+$(this).attr('rate_table_id');
            $('#dialogdiv').load('/product/get_modal_rate_table?', kwargs, function(data){
                return false;
            });
        });
        $(".open_rate_table").click(function(){
            var kwargs = {'rate_table_id' :$(this).attr('rate_table_id')};
            $.redirect('/product/get_rate_table_items', kwargs);
        });
        //$('.open_rate_table:eq(4)').trigger('click');
        """
        return javascript

    @expose()
    def get_modal_rate_table(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate_table = None
        hidden_input = ''
        code = name = is_life = base_value = benefit_asset_type_id = ''
        if rate_table_id:
            rate_table = RateTable.by_id(rate_table_id)
            hidden_input = get_hidden_input(**{'id': 'rate_table_id', 'value': rate_table_id})

            if rate_table:
                code = rate_table.code
                name = rate_table.name
                base_value = rate_table.base_value
                benefit_asset_type_id = rate_table.benefit_asset_type_id
                if rate_table.is_life:
                    is_life = 'checked'

        kwargs['selected'] = benefit_asset_type_id
        selectbox_benefit_asset_type = self.get_selectbox_benefit_asset_type(**kwargs)
        html = f"""
        <div class="modal fade" id="dialog_rate_table" tabindex="-1" role="dialog" aria-labelledby="myrate_tableLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">New Rate Table</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_rate_table'>
                            {hidden_input}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="code">Code</label>
                                    <div class="col-md-9">
                                        <input id="code" value="{code}" type="text" name="code" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="name">Name</label>
                                    <div class="col-md-9">
                                        <input id="name" value="{name}" type="text" name="name" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="is_life">Life</label>
                                    <div class="col-md-9">
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="checkbox" name="is_life" id="is_life" {is_life}/>
                                                <span class="form-check-sign"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="base_value">Base Value</label>
                                    <div class="col-md-9">
                                        <input id="base_value" value="{base_value}" type="text" name="base_value" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12" id='div_benefit_asset_type'>
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="benefit_asset_type_id">Asset Type</label>
                                    <div class="col-md-9">
                                        {selectbox_benefit_asset_type}
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_rate_table' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary rate_table_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        """
        javascript = """
        <script nonce='1234'>
            $('#is_life').change(function(){
                if(this.checked){
                    $('#div_benefit_asset_type').hide();
                }else{
                    $('#div_benefit_asset_type').show();
                };
            });
            $('#is_life').trigger('change');
            var form_id = '#form_rate_table'
            setFormValidation(form_id);
            $('#save_rate_table').click(function(){
                 var valid = FormIsValid(form_id);
                 if(valid){
                    var formserial = $(form_id).serialize();
                    $.post('/product/save_rate_table?', formserial, function(data){
                        $.redirect('/product/premium_rates');
                        return false;
                    });
                 }
            });
            $('.rate_table_back').click(function(){
                $('#dialog_rate_table').modal('hide');
            });
            $('#dialog_rate_table').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_rate_table(self, *args, **kwargs):
        usernow = request.identity.get('user', None)

        is_life = kwargs.get('is_life', None)
        is_life = True if is_life else False

        rate_table_id = kwargs.get('rate_table_id', None)
        if not rate_table_id:
            this = RateTable()
            this.code = kwargs.get('code', None)
            this.name = kwargs.get('name', None)
            this.is_life = is_life
            this.base_value = kwargs.get('base_value', None)
            this.benefit_asset_type_id = kwargs.get('benefit_asset_type_id', None)
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
        else:
            this = RateTable.by_id(rate_table_id)
            if not this: return 'false'
            this.code = kwargs.get('code', None)
            this.name = kwargs.get('name', None)
            this.is_life = is_life
            this.base_value = kwargs.get('base_value', None)
            this.benefit_asset_type_id = kwargs.get('benefit_asset_type_id', None)
            DBSession.flush()
        return str(this.id)

    def get_selectbox_benefit_asset_type(self, *args, **kwargs):
        kwargs['id'] = 'benefit_asset_type_id'
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("benefit_asset_type")
        return create_selectbox_html(**kwargs)

    def get_selectbox_benefit_insured_type(self, *args, **kwargs):
        kwargs['id'] = 'benefit_insured_type_id'
        kwargs['required'] = True
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("benefit_insured_type")
        return create_selectbox_html(**kwargs)

    def get_selectbox_excess(self, *args, **kwargs):
        kwargs['id'] = 'excess_id'
        dbase_query = Excess.get_all('id')
        kwargs['outputlist'] = [{'id': i.id, 'name': get_currency_by_locale(i.amount, cents=False)} for i in dbase_query]
        return create_selectbox_html(**kwargs)

    def get_selectbox_vehicle_category(self, *args, **kwargs):
        kwargs['id'] = 'asset_vehicle_category_id'
        dbase_query = AssetVehicleCategory.get_all('id')
        kwargs['outputlist'] = [{'id': i.id, 'name': i.name} for i in dbase_query]
        return create_selectbox_html(**kwargs)

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def get_rate_table_items(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        if not rate_table_id:
            redirect('/product/premium_rates')

        rate = RateTable.by_id(rate_table_id)
        if not rate:
            redirect('/product/premium_rates')

        html = javascript = title = ''

        if rate.is_life:
            html = self.get_active_rate_table_line_item_life_html(*args, **kwargs)
            javascript = self.get_javascript_rate_table_line_item_life_onload()

        else:
            if rate.benefit_asset_type_id == PROPERTY:
                html = self.get_active_rate_table_line_item_turnover_html(*args, **kwargs)
                javascript = self.get_javascript_rate_table_line_item_turnover_onload()

            if rate.benefit_asset_type_id == BUSINESS:
                html = self.get_active_rate_table_line_item_turnover_html(*args, **kwargs)
                javascript = self.get_javascript_rate_table_line_item_turnover_onload()

            if rate.benefit_asset_type_id == VEHICLE:
                html = self.get_active_rate_table_line_item_vehicle_html(*args, **kwargs)
                javascript = self.get_javascript_rate_table_line_item_vehicle_onload()

            if rate.benefit_asset_type_id == LANDLORD:
                html = self.get_active_rate_table_line_item_landlord_html(*args, **kwargs)
                javascript = self.get_javascript_rate_table_line_item_landlord_onload()

            if rate.benefit_asset_type_id == EMPLOYEE:
                html = self.get_active_rate_table_line_item_employee_html(*args, **kwargs)
                javascript = self.get_javascript_rate_table_line_item_employee_onload()

        title = f"{rate.name} Items"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_rate_table_line_item_life_html(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate = RateTable.by_id(rate_table_id)
        if not rate:
            return ''

        dbase_query = RateTableLineItemLife.by_attr_all('rate_table_id', rate_table_id)

        """
        # REMOVE
        if not dbase_query:
            excesses = Excess.get_all('id')
            if not excesses:
                for i in range(1, 3):
                    new = Excess()
                    new.amount = i * 1000
                    DBSession.add(new)
                    DBSession.flush()
                excesses = Excess.get_all('id')
            outputlist = [
                (0, 20, 0.5),
                (31, 50, 1),
            ]
            for e in excesses:
                for mini, maxi, rate_factor in outputlist:
                    new = RateTableLineItemLife()
                    new.rate_table_id = rate_table_id
                    new.maximum_age = maxi
                    new.minimum_age = mini
                    new.rate_factor = rate_factor
                    new.excess_id = e.id
                    DBSession.add(new)
                    DBSession.flush()
            dbase_query = RateTableLineItemLife.by_attr_all('rate_table_id', rate_table_id)
        """

        outputlist = []
        for item in dbase_query:
            gender = 'Not Set'
            if item.gender_type_id:
                gender = TYPEUTIL.get_pretty_name('entity_person_gender_type', item.gender_type_id)

            outputlist.append({
                #'rate_table_id' : "<div class='edit rate_table_line_item_life_edit' rate_table_line_item_life_id='{1}'>{0}</div>".format(item.rate_table_id, item.id),
                'gender_type_id' : f"<div class='edit action_link rate_table_line_item_life_edit' rate_table_line_item_life_id='{item.id}' rate_table_id='{rate_table_id}'>{gender}</div>",
                'minimum_age' : item.minimum_age,
                'maximum_age' : item.maximum_age,
                'rate_factor' : item.rate_factor,
                'excess_id' : self.get_excess_by_id(item),
             })
        dbcolumnlist=[
                #'rate_table_id',
                'gender_type_id',
                'minimum_age',
                'maximum_age',
                'rate_factor',
                'excess_id',
                    ]
        theadlist=[
                #'Rate Table',
                'Gender',
                'Minimum Age',
                'Maximum Age',
                'Rate Factor',
                'Excess',
                ]
        tdclasslist = [
                #'',
                '',
                '',
                '',
                'text-center',
                'text-right',
        ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "rate_table_line_item_life_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{rate.name} Items</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button class="btn btn-primary ml-auto" id="btn_back">Back to Rate Tables</button>
                            <button rate_table_id='{rate_table_id}' id="create_new_rate_table_line_item_life" class="btn btn-primary ml-auto">Create New Item</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input type="text" class="form-control search" name="searchphrase" placeholder="Search">
                        </div>
                        <div class="col-md-8">
                            <button class="btn btn-primary action_search">Search</button>
                            <button class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {htmltbl}
                    </div>
                </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_javascript_rate_table_line_item_life_onload(self, *args, **kwargs):
        javascript = """
        $('#btn_back').click(function(){
            $.redirect('/product/premium_rates');
        });
        $("#create_new_rate_table_line_item_life").click(function(){
            var kwargs = 'rate_table_id=' + $(this).attr('rate_table_id');
            $('#dialogdiv').load('/product/get_modal_rate_table_line_item_life?', kwargs, function(data){
                return false;
            });
        });
        $(".rate_table_line_item_life_edit").click(function(){
            var kwargs = 'rate_table_line_item_life_id='+$(this).attr('rate_table_line_item_life_id');
            kwargs += '&rate_table_id=' + $(this).attr('rate_table_id');
            $('#dialogdiv').load('/product/get_modal_rate_table_line_item_life?', kwargs, function(data){
                return false;
            });
        });
        """
        return javascript

    @expose()
    def get_modal_rate_table_line_item_life(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate = RateTable.by_id(rate_table_id)
        rate_table_line_item_life_id = kwargs.get('rate_table_line_item_life_id', None)
        rate_table_line_item_life = None
        hidden_input = ''
        if rate_table_line_item_life_id:
            rate_table_line_item_life = RateTableLineItemLife.by_id(rate_table_line_item_life_id)
            hidden_input = get_hidden_input(**{'id': 'rate_table_line_item_life_id', 'value': rate_table_line_item_life_id})
        gender_type_id = rate_table_line_item_life.gender_type_id if rate_table_line_item_life else ''
        maximum_age = rate_table_line_item_life.maximum_age if rate_table_line_item_life else ''
        minimum_age = rate_table_line_item_life.minimum_age if rate_table_line_item_life else ''
        rate_factor = rate_table_line_item_life.rate_factor if rate_table_line_item_life else ''
        excess_id = rate_table_line_item_life.excess_id if rate_table_line_item_life else ''
        checkbox_active = COMMON.get_checkbox_active_boolean(rate_table_line_item_life.bln_active) if rate_table_line_item_life else ''
        hidden_input_rate_table_id = get_hidden_input(**{'id': 'rate_table_id', 'value': rate_table_id})
        selectbox_gender = COMMON.get_selectbox_gender_type(**{'selected': gender_type_id})
        selectbox_excess = self.get_selectbox_excess(**{'selected': excess_id})
        html = f"""
        <div class="modal fade" id="dialog_rate_table_line_item_life" tabindex="-1" role="dialog" aria-labelledby="myrate_table_line_item_lifeLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">{rate.name} Items</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_rate_table_line_item_life'>
                            {hidden_input}
                            {hidden_input_rate_table_id}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="gender_type_id">Gender</label>
                                    <div class="col-md-9">
                                        {selectbox_gender}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="minimum_age">Minimum Age</label>
                                    <div class="col-md-9">
                                        <input id="minimum_age" value="{minimum_age}" type="number" name="minimum_age" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="maximum_age">Maximum Age</label>
                                    <div class="col-md-9">
                                        <input id="maximum_age" value="{maximum_age}" type="number" name="maximum_age" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="rate_factor">Rate Factor</label>
                                    <div class="col-md-9">
                                        <input id="rate_factor" value="{rate_factor}" type="number" name="rate_factor" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="excess_id">Excess</label>
                                    <div class="col-md-9">
                                        {selectbox_excess}
                                    </div>
                                </div>
                            </div>
                            {checkbox_active}
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_rate_table_line_item_life' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary rate_table_line_item_life_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        var form_id = '#form_rate_table_line_item_life'
        setFormValidation(form_id);
        $('#save_rate_table_line_item_life').click(function(){
             var valid = FormIsValid(form_id);
             if(valid){
                var formserial = $(form_id).serialize();
                $.post('/product/save_rate_table_line_item_life?', formserial, function(data){
                    var kwargs = {'rate_table_id' : data};
                    $.redirect('/product/get_rate_table_items', kwargs);
                    return false;
                });
             }
        });
        $('.rate_table_line_item_life_back').click(function(){
            $('#dialog_rate_table_line_item_life').modal('hide');
        });
        $('#dialog_rate_table_line_item_life').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_rate_table_line_item_life(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        rate_table_id = kwargs.get('rate_table_id', None)
        rate_table_line_item_life_id = kwargs.get('rate_table_line_item_life_id', None)
        if not rate_table_line_item_life_id:
            this = RateTableLineItemLife()
            this.rate_table_id = kwargs.get('rate_table_id', None)
            this.gender_type_id = kwargs.get('entity_person_gender_type_id', None)
            this.maximum_age = kwargs.get('maximum_age', None)
            this.minimum_age = kwargs.get('minimum_age', None)
            this.rate_factor = kwargs.get('rate_factor', None)
            this.excess_id = kwargs.get('excess_id', None)
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
        else:
            this = RateTableLineItemLife.by_id(rate_table_line_item_life_id)
            if not this: return 'false'
            this.rate_table_id = kwargs.get('rate_table_id', None)
            this.gender_type_id = kwargs.get('entity_person_gender_type_id', None)
            this.maximum_age = kwargs.get('maximum_age', None)
            this.minimum_age = kwargs.get('minimum_age', None)
            this.rate_factor = kwargs.get('rate_factor', None)
            this.excess_id = kwargs.get('excess_id', None)

            active = kwargs.get('active', False)
            if active:
                active = True
            this.bln_active = active

            DBSession.flush()
        return str(rate_table_id)

    @expose()
    def get_active_rate_table_line_item_turnover_html(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate = RateTable.by_id(rate_table_id)
        if not rate:
            return ''

        dbase_query = RateTableLineItemTurnover.by_attr_all('rate_table_id', rate_table_id)

        """
        # REMOVE
        if not dbase_query:
            excesslist = Excess.get_all('id')
            if not excesslist:
                for i in range(1, 3):
                    ex = Excess()
                    ex.amount = i * 1000
                    DBSession.add(ex)
                    DBSession.flush()
                excesslist = Excess.get_all('id')
            for i in excesslist:
                new = RateTableLineItemTurnover()
                new.rate_table_id = rate_table_id
                new.minimum_turnover = 0
                new.maximum_turnover = 100000
                new.minimum_premium = 1.23
                new.maximum_premium = 999
                new.amount = 100
                new.excess_id = i.id
                DBSession.add(new)
                DBSession.flush()
            dbase_query = RateTableLineItemTurnover.by_attr_all('rate_table_id', rate_table_id)
        """

        outputlist = []
        for item in dbase_query:
            minimum_turnover = get_currency_by_locale(item.minimum_turnover, cents=False)
            outputlist.append({
                'minimum_turnover' : f"""<div class='edit action_link rate_table_line_item_turnover_edit'
                                              rate_table_line_item_turnover_id='{item.id}'
                                              rate_table_id='{rate_table_id}'>{minimum_turnover}</div>""",
                'maximum_turnover' : get_currency_by_locale(item.maximum_turnover, cents=False),
                'minimum_premium' : get_currency_by_locale(item.minimum_premium, cents=False),
                'maximum_premium' : get_currency_by_locale(item.maximum_premium, cents=False),
                'amount' : get_currency_by_locale(item.amount, cents=False),
                'excess_id' : self.get_excess_by_id(item),
                             })
        dbcolumnlist=[
                'minimum_turnover',
                'maximum_turnover',
                'minimum_premium',
                'maximum_premium',
                'amount',
                'excess_id',
                    ]
        theadlist=[
                'Minimum Turnover',
                'Maximum Turnover',
                'Minimum Premium',
                'Maximum Premium',
                'Amount',
                'Excess',
                ]
        tdclasslist = [
            '',
            'text-right',
            'text-right',
            'text-right',
            'text-right',
            'text-right',
        ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "rate_table_line_item_turnover_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{rate.name} Items</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button class="btn btn-primary ml-auto" id="btn_back">Back to Rate Tables</button>
                            <button id="create_new_rate_table_line_item_turnover" rate_table_id='{rate_table_id}' class="btn btn-primary ml-auto">Create New Item</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input type="text" class="form-control search" name="searchphrase" placeholder="Search">
                        </div>
                        <div class="col-md-8">
                            <button class="btn btn-primary action_search">Search</button>
                            <button class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {htmltbl}
                    </div>
                </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_javascript_rate_table_line_item_turnover_onload(self, *args, **kwargs):
        javascript = """
        $('#btn_back').click(function(){
            $.redirect('/product/premium_rates');
        });
        $("#create_new_rate_table_line_item_turnover").click(function(){
            var kwargs = 'rate_table_id=' + $(this).attr('rate_table_id');
            $('#dialogdiv').load('/product/get_modal_rate_table_line_item_turnover?', kwargs, function(data){
                return false;
            });
        });
        $(".rate_table_line_item_turnover_edit").click(function(){
            var kwargs = 'rate_table_line_item_turnover_id='+$(this).attr('rate_table_line_item_turnover_id');
            kwargs += '&rate_table_id=' + $(this).attr('rate_table_id');
            $('#dialogdiv').load('/product/get_modal_rate_table_line_item_turnover?', kwargs, function(data){
                return false;
            });
        });
        """
        return javascript

    @expose()
    def get_modal_rate_table_line_item_turnover(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate = RateTable.by_id(rate_table_id)
        rate_table_line_item_turnover_id = kwargs.get('rate_table_line_item_turnover_id', None)
        rate_table_line_item_turnover = None
        hidden_input = ''
        if rate_table_line_item_turnover_id:
            rate_table_line_item_turnover = RateTableLineItemTurnover.by_id(rate_table_line_item_turnover_id)
            hidden_input = get_hidden_input(**{'id': 'rate_table_line_item_turnover_id', 'value': rate_table_line_item_turnover_id})
        hidden_input2 = get_hidden_input(**{'id': 'rate_table_id', 'value': rate_table_id})
        minimum_turnover = round(rate_table_line_item_turnover.minimum_turnover, 2) if rate_table_line_item_turnover else ''
        maximum_turnover = round(rate_table_line_item_turnover.maximum_turnover, 2) if rate_table_line_item_turnover else ''
        minimum_premium = round(rate_table_line_item_turnover.minimum_premium, 2) if rate_table_line_item_turnover else ''
        maximum_premium = round(rate_table_line_item_turnover.maximum_premium, 2) if rate_table_line_item_turnover else ''
        amount = round(rate_table_line_item_turnover.amount, 2) if rate_table_line_item_turnover else ''
        checkbox_active = COMMON.get_checkbox_active_boolean(rate_table_line_item_turnover.bln_active) if rate_table_line_item_turnover else ''
        excess_id = rate_table_line_item_turnover.excess_id if rate_table_line_item_turnover else ''
        selectbox_excess = self.get_selectbox_excess(**{'selected': excess_id})
        html = f"""
        <div class="modal fade" id="dialog_rate_table_line_item_turnover" tabindex="-1" role="dialog" aria-labelledby="myrate_table_line_item_turnoverLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">{rate.name} Items</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_rate_table_line_item_turnover'>
                            {hidden_input}
                            {hidden_input2}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="minimum_turnover">Minimum Turnover</label>
                                    <div class="col-md-9">
                                        <input id="minimum_turnover" value="{minimum_turnover}" type="number" step="0.01" name="minimum_turnover" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="maximum_turnover">Maximum Turnover</label>
                                    <div class="col-md-9">
                                        <input id="maximum_turnover" value="{maximum_turnover}" type="number" step="0.01" name="maximum_turnover" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="minimum_premium">Minimum Premium</label>
                                    <div class="col-md-9">
                                        <input id="minimum_premium" value="{minimum_premium}" type="number" step="0.01" name="minimum_premium" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="maximum_premium">Maximum Premium</label>
                                    <div class="col-md-9">
                                        <input id="maximum_premium" value="{maximum_premium}" type="number" step="0.01" name="maximum_premium" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" for="amount">Amount</label>
                                    <div class="col-md-9">
                                        <input id="amount" value="{amount}" type="number" step="0.01" name="amount" class="form-control">
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="excess_id">Excess</label>
                                    <div class="col-md-9">
                                        {selectbox_excess}
                                    </div>
                                </div>
                            </div>
                            {checkbox_active}
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_rate_table_line_item_turnover' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary rate_table_line_item_turnover_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        var form_id = '#form_rate_table_line_item_turnover'
        setFormValidation(form_id);
        $('#save_rate_table_line_item_turnover').click(function(){
             var valid = FormIsValid(form_id);
             if(valid){
                var formserial = $(form_id).serialize();
                $.post('/product/save_rate_table_line_item_turnover?', formserial, function(data){
                    var kwargs = {'rate_table_id' : data}
                    $.redirect('/product/get_rate_table_items', kwargs);
                    return false;
                });
             }
        });
        $('.rate_table_line_item_turnover_back').click(function(){
            $('#dialog_rate_table_line_item_turnover').modal('hide');
        });
        $('#dialog_rate_table_line_item_turnover').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_rate_table_line_item_turnover(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        rate_table_id = kwargs.get('rate_table_id', None)
        rate_table_line_item_turnover_id = kwargs.get('rate_table_line_item_turnover_id', None)
        if not rate_table_line_item_turnover_id:
            this = RateTableLineItemTurnover()
            this.rate_table_id = kwargs.get('rate_table_id', None)
            this.minimum_turnover = kwargs.get('minimum_turnover', None)
            this.maximum_turnover = kwargs.get('maximum_turnover', None)
            this.minimum_premium = kwargs.get('minimum_premium', None)
            this.maximum_premium = kwargs.get('maximum_premium', None)
            this.amount = kwargs.get('amount', 0)
            this.excess_id = kwargs.get('excess_id', None)
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
        else:
            this = RateTableLineItemTurnover.by_id(rate_table_line_item_turnover_id)
            if not this: return 'false'
            this.rate_table_id = kwargs.get('rate_table_id', None)
            this.minimum_turnover = kwargs.get('minimum_turnover', None)
            this.maximum_turnover = kwargs.get('maximum_turnover', None)
            this.minimum_premium = kwargs.get('minimum_premium', None)
            this.maximum_premium = kwargs.get('maximum_premium', None)
            this.amount = kwargs.get('amount', 0)
            this.excess_id = kwargs.get('excess_id', None)

            active = kwargs.get('active', False)
            if active:
                active = True
            this.bln_active = active

            DBSession.flush()
        return str(rate_table_id)

    @expose()
    def get_active_rate_table_line_item_vehicle_html(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate = RateTable.by_id(rate_table_id)

        dbase_query = RateTableLineItemVehicle.by_attr_all('rate_table_id', rate_table_id)

        """
        # REMOVE
        if not dbase_query:
            excesslist = Excess.get_all('id')
            if not excesslist:
                for i in range(1, 3):
                    ex = Excess()
                    ex.amount = i * 1000
                    DBSession.add(ex)
                    DBSession.flush()
                excesslist = Excess.get_all('id')
            vehiclelist = AssetVehicleCategory.get_all('id')
            for v in vehiclelist:
                new = RateTableLineItemVehicle()
                new.rate_table_id = rate_table_id
                new.asset_vehicle_category_id = v.id
                new.description = f'Rate for {v.name}'
                new.insured_amount = 1
                new.uninsured_amount = 1.23
                new.third_party_amount = 3.23
                new.excess_id = 1
                DBSession.add(new)
                DBSession.flush()
            dbase_query = RateTableLineItemVehicle.by_attr_all('rate_table_id', rate_table_id)
        """

        outputlist = []
        for item in dbase_query:

            category = AssetVehicleCategory.by_id(item.asset_vehicle_category_id)

            outputlist.append({
                'asset_vehicle_category_id' : f"""<div class='edit action_link rate_table_line_item_vehicle_edit'
                                                       rate_table_id='{rate_table_id}' rate_table_line_item_vehicle_id='{item.id}'>
                                                       {category.name}</div>""",
                'description' : item.description,
                'insured_amount' : get_currency_by_locale(item.insured_amount, cents=False),
                'uninsured_amount' : get_currency_by_locale(item.uninsured_amount, cents=False),
                'third_party_amount' : get_currency_by_locale(item.third_party_amount, cents=False),
                'excess_id' : self.get_excess_by_id(item),
                             })
        dbcolumnlist=[
                'asset_vehicle_category_id',
                'description',
                'insured_amount',
                'uninsured_amount',
                'third_party_amount',
                'excess_id',
                    ]
        theadlist=[
                'Vehicle Category',
                'Description',
                'Insured Amount',
                'Uninsured Amount',
                'Third Party Amount',
                'Excess',
                ]
        tdclasslist = [
                '',
                '',
                'text-right',
                'text-right',
                'text-right',
                'text-right',
        ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "rate_table_line_item_vehicle_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{rate.name} Items</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button class="btn btn-primary ml-auto" id="btn_back">Back to Rate Tables</button>
                            <button id="create_new_rate_table_line_item_vehicle" rate_table_id='{rate_table_id}' class="btn btn-primary ml-auto">Create New Item</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input type="text" class="form-control search" name="searchphrase" placeholder="Search">
                        </div>
                        <div class="col-md-8">
                            <button class="btn btn-primary action_search">Search</button>
                            <button class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {htmltbl}
                    </div>
                </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_javascript_rate_table_line_item_vehicle_onload(self, *args, **kwargs):
        javascript = """
        $('#btn_back').click(function(){
            $.redirect('/product/premium_rates');
        });
        $("#create_new_rate_table_line_item_vehicle").click(function(){
            var kwargs = 'rate_table_id=' + $(this).attr('rate_table_id');
            $('#dialogdiv').load('/product/get_modal_rate_table_line_item_vehicle?', kwargs, function(data){
                return false;
            });
        });
        $(".rate_table_line_item_vehicle_edit").click(function(){
            var kwargs = 'rate_table_line_item_vehicle_id='+$(this).attr('rate_table_line_item_vehicle_id');
            kwargs += '&rate_table_id=' + $(this).attr('rate_table_id');
            $('#dialogdiv').load('/product/get_modal_rate_table_line_item_vehicle?', kwargs, function(data){
                return false;
            });
        });
        """
        return javascript

    @expose()
    def get_modal_rate_table_line_item_vehicle(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate = RateTable.by_id(rate_table_id)
        rate_table_line_item_vehicle_id = kwargs.get('rate_table_line_item_vehicle_id', None)
        rate_table_line_item_vehicle = None
        hidden_input = ''
        if rate_table_line_item_vehicle_id:
            rate_table_line_item_vehicle = RateTableLineItemVehicle.by_id(rate_table_line_item_vehicle_id)
            hidden_input = get_hidden_input(**{'id': 'rate_table_line_item_vehicle_id', 'value': rate_table_line_item_vehicle_id})
        hidden_input2 = get_hidden_input(**{'id': 'rate_table_id', 'value': rate_table_id})
        asset_vehicle_category_id = rate_table_line_item_vehicle.asset_vehicle_category_id if rate_table_line_item_vehicle else ''
        description = rate_table_line_item_vehicle.description if rate_table_line_item_vehicle else ''
        insured_amount = round(rate_table_line_item_vehicle.insured_amount, 2) if rate_table_line_item_vehicle else ''
        uninsured_amount = round(rate_table_line_item_vehicle.uninsured_amount, 2) if rate_table_line_item_vehicle else ''
        third_party_amount = round(rate_table_line_item_vehicle.third_party_amount, 2) if rate_table_line_item_vehicle else ''
        checkbox_active = COMMON.get_checkbox_active_boolean(rate_table_line_item_vehicle.bln_active) if rate_table_line_item_vehicle else ''
        excess_id = rate_table_line_item_vehicle.excess_id if rate_table_line_item_vehicle else ''
        selectbox_excess = self.get_selectbox_excess(**{'selected': excess_id})
        selectbox_vehicle_category = self.get_selectbox_vehicle_category(**{'selected' : asset_vehicle_category_id})
        html = f"""
        <div class="modal fade" id="dialog_rate_table_line_item_vehicle" tabindex="-1" role="dialog" aria-labelledby="myrate_table_line_item_vehicleLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">{rate.name} Items</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_rate_table_line_item_vehicle'>
                            {hidden_input}
                            {hidden_input2}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="asset_vehicle_category_id">Vehicle Category</label>
                                    <div class="col-md-9">
                                        {selectbox_vehicle_category}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="description"> Description</label>
                                    <div class="col-md-9">
                                        <input id="description" value="{description}" type="text" name="description" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="insured_amount"> Insured Amount</label>
                                    <div class="col-md-9">
                                        <input id="insured_amount" value="{insured_amount}" type="number" step="0.01" name="insured_amount" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="uninsured_amount"> Uninsured Amount</label>
                                    <div class="col-md-9">
                                        <input id="uninsured_amount" value="{uninsured_amount}" type="number" step="0.01" name="uninsured_amount" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="third_party_amount"> Third Party Amount</label>
                                    <div class="col-md-9">
                                        <input id="third_party_amount" value="{third_party_amount}" type="number" step="0.01" name="third_party_amount" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="excess_id">Excess</label>
                                    <div class="col-md-9">
                                        {selectbox_excess}
                                    </div>
                                </div>
                            </div>
                            {checkbox_active}
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_rate_table_line_item_vehicle' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary rate_table_line_item_vehicle_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        var form_id = '#form_rate_table_line_item_vehicle'
        setFormValidation(form_id);
        $('#save_rate_table_line_item_vehicle').click(function(){
             var valid = FormIsValid(form_id);
             if(valid){
                var formserial = $(form_id).serialize();
                $.post('/product/save_rate_table_line_item_vehicle?', formserial, function(data){
                    var kwargs = {'rate_table_id' : data};
                    $.redirect('/product/get_rate_table_items', kwargs);
                    return false;
                });
             }
        });
        $('.rate_table_line_item_vehicle_back').click(function(){
            $('#dialog_rate_table_line_item_vehicle').modal('hide');
        });
        $('#dialog_rate_table_line_item_vehicle').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_rate_table_line_item_vehicle(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        usernow = request.identity.get('user', None)
        rate_table_line_item_vehicle_id = kwargs.get('rate_table_line_item_vehicle_id', None)
        if not rate_table_line_item_vehicle_id:
            this = RateTableLineItemVehicle()
            this.rate_table_id = kwargs.get('rate_table_id', None)
            this.asset_vehicle_category_id = kwargs.get('asset_vehicle_category_id', None)
            this.description = kwargs.get('description', None)
            this.insured_amount = kwargs.get('insured_amount', None)
            this.uninsured_amount = kwargs.get('uninsured_amount', None)
            this.third_party_amount = kwargs.get('third_party_amount', None)
            this.excess_id = kwargs.get('excess_id', None)
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
        else:
            this = RateTableLineItemVehicle.by_id(rate_table_line_item_vehicle_id)
            if not this: return 'false'
            this.rate_table_id = kwargs.get('rate_table_id', None)
            this.asset_vehicle_category_id = kwargs.get('asset_vehicle_category_id', None)
            this.description = kwargs.get('description', None)
            this.insured_amount = kwargs.get('insured_amount', None)
            this.uninsured_amount = kwargs.get('uninsured_amount', None)
            this.third_party_amount = kwargs.get('third_party_amount', None)
            this.excess_id = kwargs.get('excess_id', None)

            active = kwargs.get('active', False)
            if active:
                active = True
            this.bln_active = active

            DBSession.flush()
        return str(rate_table_id)

    @expose()
    def get_active_rate_table_line_item_landlord_html(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate = RateTable.by_id(rate_table_id)

        dbase_query = RateTableLineItemLandlord.by_attr_all('rate_table_id', rate_table_id)
        if not dbase_query:
            excesslist = Excess.get_all('id')
            if not excesslist:
                for i in range(1, 4):
                    ex = Excess()
                    ex.amount = i * 1000
                    DBSession.add(ex)
                    DBSession.flush()
                excesslist = Excess.get_all('id')
            for e in excesslist:
                new = RateTableLineItemLandlord()
                new.rate_table_id = rate_table_id
                new.minimum_rental = 0
                new.maximum_rental = 999999
                new.percentage = 1
                new.minimum_premium = 20.00
                new.excess_id = e.id
                DBSession.add(new)
                DBSession.flush()
            dbase_query = RateTableLineItemLandlord.by_attr_all('rate_table_id', rate_table_id)

        outputlist = []
        for item in dbase_query:
            minimum_rental = get_currency_by_locale(item.minimum_rental, cents=False)
            outputlist.append({
                'minimum_rental' : f"""<div class='edit action_link rate_table_line_item_landlord_edit'
                                            rate_table_line_item_landlord_id='{item.id}' rate_table_id='{rate_table_id}'>
                                            {minimum_rental}</div>""",
                'maximum_rental' : get_currency_by_locale(item.maximum_rental, cents=False),
                'percentage' : item.percentage,
                'minimum_premium' : get_currency_by_locale(item.minimum_premium, cents=False),
                'excess_id' : self.get_excess_by_id(item),
                             })
        dbcolumnlist=[
                'minimum_rental',
                'maximum_rental',
                'percentage',
                'minimum_premium',
                'excess_id',
                    ]
        theadlist=[
                'Minimum Rental',
                'Maximum Rental',
                'Percentage',
                'Minimum Premium',
                'Excess',
                ]
        tdclasslist = [
                '',
                'text-right',
                'text-center',
                'text-right',
                'text-right',
        ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "rate_table_line_item_landlord_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{rate.name} Items</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button class="btn btn-primary ml-auto" id="btn_back">Back to Rate Tables</button>
                            <button id="create_new_rate_table_line_item_landlord" rate_table_id='{rate_table_id}' class="btn btn-primary ml-auto">Create New Item</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input type="text" class="form-control search" name="searchphrase" placeholder="Search">
                        </div>
                        <div class="col-md-8">
                            <button class="btn btn-primary action_search">Search</button>
                            <button class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {htmltbl}
                    </div>
                </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_javascript_rate_table_line_item_landlord_onload(self, *args, **kwargs):
        javascript = """
        $('#btn_back').click(function(){
            $.redirect('/product/premium_rates');
        });
        $("#create_new_rate_table_line_item_landlord").click(function(){
            var kwargs = 'rate_table_id=' + $(this).attr('rate_table_id');
            $('#dialogdiv').load('/product/get_modal_rate_table_line_item_landlord?', kwargs, function(data){
                return false;
            });
        });
        $(".rate_table_line_item_landlord_edit").click(function(){
            var kwargs = 'rate_table_line_item_landlord_id='+$(this).attr('rate_table_line_item_landlord_id');
            kwargs += '&rate_table_id=' + $(this).attr('rate_table_id');
            $('#dialogdiv').load('/product/get_modal_rate_table_line_item_landlord?', kwargs, function(data){
                return false;
            });
        });
        """
        return javascript

    @expose()
    def get_modal_rate_table_line_item_landlord(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate = RateTable.by_id(rate_table_id)
        rate_table_line_item_landlord_id = kwargs.get('rate_table_line_item_landlord_id', None)
        rate_table_line_item_landlord = None
        hidden_input = ''
        if rate_table_line_item_landlord_id:
            rate_table_line_item_landlord = RateTableLineItemLandlord.by_id(rate_table_line_item_landlord_id)
            hidden_input = get_hidden_input(**{'id': 'rate_table_line_item_landlord_id', 'value': rate_table_line_item_landlord_id})
        hidden_input2 = get_hidden_input(**{'id': 'rate_table_id', 'value': rate_table_id})
        minimum_rental = round(rate_table_line_item_landlord.minimum_rental, 2) if rate_table_line_item_landlord else ''
        maximum_rental = round(rate_table_line_item_landlord.maximum_rental, 2) if rate_table_line_item_landlord else ''

        #percentage = round(rate_table_line_item_landlord.percentage, 2) if rate_table_line_item_landlord else ''
        percentage = rate_table_line_item_landlord.percentage if rate_table_line_item_landlord else ''

        minimum_premium = round(rate_table_line_item_landlord.minimum_premium, 2) if rate_table_line_item_landlord else ''
        checkbox_active = COMMON.get_checkbox_active_boolean(rate_table_line_item_landlord.bln_active) if rate_table_line_item_landlord else ''
        excess_id = rate_table_line_item_landlord.excess_id if rate_table_line_item_landlord else ''
        selectbox_excess = self.get_selectbox_excess(**{'selected': excess_id})
        html = f"""
        <div class="modal fade" id="dialog_rate_table_line_item_landlord" tabindex="-1" role="dialog" aria-labelledby="myrate_table_line_item_landlordLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">{rate.name} Items</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_rate_table_line_item_landlord'>
                            {hidden_input}
                            {hidden_input2}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="minimum_rental">Minimum Rental</label>
                                    <div class="col-md-9">
                                        <input id="minimum_rental" value="{minimum_rental}" type="number" name="minimum_rental" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="maximum_rental">Maximum Rental</label>
                                    <div class="col-md-9">
                                        <input id="maximum_rental" value="{maximum_rental}" type="number" name="maximum_rental" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="percentage"> Percentage</label>
                                    <div class="col-md-9">
                                        <input id="percentage" value="{percentage}" type="number" step='0.01' name="percentage" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="minimum_premium">Minimum Premium</label>
                                    <div class="col-md-9">
                                        <input id="minimum_premium" value="{minimum_premium}" type="number" name="minimum_premium" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="excess_id">Excess</label>
                                    <div class="col-md-9">
                                        {selectbox_excess}
                                    </div>
                                </div>
                            </div>
                            {checkbox_active}
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_rate_table_line_item_landlord' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary rate_table_line_item_landlord_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        var form_id = '#form_rate_table_line_item_landlord'
        setFormValidation(form_id);
        $('#save_rate_table_line_item_landlord').click(function(){
             var valid = FormIsValid(form_id);
             if(valid){
                var formserial = $(form_id).serialize();
                $.post('/product/save_rate_table_line_item_landlord?', formserial, function(data){
                    var kwargs = {'rate_table_id' : data}
                    $.redirect('/product/get_rate_table_items', kwargs);
                    return false;
                });
             }
        });
        $('.rate_table_line_item_landlord_back').click(function(){
            $('#dialog_rate_table_line_item_landlord').modal('hide');
        });
        $('#dialog_rate_table_line_item_landlord').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_rate_table_line_item_landlord(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        usernow = request.identity.get('user', None)
        rate_table_line_item_landlord_id = kwargs.get('rate_table_line_item_landlord_id', None)
        if not rate_table_line_item_landlord_id:
            this = RateTableLineItemLandlord()
            this.rate_table_id = kwargs.get('rate_table_id', None)
            this.minimum_rental = kwargs.get('minimum_rental', None)
            this.maximum_rental = kwargs.get('maximum_rental', None)
            this.percentage = kwargs.get('percentage', None)
            this.minimum_premium = kwargs.get('minimum_premium', None)
            this.excess_id = kwargs.get('excess_id', None)
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
        else:
            this = RateTableLineItemLandlord.by_id(rate_table_line_item_landlord_id)
            if not this: return 'false'
            this.rate_table_id = kwargs.get('rate_table_id', None)
            this.minimum_rental = kwargs.get('minimum_rental', None)
            this.maximum_rental = kwargs.get('maximum_rental', None)
            this.percentage = kwargs.get('percentage', None)
            this.minimum_premium = kwargs.get('minimum_premium', None)
            this.excess_id = kwargs.get('excess_id', None)

            active = kwargs.get('active', False)
            if active:
                active = True
            this.bln_active = active

            DBSession.flush()
        return str(rate_table_id)

    @expose()
    def get_active_rate_table_line_item_employee_html(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate = RateTable.by_id(rate_table_id)

        dbase_query = RateTableLineItemEmployee.by_attr_all('rate_table_id', rate_table_id)

        """
        # REMOVE
        if not dbase_query:
            excesslist = Excess.get_all('id')
            if not excesslist:
                for i in range(1, 3):
                    ex = Excess()
                    ex.amount = i * 1000
                    DBSession.add(ex)
                    DBSession.flush()
                excesslist = Excess.get_all('id')
            for i in excesslist:
                new = RateTableLineItemEmployee()
                new.rate_table_id = rate_table_id
                new.minimum_employees = 1
                new.maximum_employees = 999
                new.amount = 1.23
                new.excess_id = i.id
                DBSession.add(new)
                DBSession.flush()
            dbase_query = RateTableLineItemEmployee.by_attr_all('rate_table_id', rate_table_id)
        """

        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'maximum_employees' : f"""<div class='edit action_link rate_table_line_item_employee_edit'
                                               rate_table_line_item_employee_id='{item.id}' rate_table_id='{rate_table_id}'>
                                               {item.maximum_employees}</div>""",
                'minimum_employees' : item.minimum_employees,
                'amount' : get_currency_by_locale(item.amount, cents=False),
                'excess_id' : self.get_excess_by_id(item),
                             })
        dbcolumnlist=[
                'maximum_employees',
                'minimum_employees',
                'amount',
                'excess_id',
                    ]
        theadlist=[
                'Max Employees',
                'Min Employees',
                'Amount',
                'Excess',
                ]
        tdclasslist = [
                '',
                '',
                'text-right',
                'text-right',
        ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "rate_table_line_item_employee_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{rate.name} Items</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button class="btn btn-primary ml-auto" id="btn_back">Back to Rate Tables</button>
                            <button id="create_new_rate_table_line_item_employee" rate_table_id='{rate_table_id}' class="btn btn-primary ml-auto">Create New Item</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input type="text" class="form-control search" name="searchphrase" placeholder="Search">
                        </div>
                        <div class="col-md-8">
                            <button class="btn btn-primary action_search">Search</button>
                            <button class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {htmltbl}
                    </div>
                </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_javascript_rate_table_line_item_employee_onload(self, *args, **kwargs):
        javascript = """
        $('#btn_back').click(function(){
            $.redirect('/product/premium_rates');
        });
        $("#create_new_rate_table_line_item_employee").click(function(){
            var kwargs = 'rate_table_id='+$(this).attr('rate_table_id');
            $('#dialogdiv').load('/product/get_modal_rate_table_line_item_employee?', kwargs, function(data){
                return false;
            });
        });
        $(".rate_table_line_item_employee_edit").click(function(){
            var kwargs = 'rate_table_line_item_employee_id='+$(this).attr('rate_table_line_item_employee_id');
            kwargs += '&rate_table_id='+$(this).attr('rate_table_id');
            $('#dialogdiv').load('/product/get_modal_rate_table_line_item_employee?', kwargs, function(data){
                return false;
            });
        });
        """
        return javascript

    @expose()
    def get_modal_rate_table_line_item_employee(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate = RateTable.by_id(rate_table_id)
        rate_table_line_item_employee_id = kwargs.get('rate_table_line_item_employee_id', None)
        rate_table_line_item_employee = None
        hidden_input = ''
        if rate_table_line_item_employee_id:
            rate_table_line_item_employee = RateTableLineItemEmployee.by_id(rate_table_line_item_employee_id)
            hidden_input = get_hidden_input(**{'id': 'rate_table_line_item_employee_id', 'value': rate_table_line_item_employee_id})
        hidden_input2 = get_hidden_input(**{'id': 'rate_table_id', 'value': rate_table_id})
        maximum_employees = rate_table_line_item_employee.maximum_employees if rate_table_line_item_employee else ''
        minimum_employees = rate_table_line_item_employee.minimum_employees if rate_table_line_item_employee else ''
        amount = round(rate_table_line_item_employee.amount, 2) if rate_table_line_item_employee else ''
        checkbox_active = COMMON.get_checkbox_active_boolean(rate_table_line_item_employee.bln_active) if rate_table_line_item_employee else ''
        excess_id = rate_table_line_item_employee.excess_id if rate_table_line_item_employee else ''
        selectbox_excess = self.get_selectbox_excess(**{'selected': excess_id})
        html = f"""
        <div class="modal fade" id="dialog_rate_table_line_item_employee" tabindex="-1" role="dialog" aria-labelledby="myrate_table_line_item_employeeLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">{rate.name} Items</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_rate_table_line_item_employee'>
                            {hidden_input}
                            {hidden_input2}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="maximum_employees">Max Employees</label>
                                    <div class="col-md-9">
                                        <input id="maximum_employees" value="{maximum_employees}" type="text" name="maximum_employees" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="minimum_employees">Min Employees</label>
                                    <div class="col-md-9">
                                        <input id="minimum_employees" value="{minimum_employees}" type="text" name="minimum_employees" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="amount">Amount</label>
                                    <div class="col-md-9">
                                        <input id="amount" value="{amount}" type="number" name="amount" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="excess_id">Excess</label>
                                    <div class="col-md-9">
                                        {selectbox_excess}
                                    </div>
                                </div>
                            </div>
                            {checkbox_active}
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_rate_table_line_item_employee' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary rate_table_line_item_employee_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        var form_id = '#form_rate_table_line_item_employee'
        setFormValidation(form_id);
        $('#save_rate_table_line_item_employee').click(function(){
             var valid = FormIsValid(form_id);
             if(valid){
                var formserial = $(form_id).serialize();
                $.post('/product/save_rate_table_line_item_employee?', formserial, function(data){
                    var kwargs = {'rate_table_id' : data}
                    $.redirect('/product/get_rate_table_items', kwargs);
                    return false;
                });
             }
        });
        $('.rate_table_line_item_employee_back').click(function(){
            $('#dialog_rate_table_line_item_employee').modal('hide');
        });
        $('#dialog_rate_table_line_item_employee').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_rate_table_line_item_employee(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        usernow = request.identity.get('user', None)
        rate_table_line_item_employee_id = kwargs.get('rate_table_line_item_employee_id', None)
        if not rate_table_line_item_employee_id:
            this = RateTableLineItemEmployee()
            this.rate_table_id = kwargs.get('rate_table_id', None)
            this.maximum_employees = kwargs.get('maximum_employees', None)
            this.minimum_employees = kwargs.get('minimum_employees', None)
            this.amount = kwargs.get('amount', None)
            this.excess_id = kwargs.get('excess_id', None)
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
        else:
            this = RateTableLineItemEmployee.by_id(rate_table_line_item_employee_id)
            if not this: return 'false'
            this.rate_table_id = kwargs.get('rate_table_id', None)
            this.maximum_employees = kwargs.get('maximum_employees', None)
            this.minimum_employees = kwargs.get('minimum_employees', None)
            this.amount = kwargs.get('amount', None)
            this.excess_id = kwargs.get('excess_id', None)

            active = kwargs.get('active', False)
            if active:
                active = True
            this.bln_active = active

            DBSession.flush()
        return str(rate_table_id)

    def get_excess_by_id(self, item, *args, **kwargs):
        amount = 'Not Set'
        if item.excess_id:
            excess = Excess.by_id(item.excess_id)
            if excess and excess.amount:
                amount = get_currency_by_locale(excess.amount, cents=False)
        return amount
