# -*- coding: utf-8 -*-
"""Setup controller module"""

import json
import sqlalchemy

from tg.i18n import ugettext as _
from tg.i18n import lazy_ugettext as l_

from tg import predicates, require, response, use_wsgi_app
from tg import expose, redirect, validate, url, request

from webob.static import FileApp
from reportlab.platypus import Paragraph
from sqlalchemy import func, desc, asc, or_

from rocket.model import *

from rocket.lib.tg_utils import *
from rocket.lib.base import BaseController
from rocket.lib.tg_generic_reportlab import PDFCreator
from rocket.lib.type_utils import TypeDictionary as TypeDict

from rocket.controllers.common import CommonController

LIMIT = 20
FILENAME = os.path.abspath(resource_filename('rocket', 'public'))
PUBLIC_DIRNAME = os.path.join(FILENAME)
PDF_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'pdf')

SEARCHKEY_BANK = 'Bank_SearchKeyword'
SEARCHKEY_CURRENCY = 'Currency_SearchKeyword'
SEARCHKEY_PREMIUMRATE = 'PremiumRate_SearchKeyword'
SEARCHKEY_PRODUCTLOADER = 'ProductLoader_SearchKeyword'
SEARCHKEY_CLAIMQUESTION = 'ClaimQuestion_SearchKeyword'
SEARCHKEY_VEHICLE_CATAGORY = 'VehicleCategory_SearchKeyword'
SEARCHKEY_INTERMEDIARYDISCLOSURE = 'IntermediaryDisclosure_SearchKeyword'

TYPEUTIL = TypeDict()
COMMON = CommonController()

LINK = TYPEUTIL.get_id_of_name('system_parameter_data_type', 'link')
INTEGER = TYPEUTIL.get_id_of_name('system_parameter_data_type', 'integer')
BOOLEAN = TYPEUTIL.get_id_of_name('system_parameter_data_type', 'boolean')

AUDIT_TABLE_LIMIT = 10
AUDIT_EXCLUSION_LIST = ['id', 'added_by', 'added', 'active']

IMG_ACTIVE = "<img src='/images/icon_check.png' />"
IMG_INACTIVE = "<img src='/images/icon_cross.png' />"

class SetupController(BaseController):

########################################################################
# System Documents
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def system_documents(self, *args, **kwargs):
        html = self.get_system_document_html(*args, **kwargs)
        javascript = self.get_javascript_system_document_onload()
        title = "System Docs"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_system_document_html(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        dbase_query = self.get_system_document_list(*args, **kwargs)
        selectbox_system_document_type = self.get_selectbox_system_document_type()
        outputlist = []
        for item in dbase_query:
            name = TypeDict().get_pretty_name("system_document_type", item.system_document_type_id)
            outputlist.append({
                'name': "<div class='edit system_document_edit' system_document_id='{1}'>{0}</div>".format(
                    item.name, item.id),
                'description': item.description,
                'system_document_type_id': name,
            })
        dbcolumnlist = [
            'name',
            'description',
            'system_document_type_id',
        ]
        theadlist = [
            'Name',
            'Description',
            'Document Type',
        ]
        tdclasslist = [
            'action_link',
            'text-right',
            'text-right',
        ]
        system_document_table = build_html_table(outputlist, dbcolumnlist, theadlist, "system_document_table", tdclasslist)
        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <div class="row d-flex">
                                <div class="col-md-6">
                                    <h4 class="card-title">System Documents</h4>
                                </div>
                                <div class="col-md-6 text-right">
                                    <button id="create_new_system_document" class="btn btn-primary ml-auto">Create New System Document</button>
                                </div>
                            </div>
                            <div class="row d-flex align-items-center">
                                <div class="col-md-4">
                                    <input type="text" class="form-control search" name="searchphrase" placeholder="Search">
                                </div>
                                <div class="col-md-4">
                                    {selectbox_system_document_type}
                                </div>
                                <div class="col-md-4">
                                    <button class="btn btn-primary action_search">Search</button>
                                    <button class="btn btn-primary">Reset</button>
                                </div>
                            </div>
                            <hr>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                {system_document_table}
                            </div>
                        </div>
                    </div>
                </div>
            """
        return html

    @expose()
    def get_javascript_system_document_onload(self, *args, **kwargs):
        javascript = """
            $("#create_new_system_document").click(function(){
                $('#dialogdiv').load('/setup/get_modal_new_system_document?', function(data){
                    return false;
                });
            });
            $(".system_document_edit").click(function(){
                var kwargs = 'system_document_id='+$(this).attr('system_document_id');
                $('#dialogdiv').load('/setup/get_modal_edit_system_document?'+kwargs, function(data){
                    return false;
                });
            });
        """
        return javascript

    def get_selectbox_system_document_type(self, selected=None, *args, **kwargs):
        kwargs['id'] = 'system_document_type_id'
        kwargs['selected'] = selected
        kwargs['outputdict'] = TypeDict().get_dict_of_types("system_document_type")
        return create_selectbox_html(**kwargs)

    @expose()
    def get_modal_new_system_document(self, *args, **kwargs):
        selectbox_system_document_type = self.get_selectbox_system_document_type()

        html = f"""
            <div class="modal fade" id="dialog_new_system_document" tabindex="-1" role="dialog" aria-labelledby="mysystem_documentLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">New System Document</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_system_document'>
                                    <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-3 col-form-label" required for="name">Name</label>
    						<div class="col-md-9">
    							<input id="name" type="text" name="name" class="form-control" required='true'>
    						</div>
    					</div>
    				</div>
                                    <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-3 col-form-label" required for="description">Description</label>
    						<div class="col-md-9">
    							<input id="description" type="text" name="description" class="form-control" required='true'>
    						</div>
    					</div>
    				</div>
                                    <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-3 col-form-label" required for="system_document_type_id">Document Type</label>
    						<div class="col-md-9">
    							{selectbox_system_document_type}
    						</div>
    					</div>
    				</div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_system_document' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary system_document_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script nonce='1234'>
            setFormValidation('#form_new_system_document');
            $('#save_new_system_document').click(function(){
                 var valid = FormIsValid("#form_new_system_document");
                 if(valid){
                    var formserial = getFormData('#form_new_system_document');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/setup/save_new_system_document?', data, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect('/setup/system_documents');
                        };
                        showNotification(result.status, result.data);
                        return false;
                    });
                 }
            });
            $('.system_document_back').click(function(){
                $('#dialog_new_system_document').modal('hide');
            });
            $('#dialog_new_system_document').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def get_modal_edit_system_document(self, *args, **kwargs):
        system_document_id = kwargs.get('system_document_id', None)
        if not system_document_id:
            return ''
        this = self.get_system_document_by_id(*args, **kwargs)
        selectbox_system_document_type = self.get_selectbox_system_document_type(this.system_document_type_id)

        if not this:
            return ''
        checked = 'checked' if this.bln_active else ''
        html = f"""
            <div class="modal fade" id="dialog_edit_system_document" tabindex="-1" role="dialog" aria-labelledby="mysystem_documentLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">Edit System Document</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_edit_system_document'>
                                <div style='display: none' class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="system_document_id">ID</label>
                                        <div class="col-md-9">
                                            <input id="id" type="text" name="system_document_id" value="{this.id}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="name">Name</label>
                                        <div class="col-md-9">
                                            <input id="name" type="text" name="name" value="{this.name}" class="form-control" required='true' disabled='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="description">Description</label>
                                        <div class="col-md-9">
                                            <input id="description" type="text" name="description" value="{this.description}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="system_document_type_id">Document Type</label>
                                        <div class="col-md-9">
                                        {selectbox_system_document_type}
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-3 col-form-label" for="active" required>Active</label>
                                        <div class="col-9">
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                    <span class="form-check-sign"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_edit_system_document' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary system_document_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script nonce='1234'>
            setFormValidation('#form_edit_system_document');
            $('#save_edit_system_document').click(function(){
                 var valid = FormIsValid("#form_edit_system_document");
                 if(valid){
                    var formserial = getFormData('#form_edit_system_document');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/setup/save_edit_system_document?', data, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect('/setup/system_documents');
                        };
                        showNotification(result.status, result.data);
                        return false;
                    });
                 }
            });
            $('.system_document_back').click(function(){
                $('#dialog_edit_system_document').modal('hide');
            });
            $('#dialog_edit_system_document').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def save_new_system_document(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data:
            return json.dumps({'success': False, 'data': 'No data provided', 'status': 'danger'})
        usernow = request.identity.get('user', None)
        doc_name = data.get('name', None)
        exists = DBSession.query(SystemDocument).\
            filter(SystemDocument.name==doc_name).\
            filter(SystemDocument.bln_active==True).\
            first()
        if exists: return json.dumps({'success': False, 'data': 'Document with the same name already exists', 'status': 'danger'})

        this = SystemDocument()
        this.name = doc_name
        this.description = data.get('description', None)
        this.system_document_type_id = data.get('system_document_type_id', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def save_edit_system_document(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data:
            return json.dumps({'success': False, 'data': 'No data provided'})
        usernow = request.identity.get('user', None)
        this = self.get_system_document_by_id(**data)
        if not this:
            return json.dumps({'success': False, 'data': 'No system_document found for id provided'})
        this.description = data.get('description', None)
        this.system_document_type_id = data.get('system_document_type_id', None)
        if not data.get('active', None):
            this.bln_active = False
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def get_system_document_by_id(self, *args, **kwargs):
        return DBSession.query(SystemDocument). \
            filter(SystemDocument.id == kwargs.get('system_document_id', None)). \
            first()

    @expose()
    def get_system_document_list(self, *args, **kwargs):
        searchphrase = kwargs.get('searchphrase', None)

        name = kwargs.get('name', None)
        description = kwargs.get('description', None)
        system_document_system_document_type_id = kwargs.get('system_document_system_document_type_id', None)

        if name:
            searchphrase = "%" + kwargs['name'] + "%"
            dbase_query = DBSession.query(SystemDocument). \
                filter(SystemDocument.name.like(searchphrase)). \
                filter(SystemDocument.bln_active == True). \
                order_by(asc(SystemDocument.name)).limit(LIMIT)
        if description:
            searchphrase = "%" + kwargs['description'] + "%"
            dbase_query = DBSession.query(SystemDocument). \
                filter(SystemDocument.description.like(searchphrase)). \
                filter(SystemDocument.bln_active == True). \
                order_by(asc(SystemDocument.description)).limit(LIMIT)
        if system_document_system_document_type_id:
            dbase_query = DBSession.query(SystemDocument). \
                filter(
                SystemDocument.system_document_system_document_type_id == system_document_system_document_type_id). \
                filter(SystemDocument.bln_active == True). \
                order_by(asc(SystemDocument.system_document_id)).limit(LIMIT)
        else:
            dbase_query = DBSession.query(SystemDocument). \
                filter(SystemDocument.bln_active == True). \
                order_by(asc(SystemDocument.id)). \
                limit(LIMIT)
        return dbase_query

########################################################################
# Currency
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def currencies(self, *args, **kwargs):
        html = self.get_currency_html(*args, **kwargs)
        javascript = self.get_javascript_currency_onload()
        title = "Currency"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_currency_html(self, *args, **kwargs):

        kwargs['searchkey'] = SEARCHKEY_CURRENCY
        usernow = request.identity.get('user', {})
        searchphrase = COMMON.get_searchphrase(**kwargs)
        currencytable = self.get_currency_htmltbl(**kwargs)
        html = f"""
            <div class="row" >
                <div class="col-md-12">
                    <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Currency</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_currency" class="btn btn-primary ml-auto">Add a New Currency</button>
                            </div>
                        </div>
                        <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                <input type="text" class="form-control search" name="searchphrase"  id='searchphrase'  value='{searchphrase}' placeholder="Search">
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary" id='action_search'>Search</button>
                                <button class="btn btn-primary" id='btn_reset'>Reset</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div  class="table-responsive" id='div_currency_table'>
                            {currencytable}
                        </div>
                    </div>
                    </div>
                </div>

            """
        javascript = """
        <script nonce='1234'>
            $("#create_new_currency").click(function(){
                $('#dialogdiv').load('/setup/get_modal_new_currency?', function(data){
                    return false;
                });
            });

              $('#action_search').click(function(){
                 var kwargs = 'searchphrase='+$('#searchphrase').val();
                 $('#div_currency_table').load('/setup/get_currency_htmltbl', kwargs, function(data){
                     return false;
                 });
             })
             $('#btn_reset').click(function(){
              $('#searchphrase').val('').focus();
                 $('#div_currency_table').load('/setup/get_currency_htmltbl', 'reset=true', function(data){
                     return false;
                 });
             })
             </script>
             """
        return html + javascript

    @expose()
    def get_currency_htmltbl(self, *args, **kwargs):
        dbase_query = self.get_currency_list(*args, **kwargs)
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'code': "<div class='edit currency_edit' currency_id='{1}'>{0}</div>".format(item.code, item.id),
                'name': item.name,
                'is_home_currency': item.is_home_currency,
            })
        dbcolumnlist = [
            'code',
            'name',
            'is_home_currency',
        ]
        theadlist = [
            'Code',
            'Name',
            'Home Currency',
        ]
        tdclasslist = [
            'action_link',
            'text-center',
            'text-right',
        ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "currency_table", tdclasslist)
        javascript = """
        <script nonce='1234'>
         $(".currency_edit").click(function(){
                var kwargs = 'currency_id='+$(this).attr('currency_id');
                $('#dialogdiv').load('/setup/get_modal_edit_currency?', kwargs, function(data){
                    return false;
                });
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_javascript_currency_onload(self, *args, **kwargs):
        javascript = """
        """
        return javascript

    def get_selectbox_inactive_currencies(self, *args, **kwargs):
        kwargs['id'] = 'currency_id'
        kwargs['case_sensitive'] = True
        dbase_query = DBSession.query(Currency).filter(Currency.bln_active == False).order_by(asc(Currency.code)).all()
        kwargs['outputlist'] = [{'id': x.id, 'name': f"{x.code}: {x.name}"} for x in dbase_query]
        return create_selectbox_html(**kwargs)

    @expose()
    def get_modal_new_currency(self, *args, **kwargs):
        selectbox_inactive_currencies = self.get_selectbox_inactive_currencies()
        html = f"""
            <div class="modal fade" id="dialog_new_currency" tabindex="-1" role="dialog" aria-labelledby="mycurrencyLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">Add Currency</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_currency'>
                                    <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-3 col-form-label" required for="code">Code</label>
    						<div class="col-md-9">
    							{selectbox_inactive_currencies}
    						</div>
    					</div>
    				</div>

                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_currency' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary currency_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script nonce='1234'>
            setFormValidation('#form_new_currency');
            $('#save_new_currency').click(function(){
                 var valid = FormIsValid("#form_new_currency");
                 if(valid){
                    var formserial = getFormData('#form_new_currency');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/setup/save_new_currency?', data, function(data){
                        var result = JSON.parse(data);
                        showNotification(result.status, result.data);
                        if(result.success === true){
                            $.redirect('/setup/currencies');
                        };
                        return false;
                    });
                 }
            });
            $('.currency_back').click(function(){
                $('#dialog_new_currency').modal('hide');
            });
            $('#dialog_new_currency').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def get_modal_edit_currency(self, *args, **kwargs):
        currency_id = kwargs.get('currency_id', None)
        if not currency_id: return ''
        this = self.get_currency_by_id(*args, **kwargs)
        if not this: return ''
        checked = 'checked' if this.bln_active else ''
        is_home_currency = 'checked' if this.is_home_currency else ''
        html = f"""
            <div class="modal fade" id="dialog_edit_currency" tabindex="-1" role="dialog" aria-labelledby="mycurrencyLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">Edit Currency</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_edit_currency'>
                                <div style='display: none' class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="currency_id">ID</label>
                                        <div class="col-md-9">
                                            <input id="id" type="text" name="currency_id" value="{this.id}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-4 col-form-label" required for="code"> Code</label>
                                        <div class="col-md-8">
                                            <input id="code" type="text" name="code" value="{this.code}" class="form-control" required='true' disabled='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-4 col-form-label" required for="name"> Name</label>
                                        <div class="col-md-8">
                                            <input id="name" type="text" name="name" value="{this.name}" class="form-control" required='true' disabled='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-4 col-form-label" for="is_home_currency" required>{_('Home Currency')}</label>
                                        <div class="col-8">
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="checkbox" name="is_home_currency" id="is_home_currency" {is_home_currency}/>
                                                    <span class="form-check-sign"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-4 col-form-label" for="active" required>Active</label>
                                        <div class="col-8">
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                    <span class="form-check-sign"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_edit_currency' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary currency_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script nonce='1234'>
            setFormValidation('#form_edit_currency');
            $('#save_edit_currency').click(function(){
                 var valid = FormIsValid("#form_edit_currency");
                 if(valid){
                    var formserial = getFormData('#form_edit_currency');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/setup/save_edit_currency?', data, function(data){
                        var result = JSON.parse(data);
                        showNotification(result.status, result.data);
                        if(result.success === true){
                            $.redirect('/setup/currencies');
                        };
                        return false;
                    });
                 }
            });
            $('.currency_back').click(function(){
                $('#dialog_edit_currency').modal('hide');
            });
            $('#dialog_edit_currency').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def save_new_currency(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success': False, 'data': 'No data provided', 'status': 'danger'})
        usernow = request.identity.get('user', None)
        this = Currency.by_id_inactive(data.get("currency_id"))
        this.bln_active = True
        this.is_home_currency = False
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def save_edit_currency(self, *args, **kwargs):
        usernow = request.identity.get('user', None)

        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data:
            return json.dumps({'success': False, 'data': 'No data provided', 'status': 'danger'})

        this = self.get_currency_by_id(**data)
        if not this:
            return json.dumps({'success': False, 'data': 'No currency found for id provided', 'status': 'danger'})

        is_home_currency = data.get('is_home_currency', False)
        if is_home_currency:
            is_home_currency = True

            home_code, home_id = self.get_home_currency()
            if home_code and not home_id == this.id:
               return json.dumps({'success': False, 'data': 'There is already a Home Currency set!', 'status': 'danger'})

        this.is_home_currency = is_home_currency

        if not data.get('active', None):
            this.bln_active = False

        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    def get_home_currency(self, *args, **kwargs):
        home_currency = DBSession.query(Currency).\
            filter(Currency.is_home_currency==True).\
            filter(Currency.bln_active==True).\
            first()
        if not home_currency:
            return '', 0
        return home_currency.code, home_currency.id

    @expose()
    def get_currency_by_id(self, *args, **kwargs):
        return DBSession.query(Currency). \
            filter(Currency.id == kwargs.get('currency_id', None)). \
            first()

    @expose()
    def get_currency_list(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_CURRENCY
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()

        if searchphrase:
            searchphrase = "%" + searchphrase + "%"
            dbase_query = DBSession.query(Currency). \
                filter(or_(
                    Currency.code.like(searchphrase),
                    Currency.name.like(searchphrase),
                )). \
                filter(Currency.bln_active == True). \
                order_by(asc(Currency.code)).limit(LIMIT)

            return dbase_query
        else:
            dbase_query = DBSession.query(Currency). \
                filter(Currency.bln_active == True). \
                order_by(asc(Currency.id)). \
                limit(LIMIT)
        return dbase_query

###############################################################################
# Banks
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def banks(self, *args, **kwargs):
        self.create_bank_branches()
        html = self.get_bank_html(*args, **kwargs)
        javascript = self.get_javascript_bank_onload()
        title = "Bank"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_bank_html(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_BANK
        searchphrase = COMMON.get_searchphrase(**kwargs)
        banktable = self.get_bank_htmltbl(**kwargs)
        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Bank</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_bank" class="btn btn-primary ml-auto">Create a New Bank</button>
                            </div>
                        </div>
                       <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                <input type="text" class="form-control search" name="searchphrase"  id='searchphrase'  value='{searchphrase}' placeholder="Search">
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary" id='action_search'>Search</button>
                                <button class="btn btn-primary" id='btn_reset'>Reset</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive" id='div_bank'>
                            {banktable}
                        </div>
                    </div>
                    </div>
                </div>
            """
        javascript = """
            <script nonce='1234'>
                $("#create_new_bank").click(function(){
                    $('#dialogdiv').load('/setup/get_modal_new_bank?', function(data){
                        return false;
                    });
                });
                $('#action_search').click(function(){
                    var kwargs = 'searchphrase='+$('#searchphrase').val();
                    $('#div_bank').load('/setup/get_bank_htmltbl', kwargs, function(data){
                        return false;
                    });
                })
                $('#btn_reset').click(function(){
                    $('#searchphrase').val('').focus();
                    $('#div_bank').load('/setup/get_bank_htmltbl', 'reset=true', function(data){
                         return false;
                     });
                 })
            </script>
        """
        return html + javascript

    @expose()
    def get_bank_htmltbl(self, *args, **kwargs):
        dbase_query = self.get_bank_list(*args, **kwargs)
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'name': "<div class='edit bank_edit action_link' bank_id='{1}'>{0}</div>".format(item.name, item.id),
            })
        dbcolumnlist = [
            'name',
        ]
        theadlist = [
            'Name',
        ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "bank_table")
        javascript = """
            <script nonce='1234'>
                $(".bank_edit").click(function(){
                    var kwargs = {'bank_id' : $(this).attr('bank_id')};
                    $.redirect('/setup/get_bank_edit?', kwargs);
                });
            </script>
        """
        return html + javascript

    @expose()
    def get_javascript_bank_onload(self, *args, **kwargs):
        javascript = """
        """
        return javascript

    @expose()
    def get_bank_list(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_BANK
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()

        if searchphrase:
            searchphrase = "%" + searchphrase + "%"
            dbase_query = DBSession.query(Bank). \
                filter(Bank.name.like(searchphrase)). \
                filter(Bank.bln_active == True). \
                order_by(asc(Bank.name)).limit(LIMIT)
        else:
            dbase_query = DBSession.query(Bank). \
                filter(Bank.bln_active == True). \
                order_by(asc(Bank.id)). \
                limit(LIMIT)
        return dbase_query

    @expose()
    def get_modal_new_bank(self, *args, **kwargs):
        html = f"""
            <div class="modal fade" id="dialog_new_bank" tabindex="-1" role="dialog" aria-labelledby="mybankLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('New Bank')}</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_bank'>
                                    <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-4 col-form-label" required for="name">Name</label>
    						<div class="col-md-8">
    							<input id="name" type="text" name="name" class="form-control" required='true'>
    						</div>
    					</div>
    				</div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_bank' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary bank_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script nonce='1234'>
            setFormValidation('#form_new_bank');
            $('#save_new_bank').click(function(){
                 var valid = FormIsValid("#form_new_bank");
                 if(valid){
                    var formserial = getFormData('#form_new_bank');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/setup/save_new_bank?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect(result.redirect, {'bank_id' : result.bank_id});
                        };
                        showNotification(result.status, result.data);
                        return false;
                    });
                 }
            });
            $('.bank_back').click(function(){
                $('#dialog_new_bank').modal('hide');
            });
            $('#dialog_new_bank').modal();
            </script>
         	"""
        return html + javascript

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def get_bank_edit(self, *args, **kwargs):
        bank_id = kwargs.get('bank_id', None)
        if not bank_id: redirect('/setup/banks')
        title = self.get_bank_title_html(bank_id)
        html = self.get_bank_table_html(*args, **kwargs)
        javascript = self.get_javascript_bank_edit_onload()
        return dict(title=title, html=html, javascript=javascript)

    def get_bank_title_html(self, bank_id=None, *args, **kwargs):
        if not bank_id: return ''
        bank = Bank.by_id(bank_id)
        if not bank:
            return ''
        return f"Edit: {bank.name}"

    @expose()
    def get_bank_table_html(self, *args, **kwargs):
        bank_id = kwargs.get('bank_id', None)
        bank = Bank.by_id(bank_id)
        checked = 'checked' if bank.bln_active else ''
        bank_branch_table = self.get_bank_branch_table_html(**kwargs)

        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Edit '{bank.name}'</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button class="btn btn-outline-primary" id='save_edit_bank'>Save</button>
                                <button class="btn btn-primary ml-auto action_back bank_back">Back to Bank List</button>
                            </div>
                        </div>
                        <div class="card-body">
                            <form id='form_edit_bank'>
                                <div style='display: none' class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="bank_id">ID</label>
                                        <div class="col-md-9">
                                            <input id="bank_id" type="text" name="bank_id" value="{bank.id}" class="form-control" required='true'/>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-4 col-form-label" required for="name"> Name</label>
                                        <div class="col-md-8">
                                            <input id="name" type="text" name="name" value="{bank.name}" class="form-control hidden"/>
                                            <input id="name" type="text" name="name" value="{bank.name}" class="form-control" disabled='true'/>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-4 col-form-label" for="active" required>Active</label>
                                        <div class="col-8">
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                    <span class="form-check-sign"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            {bank_branch_table}
        """
        javascript = """
            <script nonce='1234'>
            $(document).ready(function(){
                setFormValidation('#form_edit_bank');
                $('#save_edit_bank').click(function(){
                    var valid = FormIsValid('#form_edit_bank');
                    if(valid){
                        var formserial = getFormData('#form_edit_bank');
                        var data = {data : JSON.stringify(formserial)};
                        $.post('/setup/save_edit_bank?', data, function(data){
                            var result = JSON.parse(data);
                            if(result.success === true){
                                $.redirect('/setup/banks');
                            };
                            showNotification(result.status, result.data);
                            return false;
                        });
                    }
                });

                $('.bank_back').click(function(){
                    $.redirect('/setup/banks');
                });
            });
            </script>
        """
        return html + javascript

    @expose()
    def get_bank_branch_table_html(self, *args, **kwargs):
        bank_id = kwargs.get('bank_id', None)

        dbase_query = DBSession.query(BankBranch). \
            filter(BankBranch.bank_id == bank_id). \
            filter(BankBranch.bln_active == True). \
            order_by(asc(BankBranch.branch)). \
            limit(LIMIT)

        outputlist = []
        for item in dbase_query:
            active = IMG_ACTIVE
            disable_text = 'Remove'
            if not item.bln_active:
                active = IMG_INACTIVE
                disable_text = 'Recover'

            outputlist.append({
                'branch': f"<div class='edit bank_branch_edit' bank_branch_id='{item.id}'>{item.branch}</div>",
                'branch_code': item.branch_code,
                'disable' : f"<div class='line_item_active' active='{item.bln_active}' bank_id='{bank_id}' bank_branch_id='{item.id}'>{disable_text}</div>",
            })
        dbcolumnlist = [
            'branch',
            'branch_code',
            'disable',
        ]
        theadlist = [
            'Branch',
            'Branch Code',
            '',
        ]
        tdclasslist = [
            'action_link',
            'text-right',
            'action_link text-right',
        ]

        bank_branch_itemtable = build_html_table(outputlist, dbcolumnlist, theadlist, "rate_table_line_item_table", tdclasslist)

        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{_('Bank Branches')}</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_bank_branch" class="btn btn-primary ml-auto">{_('New Bank Branch')}</button>
                        </div>
                    </div>

                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {bank_branch_itemtable}
                    </div>
                </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_javascript_bank_edit_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_bank_branch").click(function(){
            var kwargs = {'bank_id': $('#bank_id').attr('value')};
            $('#dialogdiv').load('/setup/get_modal_new_bank_branch?', kwargs, function(data){
                return false;
            });
        });

        $(".bank_branch_edit").click(function(){
            var data = {bank_branch_id : $(this).attr('bank_branch_id'), 'bank_id': $('#bank_id').attr('value')};
            $('#dialogdiv').load('/setup/get_modal_edit_bank_branch?', data, function(data){
                return false;
            });
        });

        $(".line_item_active").click(function(){
            var text = $(this).html();
            var data = {bank_branch_id : $(this).attr('bank_branch_id'), 'bank_id': $('#bank_id').attr('value')};
            var kwargs = {'bank_id': $('#bank_id').attr('value')};
            $.post('/setup/toggle_bank_branch_active?', data, function(data){
                $.redirect('/setup/get_bank_edit?', kwargs);
                return false;
            });
        });
        """
        return javascript

    @expose()
    def toggle_bank_branch_active(self, *args, **kwargs):
        bank_branch_id = kwargs.get('bank_branch_id', None)

        this = BankBranch.by_id(bank_branch_id)
        if not this:
            return 'true'

        if this.bln_active:
            this.bln_active = False
        else:
            this.bln_active = True
        DBSession.flush()
        return 'true'

    @expose()
    def save_new_bank(self, *args, **kwargs):
        bank_name = kwargs.get('name', None)
        usernow = request.identity.get('user', None)
        # Let us first check that the name does not already exist.
        exists = DBSession.query(Bank).\
            filter(Bank.name==bank_name).\
            filter(Bank.bln_active==True).\
            first()
        if exists: return json.dumps({'success': False, 'data': 'Bank name already exists', 'status': 'danger'})

        this = Bank()
        this.name = bank_name
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()

        redirect_url = '/setup/get_bank_edit'
        return json.dumps({'success': True, 'bank_id': this.id, 'redirect': redirect_url})

    @expose()
    def save_edit_bank(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success': False, 'data': 'No data provided'})

        bank_id = data.get('bank_id', None)
        if not bank_id: return json.dumps({'success': False, 'data': 'No bank id provided'})

        this = Bank.by_id(bank_id)
        if not this: return json.dumps({'success': False, 'data': 'No bank found for id provided'})

        this.name = data.get('name', None)
        if not data.get('active', None): this.bln_active = False

        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def get_modal_new_bank_branch(self, *args, **kwargs):
        bank_id = kwargs.get('bank_id', None)
        #Used for all
        html = f"""
            <div class="modal fade" id="dialog_new_bank_branch" tabindex="-1" role="dialog" aria-labelledby="mybank_branchLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-12">
                                <h4 class="card-title">New Bank Branch</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_bank_branch'>
                                <div style='display: none' class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="tbl_bank_branch_id">ID</label>
                                        <div class="col-md-9">
                                            <input id="id" type="text" name="bank_id" value="{bank_id}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="branch">Branch</label>
                                        <div class="col-md-9">
                                            <input id="branch" type="text" name="branch" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="branch_code">Branch Code</label>
                                        <div class="col-md-9">
                                            <input id="branch_code" type="text" name="branch_code" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_bank_branch' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary bank_branch_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        """
        javascript = """
            <script nonce='1234'>
                setFormValidation('#form_new_bank_branch');
                $('#save_new_bank_branch').click(function(){
                    var valid = FormIsValid("#form_new_bank_branch");
                    if(valid){
                        var formserial = $('#form_new_bank_branch').serialize();
                        $.post('/setup/save_new_bank_branch?', formserial, function(data){
                            var result = JSON.parse(data);
                            if(result.success === true){
                                $.redirect(result.redirect, {'bank_id' : result.bank_id});
                            };
                            showNotification(result.status, result.data);
                            return false;
                        });
                    }
                });
                $('.bank_branch_back').click(function(){
                    $('#dialog_new_bank_branch').modal('hide');
                });
                $('#dialog_new_bank_branch').modal();
            </script>
        """
        return html + javascript

    @expose()
    def save_new_bank_branch(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        bank_id = kwargs.get('bank_id', None)
        branch = kwargs.get('branch', None)
        branch_code = kwargs.get('branch_code', None)

        exists = DBSession.query(BankBranch).\
            filter(BankBranch.branch==branch).\
            filter(BankBranch.bln_active==True).\
            first()
        if exists:  return json.dumps({'success': False, 'data': 'Branch name already exists.', 'status': 'danger'})
        exists = DBSession.query(BankBranch).\
            filter(BankBranch.branch_code==branch_code).\
            filter(BankBranch.bln_active==True).\
            first()
        if exists:  return json.dumps({'success': False, 'data': 'Branch  Code already exists.', 'status': 'danger'})

        this = BankBranch()
        this.bank_id = bank_id
        this.branch = branch
        this.branch_code = branch_code
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()

        redirect_url = '/setup/get_bank_edit'
        return json.dumps({'success': True, 'bank_id': bank_id, 'redirect': redirect_url})

    @expose()
    def get_modal_edit_bank_branch(self, *args, **kwargs):
        bank_id = kwargs.get('bank_id', None)
        bank_branch_id = kwargs.get('bank_branch_id', None)
        bank_branch = BankBranch.by_id(bank_branch_id)
        if not bank_branch: return ''

        branch = bank_branch.branch
        branch_code = bank_branch.branch_code
        checked = 'checked' if bank_branch.bln_active else ''

        #Used for all
        html = f"""
            <div class="modal fade" id="dialog_edit_bank_branch" tabindex="-1" role="dialog" aria-labelledby="mybank_branchLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-12">
                                <h4 class="card-title">Edit Bank Branch</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_edit_bank_branch'>
                                <div style='display: none' class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="tbl_bank_branch_id">ID</label>
                                        <div class="col-md-9">
                                            <input id="id" type="text" name="bank_branch_id" value="{bank_branch_id}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="branch">Branch</label>
                                        <div class="col-md-9">
                                            <input id="branch" type="text" name="branch" value="{branch}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="branch_code">Branch Code</label>
                                        <div class="col-md-9">
                                            <input id="branch_code" type="text" name="branch_code" value="{branch_code}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-3 col-form-label" for="active" required>Active</label>
                                        <div class="col-9">
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                    <span class="form-check-sign"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_edit_bank_branch' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary bank_branch_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        """
        javascript = """
            <script nonce='1234'>
                setFormValidation('#form_edit_bank_branch');
                $('#save_edit_bank_branch').click(function(){
                    var valid = FormIsValid("#form_edit_bank_branch");
                    if(valid){
                        var formserial = $('#form_edit_bank_branch').serialize();
                        $.post('/setup/save_edit_bank_branch?', formserial, function(data){
                            var result = JSON.parse(data);
                            if(result.success === true){
                                $.redirect(result.redirect, {'bank_id' : result.bank_id});
                            };
                            return false;
                        });
                    }
                });
                $('.bank_branch_back').click(function(){
                    $('#dialog_edit_bank_branch').modal('hide');
                });
                $('#dialog_edit_bank_branch').modal();
            </script>
        """
        return html + javascript

    @expose()
    def save_edit_bank_branch(self, *args, **kwargs):
        bank_id = kwargs.get('bank_id', None)
        bank_branch_id = kwargs.get('bank_branch_id', None)
        branch = kwargs.get('branch', None)
        branch_code = kwargs.get('branch_code', None)
        active = True if kwargs.get('active', False) else False
        this = BankBranch.by_id(bank_branch_id)

        this.branch = branch
        this.branch_code = branch_code
        this.bln_active = active
        DBSession.flush()
        redirect_url = '/setup/get_bank_edit'
        return json.dumps({'success': True, 'bank_id': this.bank_id, 'redirect': redirect_url})

###############################################################################
# Loaders Questions and Answers
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def loaders(self, *args, **kwargs):
        html = self.get_product_loaders_html(*args, **kwargs)
        javascript = self.get_javascript_product_loaders_onload()
        title = _("Benefit Loaders")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_product_loaders_html(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_PRODUCTLOADER
        usernow = request.identity.get('user', {})
        searchphrase = COMMON.get_searchphrase(**kwargs)
        product_loader_table = self.get_product_loaders_htmltbl(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{_('Benefit Loaders')}</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_product_loader" class="btn btn-primary ml-auto">{_('New Benefit Loader')}</button>
                        </div>
                    </div>
               <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                <input type="text" class="form-control search" name="searchphrase"  id='searchphrase'  value='{searchphrase}' placeholder="Search">
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary" id='action_search'>Search</button>
                                <button class="btn btn-primary" id='btn_reset'>Reset</button>
                            </div>
                        </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive"  id='div_product_loader_table'>
                     {product_loader_table}
                    </div>
                </div>
                </div>
            </div>
        """
        javascript = """
          <script nonce='1234'>
            $("#create_new_product_loader").click(function(){
                $('#dialogdiv').load('/setup/get_modal_new_product_loader?', function(data){
                    return false;
                });
            });
                $('#action_search').click(function(){
                   var kwargs = 'searchphrase='+$('#searchphrase').val();
                   $('#div_product_loader_table').load('/setup/get_product_loaders_htmltbl', kwargs, function(data){
                       return false;
                   });
               })
               $('#btn_reset').click(function(){
                $('#searchphrase').val('').focus();
                   $('#div_product_loader_table').load('/setup/get_product_loaders_htmltbl', 'reset=true', function(data){
                       return false;
                   });
               })
               </script>
               """
        return html + javascript

    @expose()
    def get_product_loaders_htmltbl(self, *args, **kwargs):
        outputlist = []
        dbase_query = self.get_loader_questions_list(**kwargs)
        td = TypeDict()
        for item in dbase_query:
            loader_question_premium_effect_type = td.get_pretty_name('loader_question_premium_effect_type',
                                                                     item.loader_question_premium_effect_type_id)
            outputlist.append({
                'loader_name': f"<div class='edit loader_edit' loader_id='{item.id}'>{item.text}</div>",
                'loader_question_premium_effect_type': loader_question_premium_effect_type
            })
        dbcolumnlist = [
            'loader_name',
            'loader_question_premium_effect_type',
        ]
        theadlist = [
            'Loader Question',
            'Premium Effect Type',
        ]
        tdclasslist = [
            'action_link',
            'text-center',
        ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "loader_table", tdclasslist)
        javascript = """
          <script nonce='1234'>
            $(".loader_edit").click(function(){
              var data = {loader_id : $(this).attr('loader_id')};
              $.redirect('/setup/get_loader_edit', data);
          });

            </script>
          """
        return html + javascript

    @expose()
    def get_javascript_product_loaders_onload(self, *args, **kwargs):
        javascript = """

        """
        return javascript

    @expose()
    def get_modal_new_product_loader(self, *args, **kwargs):
        dropdown_question_premium_effect = self.get_selectbox_question_premium_effect()
        html = f"""
           <div class="modal fade" id="dialog_new_loader" tabindex="-1" role="dialog" aria-labelledby="myloaderLabel" aria-hidden="true">
               <div class="modal-dialog modal-dialog-centered modal-lg">
                   <div class="modal-content">
                       <div class="modal-header">
                           <div class="col-md-6">
                               <h4 class="card-title">New Loader</h4>
                           </div>
                       </div>
                       <div class="modal-body">
                           <form id='form_new_loader' class="d-flex flex-wrap">
                               <div class="col-md-12">
                                   <div class="form-group row">
                                       <label class="col-md-3 col-form-label" required for="loader_name">Loader Question</label>
                                       <div class="col-md-9">
                                           <input id="loader_name" type="text" name="loader_name" maxlength='100' class="form-control" required='true'>
                                       </div>
                                   </div>
                               </div>
                               <div class="col-md-12">
                                   <div class="form-group row">
                                       <label class="col-md-3 col-form-label" for="loader_question_premium_effect_type_id">{_('Premium Effect Type')}</label>
                                         <div class="col-md-9">
                                          {dropdown_question_premium_effect}
                                        </div>
                                   </div>
                               </div>
                           </form>
                       </div>
                       <div class="modal-footer">
                           <button id='save_new_loader' class="btn btn-primary">Save</button>
                       <button class="btn btn-outline-primary product_loader_back" data-dismiss="modal">Cancel</button>
                       </div>
                   </div>
               </div>
           </div>
           """
        javascript = """
       <script nonce='1234'>
           setFormValidation('#form_new_loader');
            $('#save_new_loader').click(function(){
                 var valid = FormIsValid("#form_new_loader");
                 if(valid){
                    var formserial = $('#form_new_loader').serialize();
                    $.post('/setup/save_new_loader?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                          $.redirect(result.redirect, {'loader_id' : result.loader_id});
                        };
                        return false;
                    });
                 }
            });
           $('.product_loader_back').click(function(){
                $('#dialog_new_loader').modal('hide');
           });
           $('#dialog_new_loader').modal();
         </script>
        """
        return html + javascript

    @expose()
    def save_new_loader(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = LoaderQuestion()
        this.text = kwargs.get('loader_name', None)
        this.loader_question_premium_effect_type_id = kwargs.get('loader_question_premium_effect_type_id', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        redirect_url = '/setup/get_loader_edit'
        return json.dumps({'success': True, 'loader_id': this.id, 'redirect': redirect_url})

    def get_selectbox_question_premium_effect(self, selected=None, *args, **kwargs):
        kwargs['id'] = 'loader_question_premium_effect_type_id'
        kwargs['selected'] = selected
        kwargs['outputdict'] = TypeDict().get_dict_of_types("loader_question_premium_effect_type")
        return create_selectbox_html(**kwargs)

    @expose()
    def get_loader_questions_list(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_PRODUCTLOADER
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()
        if searchphrase:
            searchphrase = f'%{searchphrase}%'
            dbase_query = DBSession.query(LoaderQuestion). \
                filter(or_(
                LoaderQuestion.text.like(searchphrase),
            )). \
                order_by(asc(LoaderQuestion.text)). \
                limit(LIMIT)
        else:
            dbase_query = DBSession.query(LoaderQuestion). \
                filter(LoaderQuestion.bln_active == kwargs.get('active', True)). \
                order_by(asc(LoaderQuestion.text)). \
                limit(LIMIT)
        return dbase_query

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def get_loader_edit(self, *args, **kwargs):
        loader_id = kwargs.get('loader_id', None)
        if not loader_id: redirect('/setup/loaders')
        html = self.get_edit_loader_html(*args, **kwargs)
        javascript = self.get_javascript_loader_onload()
        title = self.get_loader_title_html(loader_id)
        return dict(title=title, html=html, javascript=javascript)

    def get_loader_title_html(self, loader_id=None, *args, **kwargs):
        if not loader_id: return ''
        loader = LoaderQuestion.by_id(loader_id)
        if not loader: return ''
        return f"Edit: {loader.text}"

    @expose('rocket.templates.generic')
    def get_edit_loader_html(self, *args, **kwargs):
        loader_id = kwargs.get('loader_id', None)
        loader = LoaderQuestion.by_id(loader_id)
        checked = 'checked' if loader.bln_active else ''
        td = TypeDict()
        dropdown_question_premium_effect = self.get_selectbox_question_premium_effect(
            loader.loader_question_premium_effect_type_id)
        selected_type = td.get_pretty_name('loader_question_premium_effect_type',
                                           loader.loader_question_premium_effect_type_id)
        detail_html = self.get_loader_question_answer_html(**kwargs)

        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Edit '{loader.text}'</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button class="btn btn-primary ml-auto action_back loader_back">Back to Loader List</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <form id='form_edit_loader' class="d-flex flex-wrap">
                            <div style='display: none' class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="loader_id">ID</label>
                                    <div class="col-md-9">
                                        <input id="id" type="text" name="loader_id" value="{loader.id}" class="form-control"
                                            required='true'>
                                      <input id="selected_type" type="text" name="selected_type" value="{selected_type}" class="form-control"
                                            required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-6 col-form-label" required for="loader_name">Loader Question</label>
                                    <div class="col-md-6">
                                        <input id="loader_name" type="text" maxlength='100' name="loader_name" value="{loader.text}"
                                            class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>

                           <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-6 col-form-label" required for="loader_question_premium_effect_type_id">Premium Effect Type</label>
                                    <div class="col-md-6">
                                        {dropdown_question_premium_effect}
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Active</label>
                                    <div class="form-check">
                                        <label class="form-check-label">
                                            <input class="form-check-input" type="checkbox" name='active' {checked}>
                                            <span class="form-check-sign"></span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                          </form>
                               <div class="col-md-12 text-right">
                              <button id='save_edit_loader' class="btn btn-primary">Save</button>
                            </div>
                    </div>
                </div>
            </div>
        </div>
          <div id="div_loader_detail" class="row">
             {detail_html}
          </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
           $('.loader_back').click(function(){
                   $.redirect('/setup/loaders');
              });
        </script>
        """
        return html + javascript

    @expose()
    def get_loader_question_answer_html(self, *args, **kwargs):

        loader_id = kwargs.get('loader_id', None)
        outputlist = []
        loader_question = LoaderQuestion.by_id(loader_id)
        dbase_query = LoaderQuestionAnswer.by_attr_all('loader_question_id', loader_id)

        td = TypeDict()
        amount = td.get_id_of_name('loader_question_premium_effect_type', 'amount')
        percentage = td.get_id_of_name('loader_question_premium_effect_type', 'percentage')

        loader_type = loader_question.loader_question_premium_effect_type_id

        for item in dbase_query:
            value = None
            if loader_type == amount:
                this = LoaderQuestionAnswerAmount.by_attr_first('loader_question_answer_id', item.id)
                if this and this.amount:
                    value = get_currency_by_locale(this.amount)

            if loader_type == percentage:
                this = LoaderQuestionAnswerPercentage.by_attr_first('loader_question_answer_id', item.id)
                if this and this.percentage:
                    value = f"{this.percentage}%"

            outputlist.append({
                'answer_text': f"<div class='edit loader_question_answer_edit' loader_id='{loader_id}' loader_question_answer_id='{item.id}'>{item.answer_text}</div>",
                'value': value,
            })

        dbcolumnlist = [
            'answer_text',
            'value',
        ]
        theadlist = [
            'Answer',
            'Type',
        ]
        tdclasslist = [
            'action_link',
            'text-center',
        ]
        loaderedit_table = build_html_table(outputlist, dbcolumnlist, theadlist, "loader_table", tdclasslist)
        html = f"""
               <div class="col-md-12">
        <div id="div_loader_question">
            <div class="card mh_260">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Loader Answer List</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_loaderdetail" class="btn btn-primary ml-auto">New Answer</button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div style='display: none' class="col-md-12">
                        <div class="form-group row">
                            <label class="col-md-3 col-form-label" required for="loader_id">ID</label>
                            <div class="col-md-9">
                                <input id="loader_id" type="text" name="loader_id" value="{loader_id}" class="form-control" required='true'>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive">
                        {loaderedit_table}
                    </div>
                </div>
            </div>
            </div>
        </div>
           """
        javascript = """
        <script nonce='1234'>
          $(".loader_question_answer_edit").click(function(){
                   var kwargs = {loader_question_answer_id : $(this).attr('loader_question_answer_id'), 'selected_type': $('#selected_type').attr('value'), 'loader_id': $(this).attr('loader_id')};
                  $('#dialogdiv').load('/setup/get_modal_edit_loader_question?', kwargs, function(data){
                 return false;
                   });
              });
                   $("#create_new_loaderdetail").click(function(){
                var kwargs = {'loader_id': $('#loader_id').attr('value'), 'selected_type': $('#selected_type').attr('value'),
                }
                $('#dialogdiv').load('/setup/get_modal_new_loader_question_answer?', kwargs, function(data){
                    return false;
                });
            });

              </script>
        """
        return html + javascript

    @expose()
    def get_modal_edit_loader_question(self, *args, **kwargs):
        loader_question_answer_id = kwargs.get('loader_question_answer_id', None)
        loader_type = kwargs.get('selected_type', '')
        loader_id = kwargs.get('loader_id', None)
        if not loader_question_answer_id: return ''
        this = LoaderQuestionAnswer.by_id(loader_question_answer_id)
        if not this: return ''
        checked = 'checked' if this.bln_active else ''

        type_fields = ''
        if loader_type == "Amount":
            loader_question_answer = LoaderQuestionAnswerAmount.by_attr_first('loader_question_answer_id',
                                                                              loader_question_answer_id)
            type_fields = f"""
                  <div class="col-md-12">
					<div class="form-group row">
						<label class="col-md-3 col-form-label" required for="amount">Amount</label>
						<div class="col-md-9">
							<input id="amount" type="text" name="number" class="form-control" required='true' value='{loader_question_answer.amount}'>
						</div>
					</div>
				</div>
                   """
        if loader_type == "Percentage":
            loader_question_percentage = LoaderQuestionAnswerPercentage.by_attr_first('loader_question_answer_id',
                                                                                      loader_question_answer_id)
            type_fields = f"""
              <div class="col-md-12">
					<div class="form-group row">
						<label class="col-md-3 col-form-label" required for="percentage">Percentage</label>
						<div class="col-md-9">
							<input id="percentage" type="number" name="percentage" class="form-control" required='true' value='{loader_question_percentage.percentage}'>
						</div>
					</div>
				</div>
                 """
        html = f"""
        <div class="modal fade" id="dialog_edit_loader_question" tabindex="-1" role="dialog" aria-labelledby="mytbl_loader_questionLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">Edit Loader Answer</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                       <form id='form_edit_loader_question_answer'>
		                    <div style='display: none' class="col-md-6">
			<div class="form-group row">
				<label class="col-md-3 col-form-label" required for="loader_question_answer_id">ID</label>
				<div class="col-md-9">
					<input id="id" type="text" name="loader_question_answer_id" value="{this.id}" class="form-control" required='true'>
					<input id="loader_id" type="text" name="loader_id" value="{loader_id}" class="form-control" required='true'>
				</div>
			</div>
		 </div>
	                    	<div class="col-md-12">
			                    <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="answer_text">Answer Text</label>
		                    		<div class="col-md-9">
					              <input id="answer_text" type="text" name="answer_text" value="{this.answer_text}" class="form-control" required='true'>
			                	</div>
		                    	</div>
	                    	</div>
                          {type_fields}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-3 col-form-label" for="active" required>Active</label>
                                    <div class="col-9">
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                <span class="form-check-sign"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
		              </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_edit_loader_question' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary loader_question_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
            setFormValidation('#form_edit_loader_question_answer');
        $('#save_edit_loader_question').click(function(){
             var valid = FormIsValid("#form_edit_loader_question_answer");
             if(valid){
                var formserial = getFormData('#form_edit_loader_question_answer');
                $.post('/setup/save_edit_loaderdetails?', formserial, function(data){
                    var result = JSON.parse(data);

                    if(result.success === true){
                       $('#dialog_edit_loader_question').modal('hide');
                            $('#div_loader_question').load('/setup/get_loader_question_answer_html?', result, function(data){
                                 return false;
                            });

                    };
                    return false;
                });
             }
        });
        $('.loader_question_back').click(function(){
            $('#dialog_edit_loader_question').modal('hide');
        });
        $('#dialog_edit_loader_question').modal();
        </script>
        """
        return html + javascript

    @expose()
    def get_loader_question_list(self, *args, **kwargs):
        loader_question_id = kwargs.get('loader_id', None)

        if loader_question_id:
            dbase_query = DBSession.query(LoaderQuestionAnswer). \
                filter(
                LoaderQuestionAnswer.loader_question_id == loader_question_id). \
                filter(LoaderQuestionAnswer.bln_active == True). \
                order_by(asc(LoaderQuestionAnswer.loader_question_id)).limit(LIMIT)
        else:
            dbase_query = DBSession.query(LoaderQuestionAnswer). \
                filter(LoaderQuestionAnswer.bln_active == True). \
                order_by(asc(LoaderQuestionAnswer.id)). \
                limit(LIMIT)
        return dbase_query

    @expose()
    def get_javascript_loader_onload(self, *args, **kwargs):
        javascript = """
        $('#save_edit_loader').click(function(){
            var valid = FormIsValid("#form_edit_loader");
            if(valid){
                var formserial = $('#form_edit_loader').serialize();
                $.post('/setup/save_edit_loader_detail?', formserial, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $.redirect(result.redirect, {'loader_id' : result.loader_id});
                    };
                    return false;
                });
            }
        });
        """
        return javascript

    @expose()
    def get_modal_new_loader_question_answer(self, *args, **kwargs):
        loader_id = kwargs.get('loader_id', None)
        selected_type = kwargs.get('selected_type', None)
        input_field = selected_type.lower()
        html = f"""
        <div class="modal fade" id="dialog_new_loader_question_answer" tabindex="-1" role="dialog" aria-labelledby="myloaderdetailLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">New Loader Detail</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_new_loaderdetail'>
                            <div class="col-md-12 hidden">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="loader_id">Loader _ID</label>
                                    <div class="col-md-9">
                                        <input id="loader_id" type="text" name="loader_id" class="form-control" required='true' value='{loader_id}'>
                                        <input id="selected_type" type="text" name="selected_type" class="form-control" required='true' value='{selected_type}'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                    <div class="form-group row">
                                      <label class="col-md-4 col-form-label" required for="answer_text">Answer</label>
                                      <div class="col-md-8">
                                         <input id="answer_text" type="text" name="answer_text" class="form-control" required='true'>
                                       </div>
                                    </div>
                             </div>
                               <div class="col-md-12">
                                    <div id="hide_field" >
                                      <div class="form-group row">
                                         <label class="col-md-4 col-form-label" for="">{selected_type}</label>
                                            <div class="col-md-8">
                                              <input id="{input_field}" type="text" name="{input_field}" class="form-control" required='true'>
                                            </div>
                                     </div>
                                    </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_new_loaderdetail' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary loader_question_answer_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        $(document).ready(function(){
            if($('#selected_type').attr('value') =='None')
            {
              $("#hide_field").hide();
            }
            setFormValidation('#form_new_loaderdetail');
            $('#save_new_loaderdetail').click(function(){
                 var valid = FormIsValid("#form_new_loaderdetail");
                 if(valid){
                    var formserial = $('#form_new_loaderdetail').serialize();
                    $.post('/setup/save_new_loaderdetails?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                           $.redirect(result.redirect, {'loader_id' : result.loader_id});
                        };
                        return false;
                    });
                 }
            });
            $('.loader_question_answer_back').click(function(){
                $('#dialog_new_loader_question_answer').modal('hide');
            });
            $('#dialog_new_loader_question_answer').modal();
        });
        </script>
     	"""
        return html + javascript

    @expose()
    def save_edit_loader_detail(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        loader_id = kwargs.get('loader_id', None)
        this = LoaderQuestion.by_id(loader_id)
        if not this: return ''
        this.text = kwargs.get('loader_name', None)
        this.loader_question_premium_effect_type_id = kwargs.get('loader_question_premium_effect_type_id', None)
        this.added_by = usernow.id
        DBSession.flush()
        redirect_url = '/setup/get_loader_edit'
        return json.dumps({'success': True, 'loader_id': loader_id, 'redirect': redirect_url})

    @expose()
    def save_new_loaderdetails(self, *args, **kwargs):
        dict_loader_question_answer = {
            'loader_question_id': kwargs.get('loader_id', None),
            'answer_text': kwargs.get("answer_text", None),
        }
        loader_question_answer_id = self.save_new_loader_question_answer(**dict_loader_question_answer)

        percentage = kwargs.get('percentage', None)
        if percentage:
            dict_percentage = {
                'loader_question_answer_id': loader_question_answer_id,
                'percentage': kwargs.get('percentage', None),
            }
            self.save_new_loader_question_answer_percentage(**dict_percentage)
        amount = kwargs.get('amount', None)
        if amount:
            dict_amount = {
                'loader_question_answer_id': loader_question_answer_id,
                'amount': kwargs.get("amount", None),
            }
            self.save_new_loader_question_answer_amount(**dict_amount)

        loader_id = kwargs.get("loader_id")
        redirect_url = '/setup/get_loader_edit'
        return json.dumps({'success': True, 'loader_id': loader_id, 'redirect': redirect_url})

    @expose()
    def save_new_loader_question_answer(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = LoaderQuestionAnswer()
        this.loader_question_id = kwargs.get('loader_question_id', None)
        this.answer_text = kwargs.get('answer_text', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return this.id

    @expose()
    def save_new_loader_question_answer_amount(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = LoaderQuestionAnswerAmount()
        this.loader_question_answer_id = kwargs.get('loader_question_answer_id', None)
        this.amount = kwargs.get('amount', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return this.id

    @expose()
    def save_new_loader_question_answer_percentage(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = LoaderQuestionAnswerPercentage()
        this.loader_question_answer_id = kwargs.get('loader_question_answer_id', None)
        this.percentage = kwargs.get('percentage', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return this.id

    @expose()
    def save_edit_loaderdetails(self, *args, **kwargs):

        dict_loader_question_answer = {
            'loader_question_answer_id': kwargs.get('loader_question_answer_id', None),
            'answer_text': kwargs.get("answer_text", None),
            'active': kwargs.get("active", None)
            }
        self.save_edit_loader_question_answer(**dict_loader_question_answer)

        percentage = kwargs.get('percentage', None)
        if percentage:
            dict_percentage = {
                'loader_question_answer_id': kwargs.get('loader_question_answer_id', None),
                'percentage': kwargs.get('percentage', None),
                'active': kwargs.get("active", None)
                }
            self.save_edit_loader_question_answer_percentage(**dict_percentage)

        amount = kwargs.get('amount', None)
        if amount:
            dict_amount = {
                'loader_question_answer_id': kwargs.get('loader_question_answer_id', None),
                'amount': kwargs.get("amount", None),
                'active': kwargs.get("active", None)
            }
            self.save_edit_loader_question_answer_amount(**dict_amount)

        return json.dumps({'success': True, 'loader_id': kwargs.get('loader_id', None)})

    @expose()
    def save_edit_loader_question_answer(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = LoaderQuestionAnswer.by_id(kwargs.get('loader_question_answer_id', None))
        if not this: return ''
        this.answer_text = kwargs.get('answer_text', None)
        this.added_by = usernow.id
        if not kwargs.get('active', None): this.bln_active = False
        DBSession.flush()
        return json.dumps({'success': True})

    @expose()
    def save_edit_loader_question_answer_amount(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = LoaderQuestionAnswerAmount.by_attr_first('loader_question_answer_id',
                                                        kwargs.get('loader_question_answer_id', None))
        if not this: return ''
        this.amount = kwargs.get('amount', None)
        this.added_by = usernow.id
        if not kwargs.get('active', None): this.bln_active = False
        DBSession.flush()
        return json.dumps({'success': True})

    @expose()
    def save_edit_loader_question_answer_percentage(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = LoaderQuestionAnswerPercentage.by_attr_first('loader_question_answer_id',
                                                            kwargs.get('loader_question_answer_id', None))
        if not this: return ''
        this.percentage = kwargs.get('percentage', None)
        this.added_by = usernow.id
        if not kwargs.get('active', None): this.bln_active = False
        DBSession.flush()
        return json.dumps({'success': True})

###############################################################################
# Claim Questions and Answers
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def claim_questions(self, *args, **kwargs):
        html = self.get_claim_question_html(*args, **kwargs)
        javascript = self.get_javascript_product_claim_questions_onload()
        title = _("Claim Questions")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_claim_question_html(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_CLAIMQUESTION
        usernow = request.identity.get('user', {})
        searchphrase = COMMON.get_searchphrase(**kwargs)
        claim_question_table = self.get_claim_question_htmltbl(**kwargs)
        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('Claim Questions')}</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_claim_question" class="btn btn-primary ml-auto">{_('New Claim Question')}</button>
                            </div>
                        </div>
                   <div class="row d-flex align-items-center">
                                <div class="col-md-4">
                                    <input type="text" class="form-control search" name="searchphrase"  id='searchphrase'  value='{searchphrase}' placeholder="Search">
                                </div>
                                <div class="col-md-8">
                                    <button class="btn btn-primary" id='action_search'>Search</button>
                                    <button class="btn btn-primary" id='btn_reset'>Reset</button>
                                </div>
                            </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive"  id='div_claim_question_table'>
                         {claim_question_table}
                        </div>
                    </div>
                    </div>
                </div>
            """
        return html

    @expose()
    def get_claim_question_htmltbl(self, *args, **kwargs):
        dbase_query = self.get_claim_question_list(**kwargs)
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'text': f"<div class='edit claim_question_edit' claim_question_id='{item.id}'>{item.text}</div>",
                'number_of_answers': len(self.get_claim_question_answer_list(claim_question_id=item.id)),
            })
        dbcolumnlist = [
            'text',
            'number_of_answers',
        ]
        theadlist = [
            'Question Text',
            'Number of Answers',
        ]
        tdclasslist = [
            'action_link',
            'text-center',
        ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "claim_question_table", tdclasslist)
        javascript = """
        <script nonce='1234'>
            $(".claim_question_edit").click(function(){
                var data = {claim_question_id : $(this).attr('claim_question_id')};
                $.redirect('/setup/get_claim_question_edit', data);
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_javascript_product_claim_questions_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_claim_question").click(function(){
            $('#dialogdiv').load('/setup/get_modal_new_claim_question?', function(data){
                return false;
            });
        });
        $('#action_search').click(function(){
           var kwargs = 'searchphrase='+$('#searchphrase').val();
           $('#div_claim_question_table').load('/setup/get_claim_question_htmltbl', kwargs, function(data){
               return false;
           });
       })
       $('#btn_reset').click(function(){
           $('#searchphrase').val('').focus();
           $('#div_claim_question_table').load('/setup/get_claim_question_htmltbl', 'reset=true', function(data){
               return false;
           });
       })
       """
        return javascript

    @expose()
    def get_modal_new_claim_question(self, *args, **kwargs):
        claim_question_id = kwargs.get('claim_question_id', None)
        question = None
        title = 'New Claim Question'
        hidden_input = ''
        if claim_question_id:
            question = ClaimQuestion.by_id(claim_question_id)
            if question:
                title = 'Edit Claim Question'
            hidden_input = get_hidden_input(**{'id': 'claim_question_id', 'value': claim_question_id})
        text = question.text if question else ''
        html = f"""
               <div class="modal fade" id="dialog_claim_question" tabindex="-1" role="dialog" aria-labelledby="myclaim_questionLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">{title}</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_claim_question'>
                                {hidden_input}
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="text">Question Text</label>
                                    <div class="col-md-9">
                                        <textarea name='text' type="text" class="form-control" rows="4" maxlength='1024'>{text}</textarea>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_claim_question' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary claim_question_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script nonce='1234'>
                var form_id = '#form_claim_question'
                setFormValidation(form_id);
                $('#save_new_claim_question').click(function(){
                     var valid = FormIsValid(form_id);
                     if(valid){
                        var formserial = $(form_id).serialize();
                        $.post('/setup/save_new_claim_question?', formserial, function(data){
                            $.redirect('/setup/claim_questions');
                            return false;
                        });
                     }
                });
                $('.claim_question_back').click(function(){
                    $('#dialog_claim_question').modal('hide');
                });
                $('#dialog_claim_question').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def save_new_claim_question(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        claim_question_id = kwargs.get('claim_question_id', None)
        if not claim_question_id:
            this = ClaimQuestion()
            this.text = kwargs.get('text', None)
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
        else:
            this = ClaimQuestion.by_id(claim_question_id)
            if not this:
                return 'false'
            this.text = kwargs.get('text', None)
            this.bln_active = True if kwargs.get('active', None) else False
            DBSession.flush()
        return str(this.id)

    @expose()
    def get_claim_question_list(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_CLAIMQUESTION
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()
        if searchphrase:
            searchphrase = f'%{searchphrase}%'
            dbase_query = DBSession.query(ClaimQuestion). \
                filter(or_(
                ClaimQuestion.text.like(searchphrase),
            )). \
                filter(ClaimQuestion.bln_active == kwargs.get('active', True)). \
                order_by(asc(ClaimQuestion.id)). \
                limit(LIMIT)
        else:
            dbase_query = DBSession.query(ClaimQuestion). \
                filter(ClaimQuestion.bln_active == kwargs.get('active', True)). \
                order_by(asc(ClaimQuestion.id)). \
                limit(LIMIT)
        return dbase_query

    def get_claim_question_answer_list(self, *args, **kwargs):
        claim_question_id = kwargs.get('claim_question_id', None)
        dbase_query = ClaimQuestionAnswer.by_attr_all('claim_question_id', claim_question_id)
        return dbase_query

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def get_claim_question_edit(self, *args, **kwargs):
        claim_question_id = kwargs.get('claim_question_id', None)
        if not claim_question_id:
            redirect('/setup/claim_questions')
        html = self.get_edit_claim_question_html(*args, **kwargs)
        javascript = self.get_javascript_claim_question_onload()
        title = self.get_claim_question_title_html(claim_question_id)
        return dict(title=title, html=html, javascript=javascript)

    def get_claim_question_title_html(self, claim_question_id=None, *args, **kwargs):
        if not claim_question_id:
            return ''
        claim_question = ClaimQuestion.by_id(claim_question_id)
        if not claim_question:
            return ''
        return f"Edit Claim Question: {claim_question.id}"

    @expose('rocket.templates.generic')
    def get_edit_claim_question_html(self, *args, **kwargs):
        claim_question_id = kwargs.get('claim_question_id', None)
        claim_question = ClaimQuestion.by_id(claim_question_id)
        checked = 'checked' if claim_question.bln_active else ''
        detail_html = self.get_claim_question_answer_html(**kwargs)

        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Edit Claim Question: '{claim_question.id}'</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button class="btn btn-primary ml-auto action_back claim_question_back">Back to Claim Questions List</button>
                            </div>
                        </div>
                        <div class="card-body">
                            <form id='form_edit_claim_question' class="d-flex flex-wrap">
                                <div style='display: none' class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="claim_question_id">ID</label>
                                        <div class="col-md-9">
                                            <input id="id" type="text" name="claim_question_id" value="{claim_question.id}" class="form-control"
                                                required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-6 col-form-label" required for="claim_question">Cliam Quesion</label>
                                        <div class="col-md-6">
                                            <input id="claim_question" type="text" maxlength='100' name="claim_question" value="{claim_question.text}"
                                                class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label">Active</label>
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="checkbox" name='active' {checked}>
                                                <span class="form-check-sign"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                              </form>
                                   <div class="col-md-12 text-right">
                                  <button id='save_edit_claim_question' class="btn btn-primary">Save</button>
                                </div>
                        </div>
                    </div>
                </div>
            </div>
              <div id="div_claim_question_detail" class="row">
                 {detail_html}
              </div>
            </div>
            """
        javascript = """
            <script nonce='1234'>
               $('.claim_question_back').click(function(){
                       $.redirect('/setup/claim_questions');
                  });
            </script>
            """
        return html + javascript

    @expose()
    def get_claim_question_answer_html(self, *args, **kwargs):

        claim_question_id = kwargs.get('claim_question_id', None)
        outputlist = []
        dbase_query = self.get_claim_question_answer_list(claim_question_id=claim_question_id)

        for item in dbase_query:
            outputlist.append({
                'answer_text': f"<div class='edit claim_question_answer_edit' claim_question_id='{claim_question_id}' claim_question_answer_id='{item.id}'>{item.answer_text}</div>",
            })

        dbcolumnlist = [
            'answer_text',
        ]
        theadlist = [
            'Answer',
        ]
        tdclasslist = [
            'action_link',
        ]
        claim_question_edit_table = build_html_table(outputlist, dbcolumnlist, theadlist, "claim_question_table", tdclasslist)
        html = f"""
                   <div class="col-md-12">
            <div id="div_claim_question">
                <div class="card mh_260">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Answer List</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_claim_questiondetail" class="btn btn-primary ml-auto">New Answer</button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div style='display: none' class="col-md-12">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="claim_question_answer_id">ID</label>
                                <div class="col-md-9">
                                    <input id="claim_question_id" type="text" name="claim_question_id" value="{claim_question_id}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="table-responsive">
                            {claim_question_edit_table}
                        </div>
                    </div>
                </div>
                </div>
            </div>
               """
        javascript = """
            <script nonce='1234'>
              $(".claim_question_answer_edit").click(function(){
                       var kwargs = {claim_question_answer_id : $(this).attr('claim_question_answer_id'), 'selected_type': $('#selected_type').attr('value'), 'claim_question_id': $(this).attr('claim_question_id')};
                      $('#dialogdiv').load('/setup/get_modal_edit_claim_question_answer?', kwargs, function(data){
                     return false;
                       });
                  });
                       $("#create_new_claim_questiondetail").click(function(){
                    var kwargs = {'claim_question_id': $('#claim_question_id').attr('value'), 'selected_type': $('#selected_type').attr('value'),
                    }
                    $('#dialogdiv').load('/setup/get_modal_new_claim_question_answer?', kwargs, function(data){
                        return false;
                    });
                });

                  </script>
            """
        return html + javascript

    @expose()
    def get_modal_edit_claim_question_answer(self, *args, **kwargs):
        claim_question_answer_id = kwargs.get('claim_question_answer_id', None)
        claim_question_id = kwargs.get('claim_question_id', None)
        if not claim_question_answer_id:
            return ''
        this = ClaimQuestionAnswer.by_id(claim_question_answer_id)
        if not this:
            return ''
        checked = 'checked' if this.bln_active else ''
        html = f"""
            <div class="modal fade" id="dialog_edit_claim_question" tabindex="-1" role="dialog" aria-labelledby="mytbl_cliam_questionLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">Edit Claim Question Answer</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                           <form id='form_edit_claim_question_answer'>
                                <div style='display: none' class="col-md-6">
                                    <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="claim_question_answer_id">ID</label>
                                        <div class="col-md-9">
                                        <input id="id" type="text" name="claim_question_answer_id" value="{this.id}" class="form-control" required='true'>
                                        <input id="claim_question_id" type="text" name="claim_question_id" value="{claim_question_id}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="answer_text">Answer Text</label>
                                        <div class="col-md-9">
                                        <input id="answer_text" type="text" name="answer_text" value="{this.answer_text}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <label class="col-3 col-form-label" for="active" required>Active</label>
                                        <div class="col-9">
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                    <span class="form-check-sign"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                          </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_edit_claim_question' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary claim_question_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
        <script nonce='1234'>
            setFormValidation('#form_edit_claim_question_answer');
            $('#save_edit_claim_question').click(function(){
                 var valid = FormIsValid("#form_edit_claim_question_answer");
                 if(valid){
                    var formserial = getFormData('#form_edit_claim_question_answer');
                    $.post('/setup/save_edit_claim_question_answer?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                           $('#dialog_edit_claim_question').modal('hide');
                                $('#div_claim_question').load('/setup/get_claim_question_answer_html?', result, function(data){
                                     return false;
                                });
                        };
                        return false;
                    });
                 }
            });
            $('.claim_question_back').click(function(){
                $('#dialog_edit_claim_question').modal('hide');
            });
            $('#dialog_edit_claim_question').modal();
        </script>
        """
        return html + javascript

    @expose()
    def get_javascript_claim_question_onload(self, *args, **kwargs):
        javascript = """
            $('#save_edit_claim_question').click(function(){
                var valid = FormIsValid("#form_edit_claim_question");
                if(valid){
                    var formserial = $('#form_edit_claim_question').serialize();
                    $.post('/setup/save_edit_claim_question_detail?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect(result.redirect, {'claim_question_id' : result.claim_question_id});
                        };
                        return false;
                    });
                }
            });
            """
        return javascript

    @expose()
    def get_modal_new_claim_question_answer(self, *args, **kwargs):
        claim_question_id = kwargs.get('claim_question_id', None)
        html = f"""
            <div class="modal fade" id="dialog_new_claim_question_answer" tabindex="-1" role="dialog" aria-labelledby="myclaimquestiondetailLabel"
                aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">New Claim Question Answer</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_claimquestiondetail'>
                                <div class="col-md-12 hidden">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="claim_question_id">Claim Question ID</label>
                                        <div class="col-md-9">
                                            <input id="claim_question_id" type="text" name="claim_question_id" class="form-control" required='true' value='{claim_question_id}'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                        <div class="form-group row">
                                          <label class="col-md-4 col-form-label" required for="answer_text">Answer</label>
                                          <div class="col-md-8">
                                             <input id="answer_text" type="text" name="answer_text" class="form-control" required='true'>
                                           </div>
                                        </div>
                                 </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_claimquestiondetails' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary claim_question_answer_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script nonce='1234'>
            $(document).ready(function(){
                setFormValidation('#form_new_claimquestiondetail');
                $('#save_new_claimquestiondetails').click(function(){
                     var valid = FormIsValid("#form_new_claimquestiondetail");
                     if(valid){
                        var formserial = $('#form_new_claimquestiondetail').serialize();
                        $.post('/setup/save_new_claimquestiondetails?', formserial, function(data){
                            var result = JSON.parse(data);
                            if(result.success === true){
                               $.redirect(result.redirect, {'claim_question_id' : result.claim_question_id});
                            };
                            return false;
                        });
                     }
                });
                $('.claim_question_answer_back').click(function(){
                    $('#dialog_new_claim_question_answer').modal('hide');
                });
                $('#dialog_new_claim_question_answer').modal();
            });
            </script>
            """
        return html + javascript

    @expose()
    def save_edit_claim_question_detail(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        claim_question_id = kwargs.get('claim_question_id', None)
        this = ClaimQuestion.by_id(claim_question_id)
        if not this:
            return ''
        this.text = kwargs.get('claim_question', None)
        this.added_by = usernow.id
        if not kwargs.get('active', None):
            this.bln_active = False
            redirect_url = '/setup/claim_questions'
        else:
            redirect_url = '/setup/get_claim_question_edit'
        DBSession.flush()
        return json.dumps(
            {'success': True, 'claim_question_id': claim_question_id, 'redirect': redirect_url})

    @expose()
    def save_new_claimquestiondetails(self, *args, **kwargs):
        dict_claim_question_answer = {
            'claim_question_id': kwargs.get('claim_question_id', None),
            'answer_text': kwargs.get("answer_text"),
        }
        self.save_new_claim_question_answer(**dict_claim_question_answer)
        claim_question_id = kwargs.get('claim_question_id', None)
        redirect_url = '/setup/get_claim_question_edit'
        return json.dumps({'success': True, 'claim_question_id': claim_question_id, 'redirect': redirect_url})

    @expose()
    def save_new_claim_question_answer(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = ClaimQuestionAnswer()
        this.claim_question_id = kwargs.get('claim_question_id', None)
        this.answer_text = kwargs.get('answer_text', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return this.id

    @expose()
    def save_edit_claim_question_answer(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        claim_question_answer_id = kwargs.get('claim_question_answer_id', None)
        this = ClaimQuestionAnswer.by_id(claim_question_answer_id)
        if not this:
            return json.dumps({'success': False})

        this.answer_text = kwargs.get('answer_text', None)
        this.added_by = usernow.id
        if not kwargs.get('active', None):
            this.bln_active = False
        DBSession.flush()
        return json.dumps({'success': True, 'claim_question_id': kwargs.get('claim_question_id', None)})

###############################################################################
# Rounding Rate Tables
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def rounding_rates(self, *args, **kwargs):
        html = self.get_rounding_rate_html(*args, **kwargs)
        javascript = self.get_javascript_rounding_rate_onload()
        title = "Rounding Rate"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_rounding_rate_html(self, *args, **kwargs):
        dbase_query = RoundingRate.get_all('id')
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'name' : "<div class='edit action_link rounding_rate_edit' rounding_rate_id='{1}'>{0}</div>".format(item.name, item.id),
                             })
        dbcolumnlist=[
                'name',
                    ]
        theadlist=[
                'Name',
                ]
        tdclasslist = [
            'action_link',
        ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "rounding_rate_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Rounding Rate</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_rounding_rate" class="btn btn-primary ml-auto">Create New Rounding Rate</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input type="text" class="form-control search" name="searchphrase" placeholder="Search">
                        </div>
                        <div class="col-md-8">
                            <button class="btn btn-primary action_search">Search</button>
                            <button class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {htmltbl}
                    </div>
                </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_javascript_rounding_rate_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_rounding_rate").click(function(){
            $('#dialogdiv').load('/setup/get_modal_rounding_rate?', function(data){
                return false;
            });
        });
        $(".rounding_rate_edit").click(function(){
            var data = {rounding_rate_id : $(this).attr('rounding_rate_id')};
            $.redirect('/setup/rounding_rate_items', data);
        });
        """
        return javascript

    @expose()
    def get_modal_rounding_rate(self, *args, **kwargs):
        rounding_rate_id = kwargs.get('rounding_rate_id', None)
        rounding_rate = None
        hidden_input = ''
        if rounding_rate_id:
            rounding_rate = RoundingRate.by_id(rounding_rate)
            hidden_input = get_hidden_input(**{'id': 'rounding_rate_id', 'value': rounding_rate_id})
        name = rounding_rate.name if rounding_rate else ''
        html = f"""
        <div class="modal fade" id="dialog_rounding_rate" tabindex="-1" role="dialog" aria-labelledby="myrounding_rateLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">New Rounding Rate</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_rounding_rate'>
                        {hidden_input}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="name">Name</label>
                                    <div class="col-md-9">
                                        <input id="name" value="{name}" type="text" name="name" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_rounding_rate' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary rounding_rate_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        var form_id = '#form_rounding_rate'
        setFormValidation(form_id);
        $('#save_rounding_rate').click(function(){
             var valid = FormIsValid(form_id);
             if(valid){
                var formserial = $(form_id).serialize();
                $.post('/setup/save_rounding_rate?', formserial, function(data){
                    $.redirect('/setup/rounding_rates');
                    return false;
                });
             }
        });
        $('.rounding_rate_back').click(function(){
            $('#dialog_rounding_rate').modal('hide');
        });
        $('#dialog_rounding_rate').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_rounding_rate(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        rounding_rate_id = kwargs.get('rounding_rate_id', None)
        if not rounding_rate_id:
            this = RoundingRate()
            this.name = kwargs.get('name', None)
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
        else:
            this = RoundingRate.by_id(rounding_rate_id)
            if not this: return 'false'
            this.name = kwargs.get('name', None)
            DBSession.flush()
        return str(this.id)

###############################################################################
# Rounding Rate Items
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def rounding_rate_items(self, *args, **kwargs):
        rounding_rate_id = kwargs.get('rounding_rate_id', None)
        rounding_rate = RoundingRate.by_id(rounding_rate_id)
        html = self.get_rounding_rate_item_html(*args, **kwargs)
        javascript = self.get_javascript_rounding_rate_item_onload()
        if rounding_rate:
            title = f"Rounding Rate Selected: {rounding_rate.name}"
        else:
            title = "Rounding Rate Item"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_rounding_rate_item_html(self, *args, **kwargs):
        rounding_rate_id = kwargs.get('rounding_rate_id', None)
        if rounding_rate_id:
            rounding_rate = RoundingRate.by_id(rounding_rate_id)
            title = f'Rounding Rate Selected: {rounding_rate.name}'
            dbase_query = DBSession.query(RoundingRateItem). \
                    filter(RoundingRateItem.rounding_rate_id == rounding_rate_id). \
                    filter(RoundingRateItem.bln_active == True). \
                    all()
        else:
            title = 'Rounding Rate Item'
            dbase_query = RoundingRateItem.get_all('id')
        outputlist = []
        for item in dbase_query:
            rate = RoundingRate.by_id(item.rounding_rate_id)
            name = 'Unknown'
            if rate:
                name = rate.name

            outputlist.append({
                'rounding_rate_id' : "<div class='edit rounding_rate_item_edit' rounding_rate_item_id='{1}'>{0}</div>".format(name, item.id),
                'min_amount' : get_currency_by_locale(item.min_amount, cents=False),
                'max_amount' : get_currency_by_locale(item.max_amount, cents=False),
                'set_amount' : get_currency_by_locale(item.set_amount, cents=False),
                             })
        dbcolumnlist=[
                'rounding_rate_id',
                'min_amount',
                'max_amount',
                'set_amount',
                    ]
        theadlist=[
                'Rounding Rate',
                'Min Amount',
                'Max Amount',
                'Set Amount',
                ]
        tdclasslist=[
                'action_link',
                'text-right',
                'text-right',
                'text-right',
                ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "rounding_rate_item_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{title}</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_rounding_rate_item" class="btn btn-primary ml-auto">Create New Rounding Rate Item</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input type="text" class="form-control search" name="searchphrase" placeholder="Search">
                        </div>
                        <div class="col-md-8">
                            <button class="btn btn-primary action_search">Search</button>
                            <button class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {htmltbl}
                    </div>
                </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_javascript_rounding_rate_item_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_rounding_rate_item").click(function(){
            $('#dialogdiv').load('/setup/get_modal_rounding_rate_item?', function(data){
                return false;
            });
        });
        $(".rounding_rate_item_edit").click(function(){
            var kwargs = 'rounding_rate_item_id='+$(this).attr('rounding_rate_item_id');
            $('#dialogdiv').load('/setup/get_modal_rounding_rate_item?', kwargs, function(data){
                return false;
            });
        });
        """
        return javascript

    @expose()
    def get_modal_rounding_rate_item(self, *args, **kwargs):
        rounding_rate_item_id = kwargs.get('rounding_rate_item_id', None)

        title = 'New Rounding Rate Item'
        hidden_input = ''
        rounding_rate_id = None
        min_amount = max_amount = set_amount = ''
        if rounding_rate_item_id:
            rounding_rate_item = RoundingRateItem.by_id(rounding_rate_item_id)
            if rounding_rate_item:
                title = 'Edit Rounding Rate Item'
                rounding_rate_id = rounding_rate_item.rounding_rate_id
                min_amount = round(rounding_rate_item.min_amount, 2)
                max_amount = round(rounding_rate_item.max_amount, 2)
                set_amount = round(rounding_rate_item.set_amount, 2)
                hidden_input = get_hidden_input(**{'id': 'rounding_rate_item_id', 'value': rounding_rate_item_id})

        selectbox_rounding_rates = COMMON.get_selectbox_rounding_rates(selected=rounding_rate_id)

        html = f"""
        <div class="modal fade" id="dialog_rounding_rate_item" tabindex="-1" role="dialog" aria-labelledby="myrounding_rate_itemLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">{title}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_rounding_rate_item'>
                            {hidden_input}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="rounding_rate_id">Rounding Rate</label>
                                    <div class="col-md-9">
                                        {selectbox_rounding_rates}
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="min_amount">Min Amount</label>
                                    <div class="col-md-9">
                                        <input id="min_amount" value="{min_amount}" type="number" name="min_amount" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="max_amount">Max Amount</label>
                                    <div class="col-md-9">
                                        <input id="max_amount" value="{max_amount}" type="number" name="max_amount" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="set_amount">Set Amount</label>
                                    <div class="col-md-9">
                                        <input id="set_amount" value="{set_amount}" type="number" name="set_amount" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_rounding_rate_item' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary rounding_rate_item_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        var form_id = '#form_rounding_rate_item'
        setFormValidation(form_id);
        $('#save_rounding_rate_item').click(function(){
             var valid = FormIsValid(form_id);
             if(valid){
                var formserial = $(form_id).serialize();
                $.post('/setup/save_rounding_rate_item?', formserial, function(data){
                    $.redirect('/setup/rounding_rate_items');
                    return false;
                });
             }
        });
        $('.rounding_rate_item_back').click(function(){
            $('#dialog_rounding_rate_item').modal('hide');
        });
        $('#dialog_rounding_rate_item').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_rounding_rate_item(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        rounding_rate_item_id = kwargs.get('rounding_rate_item_id', None)
        if not rounding_rate_item_id:
            this = RoundingRateItem()
            this.rounding_rate_id = kwargs.get('rounding_rate_id', None)
            this.min_amount = kwargs.get('min_amount', None)
            this.max_amount = kwargs.get('max_amount', None)
            this.set_amount = kwargs.get('set_amount', None)
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
        else:
            this = RoundingRateItem.by_id(rounding_rate_item_id)
            if not this:
                return 'false'
            this.rounding_rate_id = kwargs.get('rounding_rate_id', None)
            this.min_amount = kwargs.get('min_amount', None)
            this.max_amount = kwargs.get('max_amount', None)
            this.set_amount = kwargs.get('set_amount', None)
            DBSession.flush()
        return str(this.id)

###############################################################################
# Cover Exclusion
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def cover_exclusions(self, *args, **kwargs):
        html = self.get_cover_exclusions_html(*args, **kwargs)
        javascript = self.get_javascript_cover_exclusions_onload()
        title = _("Cover & Exclusions")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_cover_exclusions_html(self, *args, **kwargs):
        detailtable = self.get_cover_and_exclusion_html(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('Cover & Exclusions')}</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_cover_exclusion" class="btn btn-primary ml-auto">Create New Cover/Exclusion</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        {detailtable}
                    </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_javascript_cover_exclusions_onload(self, *args, **kwargs):
        javascript = """
            $("#create_new_cover_exclusion").click(function(){
                $('#dialogdiv').load('/setup/get_modal_new_cover_exclusion?', function(data){
                    return false;
                });
            });
            $(".cover_exclusion_edit").click(function(){
                var kwargs = 'cover_and_exclusion_id='+$(this).attr('cover_and_exclusion_id');
                $('#dialogdiv').load('/setup/get_modal_edit_cover_exclusion?'+kwargs, function(data){
                    return false;
                });
            });
            checkboxCheckOptions('.exclusion', 'cover_and_exclusion_id', '/setup/set_is_exclusion_true?', '/setup/set_is_exclusion_false?');
            checkboxCheckOptions('.cover', 'cover_and_exclusion_id', '/setup/set_is_cover_true?', '/setup/set_is_cover_false?');
        """
        return javascript

    @expose()
    def get_cover_and_exclusion_html(self, *args, **kwargs):

        dbase_query = DBSession.query(CoverAndExclusion).\
            filter(CoverAndExclusion.bln_active==True).\
            order_by(CoverAndExclusion.code).\
            all()
        outputlist = []
        for item in dbase_query:

            checked_benefit_cover = ''
            checked_benefit_exclusion = ''
            if item.is_cover:
                checked_benefit_cover = "checked"
            if item.is_exclusion:
                checked_benefit_exclusion = "checked"

            outputlist.append({
                'code': f"<div class='edit cover_exclusion_edit' cover_and_exclusion_id='{item.id}'>{item.code}</div>",
                'description': f"{item.description}",
                'cover': f"""<input class="form-check-input cover" cover_and_exclusion_id='{item.id}' name="is_benefit_cover" id="is_benefit_cover" type="checkbox" {checked_benefit_cover}>""",
                'exclusion': f"""<input class="form-check-input exclusion" cover_and_exclusion_id='{item.id}' name="is_benefit_exclusion" id="is_benefit_exclusion" type="checkbox" {checked_benefit_exclusion}>""",
            })
        theadlist = [
            'Code',
            'Description',
            'Benefit Cover',
            'Benefit Exclusion'
        ]
        dbcolumnlist = [
            'code',
            'description',
            'cover',
            'exclusion'
        ]
        tdclasslist = [
            'action_link',
            '',
            'text-center',
            'text-center',
        ]
        return build_html_table(outputlist, dbcolumnlist, theadlist, "entity_table", tdclasslist)

    @expose()
    def get_modal_new_cover_exclusion(self, *args, **kwargs):
        html = f"""
            <div class="modal fade" id="dialog_new_cover_exclusion" tabindex="-1" role="dialog" aria-labelledby="mycover_exclusionLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">New Cover/Exclusion</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_cover_exclusion'>
                                <div class="col-md-12">
    					            <div class="form-group row">
    						            <label class="col-md-3 col-form-label" required for="code">Code</label>
    						            <div class="col-md-9">
    							            <input id="code" type="text" name="code" class="form-control" required='true'>
    						            </div>
    					            </div>
    				            </div>
                                <div class="col-md-12">
    					            <div class="form-group row">
    						            <label class="col-md-3 col-form-label" required for="description">Description</label>
    						            <div class="col-md-9">
    							            <input id="description" type="text" name="description" class="form-control" required='true'>
    						            </div>
    					            </div>
    				            </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_cover_exclusion' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary cover_exclusion_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        """
        javascript = """
            <script nonce='1234'>
                setFormValidation('#form_new_cover_exclusion');
                $('#save_new_cover_exclusion').click(function(){
                    var valid = FormIsValid("#form_new_cover_exclusion");
                    if(valid){
                        var formserial = getFormData('#form_new_cover_exclusion');
                        var data = {data : JSON.stringify(formserial)};

                        $.post('/setup/save_new_cover_exclusion?', data, function(data){
                            var result = JSON.parse(data);
                            if(result.success === true){
                                $.redirect('/setup/cover_exclusions');
                            };
                            showNotification(result.status, result.data);
                            return false;
                        });
                    }
                });
                $('.cover_exclusion_back').click(function(){
                    $('#dialog_new_cover_exclusion').modal('hide');
                });
                $('#dialog_new_cover_exclusion').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def get_modal_edit_cover_exclusion(self, *args, **kwargs):
        cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        if not cover_and_exclusion_id: return ''

        this = CoverAndExclusion.by_id(cover_and_exclusion_id)
        if not this: return ''

        checked = 'checked' if this.bln_active else ''
        html = f"""
            <div class="modal fade" id="dialog_edit_cover_exclusion" tabindex="-1" role="dialog" aria-labelledby="mycover_exclusionLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">Edit Cover/Exclusion</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_edit_cover_exclusion'>
                                <div style='display: none' class="col-md-6">
                					<div class="form-group row">
    						            <label class="col-md-3 col-form-label" required for="cover_and_exclusion_id">ID</label>
    						            <div class="col-md-9">
    							            <input id="id" type="text" name="cover_and_exclusion_id" value="{this.id}" class="form-control" required='true'>
    						            </div>
    					            </div>
    				            </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="code">Code</label>
                                        <div class="col-md-9">
                                            <input id="code" type="text" name="code" value="{this.code}" class="form-control" required='true' disabled='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="description">Description</label>
                                        <div class="col-md-9">
                                            <input id="description" type="text" name="description" value="{this.description}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-3 col-form-label" for="active" required>Active</label>
                                        <div class="col-9">
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                    <span class="form-check-sign"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_edit_cover_exclusion' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary cover_exclusion_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        """
        javascript = """
            <script nonce='1234'>
                setFormValidation('#form_edit_cover_exclusion');
                $('#save_edit_cover_exclusion').click(function(){
                    var valid = FormIsValid("#form_edit_cover_exclusion");
                    if(valid){
                        var formserial = getFormData('#form_edit_cover_exclusion');
                        var data = {data : JSON.stringify(formserial)};

                        $.post('/setup/save_edit_cover_exclusion?', data, function(data){
                            var result = JSON.parse(data);
                            if(result.success === true){
                                $.redirect('/setup/cover_exclusions');
                            };
                            showNotification(result.status, result.data);
                            return false;
                        });
                    }
                });
                $('.cover_exclusion_back').click(function(){
                    $('#dialog_edit_cover_exclusion').modal('hide');
                });
                $('#dialog_edit_cover_exclusion').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def save_new_cover_exclusion(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data:
            return json.dumps({'success': False, 'data': 'No data provided', 'status': 'danger'})
        usernow = request.identity.get('user', None)
        code = data.get('code', None)
        exists = DBSession.query(CoverAndExclusion).\
            filter(CoverAndExclusion.code==code).\
            filter(CoverAndExclusion.bln_active==True).\
            first()
        if exists: return json.dumps({'success': False, 'data': 'Cover/Exclusion with this code already exists', 'status': 'danger'})

        this = CoverAndExclusion()
        this.code = code
        this.description = data.get('description', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def save_edit_cover_exclusion(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success': False, 'data': 'No data provided', 'status': 'danger'})
        usernow = request.identity.get('user', None)
        cover_and_exclusion_id = data.get('cover_and_exclusion_id', None)
        description = data.get('description', 'Unknown Description')
        if not cover_and_exclusion_id: return json.dumps({'success': False, 'data': 'No cover_and_exclusion_id provided', 'status': 'danger'})

        this = CoverAndExclusion.by_id(cover_and_exclusion_id)
        if not this: return json.dumps({'success': False, 'data': 'No cover_exclusion found for id provided', 'status': 'danger'})

        this.description = description
        if not data.get('active', None): this.bln_active = False
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def set_is_cover_false(self, *args, **kwargs):
        cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        this = CoverAndExclusion.by_id(cover_and_exclusion_id)
        this.is_cover = False
        DBSession.flush()
        return 'true'

    @expose()
    def set_is_cover_true(self, *args, **kwargs):
        cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        this = CoverAndExclusion.by_id(cover_and_exclusion_id)
        this.is_cover = True
        DBSession.flush()
        return 'true'

    @expose()
    def set_is_exclusion_true(self, *args, **kwargs):
        cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        this = CoverAndExclusion.by_id(cover_and_exclusion_id)
        this.is_exclusion = True
        DBSession.flush()
        return 'true'

    @expose()
    def set_is_exclusion_false(self, *args, **kwargs):
        cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        this = CoverAndExclusion.by_id(cover_and_exclusion_id)
        this.is_exclusion = False
        DBSession.flush()
        return 'true'

#######################################################################
# Mail Merge
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def mail_merge(self, *args, **kwargs):
        html = self.get_mail_merge_html(*args, **kwargs)
        javascript = self.get_javascript_mail_merge_onload()
        title = _("Mail Merge")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_javascript_mail_merge_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_mail_merge").click(function(){
            $('#dialogdiv').load('/setup/get_modal_new_mail_merge?', function(data){
                return false;
            });
        });
        exportFile('#download_mail_merge', '/setup/download_mail_merge', focus=true);
        $(".mail_merge_edit").click(function(){
            var kwargs = 'mail_merge_id='+$(this).attr('mail_merge_id');
            $('#dialogdiv').load('/setup/get_modal_edit_mail_merge?', kwargs, function(data){
                return false;
            });
        });
        """
        return javascript

    @expose()
    def download_mail_merge(self, *args, **kwargs):
        datenow = datetime.date(datetime.now())
        pdf_file_name = f"Mail Merge {datenow}.pdf"
        output_pdf_filepath = os.path.join(PDF_DIRNAME, pdf_file_name)
        pdffile = PDFCreator(**{'filename': output_pdf_filepath})
        headers = [
            'Code',
            'Name'
        ]
        headerwidths = [
            200,
            200,
        ]
        outputlist = []
        dbase_query = MailMerge.get_all('code')
        for item in dbase_query:
            outputlist.append((
                Paragraph(checknullvalue(item.code), pdffile.styleNormal),
                Paragraph(checknullvalue(item.name), pdffile.styleNormal),
            ))
        userdata = {
            'header': 'Mail Merge',
            'right1_header': 'Date Printed', 'right1_content': str(datenow),
        }
        pdffile.CreatePDF_Table_Portrait(userdata, outputlist, headers, headerwidths)
        response.headers["Content-Type"] = 'application/pdf'
        response.headers["Content-Disposition"] = 'attachment; filename="' + pdf_file_name + '"'
        filecontent = FileApp(output_pdf_filepath)
        return use_wsgi_app(filecontent)

    @expose()
    def get_mail_merge_html(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        dbase_query = self.get_mail_merge_list(*args, **kwargs)
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'code': "<div class='edit mail_merge_edit' mail_merge_id='{1}'>{0}</div>".format(item.code, item.id),
                'name': item.name,
            })
        dbcolumnlist = [
            'code',
            'name',
        ]
        theadlist = [
            'Code',
            'Name',
        ]
        tdclasslist = [
            'action_link',
            'text-right',
        ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "mail_merge_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('Mail Merge')}</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="download_mail_merge" class="btn btn-secondary ml-auto">Download Mail Merge</button>
                                <button id="create_new_mail_merge" class="btn btn-primary ml-auto">Create New Mail Merge</button>
                            </div>
                        </div>

                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            {htmltbl}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_modal_new_mail_merge(self, *args, **kwargs):
        html = f"""
            <div class="modal fade" id="dialog_new_mail_merge" tabindex="-1" role="dialog" aria-labelledby="mytbl_mail_mergeLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('New Mail Merge')}</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_mail_merge'>
                                    <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-3 col-form-label" required for="code">{_('Code')}</label>
    						<div class="col-md-9">
    							<input id="code" type="text" name="code" class="form-control" required='true'>
    						</div>
    					</div>
    				</div>
                                    <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-3 col-form-label" required for="name">{_('Name')}</label>
    						<div class="col-md-9">
    							<input id="name" type="text" name="name" class="form-control" required='true'>
    						</div>
    					</div>
    				</div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_mail_merge' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary mail_merge_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script nonce='1234'>
            setFormValidation('#form_new_mail_merge');
            $('#save_new_mail_merge').click(function(){
                 var valid = FormIsValid("#form_new_mail_merge");
                 if(valid){

                   var formserial = $('#form_new_mail_merge').serialize();
                    $.post('/setup/save_new_mail_merge?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                           location.reload();
                        };
                        showNotification(result.status, result.data);
                        return false;
                    });
                 }
            });
            $('.mail_merge_back').click(function(){
                $('#dialog_new_mail_merge').modal('hide');
            });
            $('#dialog_new_mail_merge').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def get_modal_edit_mail_merge(self, *args, **kwargs):
        mail_merge_id = kwargs.get('mail_merge_id', None)
        if not mail_merge_id: return ''
        this = self.get_mail_merge_by_id(*args, **kwargs)
        if not this: return ''
        checked = 'checked' if this.bln_active else ''
        html = f"""
        <div class="modal fade" id="dialog_edit_mail_merge" tabindex="-1" role="dialog" aria-labelledby="mytbl_mail_mergeLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">{_('Edit Mail Merge')}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_edit_mail_merge'>
                            <div style='display: none' class="col-md-12">
					<div class="form-group row">
						<label class="col-md-3 col-form-label" required for="mail_merge_id">ID</label>
						<div class="col-md-9">
							<input id="id" type="text" name="mail_merge_id" value="{this.id}" class="form-control" required='true'>
						</div>
					</div>
				</div>
                            <div class="col-md-12">
					<div class="form-group row">
						<label class="col-md-3 col-form-label" required for="code">Code</label>
						<div class="col-md-9">
							<input id="code" type="text" name="code" value="{this.code}" class="form-control" required='true' disabled='true'>
						</div>
					</div>
				</div>
                            <div class="col-md-12">
					<div class="form-group row">
						<label class="col-md-3 col-form-label" required for="name">Name</label>
						<div class="col-md-9">
							<input id="name" type="text" name="name" value="{this.name}" class="form-control" required='true'>
						</div>
					</div>
				</div>
                    <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-3 col-form-label" for="active" required>Active</label>
                                    <div class="col-9">
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                <span class="form-check-sign"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_edit_mail_merge' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary mail_merge_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        setFormValidation('#form_edit_mail_merge');
        $('#save_edit_mail_merge').click(function(){
             var valid = FormIsValid("#form_edit_mail_merge");
             if(valid){
                var formserial = getFormData('#form_edit_mail_merge');
                var data = {data : JSON.stringify(formserial)};

                $.post('/setup/save_edit_mail_merge?', data, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){

                          $.redirect('/setup/mail_merge', data);
                    };
                    return false;
                });
             }
        });
        $('.mail_merge_back').click(function(){
            $('#dialog_edit_mail_merge').modal('hide');
        });
        $('#dialog_edit_mail_merge').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_new_mail_merge(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        if not kwargs:
            return json.dumps({'success': False, 'data': 'No parameters provided', 'status': 'danger'})
        merge_code = kwargs.get('code', None)
        exists=DBSession.query(MailMerge).\
            filter(MailMerge.code==merge_code).\
            filter(MailMerge.bln_active==True).\
            first()
        if exists: return json.dumps({'success': False, 'data': 'Code already exists', 'status': 'danger'})

        this = MailMerge()
        this.code = merge_code
        this.name = kwargs.get('name', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id, 'status': 'success'})

    @expose()
    def get_mail_merge_by_id(self, *args, **kwargs):
        return DBSession.query(MailMerge). \
            filter(MailMerge.id == kwargs.get('mail_merge_id', None)). \
            first()

    @expose()
    def get_mail_merge_list(self, *args, **kwargs):
        code = kwargs.get('code', None)
        name = kwargs.get('name', None)
        searchphrase = kwargs.get('searchphrase', None)

        dbase_query = DBSession.query(MailMerge). \
            filter(MailMerge.bln_active == True). \
            order_by(asc(MailMerge.code)). \
            limit(LIMIT)
        return dbase_query

    @expose()
    def save_edit_mail_merge(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data:
            return json.dumps({'success': False, 'data': 'No data provided'})
        usernow = request.identity.get('user', None)
        this = self.get_mail_merge_by_id(**data)
        if not this:
            return json.dumps({'success': False, 'data': 'No text merge found for id provided'})
        this.name = data.get('name', None)
        if not data.get('active', None):
            this.bln_active = False
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

#######################################################################
# Disclosure
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def intermediary_disclosure(self, *args, **kwargs):
        html = self.get_intermediary_disclosure_html(*args, **kwargs)
        javascript = self.get_javascript_intermediary_disclosure_onload()
        title = "Disclosure"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_intermediary_disclosure_html(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_INTERMEDIARYDISCLOSURE
        usernow = request.identity.get('user', {})
        searchphrase = COMMON.get_searchphrase(**kwargs)
        intermediary_disclosuretable = self.get_intermediary_disclosure_htmltbl(**kwargs)
        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Disclosure</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_intermediary_disclosure" class="btn btn-primary ml-auto">Create a New Disclosure</button>
                            </div>
                        </div>
                       <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                <input type="text" class="form-control search" name="searchphrase"  id='searchphrase'  value='{searchphrase}' placeholder="Search">
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary" id='action_search'>Search</button>
                                <button class="btn btn-primary" id='btn_reset'>Reset</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive" id='div_intermediary_disclosure'>
                            {intermediary_disclosuretable}
                        </div>
                    </div>
                    </div>
                </div>
            """
        javascript = """
           <script nonce='1234'>
                 $("#create_new_intermediary_disclosure").click(function(){
                $('#dialogdiv').load('/setup/get_modal_new_intermediary_disclosure?', function(data){
                    return false;
                });
            });
                 $('#action_search').click(function(){
                    var kwargs = 'searchphrase='+$('#searchphrase').val();
                    $('#div_intermediary_disclosure').load('/setup/get_intermediary_disclosure_htmltbl', kwargs, function(data){
                        return false;
                    });
                })
                $('#btn_reset').click(function(){
                 $('#searchphrase').val('').focus();
                    $('#div_intermediary_disclosure').load('/setup/get_intermediary_disclosure_htmltbl', 'reset=true', function(data){
                        return false;
                    });
                })
                </script>
                """
        return html + javascript

    @expose()
    def get_intermediary_disclosure_htmltbl(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        dbase_query = self.get_intermediary_disclosure_list(*args, **kwargs)
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'text': "<div class='edit intermediary_disclosure_edit action_link' intermediary_disclosure_id='{1}'>{0}</div>".format(
                    item.text, item.id),
            })
        dbcolumnlist = [
            'text',
        ]
        theadlist = [
            'Text',
        ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "intermediary_disclosure_table")
        javascript = """
           <script nonce='1234'>
              $(".intermediary_disclosure_edit").click(function(){
                  var kwargs = 'intermediary_disclosure_id='+$(this).attr('intermediary_disclosure_id');
                  $('#dialogdiv').load('/setup/get_modal_edit_intermediary_disclosure?', kwargs, function(data){
                      return false;
                  });
              });
            </script>
              """
        return html + javascript

    @expose()
    def get_javascript_intermediary_disclosure_onload(self, *args, **kwargs):
        javascript = """


            """
        return javascript

    @expose()
    def get_modal_new_intermediary_disclosure(self, *args, **kwargs):
        html = """
            <div class="modal fade" id="dialog_new_intermediary_disclosure" tabindex="-1" role="dialog" aria-labelledby="myintermediary_disclosureLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">New Disclosure</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_intermediary_disclosure'>
                           <div class="col-md-12">
    					        <div class="form-group row">
    						        <label class="col-md-4 col-form-label" required for="text">Text</label>
    						        <div class="col-md-8">
    						           <textarea required="true" name='text' type="text" class="form-control" rows="3" maxlength='1024'></textarea>
    						       </div>
    					</div>
    				</div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_intermediary_disclosure' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary intermediary_disclosure_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script nonce='1234'>
            setFormValidation('#form_new_intermediary_disclosure');
            $('#save_new_intermediary_disclosure').click(function(){
                 var valid = FormIsValid("#form_new_intermediary_disclosure");
                 if(valid){
                    var formserial = getFormData('#form_new_intermediary_disclosure');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/setup/save_new_intermediary_disclosure?', data, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect('/setup/intermediary_disclosure');
                        };
                        return false;
                    });
                 }
            });
            $('.intermediary_disclosure_back').click(function(){
                $('#dialog_new_intermediary_disclosure').modal('hide');
            });
            $('#dialog_new_intermediary_disclosure').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def get_modal_edit_intermediary_disclosure(self, *args, **kwargs):
        intermediary_disclosure_id = kwargs.get('intermediary_disclosure_id', None)
        if not intermediary_disclosure_id: return ''
        this = self.get_intermediary_disclosure_by_id(*args, **kwargs)
        if not this: return ''
        checked = 'checked' if this.bln_active else ''
        html = f"""
        <div class="modal fade" id="dialog_edit_intermediary_disclosure" tabindex="-1" role="dialog"
           aria-labelledby="myintermediary_disclosureLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">Edit Disclosure</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_edit_intermediary_disclosure'>
                            <div style='display: none' class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="intermediary_disclosure_id">ID</label>
                                    <div class="col-md-9">
                                        <input id="id" type="text" name="intermediary_disclosure_id" value="{this.id}"
                                                                                                     class="form-control" required='true'/>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-4 col-form-label" required for="text"> Text</label>
                                    <div class="col-md-8">
                                        <textarea required="true" name='text' type="text" class="form-control" rows="3" maxlength='1024'>{this.text}</textarea>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-4 col-form-label" for="active" required>Active</label>
                                    <div class="col-8">
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                <span class="form-check-sign"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_edit_intermediary_disclosure' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary intermediary_disclosure_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
            <script nonce='1234'>
            setFormValidation('#form_edit_intermediary_disclosure');
            $('#save_edit_intermediary_disclosure').click(function(){
                 var valid = FormIsValid("#form_edit_intermediary_disclosure");
                 if(valid){
                    var formserial = getFormData('#form_edit_intermediary_disclosure');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/setup/save_edit_intermediary_disclosure?', data, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect('/setup/intermediary_disclosure');
                        };
                        return false;
                    });
                 }
            });
            $('.intermediary_disclosure_back').click(function(){
                $('#dialog_edit_intermediary_disclosure').modal('hide');
            });
            $('#dialog_edit_intermediary_disclosure').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def save_new_intermediary_disclosure(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success': False, 'data': 'No data provided'})
        usernow = request.identity.get('user', None)
        this = EntityOrganisationIntermediaryDisclosure()
        this.text = data.get('text', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def save_edit_intermediary_disclosure(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success': False, 'data': 'No data provided'})
        usernow = request.identity.get('user', None)
        this = self.get_intermediary_disclosure_by_id(**data)
        if not this: return json.dumps(
            {'success': False, 'data': 'No intermediary_disclosure found for id provided'})
        this.text = data.get('text', None)
        if not data.get('active', None): this.bln_active = False
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def get_intermediary_disclosure_by_id(self, *args, **kwargs):
        return DBSession.query(EntityOrganisationIntermediaryDisclosure). \
            filter(EntityOrganisationIntermediaryDisclosure.id == kwargs.get('intermediary_disclosure_id', None)). \
            first()

    @expose()
    def get_intermediary_disclosure_list(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        kwargs['searchkey'] = SEARCHKEY_INTERMEDIARYDISCLOSURE
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()
        if searchphrase:
            searchphrase = "%" + searchphrase + "%"
            dbase_query = DBSession.query(EntityOrganisationIntermediaryDisclosure). \
                filter(EntityOrganisationIntermediaryDisclosure.text.like(searchphrase)). \
                filter(EntityOrganisationIntermediaryDisclosure.bln_active == True). \
                order_by(asc(EntityOrganisationIntermediaryDisclosure.text)).limit(LIMIT)
            return dbase_query
        else:
            dbase_query = DBSession.query(EntityOrganisationIntermediaryDisclosure). \
                filter(EntityOrganisationIntermediaryDisclosure.bln_active == True). \
                order_by(asc(EntityOrganisationIntermediaryDisclosure.id)). \
                limit(LIMIT)
        return dbase_query

#######################################################################
# Vehicle Category
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def vehicle_category(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_VEHICLE_CATAGORY
        searchphrase = COMMON.get_searchphrase(**kwargs)
        kwargs['searchphrase'] = searchphrase
        title = _('Vehicle Categories')
        html = self.get_vehicle_category_html(*args, **kwargs)
        javascript = self.get_javascript_vehicle_category_onload()
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_vehicle_category_html(self, *args, **kwargs):
        searchphrase = kwargs.get('searchphrase', '')
        card_title = _('Vehicle Categories')
        vehicle_category_table = self.get_vehicle_category_table()
        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">{card_title}</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_vehicle_category" class="btn btn-primary ml-auto">Create New Vehicle Category</button>
                            </div>
                        </div>
                        <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                <input type="text" class="form-control search" name="searchphrase"  id='searchphrase'  value='{searchphrase}' placeholder="Search">
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary" id="action_search">Search</button>
                                <button class="btn btn-primary" id="btn_reset">Reset</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive" id='div_vehicle_category_table'>
                            {vehicle_category_table}
                        </div>
                    </div>
                    </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_vehicle_category_table(self, *args, **kwargs):
        searchphrase = kwargs.get('searchphrase', '')
        if searchphrase:
            searchphrase = '%'+searchphrase+'%'
            dbase_query = DBSession.query(AssetVehicleCategory). \
                filter(AssetVehicleCategory.name.like(searchphrase)). \
                filter(AssetVehicleCategory.bln_active == True). \
                order_by(asc(AssetVehicleCategory.name)).\
                limit(LIMIT)
        else:
            dbase_query = DBSession.query(AssetVehicleCategory). \
                filter(AssetVehicleCategory.bln_active == True). \
                order_by(asc(AssetVehicleCategory.name)).\
                limit(LIMIT)

        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'name' : f"<div class='edit vehicle_category_edit' vehicle_category_id='{item.id}'>{item.name}</div>".format(item.name, item.id),
                             })
        dbcolumnlist=[
                'name',
        ]
        theadlist=[
                'Name',
        ]
        return build_html_table(outputlist, dbcolumnlist, theadlist, "vehicle_category_table")

    @expose()
    def get_javascript_vehicle_category_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_vehicle_category").click(function(){
            $('#dialogdiv').load('/setup/get_modal_vehicle_category?', function(data){
                return false;
            });
        });
        $(".vehicle_category_edit").click(function(){
            var kwargs = 'vehicle_category_id='+$(this).attr('vehicle_category_id');
            $('#dialogdiv').load('/setup/get_modal_vehicle_category', kwargs, function(data){
                return false;
            });
        });
        $('#action_search').click(function(){
            var kwargs = 'searchphrase='+$('#searchphrase').val();
            $('#div_vehicle_category_table').load('/setup/get_vehicle_category_table', kwargs, function(data){
                return false;
            });
        })
        $('#btn_reset').click(function(){
            $('#searchphrase').val('').focus();
            $('#div_vehicle_category_table').load('/setup/get_vehicle_category_table', 'reset=true', function(data){
                return false;
             });
         });
        """
        return javascript

    @expose()
    def get_modal_vehicle_category(self, *args, **kwargs):
        vehicle_category_id = kwargs.get('vehicle_category_id', None)
        vehicle_category = None
        hidden_input = ''
        card_title = _('New Vehicle Category')
        if vehicle_category_id:
            card_title = _('Edit Vehicle Category')
            vehicle_category = AssetVehicleCategory.by_id(vehicle_category_id)
            hidden_input = get_hidden_input(**{'id': 'vehicle_category_id', 'value': vehicle_category_id})
        name = vehicle_category.name if vehicle_category else ''
        html = f"""
        <div class="modal fade" id="dialog_vehicle_category" tabindex="-1" role="dialog" aria-labelledby="myvehicle_categoryLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">{card_title}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_vehicle_category'>
                            {hidden_input}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-2 col-form-label" required for="name">Name</label>
                                    <div class="col-md-9">
                                        <input id="name" value="{name}" type="text" name="name" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_vehicle_category' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary vehicle_category_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
            <script nonce='1234'>
                setFormValidation('#form_vehicle_category');
                $('#save_vehicle_category').click(function(){
                    var valid = FormIsValid('#form_vehicle_category');
                    if(valid){
                        var formserial = $('#form_vehicle_category').serialize();
                        $.post('/setup/save_vehicle_category?', formserial, function(data){
                            var result = JSON.parse(data);
                            console.log(result);
                            showNotification(result.status, result.data);
                            if(result.success === true){
                                $.redirect('/setup/vehicle_category');
                                return false;
                            };
                            return false;
                        });
                    }
                    $('#dialog_vehicle_category').modal('hide');
                });

                $('.vehicle_category_back').click(function(){
                    $('#dialog_vehicle_category').modal('hide');
                });
                $('#dialog_vehicle_category').modal();
            </script>
     	"""
        return html + javascript

    @expose()
    def save_vehicle_category(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        vehicle_category_id = kwargs.get('vehicle_category_id', None)
        name = kwargs.get('name', None)
        if not name:
            return json.dumps({'success': False, 'data': 'Please supply a name.', 'status': 'danger'})

        if not vehicle_category_id:
            exists = DBSession.query(AssetVehicleCategory).\
                filter(AssetVehicleCategory.name==name).\
                first()
        else:
            exists = DBSession.query(AssetVehicleCategory).\
                filter(AssetVehicleCategory.id is not vehicle_category_id).\
                filter(AssetVehicleCategory.name==name).\
                first()
        if exists:
            return json.dumps({'success': False, 'data': 'May not create a duplicate record.', 'status': 'danger'})

        if not vehicle_category_id:
            this = AssetVehicleCategory()
            this.name = kwargs.get('name', None)
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
            save_message = 'Vehicle Catagory created successfully'
        else:
            this = AssetVehicleCategory.by_id(vehicle_category_id)
            if not this:
                return json.dumps({'success': False, 'data': 'Unable to find vehicle catagory.', 'status': 'danger'})
            this.name = kwargs.get('name', None)
            DBSession.flush()
            save_message = 'Vehicle Catagory updated successfully'

        return json.dumps({'success': True, 'data': save_message, 'status': 'success'})

#######################################################################
# Audit
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def audit(self, *args, **kwargs):
        html = self.get_audit_html(**kwargs)
        javascript = self.get_javascript_audit_onload(**kwargs)
        title = "Audit"
        return dict(title=title, html=html, javascript=javascript)

    def get_audit_table_outputlist(self, *args, **kwargs):
        audit_table_name = kwargs.get('audit_table_name', None)

        outputlist = []
        for item in metadata.tables.values():
            name = str(item.name)
            if not name.startswith('audit'):
                continue

            if audit_table_name == name:
                return item

            try:
                dbase_query = DBSession.query(item).all()
            except Exception as e:
                print(e)
                continue
            len_dbase_query = len([i for i in dbase_query])

            name = name.replace('audit_', '')
            name = name.replace('tbl_', '')
            name = name.replace('_', ' ')
            name = name.title()
            outputlist.append({
                'id' : item.name,
                'name' : f'{name} ({len_dbase_query})',
            })
        return outputlist

    def get_selectbox_audit_tables(self, *args, **kwargs):
        outputlist = self.get_audit_table_outputlist()
        kwargs['id'] = 'audit_table_name'
        kwargs['outputlist'] = sort_dict_list(outputlist, 'name')
        return create_selectbox_html(**kwargs)

    @expose()
    def get_audit_html(self, *args, **kwargs):
        searchphrase = kwargs.get('searchphrase', '')
        card_title = _('Audit')
        audit_table = self.get_audit_table()
        selectbox_audit_tables = self.get_selectbox_audit_tables(**kwargs)
        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">{card_title}</h4>
                            </div>
                        </div>
                        <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                {selectbox_audit_tables}
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary" id="action_search">Search</button>
                                <button class="btn btn-primary" id="btn_reset">Reset</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive" id='div_audit_table'>
                            {audit_table}
                        </div>
                    </div>
                    </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_audit_table(self, *args, **kwargs):
        dbase_query = []
        audit_table_name = kwargs.get('audit_table_name', '')
        if audit_table_name:
            audit_table_name = '%'+audit_table_name+'%'
            cls = self.get_audit_table_outputlist(**kwargs)
            id_col = getattr(cls.columns, 'id', None)
            dbase_query = DBSession.query(cls). \
                    order_by(desc(id_col)). \
                    limit(AUDIT_TABLE_LIMIT)

        outputlist = []
        for item in dbase_query:

            added_by = 'Unknown'
            user = User.by_id(item.added_by)
            if item.added_by:
                added_by = f'Unknown ID: {item.added_by}'
            if user:
                added_by = user.name

            name = ''
            for col in item.keys():
                if col.startswith('audit_'):
                    continue
                if col in AUDIT_EXCLUSION_LIST:
                    continue

                value = getattr(item, col, None)
                if value:
                    col_name = col.replace('_', ' ').title()
                    name += f'{col_name}: {value}, '

            outputlist.append({
                'id' : item.id,
                'audit_action' : item.audit_action.title(),
                'added_by' : added_by,
                'added' : item.added,
                'name' : name,
                             })
        dbcolumnlist=[
                'id',
                'audit_action',
                'added_by',
                'added',
                'name',
                    ]
        theadlist=[
                'ID',
                'Audit Type',
                'Added By',
                'Added Date',
                'Name',
                ]
        return build_html_table(outputlist, dbcolumnlist, theadlist, "audit_table")

    @expose()
    def get_javascript_audit_onload(self, *args, **kwargs):
        javascript = """
        $('#action_search').click(function(){
            var kwargs = 'audit_table_name='+$('#audit_table_name').val();
            $('#div_audit_table').load('/setup/get_audit_table', kwargs, function(data){
                return false;
            });
        })

        $('#btn_reset').click(function(){
            $('#searchphrase').val('').focus();
            $('#div_audit_table').load('/setup/get_audit_table', 'reset=true', function(data){
                return false;
             });
         })
        """
        return javascript

#######################################################################
# System Parameters
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def system_params(self, *args, **kwargs):
        html = self.get_system_parameters_html(*args, **kwargs)
        javascript = self.get_javascript_system_parameters_onload()
        title = "System Params"
        return dict(title=title, html=html, javascript=javascript)

    def get_table_from_system_parameter_link(self, table_name, *args, **kwargs):
        table = None
        for item in metadata.tables.values():
            name = str(item.name)
            if name.startswith('audit'):
                continue

            name = name.replace('tbl_', '')
            if str(table_name) == name:
                table = item
                break
        return table

    def get_name_from_system_parameter_link(self, link=None, *args, **kwargs):
        if not link:
            return None

        table = self.get_table_from_system_parameter_link(link.table_name)
        record = DBSession.query(table).filter_by(id = link.value).first()
        if not record:
            return None

        value = getattr(record, link.column, None)
        return value

    def get_selectbox_from_system_parameter_link(self, link=None, *args, **kwargs):
        if not link:
            return None

        outputlist = []
        table = self.get_table_from_system_parameter_link(link.table_name)
        dbase_query = DBSession.query(table).all()
        for item in dbase_query:
            if not item.bln_active:
                continue

            name = getattr(item, link.column, None)
            if not name:
                continue

            outputlist.append({
                'id' : item.id,
                'name' : name,
            })

        kwargs['id'] = 'value'
        kwargs['selected'] = link.value
        kwargs['outputlist'] = outputlist
        return create_selectbox_html(**kwargs)

    @expose()
    def get_system_parameters_html(self, *args, **kwargs):

        dbase_query = SystemParameterName.get_all('id')

        dbase_query = DBSession.query(SystemParameterName). \
                filter(SystemParameterName.bln_active == True). \
                order_by(SystemParameterName.name.asc()). \
                all()

        outputlist = []
        for item in dbase_query:

            data_type = SystemParameterValue.by_attr_first('system_parameter_name_id', item.id)
            if not data_type:
                continue

            name = item.name

            value = None
            if data_type.system_parameter_data_type_id == INTEGER:
                value = SystemParameterInteger.by_attr_first('system_parameter_value_id', data_type.id)
                if value:
                    value = value.value

            if data_type.system_parameter_data_type_id == BOOLEAN:
                value = SystemParameterBoolean.by_attr_first('system_parameter_value_id', data_type.id)
                if value:
                    value = value.value

            if data_type.system_parameter_data_type_id == LINK:
                value = SystemParameterLink.by_attr_first('system_parameter_value_id', data_type.id)
                if value:
                    value = self.get_name_from_system_parameter_link(value)

            if not value:
                continue

            outputlist.append({
                'name' : "<div class='edit system_parameters_edit' system_parameter_name_id='{1}'>{0}</div>".format(name, item.id),
                'value': value,
                             })
        dbcolumnlist=[
                'name',
                'value',
                    ]
        theadlist=[
                'Name',
                'Value',
                ]
        tdclasslist=[
                'action_link',
                '',
                ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "system_parameters_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">System Params</h4>
                        </div>
                        <div class="col-md-6 text-right">
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input type="text" class="form-control search" name="searchphrase" placeholder="Search">
                        </div>
                        <div class="col-md-8">
                            <button class="btn btn-primary action_search">Search</button>
                            <button class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {htmltbl}
                    </div>
                </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_javascript_system_parameters_onload(self, *args, **kwargs):
        javascript = """
        $(".system_parameters_edit").click(function(){
            var kwargs = 'system_parameter_name_id='+$(this).attr('system_parameter_name_id');
            $('#dialogdiv').load('/setup/get_modal_system_parameters?', kwargs, function(data){
                return false;
            });
        });
        """
        return javascript

    @expose()
    def get_modal_system_parameters(self, *args, **kwargs):
        system_parameter_name_id = kwargs.get('system_parameter_name_id', None)
        if not system_parameter_name_id:
            return ''

        system_parameters = SystemParameterName.by_id(system_parameter_name_id)
        if not system_parameters:
            return ''

        data_type = SystemParameterValue.by_attr_first('system_parameter_name_id', system_parameter_name_id)

        value_html = ''

        if data_type.system_parameter_data_type_id == LINK:
            value = SystemParameterLink.by_attr_first('system_parameter_value_id', data_type.id)
            value_html = self.get_selectbox_from_system_parameter_link(value)

        if data_type.system_parameter_data_type_id == INTEGER:
            value = SystemParameterInteger.by_attr_first('system_parameter_value_id', data_type.id)
            value_html = f""" <input id="value" value="{value.value}" type="number" name="name" class="form-control" required='true'> """

        if data_type.system_parameter_data_type_id == BOOLEAN:
            value = SystemParameterBoolean.by_attr_first('system_parameter_value_id', data_type.id)
            value_html = get_selectbox_bln_text('value', value.value)

        name = system_parameters.name
        hidden_input = get_hidden_input(**{'id': 'system_parameter_name_id', 'value': system_parameter_name_id})
        html = f"""
        <div class="modal fade" id="dialog_system_parameters" tabindex="-1" role="dialog" aria-labelledby="mysystem_parametersLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">Edit: {name}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_system_parameters'>
                            {hidden_input}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="name">Name</label>
                                    <div class="col-md-9">
                                        <input id="name" value="{name}" type="text" name="name" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="value">Value</label>
                                    <div class="col-md-9">
                                        {value_html}
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_system_parameters' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary system_parameters_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        var form_id = '#form_system_parameters'
        setFormValidation(form_id);
        $('#save_system_parameters').click(function(){
             var valid = FormIsValid(form_id);
             if(valid){
                var formserial = $(form_id).serialize();
                $.post('/setup/save_system_parameters?', formserial, function(data){
                    $.redirect('/setup/system_params');
                    return false;
                });
             }
        });
        $('.system_parameters_back').click(function(){
            $('#dialog_system_parameters').modal('hide');
        });
        $('#dialog_system_parameters').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_system_parameters(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        print()
        print(kwargs)
        print()
        return ''

#######################################################################
# Holiday
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def holiday(self, *args, **kwargs):
        self.create_public_holidays()
        html = self.get_holiday_html(*args, **kwargs)
        javascript = self.get_javascript_holiday_onload()
        title = "Holiday"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_holiday_html(self, *args, **kwargs):
        dbase_query = DBSession.query(Holiday). \
                filter(Holiday.bln_active == True). \
                order_by(Holiday.date.asc()). \
                all()
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'date' : "<div class='edit holiday_edit' holiday_id='{1}'>{0}</div>".format(item.date, item.id),
                'name' : item.name,
                'alternate_names' : item.alternate_names,
                'url' : f"""<a href="{item.url}" target="_blank">{item.url}</a>""",
                # 'description' : item.description,
                             })
        dbcolumnlist=[
                'date',
                'name',
                'alternate_names',
                'url',
                # 'description',
                    ]
        theadlist=[
                'Date',
                'Name',
                'Other Names',
                'Url',
                # 'Description',
                ]
        tdclasslist = [
                '',
                '',
                '',
                'action_link',
                # '',
        ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "holiday_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Holiday</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_holiday" class="btn btn-primary ml-auto">Create New Holiday</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input type="text" class="form-control search" name="searchphrase" placeholder="Search">
                        </div>
                        <div class="col-md-8">
                            <button class="btn btn-primary action_search">Search</button>
                            <button class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {htmltbl}
                    </div>
                </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_javascript_holiday_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_holiday").click(function(){
            $('#dialogdiv').load('/setup/get_modal_holiday?', function(data){
                return false;
            });
        });
        $(".holiday_edit").click(function(){
            var kwargs = 'holiday_id='+$(this).attr('holiday_id');
            $('#dialogdiv').load('/setup/get_modal_holiday?', kwargs, function(data){
                return false;
            });
        });
        """
        return javascript

    @expose()
    def get_modal_holiday(self, *args, **kwargs):

        holiday_id = kwargs.get('holiday_id', None)
        holiday = None

        hidden_input = ''
        date = name = alternate_names = url = description = ''

        if holiday_id:
            holiday = Holiday.by_id(holiday_id)
            url = holiday.url
            date = holiday.date
            name = holiday.name
            description = holiday.description
            alternate_names = holiday.alternate_names
            hidden_input = get_hidden_input(**{'id': 'holiday_id', 'value': holiday_id})

        html = f"""
        <div class="modal fade" id="dialog_holiday" tabindex="-1" role="dialog" aria-labelledby="myholidayLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">New Holiday</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_holiday'>
                            {hidden_input}
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="date">Date</label>
                                    <div class="col-md-9">
                                        <input id="date" value="{date}" type="text" name="date" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="name">Name</label>
                                    <div class="col-md-9">
                                        <input id="name" value="{name}" type="text" name="name" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="alternate_names">Other Names</label>
                                    <div class="col-md-9">
                                        <input id="alternate_names" value="{alternate_names}" type="text" name="alternate_names" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="url">Url</label>
                                    <div class="col-md-9">
                                        <input id="url" value="{url}" type="text" name="url" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="description">Description</label>
                                    <div class="col-md-9">
                                        <input id="description" value="{description}" type="text" name="description" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_holiday' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary holiday_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script nonce='1234'>
        var form_id = '#form_holiday'
        setFormValidation(form_id);
        $("#date").datetimepicker({ format: 'DD/MM/YYYY' });
        $('#save_holiday').click(function(){
             var valid = FormIsValid(form_id);
             if(valid){
                var formserial = $(form_id).serialize();
                $.post('/setup/save_holiday?', formserial, function(data){
                    $.redirect('/setup/holiday');
                    return false;
                });
             }
        });
        $('.holiday_back').click(function(){
            $('#dialog_holiday').modal('hide');
        });
        $('#dialog_holiday').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_holiday(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        holiday_id = kwargs.get('holiday_id', None)
        if not holiday_id:
            this = Holiday()
            this.date = kwargs.get('date', None)
            this.name = kwargs.get('name', None)
            this.alternate_names = kwargs.get('alternate_names', None)
            this.url = kwargs.get('url', None)
            this.description = kwargs.get('description', None)
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
        else:
            this = Holiday.by_id(holiday_id)
            if not this: return 'false'
            this.date = kwargs.get('date', None)
            this.name = kwargs.get('name', None)
            this.alternate_names = kwargs.get('alternate_names', None)
            this.url = kwargs.get('url', None)
            this.description = kwargs.get('description', None)
            DBSession.flush()
        return str(this.id)

#######################################################################
# Bootstrap
#######################################################################

    def create_appointment_data(self, *args, **kwargs):

        duration_list = [
            (1, 45),
            (2, 15),
            (3, 60),
        ]
        for duration_type_id, duration in duration_list:

            exists = AppointmentDuration.by_attr_first('duration_type_id', duration_type_id)
            if not exists:
                new = AppointmentDuration()
                new.duration_type_id = duration_type_id
                new.duration_in_minutes = duration
                DBSession.add(new)
                DBSession.flush()

        exists = AppointmentTime.latest_entry()
        if not exists:
            new = AppointmentTime()
            new.start_time = '8:00:00'
            new.end_time = '17:00:00'
            new.timeout_in_minutes = 10
            DBSession.add(new)
            DBSession.flush()

        org = EntityOrganisation.by_id(1)
        if not org:
            entity = Entity()
            entity.entity_type_id = 2 # org
            DBSession.add(entity)
            DBSession.flush()

            org = EntityOrganisation()
            org.entity_id = entity.id
            org.entity_organisation_type_id = 2 # public
            org.code = 'ACME'
            org.name = 'Acme Organisation'
            org.tax_number = 12345
            org.registration_number = 12345
            org.financial_regulatory_number = 12345
            DBSession.add(org)
            DBSession.flush()

        prod = EntityOrganisationProductOwner.by_attr_first('entity_organisation_id', org.id)
        if not prod:
            prod = EntityOrganisationProductOwner()
            prod.entity_organisation_id = org.id
            DBSession.add(prod)
            DBSession.flush()

        cli = EntityOrganisationClient.by_attr_first('entity_organisation_id', org.id)
        if not cli:
            cli = EntityOrganisationClient()
            cli.entity_organisation_id = org.id
            cli.billing_frequency_type_id = 3 # monthly
            DBSession.add(cli)
            DBSession.flush()

        ins = EntityOrganisationInsurer.by_attr_first('entity_organisation_id', org.id)
        if not ins:
            ins = EntityOrganisationInsurer()
            ins.entity_organisation_id = org.id
            DBSession.add(ins)
            DBSession.flush()

        owner = EntityOrganisationSystemOwner.by_attr_first('entity_organisation_id', org.id)
        if not owner:
            owner = EntityOrganisationSystemOwner()
            owner.entity_organisation_id = org.id
            DBSession.add(owner)
            DBSession.flush()

        owner_org = EntityOrganisation.by_id(org.id)

        branch = SystemOwnerBranch.by_attr_first('system_owner_id', owner.id)
        if not branch:
            branch = SystemOwnerBranch()
            branch.system_owner_id = owner.id
            branch.entity_organisation_branch_id = owner.id
            DBSession.add(branch)
            DBSession.flush()

        rolelist = [
            ('Branch Manager', True),
            ('Senior Legal Council', True),
            ('Legal Council', True),
            ('Junior Legal Council', True),
            ('Reception', False),
        ]
        for name, bln_have_appointment in rolelist:
            role = DBSession.query(AppointmentRole). \
                    filter(AppointmentRole.name == name). \
                    first()
            if not role:
                role = AppointmentRole()
                role.name = name
                role.bln_have_appointment = bln_have_appointment
                DBSession.add(role)
                DBSession.flush()

                day_of_weeks = DayOfWeekType.get_all('id')
                for day_of_week in day_of_weeks:
                    dow = AppointmentRoleDayOfWeek()
                    dow.appointment_role_id = role.id
                    dow.day_of_week_type_id = day_of_week.id
                    dow.appointment_duration_id = 1
                    dow.appointment_time_id = 1
                    DBSession.add(dow)
                    DBSession.flush()

            user = DBSession.query(SystemOwnerBranchUser). \
                    filter_by(appointment_role_id = role.id). \
                    filter_by(user_id = 1). \
                    first()
            if not user:
                user = SystemOwnerBranchUser()
                user.user_id = 1
                user.system_owner_branch_id = branch.id
                user.appointment_role_id = role.id
                DBSession.add(user)
                DBSession.flush()

        return True

    def create_entity_person_title(self, *args, **kwargs):
        titlelist = [
            ('na', 'unknown'),
        ]
        for title, description in titlelist:
            exists = DBSession.query(EntityPersonTitle). \
                    filter(EntityPersonTitle.title == title). \
                    first()
            if not exists:
                new = EntityPersonTitle()
                new.title = title
                new.description = description
                new.added_by = 1
                DBSession.add(new)
                DBSession.flush()
        return True

    def create_bank_branches(self, *args, **kwargs):

        jsonobj = None
        json_filepath = os.path.join(PUBLIC_DIRNAME, 'za_branch_codes.json')
        try:
            with open(json_filepath, 'r') as f:
                jsonobj = f.read()
        except FileNotFoundError:
            return False

        jsonobj = json.loads(jsonobj)
        za_branch_bank_codes_list = jsonobj.get('za_branch_bank_codes', [])
        for item in za_branch_bank_codes_list:
            name = item.get('bank_name', None)
            code = item.get('bank_code', None)

            bank = DBSession.query(Bank). \
                    filter(Bank.name == name). \
                    first()
            if not bank:
                bank = Bank()
                bank.name = name
                DBSession.add(bank)
                DBSession.flush()

            branch = DBSession.query(BankBranch). \
                    filter(BankBranch.bank_id == bank.id). \
                    filter(BankBranch.branch == name). \
                    filter(BankBranch.branch_code == code). \
                    first()
            if not branch:
                branch = BankBranch()
                branch.bank_id = bank.id
                branch.branch = name
                branch.branch_code = code
                DBSession.add(branch)
                DBSession.flush()
        return True

    def create_public_holidays(self, *args, **kwargs):

        jsonobj = None
        json_filepath = os.path.join(PUBLIC_DIRNAME, 'holiday_2020.json')
        try:
            with open(json_filepath, 'r') as f:
                jsonobj = f.read()
        except FileNotFoundError:
            return False

        jsonobj = json.loads(jsonobj)
        for item in jsonobj:

            date = item.get('date', None)
            name = item.get('name', None)
            alternate_names = item.get('alternate_names', '')
            url = item.get('url', None)

            desc = item.get('description', None)
            desc = str(desc).encode("latin-1", "replace").decode("latin-1")

            holiday = DBSession.query(Holiday). \
                    filter(Holiday.name == name). \
                    first()
            if not holiday:
                holiday = Holiday()
                holiday.date = date
                holiday.name = name
                holiday.alternate_names = alternate_names
                holiday.url = url
                holiday.description = desc
                DBSession.add(holiday)
                DBSession.flush()
        return True

    def create_system_parameters(self, *args, **kwargs):

        outputlist = [
            # BOOLEAN
            ('age_next_birthday', 'Age Next Birthday', BOOLEAN, True, None, None),

            # INTEGER
            ('policy_number_max_length', 'Policy Number Maximum Length', INTEGER, 10, None, None),
            ('vat_percent', 'VAT% (Value Added Tax Percent)', INTEGER, 15, None, None),

            # LINKS
            ('default_currency_id', 'Default Currency ID', LINK, 90, 'currency', 'name'),
            ('default_identity_type_id', 'Default Member Identity Type ID', LINK, 1, 'entity_person_identity_type', 'name'),
        ]

        for code, name, system_parameter_data_type_id, value, table_name, column in outputlist:

            param_name = SystemParameterName.by_attr_first('name', name)
            if not param_name:
                param_name = SystemParameterName()
                param_name.code = code
                param_name.name = name
                DBSession.add(param_name)
                DBSession.flush()

            param_data_type = DBSession.query(SystemParameterValue). \
                    filter(SystemParameterValue.system_parameter_name_id == param_name.id). \
                    filter(SystemParameterValue.system_parameter_data_type_id == system_parameter_data_type_id). \
                    first()
            if not param_data_type:
                param_data_type = SystemParameterValue()
                param_data_type.system_parameter_name_id = param_name.id
                param_data_type.system_parameter_data_type_id = system_parameter_data_type_id
                DBSession.add(param_data_type)
                DBSession.flush()

            if system_parameter_data_type_id == LINK:

                param_value = SystemParameterLink.by_attr_first('system_parameter_value_id', param_data_type.id)
                if not param_value:
                    param_value = SystemParameterLink()
                    param_value.system_parameter_value_id = param_data_type.id
                    param_value.table_name = table_name
                    param_value.column = column
                    param_value.value = value
                    DBSession.add(param_value)
                    DBSession.flush()

            if system_parameter_data_type_id == INTEGER:

                param_value = SystemParameterInteger.by_attr_first('system_parameter_value_id', param_data_type.id)
                if not param_value:
                    param_value = SystemParameterInteger()
                    param_value.system_parameter_value_id = param_data_type.id
                    param_value.value = value
                    DBSession.add(param_value)
                    DBSession.flush()

            if system_parameter_data_type_id == BOOLEAN:

                param_value = SystemParameterBoolean.by_attr_first('system_parameter_value_id', param_data_type.id)
                if not param_value:
                    param_value = SystemParameterBoolean()
                    param_value.system_parameter_value_id = param_data_type.id
                    param_value.value = value
                    DBSession.add(param_value)
                    DBSession.flush()
        return True

    def create_stop_words(self, *args, **kwargs):

        jsonobj = None
        json_filepath = os.path.join(PUBLIC_DIRNAME, 'stop_words.json')
        try:
            with open(json_filepath, 'r') as f:
                jsonobj = f.read()
        except FileNotFoundError:
            return False

        jsonobj = json.loads(jsonobj)
        for item in jsonobj:
            word = item.get('name', None)
            stop_word = DBSession.query(StopWord).\
                filter(StopWord.name == word).\
                first()
            if not stop_word:
                stop_word = StopWord()
                stop_word.name = word
                DBSession.add(stop_word)
                DBSession.flush()
        return True

    @expose()
    def create_private_dms_cabinets(self, *args, **kwargs):

        cabinet_list = [
            {'name': 'Private', 'description': 'Private Cabinet', },
        ]

        for item in cabinet_list:

            name = item.get('name', None)
            desc = item.get('description', None)

            cabinet = DBSession.query(Cabinet).\
                filter(Cabinet.name==name).\
                first()

            if not cabinet:
                cabinet = Cabinet()
                cabinet.name = name
                cabinet.description = desc
                cabinet.added_by = 1
                DBSession.add(cabinet)
                DBSession.flush()

        dms_admin_rolelist = Role.by_name('DMS Administrator')
        dms_user_rolelist = Role.by_name('DMS User')

        userlist = dms_admin_rolelist.users
        userlist.extend(dms_user_rolelist.users)
        userlist = list(set(userlist))

        for user in userlist:

            exists = DBSession.query(DrawerUserLink).\
                filter(DrawerUserLink.user_id == user.id).\
                first()

            if not exists:

                name = f"{user.username}'s Private Drawer"
                desc = f"Private Drawer for {user.username}"

                drawer = Drawer()
                drawer.cabinet_id = cabinet.id
                drawer.name = name
                drawer.description = desc
                drawer.added_by = 1
                DBSession.add(drawer)
                DBSession.flush()

                cabinet_user = CabinetUserLink()
                cabinet_user.cabinet_id = cabinet.id
                cabinet_user.user_id = user.id
                DBSession.add(cabinet_user)
                DBSession.flush()

                drawer_user = DrawerUserLink()
                drawer_user.drawer_id = drawer.id
                drawer_user.user_id = user.id
                DBSession.add(drawer_user)
                DBSession.flush()

        return True

    def create_mime_types(self, *args, **kwargs):

        jsonobj = None
        json_filepath = os.path.join(PUBLIC_DIRNAME, 'mime_types.json')
        try:
            with open(json_filepath, 'r') as f:
                jsonobj = f.read()
        except FileNotFoundError:
            return False

        FILE_TYPE_FILE = TYPEUTIL.get_id_of_name('file_type', 'file')
        FILE_TYPE_IMAGE = TYPEUTIL.get_id_of_name('file_type', 'image')
        FILE_TYPE_AUDIO = TYPEUTIL.get_id_of_name('file_type', 'audio')
        FILE_TYPE_VIDEO = TYPEUTIL.get_id_of_name('file_type', 'video')
        FILE_TYPE_ARCHIVE = TYPEUTIL.get_id_of_name('file_type', 'archive')
        FILE_TYPE_DOCUMENT = TYPEUTIL.get_id_of_name('file_type', 'document')

        MIME_TYPE_APPLICATION = TYPEUTIL.get_id_of_name('mime_parent_type', 'application')

        jsonobj = json.loads(jsonobj)
        for item in jsonobj:

            mime = item.get('mime', None)
            parent = item.get('parent', None)
            file_code = item.get('file', None)
            application = item.get('application', None)

            mime_parent_type_id = TYPEUTIL.get_id_of_name('mime_parent_type', parent)
            if not mime_parent_type_id:
                mime_parent_type_id = MIME_TYPE_APPLICATION

            if self.check_file(parent, mime, file_code):
                file_type_id = FILE_TYPE_FILE

            elif self.check_archive(parent, mime, file_code):
                file_type_id = FILE_TYPE_ARCHIVE

            elif self.check_document(parent, mime, file_code):
                file_type_id = FILE_TYPE_DOCUMENT

            elif self.check_image(parent, mime, file_code):
                file_type_id = FILE_TYPE_IMAGE

            elif self.check_video(parent, mime, file_code):
                file_type_id = FILE_TYPE_VIDEO

            elif self.check_audio(parent, mime, file_code):
                file_type_id = FILE_TYPE_AUDIO

            else:
                file_type_id = FILE_TYPE_ARCHIVE

            mime_type = DBSession.query(MimeType). \
                filter(MimeType.mime_parent_type_id == mime_parent_type_id). \
                filter(MimeType.name == mime). \
                first()
            if not mime_type:
                mime_type = MimeType()
                mime_type.mime_parent_type_id = mime_parent_type_id
                mime_type.name = mime
                mime_type.added_by = 1
                DBSession.add(mime_type)
                DBSession.flush()
            mime_type_id = mime_type.id

            extension = DBSession.query(FileExtension). \
                filter(FileExtension.extension == file_code). \
                first()
            if not extension:
                extension = FileExtension()
                extension.mime_type_id = mime_type_id
                extension.extension = file_code
                extension.description = application
                extension.file_type_id = file_type_id
                extension.added_by = 1
                extension
                DBSession.add(extension)
                DBSession.flush()

        return True

    def check_file(self, parent='', mime='', extension=''):
        if parent == 'message' and mime == 'rfc822' and extension == 'nws':
            return True

        if parent == 'text' and mime == 'html' and extension == 'stm':
            return True

        if parent == 'x-world' and mime == 'x-vrml':
            return True

        if parent == 'application':
            if mime == 'x-perfmon' and extension == 'pma':
                return True
            file_list = ['envoy', 'epub+zip', 'futuresplash', 'hta', 'internet-property-stream', 'json', 'ld+json',
                         'mac-binhex40', 'octet-stream', 'ogg', 'olescript', 'pics-rules', 'pkcs10', 'pkix-crl',
                         'postscript', 'set-payment-initiation', 'set-registration-initiation', 'vnd.amazon.ebook',
                         'vnd.apple.installer+xml', 'vnd.mozilla.xul+xml', 'vnd.ms-fontobject', 'vnd.ms-outlook',
                         'vnd.ms-pkicertstore', 'vnd.ms-pkiseccat', 'vnd.ms-pkistl', 'x-csh', 'x-dvi', 'x-hdf',
                         'x-httpd-php', 'x-internet-signup', 'x-iphone', 'x-javascript', 'x-msaccess', 'x-mscardfile',
                         'x-msclip', 'x-msdownload', 'x-msmediaview', 'x-msmetafile', 'x-msmoney', 'x-mspublisher',
                         'x-msschedule', 'x-msterminal', 'x-mswrite', 'x-netcdf', 'x-perfmon', 'x-pkcs12',
                         'x-pkcs7-certificates', 'x-pkcs7-certreqresp', 'x-pkcs7-mime', 'x-pkcs7-signature', 'x-sh',
                         'x-shockwave-flash', 'x-sv4cpio', 'x-sv4crc', 'x-tcl', 'x-troff', 'x-troff-man', 'x-troff-me',
                         'x-troff-ms', 'x-wais-source', 'x-x509-ca-cert', 'xhtml+xml', 'xml', 'ynd.ms-pkipko']
            if mime in file_list:
                return True

        if parent == 'font':
            file_list = ['otf', 'ttf', 'woff', 'woff2']
            if mime in file_list:
                return True

        if parent == 'text':
            file_list = ['calendar', 'css', 'h323', 'iuls', 'javascript', 'plain', 'scriptlet',
                         'webviewhtml', 'x-component', 'x-setext', 'x-vcard']
            if mime in file_list:
                return True
        return False

    def check_archive(self, parent='', mime='', extension=''):
        if parent == 'message' and mime == 'rfc822' and extension == 'mht':
            return True

        if parent == 'x-world' and mime == 'x-vrml' and extension == 'wrz':
            return True

        if parent == 'application':
            if mime == 'x-perfmon' and extension == 'pma':
                return True

            archive_list = ['gzip', 'java-archive','octet-stream', 'vnd.rar', 'x-7z-compressed',
                            'x-bcpio', 'x-bzip', 'x-bzip2', 'x-compress', 'x-compressed',
                            'x-cpio', 'x-freearc', 'x-gtar', 'x-shar', 'x-stuffit', 'x-tar',
                            'x-ustar', 'zip']
            if mime in archive_list:
                return True
        return False

    def check_document(self, parent='', mime='', extension=''):
        if parent == 'message' and mime == 'rfc822' and extension == 'mhtml':
            return True

        if parent == 'text':
            if mime == 'plain' and extension == 'txt':
                return True

            doc_list = ['csv', 'html', 'richtext', 'tab-separated-values']
            if mime in doc_list:
                return True

        if parent == 'application':
            doc_list = ['msword', 'rtf', 'pdf', 'vnd.ms-excel', 'vnd.ms-powerpoint', 'vnd.ms-project',
                        'vnd.ms-works', 'vnd.oasis.opendocument.presentation', 'vnd.oasis.opendocument.spreadsheet',
                        'vnd.oasis.opendocument.text', 'vnd.openxmlformats-officedocument.presentationml.presentation',
                        'vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                        'vnd.openxmlformats-officedocument.wordprocessingml.document', 'vnd.visio', 'winhlp',
                        'x-abiword', 'x-cdf', 'x-latex', 'x-tex', 'x-texinfo']
            if mime in doc_list:
                return True
        return False

    def check_image(self, parent='', mime='', extension=''):
        if parent == 'x-world' and mime == 'x-vrml' and extension == 'xof':
            return True

        if parent == 'application':
            if mime == 'x-director' and extension == 'dcr':
                return True

            image_list = ['fractals', 'octet-stream', 'oda']
            if mime in image_list:
                return True

        if parent == 'image':
            image_list = ['bmp', 'cis-cod', 'gif', 'ief', 'jpeg', 'pipeg', 'png', 'svg+xml', 'tiff',
                          'vnd.microsoft.icon', 'webp', 'x-cmu-raster', 'x-cmx', 'x-portable-anymap',
                          'x-portable-bitmap', 'x-portable-graymap', 'x-portable-pixmap', 'x-rgb',
                          'x-xbitmap', 'x-xpixmap', 'x-xwindowdump']
            if mime in image_list:
                return True
        return False

    def check_video(self, parent='', mime='', extension=''):
        if parent == 'application' and mime == 'x-director':
            return True

        if parent == 'video':
            video_list = ['3gpp', '3gpp2', 'mp2t', 'mp4', 'mpeg', 'ogg', 'quicktime', 'webm',
                         'x-la-asf', 'x-ms-asf', 'x-ms-asf', 'x-ms-asf', 'x-msvideo', 'x-sgi-movie']
            if mime in video_list:
                return True

        return False

    def check_audio(self, parent='', mime='', extension=''):
        if parent == 'audio':
            audio_list = ['aac', 'basic', 'mid', 'midi', 'mpeg', 'ogg', 'opus', 'wav',
                          'webm', 'x-aiff', 'x-midi', 'x-mpegurl', 'x-pn-realaudio']
            if mime in audio_list:
                return True
        return False
