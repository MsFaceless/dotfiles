#!/bin/python

import os
import base64
from shutil import copyfile, rmtree
from datetime import datetime

from PIL import Image
from pkg_resources import resource_filename

PUBLIC_DIRNAME = os.path.abspath(resource_filename('calabash', 'public'))
UPLOADS_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'uploads')

MAX_SIZE = (200, 200)

class ImageUploader:

    def __init__(self, *args, **kwargs):
        self.image = kwargs.get('image', None)
        self.filename = kwargs.get('filename', None)
        self.username = kwargs.get('username', None)
        self.group_id = kwargs.get('group_id', None)
        self.save_filename = kwargs.get('save_filename', None)
        self.resize_images = kwargs.get('resize_images', False)

        self.image_data = self.set_image_data()
        self.extension = self.get_extension_from_filename()
        self.filepath = self.set_filepath()
        self.ensure_dir()

    def upload(self, *args, **kwargs):
        success = False
        if not self.image_data:
            return success

        if self.save_filename:
            self.rename_if_exists()

        with open(self.filepath, 'wb') as f:
            f.write(self.image_data)
            success = True

        if self.resize_images:
            self.resize()
        return success

    def rename_if_exists(self, *args, **kwargs):
        if not os.path.isfile(self.filepath):
            return False

        old_name = os.path.basename(self.filepath)
        datetime_now = datetime.now().strftime('%d_%m_%Y_%H:%M:%S')
        new_name = f'older_{datetime_now}_{old_name}'
        new_filepath = self.filepath.replace(old_name, new_name)

        try:
            result = copyfile(self.filepath, new_filepath)
        except:
            result = False
        return result

    def resize(self, *args, **kwargs):
        img = Image.open(self.filepath)
        img.thumbnail(MAX_SIZE, Image.ANTIALIAS)
        img.save(self.filepath)
        return True

    def get_base64_image(self, *args, **kwargs):
        if self.username:
            name = self.username
        if self.group_id:
            name = str(self.group_id)
        name = name.lower()

        filepath = None
        for filename in os.listdir(UPLOADS_DIRNAME):
            this_name, extension = os.path.splitext(filename)
            if not extension:
                continue

            this_name = str(this_name).lower()
            if this_name == name:
                filepath = os.path.join(UPLOADS_DIRNAME, filename)
                break

        if not filepath:
            return False

        encoding = None
        with open(filepath, 'rb') as imgfile:
            encoding = base64.b64encode(imgfile.read()).decode('utf-8')

        if not encoding:
            return False

        return encoding

    def delete_base64_image(self, *args, **kwargs):
        if self.username:
            name = self.username
        if self.group_id:
            name = self.group_id

        filepath = None
        for filename in os.listdir(UPLOADS_DIRNAME):

            this_name, extension = os.path.splitext(filename)
            this_name = str(this_name).lower()
            if this_name == name:
                filepath = os.path.join(UPLOADS_DIRNAME, filename)
                break

        if not filepath:
            return False

        os.remove(filepath)
        return True

    def delete_folder_by_username(self, *args, **kwargs):
        if not self.username:
            return False
        filepath = os.path.join(UPLOADS_DIRNAME, self.username)
        try:
            result = rmtree(filepath)
        except FileNotFoundError:
            return False
        return True

    def get_extension_from_filename(self, *args, **kwargs):
        if not self.filename:
            return None
        _, extension = os.path.splitext(self.filename)
        return extension.lower()

    def set_image_data(self, *args, **kwargs):
        if not self.image:
            return None
        try:
            image_data = base64.b64decode(self.image)
        except Exception as e:
            image_data = None
        return image_data

    def set_filepath(self, *args, **kwargs):
        if not self.extension:
            return None

        filename = None
        if self.save_filename:
            filename = f'{self.username}/{self.save_filename}{self.extension}'

        else:
            if self.username:
                filename = f'{self.username}{self.extension}'

            if self.group_id:
                filename = f'{self.group_id}{self.extension}'

        if not filename:
            return None

        filepath = os.path.join(UPLOADS_DIRNAME, filename)
        return filepath

    def ensure_dir(self, *args, **kwargs):
        if not self.filepath:
            return False
        dirname = os.path.dirname(self.filepath)
        if not os.path.exists(dirname):
            os.makedirs(dirname)
        return True
