# -*- coding: utf-8 -*-
"""ProfileController module"""

from tg import predicates, require, expose, request

from tg.i18n import ugettext as _
from tg.i18n import lazy_ugettext as l_

from rocket.model import *

from rocket.lib.tg_utils import *
from rocket.lib.base import BaseController

class ProfileController(BaseController):

    @expose()
    def _default(self, *args, **kwargs):
        return 'This page is not available.'

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def index(self, *args, **kwargs):
        title = _("My Profile")
        html = self.get_active_profile_html(*args, **kwargs)
        javascript = self.get_active_profile_javascript_onload()
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_profile_html(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        change_password_form = self.change_password_form(**kwargs)
        title = _(f"{usernow.name}'s Profile")
        html = f"""
        <div class="row">
            <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{title}</h4>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                </div>
            </div>
        </div>
        <div class="row">
            <div class="card col-md-6">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-12">
                            <h4 class="card-title">Change Password</h4>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <form id="form_change_password">
                        <div class="row d-flex">
                            <div class="col-md-12 text-left" id='div_change_password'>
                                {change_password_form}
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def change_password_form(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        positive = kwargs.get('positive', 'far fa-check-circle')
        negative = kwargs.get('negative', 'far fa-times-circle')
        min_length = kwargs.get('min_length', 10)
        max_length = kwargs.get('max_length', 128)
        html = f"""
        <!-- Do not remove this test form, the password_form does not work without it. -->
        <form id='test'></form>
        <form id="password_form" data-positive-icon="{positive}" data-negative-icon="{negative}" data-min-length="{min_length}"
                                                                                                data-max-length="{max_length}" data-user-id="{usernow.id}" novalidate>
            <div class="form-group">
                <label>Current Password</label>
                <input id="currentPassword" class="form-control" id="current-password" type="password" autocomplete="off">
                <small id="wrongPassword" class="feedback text-danger" style="display: none;">
                    This field should not be empty. If you can't remember your current password, </br>
                    please <span id="forgotPassword" class="display_link text-danger"><b>click here</b></span> to reset your password.
                </small>
            </div>
            <div class="form-group">
                <label>New Password</label>
                <input id="newPassword" class="form-control" type="password" minlength="{min_length}" maxlength="{max_length}"
                                                                                                      autocomplete="off" disabled>
            </div>
            <div class="input-group form-group">
                <span class="policy_text">
                    <b>Password should </b>
                    <ul class="mb-0">
                        <li id="length">
                            be at least 10 characters long
                            <i class="{positive} text-success" hidden></i>
                            <i class="{negative} text-danger" hidden></i>
                        </li>
                        <li id="uppercase">
                            contain at least one uppercase character
                            <i class="{positive} text-success" hidden></i>
                            <i class="{negative} text-danger" hidden></i>
                        </li>
                        <li id="lower">
                            contain at least one lowercase character
                            <i class="{positive} text-success" hidden></i>
                            <i class="{negative} text-danger" hidden></i>
                        </li>
                        <li id="special">
                            contain at least one special character
                            <i class="{positive} text-success" hidden></i>
                            <i class="{negative} text-danger" hidden></i>
                        </li>
                        <li id="digit">
                            contain at least one digit
                            <i class="{positive} text-success" hidden></i>
                            <i class="{negative} text-danger" hidden></i>
                        </li>
                    </ul>
                </span>
            </div>
            <div class="form-group">
                <label>Confirm New Password</label>
                <input id="confirmPassword" class="form-control" type="password" minlength="{min_length}" maxlength="{max_length}"
                                                                                                          autocomplete="off" disabled>
                <small class="confirmPassword error text-danger" style="display: none;">Passwords don't match.</small>
            </div>
            <div class="text-right">
                <button id="btnChangePassword" type="submit" class="btn btn-info ml-auto" disabled>Change Password</button>
            </div>
        </form>
        """
        return html

    def get_active_profile_javascript_onload(self, *args, **kwargs):
        javascript = """
        var passwordForm = $('#password_form');
        var currentPassword = $('#currentPassword');
        var wrongPassword = $('#wrongPassword');
        var newPassword = $('#newPassword');
        var confirmPassword = $('#confirmPassword');
        var minLength = passwordForm.data('minLength');
        var maxLength = passwordForm.data('maxLength');
        var userId = passwordForm.data('userId');
        currentPassword.on('keyup', function () {
            if (currentPassword.val().length >= 8) {
                var password = currentPassword.val();
                var kwargs = 'password=' + password;
                kwargs += '&user_id=' + userId;
                $.post('/useraccess/password_exists', kwargs, function (data) {
                    if(data === 'true'){
                        currentPassword.addClass('is-valid').removeClass('is-invalid');
                        wrongPassword.fadeOut('slow');
                        newPassword.removeAttr('disabled');
                    } else {
                        currentPassword.addClass('is-invalid').removeClass('is-valid');
                        wrongPassword.fadeIn('slow');
                        newPassword.removeAttr('disabled');
                    };
                    return false;
                });
            }
        });

        var lengthRegex = new RegExp("^([a-zA-Z0-9!,%,&,@,#,$,^,*,?,_,~_-]){"+minLength+","+maxLength+"}$")
        var _length, _lower, _upper, _digit, _special, _count
        _length = _lower = _upper = _digit = _special = _count = false

        newPassword.keyup(function(e){
            var pass = newPassword.val();
            _upper = validatePassword(/[A-Z]/g, 'uppercase', '_upper');
            _lower = validatePassword(/[a-z]/g, 'lower', '_lower');
            _digit = validatePassword(/[0-9]/g, 'digit', '_digit');
            _special = validatePassword(/([!,%,&,@,#,$,^,*,?,_,~])/g, 'special', '_special');
            _length = validatePassword(lengthRegex, 'length', '_length');

            if (_length && _lower && _upper && _digit && _special){
                $('#confirmPassword').removeAttr('disabled');
                newPassword.addClass('is-valid').removeClass('is-invalid');

            } else {
                $('#confirmPassword').attr('disabled');
                newPassword.addClass('is-invalid').removeClass('is-valid');
            };

            function validatePassword(pattern, selector, checkVar){

                var matches = pass.match(pattern);

                if(matches){
                    $('#'+selector+' .fa-check-circle').removeAttr('hidden');
                    $('#'+selector+' .fa-times-circle').attr('hidden', 'hidden');
                    return true;

                } else {
                    $('#'+selector+' .fa-check-circle').attr('hidden', 'hidden');
                    $('#'+selector+' .fa-times-circle').removeAttr('hidden');
                    return false;
                }
            };

        });
        confirmPassword.keyup(function(e){
            var _this = $(e.currentTarget);
            var pass = newPassword.val();
            var confpass = $(_this).val();
            var btnChangePassword = $('#btnChangePassword');
            if(pass == confpass){
                btnChangePassword.removeAttr('disabled');
                _this.removeClass('is-invalid')
                    .addClass('is-valid');
                $('.confirmPassword.error').fadeOut('slow');
            }else{
                btnChangePassword.attr('disabled', 'disabled');
                _this.removeClass('is-valid')
                    .addClass('is-invalid');
                $('.confirmPassword.error').fadeIn('slow');
            }
        });
        $('#btnChangePassword').click(function (e) {
            e.preventDefault();
            var newPass = newPassword.val();
            var confirmPass = confirmPassword.val();
            if (newPass === confirmPass) {
                var kwargs = 'password=' + confirmPass;
                kwargs += '&user_id=' + userId;
                $.post('/useraccess/reset_password?', kwargs, function (data) {
                    if (data === 'true') {
                        $.redirect('/profile');
                        return false
                    }
                });
            };
            return false;
        });
        $('#forgotPassword').click(function(){
            var kwargs = {'id': userId};
            $.post('/useraccess/send_magic_link?', kwargs, function(data){
                if(data==='true'){
                    showNotification('success',
                        'We send you a magic link via email, please keep an eye on your inbox and follow the instructions from there.');
                    return false;
                } else {
                    showNotification('danger',
                        'We were unable to process this request, please confirm that the email address that we have on record is correct and operational.');
                    return false;
                }
                return false;
            })
        });
        """
        return javascript
