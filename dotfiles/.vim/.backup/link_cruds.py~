from sqlalchemy.orm import Session
from model.link_tables import active_link_tables
from cruds.crud_utils import get_returnable_dict

active_link_cruds = {}

def get_required_args(Model, kwargs, update=False):
    model_columns = Model.__table__.columns
    ignore_columns = ['id', 'bln_active']
    if update: ignore_columns = []
    required_args = {}
    for column in model_columns:
        if column.name in ignore_columns: continue
        required_value = kwargs.get(column.name, "SomeString")
        if required_value == "SomeString": continue
        required_args[column.name] = required_value
    for key, value in required_args.items():
        if value == None: return False
    return required_args 

def create_link_create_function(model_name, Model):
    
    def create(db: Session, **kwargs):
        returnable = {}
        required_args = get_required_args(Model, kwargs)
        name = kwargs.get("name", "NoName")

        print()
        print('create_link_create_function')
        print(required_args)
        print()
        db_record = Model(**required_args)
        if name: db_record.name = name
        try: 
            db.add(db_record)
            db.commit()
            db.refresh(db_record)
            returnable = get_returnable_dict(db_record)
            print(returnable)
            db.flush()
        except Exception as e: 
            print(e)
            db.rollback()
        finally: 
            db.close()

        return returnable
    
    model_name = model_name[:-4]
    function_name = f"create_{model_name.lower()}_link"
    setattr(create, "__name__", function_name)
    setattr(create, "__qualname__", function_name)
    return create

def create_link_read_by_name_function(model_name, Model):

    def get_by_name(db: Session, name: str):
        returnable = False
        db_link = False
        try: db_link = db.query(Model). \
                    filter(Model.name==name). \
                    first()

        except: return returnable
        if db_link: returnable = db_link.__dict__
        return returnable
    
    function_name = f"get_{model_name.lower()}_by_name"
    setattr(get_by_name, "__name__", function_name)
    setattr(get_by_name, "__qualname__", function_name)
    return get_by_name

def create_link_read_by_id_function(model_name, Model):

    def get_by_id(db: Session, target_id: int):
        returnable = False
        db_link = False
        try: db_link = db.query(Model). \
                    filter(Model.id==target_id). \
                    filter(Model.bln_active==True). \
                    first()
        except: return returnable
        if db_link: returnable = db_link.__dict__
        db.close()
        return returnable
    
    function_name = f"get_{model_name.lower()}_by_id"
    setattr(get_by_id, "__name__", function_name)
    setattr(get_by_id, "__qualname__", function_name)
    return get_by_id

def create_link_read_all_by_parent_id_function(model_name, Model):

    def get_all_by_parent_id(db: Session, parent_table: str, parent_id: int, limit: int=10):
        if not parent_table or not parent_id: return False
        returnable = False
        db_link = False
        try:
            db_link = db.query(Model). \
                    filter(getattr(Model, f"{parent_table}_id")==parent_id). \
                    limit(limit). \
                    all()
        except: return returnable
                
        if db_link and isinstance(db_link, list): returnable = [item for item in db_link]
        db.close()
        return returnable
    
    function_name = f"get_all_{model_name.lower()}_by_parent_id"
    setattr(get_all_by_parent_id, "__name__", function_name)
    setattr(get_all_by_parent_id, "__qualname__", function_name)
    return get_all_by_parent_id

def create_link_delete_function(model_name, Model):
    my_columns = Model.__table__.columns
    
    def link_delete(db: Session, target_id: int, added_by: int):
        if not target_id: return False
        try:
            exists = db.query(Model). \
                filter(getattr(Model, 'id')==target_id). \
                filter(Model.bln_active==True). \
                first()
            db_record = exists
            db_record.bln_active = False
        except: return False
        try: db.commit()
        except Exception as e:
            db.rollback()
        finally:
            db.flush()
            db.close()
        returnable = True
        return returnable
    
    model_name = model_name[:-4]
    function_name = f"delete_{model_name.lower()}_link"
    setattr(link_delete, "__name__", function_name)
    setattr(link_delete, "__qualname__", function_name)
    return link_delete

def create_undelete_function(model_name, Model):
    
    def undelete(db: Session, target_id: int, added_by: int):
        if not target_id: return False
        try: exists = db.query(Model). \
                    filter(Model.id==target_id). \
                    filter(Model.bln_active==False). \
                    one()
        except: exists = False
        if not exists: return False
        db_record = exists
        db_record.bln_active = True
        db_record.bln_edited = True
        db.add(db_record)
        try: db.commit()
        except: db.rollback()
        finally: 
            db.flush()
            db.close()

        returnable = False
        if db_record: returnable = db_record.__dict__
        return returnable
    
    model_name = model_name[:-4]
    function_name = f"undelete_{model_name.lower()}_link"
    setattr(undelete, "__name__", function_name)
    setattr(undelete, "__qualname__", function_name)
    return undelete

def generate_link_cruds():
    for model_name, Model in active_link_tables.items():
        cruds_dict = {}

        link_create = create_link_create_function(model_name, Model)
        cruds_dict['create'] = link_create

        link_get_by_id = create_link_read_by_id_function(model_name, Model)
        cruds_dict['get_by_id'] = link_get_by_id

        link_get_by_name = create_link_read_by_name_function(model_name, Model)
        cruds_dict['get_by_name'] = link_get_by_name

        link_get_all = create_link_read_all_by_parent_id_function(model_name, Model)
        cruds_dict['get_all_by_parent_id'] = link_get_all

        link_delete = create_link_delete_function(model_name, Model)
        cruds_dict['delete'] = link_delete

        link_undelete = create_undelete_function(model_name, Model)
        cruds_dict['undelete'] = link_undelete

        active_link_cruds[model_name.lower()] = cruds_dict

    return True
