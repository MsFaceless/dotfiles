# -*- coding: utf-8 -*-
"""BrandingController module"""

import os
import json
from pkg_resources import resource_filename

from tg import expose, require, redirect, validate, url, request, response, predicates

from rocket.model import *

from rocket.lib.tg_utils import *
from rocket.lib.html_utils import *
from rocket.lib.base import BaseController

from sqlalchemy import func, desc, asc

FILENAME = os.path.abspath(resource_filename('rocket', 'public'))
PUBLIC_DIRNAME = os.path.join(FILENAME)

__all__ = ['BrandingController']

class BrandingController(BaseController):

    @expose()
    def _default(self, *args, **kwargs):
        return 'This page is not available.'

    allow_only = predicates.has_any_permission('Administrator', 'CatalogMaintenance')

    @expose('rocket.templates.generic')
    def index(self, *args, **kwargs):
        form  = self.get_colors_form()
        html = f"""
        <div class="card">
            <div class="card-header">
                <div class="row d-flex">
                    <div class="col-md-6">
                        <h4 class="card-title">System Colours</h4>
                    </div>
                </div>
            </div>
            <div class="card-body">
                {form}
            </div>
        </div>
        """
        javascript = """
        """
        title = "Branding"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_colors_form(self, *args, **kwargs):
        params_list = []
        colors = Branding.get_all('id')
        for color in colors:
            data_val = color.key
            label = data_val.title().replace('-', ' ')
            name = data_val.lower().replace('-', '_')

            input_field = f'<input id="{name}" type="text" name="{name}" class="form-control var" required data-id="{color.id}" value="{color.value}">'
            if color.type == 'color':
                input_field = f'<input id="{name}" type="color" name="{name}" class=" var" required data-id="{color.id}" value="{color.value}">'

            params_list.append({
                'input_wrapper_class': 'col-md-12',
                'label_attrs': 'required',
                'input_id': name,
                'label_val': label,
                'input_type': 'custom',
                'input_field': input_field
            })

        params_list.append({
            'input_type': 'widget',
            'widget': '<button id="saveBtn" class="btn btn-primary ml-auto">Update</button>'
        })
        javascript = """
        <script nonce='1234'>
            var colorForm = $('#color_form');
            setFormValidation(colorForm);

            $('#saveBtn').click(function(){
                var valid = FormIsValid(colorForm);
                if(valid){
                    var kwargs = {}
                    $('.var').each(function(i){
                        kwargs[$(this).data('id')] = $(this).val();
                    });
                    $.post('/branding/set_values', kwargs, function(data){
                        var result = JSON.parse(data);
                        console.log(result);
                        if(result.success === true){
                            //showNotification(result.status, result.message);
                            $.redirect('/branding');
                            return false;
                        }
                    });
                    return false;
                }
            });
        </script>
        """
        return build_html_form('color_form', params_list, 'col-md-6') + javascript

    @expose()
    def set_values(self, *args, **kwargs):
        css_list = []
        for key, value in kwargs.items():
            branding_id = int(key)
            this = Branding.by_id(branding_id)
            this.value = value
            DBSession.flush()
            css_list.append((this.key, value, this.type))

        file_result = self.set_css_file(css_list)
        return json.dumps({'success': True, 'message': 'Default values have been set, please refresh your page to see them.', 'status': 'success'})

    def set_css_file(self, css_list=[], *args, **kwargs):
        content = ":root{\n"

        for var in css_list:
            var_type = var[2]
            if var_type == 'color':
                content += f"\t{var[0]}: {var[1]};\n"
            elif var_type == 'url':
                content += f"\t{var[0]}: url('{var[1]}');\n"
        content += "}"

        css_file = os.path.join(PUBLIC_DIRNAME, 'css/branding.css')
        with open(css_file, 'w') as wf:
            wf.write(content)

        return True
