#!/bin/python
# -*- coding: utf-8 -*-
# import the necessary packages
import os
import re
import random

# import numpy as np
# import pandas as pd
# import matplotlib.pyplot as plt
# % matplotlib inline

# from os import path
# from PIL import Image
# from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator

WORD_LIMIT = 20
# WORD_LIMIT = 200
REGEX_STRING = r"/[^A-Za-z0-9_\-\s]/g"

class WordCloud():
    """Docstring for Test. """
    def __init__(self, *args, **kwargs):
        pass

####################################################################################################################
# --------------------------------------        WORD CLOUD Functions          ------------------------------------ #
####################################################################################################################
    def file_name_regex_replace(self, file_name='', *args, **kwargs):
        old_file_name, ext = os.path.splitext(file_name)
        new_file_name = newstring = "".join(c for c in old_file_name if c.isalpha())
        return new_file_name+ext
        # text = text.replace("–","")
        # raw_text = re.sub('\â€”','', text)
        # return re.sub(REGEX_STRING, "", raw_text)

    def word_cloud_regex_replace(self, text='', *args, **kwargs):
        text = text.replace("–","")
        raw_text = re.sub('\â€”','', text)
        return re.sub(REGEX_STRING, "", raw_text)

    def build_and_sort_word_list(self, text='', *args, **kwargs):
        if not text:
            return {}
        # Remove punctuations, non-word characters...
        # note: this case also remove Vietnamese unicode characters, improve later when needed
        text = self.word_cloud_regex_replace(text)
        # re.sub(REGEX_STRING, "", text)

        words = text.split()

        raw_result = {}
        word_count = 0
        for word in words:
            if not word or word == '':
                continue
            word_count += 1
            if word not in raw_result.keys():
                raw_result[word] = 1
            else:
                raw_result[word] += 1

        if word_count <= 0:
            return {}

        # sort the dictionary
        sorted_dict = sorted(raw_result.items(), key=lambda x: x[1], reverse=True)

        # Keep only the top WORD_LIMIT number of records
        result = dict(sorted_dict[:WORD_LIMIT]) 

        return self.get_weighted_result(result)

    def build_and_sort_word_list_from_file(self, file_word_dict={}, *args, **kwargs):
        if not file_word_dict:
            return {}
        # Remove punctuations, non-word characters...
        # note: this case also remove Vietnamese unicode characters, improve later when needed
        # sort the dictionary
        # sort the dictionary
        sorted_dict = sorted(file_word_dict.items(), key=lambda x: x[1], reverse=True)
        # Keep only the top WORD_LIMIT number of records
        result = dict(sorted_dict[:WORD_LIMIT]) 
        return self.get_weighted_result(result)


    def get_weighted_result(self, result={}, *args, **kwargs):
        # obtain the highest value in the dict
        highest_value = result[list(result)[0]]
        # obtain the lowest value in the dict
        lowest_value = result[list(result)[-1]]

        highest_new_value = highest_value - lowest_value
        for key, value in result.items():
            result[key] = self.get_rank_from_value(value, highest_value, lowest_value)
        return result

    def get_rank_from_value(self, value=0, highest_value=0, lowest_value=0, *args, **kwargs):
        if value == 0 or highest_value == 0 or lowest_value == 0:
            return 0
        var1 = (value-lowest_value)
        var2 = (highest_value - lowest_value)
        if var1 == 0 or var2 == 0:
            return 1
        return round(((var1)/(var2)*11)+1)
        # return round((value-lowest_value)/(highest_value - lowest_value)*12)

    def build_word_cloud_html(self, word_dict='', *args, **kwargs):
        # This obviously needs to be setup based on the theme in time...
        colour_dict = dict([
                        (0, "font-size: 12px; color: rgb(53, 156, 216)"), 
                        (1, "font-size: 13.8151px; color: rgb(53, 156, 216)"), 
                        (2, "font-size: 15.8319px; color: rgb(55, 161, 212)"), 
                        (3, "font-size: 17.8487px; color: rgb(56, 165, 209)"), 
                        (4, "font-size: 19.8655px; color: rgb(58, 170, 205)"), 
                        (5, "font-size: 21.8824px; color: rgb(59, 175, 201)"), 
                        (6, "font-size: 23.8992px; color: rgb(61, 179, 198)"), 
                        (7, "font-size: 25.916px; color: rgb(62, 184, 194)"), 
                        (8, "font-size: 27.9328px; color: rgb(64, 189, 190)"), 
                        (9, "font-size: 29.9496px; color: rgb(66, 194, 186)"), 
                        (10, "font-size: 31.9664px; color: rgb(67, 198, 183)"), 
                        (11, "font-size: 33.9832px; color: rgb(68, 202, 180)"), 
                        (12, "font-size: 34px; color: rgb(70, 207, 176)"),
                    ])


        keys =  list(word_dict.keys())
        random.shuffle(keys)
        random_dict = dict([(key, word_dict[key]) for key in keys])

        html = f"""
        <div id="tagcloud">
        """

        for key, value in random_dict.items():
            style_value = colour_dict[value]

            html += f"""
                <a href="#" class="search_word display_link" rel="{value}" style="{style_value}" word="{key}"> {key} </a>
            """
                # <div class="search_word display_link" style="{style_value}" word="{key}">{key}</div>
        html += """
            </div>
            <script src="/javascript/jquery.tagcloud.js"></script>
            <script>
                $.fn.tagcloud.defaults = {
                size: {start: 14, end: 18, unit: 'pt'},
                color: {start: '#cde', end: '#f52'}
                };

                $(function () {
                $('#whatever a').tagcloud();
                });

                $("#tagcloud a").tagcloud({
                    size: {start: 12, end: 36, unit: "px"},
                    color: {start: '#3498DB', end: '#46CFB0'}
                });
            </script>
        """
        return html

