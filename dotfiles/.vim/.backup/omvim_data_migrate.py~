import os
# import chardet
import math
import json
import requests
import pandas as pd

from os import listdir
from datetime import datetime
from os.path import isfile, join
from rocket_app import RocketApp

# from sqlalchemy import create_engine


# from pkg_resources import resource_filename
APPROOT = os.getcwd()
base_url = 'http://localhost:1234'

kwargs = {'username':'Developer', 'password':'developpass', 'base_url': base_url}
rapp = RocketApp(**kwargs)
path = APPROOT
TENANT_ID = 24

def main():
    start_time = datetime.now()
    print(f'Started: System Documents @ {start_time}')
    import_system_documents()

    doc_time = datetime.now()
    print(f'System Documents took {doc_time - start_time}')
    print(f'Started: Allocation @ {doc_time}')
    import_allocations()

    alloc_time = datetime.now()
    print(f'Allocations took {alloc_time - doc_time}')
    print(f'Started: General Ledger @ {alloc_time}')
    import_general_ledger()

    gl_time = datetime.now()
    print(f'General Ledger Accounts took {gl_time - alloc_time}')
    print(f'Started: Groups and Members @ {gl_time}')
    import_group_data()

    m_time = datetime.now()
    print(f'Groups and Members took {m_time - gl_time}')
    print(f'Started: Vouchers @ {m_time}')
    import_voucher_data()
    
    v_time = datetime.now()
    print(f'Vouchers took {v_time - m_time}')
    print(f'Started: Batch IMports @ {v_time}')
    import_batch_imports()

    # print('Started: Service Audit Archive')
    # import_service_audit_archive()

    # print('Started: Service Audit Log')
    # import_service_audit()

    # print('Started: Audit Log')
    # import_audit_log()

    return

def import_general_ledger():
    gl_file = os.path.join(path, "inputdata", 'OSUSR_J0M_GENERALLEDGERACCOUNT.csv')
    gl_cols = pd.read_csv(gl_file, encoding='latin1', nrows=1).columns
    gl_df = pd.read_csv(gl_file, encoding='latin1', usecols=gl_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

    gl_df = gl_df[gl_df['TENANT_ID']==TENANT_ID]

    for row in gl_df.itertuples(index=True, name='GLAccounts'):

        gl_kwargs = {
            'name' : row.DESCRIPTION, 
            'debit_account' : row.ACCOUNT, 
            'credit_account' : row.CONTRAACCOUNT, 
            'gl_key' : row.GLKEY, }

        data = {'data': json.dumps(gl_kwargs)}

        result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_new_general_ledger_accounts', data=data)
    return 

def import_allocations():
    allocation_file = os.path.join(path, "inputdata", 'OSUSR_J0M_ALLOCATION.csv')
    allocation_cols = pd.read_csv(allocation_file, encoding='latin1', nrows=1).columns
    allocation_df = pd.read_csv(allocation_file, encoding='latin1', usecols=allocation_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

    allocation_df = allocation_df[allocation_df['TENANT_ID']==TENANT_ID]

    for row in allocation_df.itertuples(index=True, name='Allocations'):
        allocation_kwargs = {'name' : row.DESCRIPTION, }
        data = {'data': json.dumps(allocation_kwargs)}

        result = rapp.post_to_rocketapp(endpoint='/product/save_new_allocations', data=data)
    return 

def import_system_documents():
    system_document_file = os.path.join(path, "inputdata", 'OSUSR_J0M_SYSTEMDOCUMENT.csv')
    system_document_cols = pd.read_csv(system_document_file, encoding='latin1', nrows=1).columns
    system_document_df = pd.read_csv(system_document_file, encoding='latin1', usecols=system_document_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

    system_document_df = system_document_df[system_document_df['TENANT_ID']==TENANT_ID]

    for row in system_document_df.itertuples(index=True, name='SystemDocuments'):

        system_document_kwargs = {
            'name' : row.DOCUMENTNAME, 
            'description' : row.DESCRIPTION, 
            'system_document_type_id' : 4,}

        result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_product_system_document', data=system_document_kwargs)
    return 

def import_service_audit_archive():
    service_audit_archive_file = os.path.join(path, "inputdata", 'OSUSR_J0M_SERVICEAUDITARC.csv')
    service_audit_archive_cols = pd.read_csv(service_audit_archive_file, encoding='latin1', nrows=1).columns
    service_audit_archive_df = pd.read_csv(service_audit_archive_file, encoding='latin1', usecols=service_audit_archive_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None, low_memory=False)
    service_audit_archive_df = service_audit_archive_df[service_audit_archive_df['TENANT_ID']==TENANT_ID]
    count = 0
    for row in service_audit_archive_df.itertuples(index=True, name='ServiceAuditArc'):
        response_text = row.RESPONSE_TEXT.replace(Chr(10), "")
        response_text = response_text.replace(Chr(13), "")
        response_text = response_text.replace("  "," ")

        service_audit_archive_kwargs = {
            'controller_name' : 'Unspecified',
            'method_name' : row.SERVICE_OPERATION, 
            'user_agent' : 'API Call', 
            'request_ip_address' : 'Unspecified', 
            'params' : row.REQUEST_TEXT,
            'response_status_code' : 'Unknown', 
            'response_message' : response_text, 
            'datetime' : row.DATE_TIME,
            'archived': row.ARCHIVED,}

        result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_new_audit_request_archive', data=service_audit_archive_kwargs)
    print('Completed loop')
    return 

def import_service_audit():
    service_audit_file = os.path.join(path, "inputdata", 'OSUSR_J0M_SERVICEAUDITLOG.csv')
    service_audit_cols = pd.read_csv(service_audit_file, encoding='latin1', nrows=1).columns
    service_audit_df = pd.read_csv(service_audit_file, encoding='latin1', usecols=service_audit_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None, low_memory=False)
    # print('Archive Data Frame: ')
    # print(service_audit_archive_df)
    service_audit_df = service_audit_df[service_audit_df['TENANT_ID']==TENANT_ID]
    # print('Filtered Archive Data Frame: ')
    # print('service_audit_archive_df)
    print('Starting loop')
    for row in service_audit_df.itertuples(index=True, name='ServiceAudit'):
        response_text = row.RESPONSE_TEXT.replace(Chr(10), "")
        response_text = response_text.replace(Chr(13), "")
        response_text = response_text.replace("  "," ")

        service_audit_archive_kwargs = {
            'controller_name' : 'Unspecified',
            'method_name' : row.SERVICE_OPERATION, 
            'user_agent' : 'API Call', 
            'request_ip_address' : 'Unspecified', 
            'params' : row.REQUEST_TEXT,
            'response_status_code' : 'Unknown', 
            'response_message' : response_text,}

        result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_new_audit_request', data=service_audit_archive_kwargs)
    print('Completed loop')
    return 


def import_audit_log():
    audit_file = os.path.join(path, "inputdata", 'OSUSR_J0M_AUDITLOG.csv')
    audit_cols = pd.read_csv(audit_file, encoding='latin1', nrows=1).columns
    audit_df = pd.read_csv(audit_file, encoding='latin1', usecols=audit_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)
    audit_df = audit_df[audit_df['TENANT_ID']==TENANT_ID]
    for row in audit_df.itertuples(index=True, name='AuditLog'):

        date_time = row.DATETIME
        date_time_obj = datetime.strptime(date_time, '%m/%d/%Y')
        date_time = date_time_obj.date()
        date_time = date_time_obj.strftime("%Y-%m-%d")
        user = row.USERID
        if not user or type(user) != str:
            user = '1'

        audit_kwargs = {
            'log_text' : row.LOGTEXT,
            'audit_action_id' : row.AUDITACTIONID,
            'audit_action' : row.AUDITACTIONID,
            'datetime' : date_time,
            'user_id' : user,
            'user' : user,}

        result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_new_audit_log_archive', data=audit_kwargs)
    return 


def import_batch_imports():
    batch_file = os.path.join(path, "inputdata", 'OSUSR_J0M_BATCHIMPORT.csv')
    batch_cols = pd.read_csv(batch_file, encoding='latin1', nrows=1).columns
    batch_df = pd.read_csv(batch_file, encoding='latin1', usecols=batch_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)
    batch_df = batch_df[batch_df['TENANT_ID']==TENANT_ID]

    error_file = os.path.join(path, "inputdata", 'OSUSR_J0M_BATCHIMPORTERROR.csv')
    error_cols = pd.read_csv(error_file, encoding='latin1', nrows=1).columns
    error_df = pd.read_csv(error_file, encoding='latin1', usecols=error_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)
    error_df = error_df[error_df['TENANT_ID']==TENANT_ID]

    group_file = os.path.join(path, "inputdata", 'OSUSR_J0M_GROUP.csv')
    group_cols = pd.read_csv(group_file, encoding='latin1', nrows=1).columns
    group_df = pd.read_csv(group_file, encoding='latin1', usecols=group_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)


    for row in batch_df.itertuples(index=True, name='Batch'):

        batch_import_id = row.ID
        import_type = 'unknown'
        if row.IMPORTTYPEID == 1: # 1, Claim Payment
            import_type = 'claim_payment'
        elif row.IMPORTTYPEID == 2: # 2, Purchase
            import_type = 'purchase'
        elif row.IMPORTTYPEID == 3: # 3, Lead
            import_type = 'lead'
        elif row.IMPORTTYPEID == 4: # 4, Member
            import_type = 'member'
        elif row.IMPORTTYPEID == 5: # 5, Beneficiary
            import_type = 'beneficiary'
        elif row.IMPORTTYPEID == 6: # 7, Opt In
            import_type = 'opt_in'
        elif row.IMPORTTYPEID == 7: # 8, Loyalty
            import_type = 'loyalty'
        elif row.IMPORTTYPEID == 8: # 9, Rain Fall, 8, True
            import_type = 'unknown'

        group_id = row.GROUPID
        
        group_code = 'Unknown'
        import_group_df = group_df[group_df['ID']==group_id]
        for g_row in import_group_df.itertuples(index=True, name='Group'):
            group_code = g_row.CODE
            break

        print("group_code: ", group_code, type(group_code))
        entity_product_owner_id = get_product_owner_id_from_code(group_code)

        filename = row.IMPORTFILENAME
        if type(filename) != str:
            filename = "Not Supplied"
        processed = row.CREATEDATETIME
        processed_obj = datetime.strptime(processed, '%m/%d/%Y')
        processed = processed_obj.date()
        processed = processed.strftime("%Y-%m-%d")

        totel_count = row.TOTALCOUNT,
        accepted_count = row.ACCEPTEDCOUNT,
        rejected_count = row.REJECTEDCOUNT,
        pre_voucher_count = row.PREPURCHASECOUNT
        added_by = row.CAPTUREUSERID
        notes = row.NOTES

        import_kwargs = {
            'import_type' : import_type, 
            'entity_product_owner_id' : entity_product_owner_id, 
            'filename' : filename, 
            'processed' : processed, 
            'total_count' : totel_count, 
            'accepted_count' : accepted_count, 
            'rejected_count' : rejected_count, 
            'pre_voucher_count' : pre_voucher_count,
            'notes' : notes, 
            'added_by' : added_by, 
            'added' : processed,}

        result = rapp.post_to_rocketapp(endpoint='/omvim_import/import_batch_import', data=import_kwargs)
        success = result.get('success', False)
        if not success:
            continue

        new_batch_import_id = result.get('data', None)
        if not new_batch_import_id:
            continue

        import_error_df = error_df[error_df['BATCHIMPORTID']==batch_import_id]
        for e_row in import_error_df.itertuples(index=True, name='Errors'):
            message = e_row.DESCRIPTION
            if type(e_row.MSISDN) == 'string':
                message += ' for msisdn '+e_row.MSISDN
            if type(e_row.IDNUMBER) == 'string':
                message += ' for id number '+e_row.IDNUMBER

            error_kwargs = {
                'batch_import_id' : new_batch_import_id, 
                'message' : message,}
            result = rapp.post_to_rocketapp(endpoint='/omvim_import/import_batch_import_error', data=error_kwargs)
    return 

def import_group_data():
    group_file = os.path.join(path, "inputdata", 'OSUSR_J0M_GROUP.csv')
    group_cols = pd.read_csv(group_file, encoding='latin1', nrows=1).columns
    group_df = pd.read_csv(group_file, encoding='latin1', usecols=group_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

    product_file = os.path.join(path, "inputdata", 'OSUSR_J0M_PRODUCT.csv')
    product_cols = pd.read_csv(product_file, encoding='latin1', nrows=1).columns
    product_df = pd.read_csv(product_file, encoding='latin1', usecols=product_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

    product_allocation_file = os.path.join(path, "inputdata", 'OSUSR_J0M_PRODUCTALLOCATION.csv')
    product_allocation_cols = pd.read_csv(product_allocation_file, encoding='latin1', nrows=1).columns
    product_allocation_df = pd.read_csv(product_allocation_file, encoding='latin1', usecols=product_allocation_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

    member_file = os.path.join(path, "inputdata", 'OSUSR_J0M_MEMBER.csv')
    member_cols = pd.read_csv(member_file, encoding='latin1', nrows=1).columns
    member_df = pd.read_csv(member_file, encoding='latin1', usecols=member_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

    member_group_file = os.path.join(path, "inputdata", 'OSUSR_J0M_MEMBERGROUP.csv')
    member_group_cols = pd.read_csv(member_group_file, encoding='latin1', nrows=1).columns
    member_group_df = pd.read_csv(member_group_file, encoding='latin1', usecols=member_group_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

    insurer_entity_id = import_insurer_group()

    # Do stuff with Group details here.
    group_df = group_df[group_df['TENANT_ID']==TENANT_ID]

    for row in group_df.itertuples(index=True, name='Groups'):
        # Now we can do stuff here.
        group_start_time = datetime.now()
        print(f'Started @ {group_start_time} Importing Group', row.CODE, row.NAME)
        group_entity_id, group_id = import_group(row)
        if not group_entity_id or not group_id:
            continue

        group_product_df = product_df[product_df['GROUPID']==group_id]
        for gp_row in group_product_df.itertuples(index=True, name='Products'):

            allocations_df = product_allocation_df[product_allocation_df['PRODUCTID']==gp_row.ID]
            import_product(group_entity_id, gp_row, allocations_df)

        member_group_df_filter = member_group_df[member_group_df['GROUPID']==group_id]
        stop_counter = 0
        for mg_row in member_group_df_filter.itertuples(index=True, name='MemberGroup'):
            member_df_filter = member_df[member_df['ID']==mg_row.MEMBERID]
            for m_row in member_df_filter.itertuples(index=True, name='Member'):
                import_member(group_entity_id, m_row)

        group_end_time = datetime.now()
        print(f'This Group took took {group_end_time - group_start_time}')
        print(f'Started: Allocation @ {doc_time}')
    return

def import_insurer_group():
    exists, group_entity_id =  check_organisation_exists('OLD_MUTUAL')
    if not exists:
        group_kwargs = {
            'entity_type_id': 2,
            'entity_organisation_type_id': 1,
            'code': 'OLD_MUTUAL',
            'name': 'OLD MUTUAL SWAZILAND',
            'tax_number': 'Unknown',
            'registration_number': 'Unknown',
            'financial_regulatory_number': 'Unknown',
            'is_product_owner' : False,
            'policy_number_prefix': '',
            'is_insurer' : True, 
            'is_client' : False,
            'billing_frequency_type_id': 3, }

        result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_new_entityobj', data=group_kwargs)
        # result = rapp.post_to_rocketapp(endpoint='product/save_new_allocations', data={'data':json.dumps({'name':'piet'})}))
        success = result.get('success', False)
        if not success:
            return None

        group_entity_id = result.get('entity_id', None)
        if not group_entity_id:
            return None

        # Group Contact(s)
        import_organisation_contact(group_entity_id, 4, 'Zaida', 'Unknown')

        # Addresses
        import_organisation_address(group_entity_id, 1, 'Old Mutual', '', 'Swaziland')

        import_organisation_address(group_entity_id, 2, 'Old Mutual', '', 'Swaziland')

    # protective code
    if not group_entity_id:
        return None

    return group_entity_id

def import_group(row):
    group_id = row.ID

    exists, group_entity_id =  check_organisation_exists(row.CODE)
    
    if not exists:
        group_kwargs = {
            'entity_type_id': 2,
            'entity_organisation_type_id': 1,
            'code': row.CODE,
            'name': row.NAME,
            'tax_number': 'Unknown',
            'registration_number': 'Unknown',
            'financial_regulatory_number': 'Unknown',
            'is_product_owner' : True,
            'policy_number_prefix': '',
            'is_insurer' : False, 
            'is_client' : True,
            'billing_frequency_type_id': 3, }

        result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_new_entityobj', data=group_kwargs)
        success = result.get('success', False)
        if not success:
            return None, None

        group_entity_id = result.get('data', None)
        if not group_entity_id:
            return None, None

        # Group Contact(s)
        if row.CONTACT and row.TELEPHONE:
            import_organisation_contact(group_entity_id, 4, row.CONTACT, row.TELEPHONE)

        if row.CONTACT and row.FAXNO:
            import_organisation_contact(group_entity_id, 3, row.CONTACT, row.FAXNO)
            
        if row.CONTACT and row.EMAIL:
            import_organisation_contact(group_entity_id, 2, row.CONTACT, row.EMAIL)

        if row.ADMINISTRATOR and row.ADMINISTRATOREMAIL:
            import_organisation_contact(group_entity_id, 2, row.ADMINISTRATOR, row.ADMINISTRATOREMAIL)

        if row.CONTACT and row.CONTACTTELEPHONE:
            import_organisation_contact(group_entity_id, 4, row.CONTACT, row.CONTACTTELEPHONE)

        if row.CONTACT and row.CONTACTFAXNO:
            import_organisation_contact(group_entity_id, 3, row.CONTACT, row.CONTACTFAXNO)

        if row.CONTACT and row.CONATCTEMAIL:
            import_organisation_contact(group_entity_id, 2, row.CONTACT, row.CONATCTEMAIL)

        # Addresses
        if row.STREETADDRESS:
            import_organisation_address(group_entity_id, 1, row.STREETADDRESS+' '+row.STREETADDRESS2, row.STREETADDRESS3, row.STREETADDRESS4)

        if row.POSTALADDRESS:
            import_organisation_address(group_entity_id, 2, row.POSTALADDRESS+' '+row.POSTALADDRESS2, row.POSTALADDRESS3, row.POSTALADDRESS4)

    # protective code
    if not group_entity_id:
        return None, None

    return group_entity_id, group_id

def import_organisation_contact(entity_organisation_id, entity_contact_type_id, name, value):
    if type(name) != str or type(value) != str:
        return

    contact_kwargs = {
        'entity_id' : entity_organisation_id, 
        'entity_contact_type_id' : entity_contact_type_id,
        'name' : name, 
        'value' : value, 
        'preferred' : False,}

    result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_new_organisation_contact', data=contact_kwargs)
    return 

def import_organisation_address(entity_organisation_id, address_type_id, address_line, city, postal_code):
    address_kwargs = {
        'address_type_id' : address_type_id, 
        'entity_organisation_id' : entity_organisation_id, 
        'address_line' : address_line, 
        'city' : city, 
        'postal_code' : postal_code, 
        'country_id' : 215, }

    data = {'data': json.dumps(address_kwargs)}

    result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_or_edit_address', data=data)
    return 

def check_organisation_exists(code):
    if not code:
        return False

    check_kwargs = {'code' : code, }

    result = rapp.post_to_rocketapp(endpoint='/omvim_import/check_organisation_exists', data=check_kwargs)
    success = result.get('success', False)
    if not success:
        return False, None
    
    entity_id = result.get('data', None)
    return True, entity_id


def import_product(group_entity_id, gp_row, allocations_df):
    gl_file = os.path.join(path, "inputdata", 'OSUSR_J0M_GENERALLEDGERACCOUNT.csv')
    gl_cols = pd.read_csv(gl_file, encoding='latin1', nrows=1).columns
    gl_df = pd.read_csv(gl_file, encoding='latin1', usecols=gl_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

    allocation_file = os.path.join(path, "inputdata", 'OSUSR_J0M_ALLOCATION.csv')
    allocation_cols = pd.read_csv(allocation_file, encoding='latin1', nrows=1).columns
    allocation_df = pd.read_csv(allocation_file, encoding='latin1', usecols=allocation_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

    # Now we have the new product id. We can create the rest of the necessary tables.

    #default
    cover_and_exclusion_id = 2 #Life all Causes
    if gp_row.COVERTYPEID == 1:  #Dreaded Disease,4,-1,0
        cover_and_exclusion_id = 2 #Life all Causes

    elif gp_row.COVERTYPEID == 2:  #Natural Death,2,-1,-1
        cover_and_exclusion_id = 3  #Natural

    elif gp_row.COVERTYPEID == 3:  #Accidental Death,3,-1,-1
        cover_and_exclusion_id = 4  #Accidental

    elif gp_row.COVERTYPEID == 4:  #Index Based Cover,5,-1,0
        cover_and_exclusion_id = 1  #Services

    elif gp_row.COVERTYPEID == 5:  #Suicide,6,-1,-1
        cover_and_exclusion_id = 5  #Suicide

    elif gp_row.COVERTYPEID == 6:  #All Death,1,-1,0
        cover_and_exclusion_id = 2 #Life all Causes

    # Default 
    sum_insured = 0.00
    for a_row in allocations_df.itertuples(index=True, name='Allocations'):
        if a_row.ALLOCATIONTYPEID != 3:
            continue

        if a_row.PERCENTAGE > 0:
            #percentage of the purchase price.
            sum_insured += (gp_row.PURCHASEPRICE/100)*a_row.PERCENTAGE

        elif a_row.AMOUNT > 0:
            #fixed amount
            sum_insured += a_row.AMOUNT

        elif a_row.FACTOR > 0:
            #factor of the purchase price.
            sum_insured += gp_row.PURCHASEPRICE*a_row.FACTOR

    if not sum_insured:
        sum_insured = gp_row.PURCHASEPRICE

    schedule = ''
    if type(gp_row.SCHEDULECONDITIONS) == 'string':
        schedule = gp_row.SCHEDULECONDITIONS
    elif type(gp_row.SCHEDULE) == 'string':
        schedule = gp_row.SCHEDULE
    elif type(gp_row.CONDITIONS) == 'string':
        schedule = gp_row.CONDITIONS

    purchase_confirmation = gp_row.PURCHASECONFIRMATION
    if type(gp_row.PURCHASECONFIRMATION) != str:
        purchase_confirmation = ''
    
    claim_confirmation = gp_row.CLAIMCONFIRMATION
    if type(gp_row.CLAIMCONFIRMATION) != str:
        claim_confirmation = ''
    
    refund_confirmation = gp_row.REFUNDCONFIRMATION
    if type(gp_row.REFUNDCONFIRMATION) != str:
        refund_confirmation = ''
    
    advance_reminder = gp_row.ADVANCEREMINDER
    if type(gp_row.ADVANCEREMINDER) != str:
        advance_reminder = ''
    
    pre_registration = gp_row.PREREGISTRATIONMESSAGE
    if type(gp_row.PREREGISTRATIONMESSAGE) != str:
        pre_registration = ''

    product_kwargs = {
        'group_entity_id': group_entity_id,
        'code' : gp_row.CODE, 
        'name' : gp_row.DESCRIPTION, 
        'product_type_id' : 1, 
        'policy_number_prefix' : '', 
        'benefit_name' : gp_row.DESCRIPTION, 
        'is_compulsory' : True, 
        'is_life' : True,
        'number_of_payouts' : gp_row.NUMBEROFPAYMENTS,
        'frequency_type' : gp_row.PRODUCTPAYMENTFREQUENCYID,
        'cover_and_exclusion_id' : cover_and_exclusion_id, 
        'min_age': gp_row.MINAGE,
        'max_age': gp_row.MAXAGE,
        'premium': gp_row.PURCHASEPRICE,
        'sum_insured' : sum_insured,
        'period_type' : gp_row.PERIODTYPEID,
        'waiting' : gp_row.WAITINGPERIOD,
        'active_period' : gp_row.ACTIVEPERIOD,
        'claim_grace_period' : gp_row.CLAIMGRACEPERIOD,
        'refund_grace_period' : gp_row.REFUNDGRACEPERIOD,
        'initial_period_type' : gp_row.INITALCOVERTYPEID,
        'advance_period' : gp_row.ADVANCEREMINDERPERIOD,
        'schedule' : schedule,
        'purchase_confirmation' : purchase_confirmation,
        'claim_confirmation' : claim_confirmation,
        'refund_confirmation' : refund_confirmation,
        'advance_reminder' : advance_reminder,
        'pre_registration' : pre_registration,
        }

    result = rapp.post_to_rocketapp(endpoint='/omvim_import/import_product_exists', data=product_kwargs)
    success = result.get('success', False)

    if not success:
        return False, None
    
    product_id = result.get('data', None)
    get_benefit_kwargs = {'product_id': product_id,}
    result = rapp.post_to_rocketapp(endpoint='/omvim_import/get_benefit_id_from_product_id', data=get_benefit_kwargs)
    success = result.get('success', False)
    benefit_id = result.get('data', None)
    if not benefit_id:
        return

    for a_row in allocations_df.itertuples(index=True, name='Allocations'):
        # Get the 
        alloc_gl_df = gl_df[gl_df['ID']==a_row.GENERALLEDGERACCOUNTID]
        gl_account_id = None
        allocation_id = None
        for row in gl_df.itertuples(index=True, name='GLAccounts'):
            gl_kwargs = {
                'name' : row.DESCRIPTION, 
                'debit_account' : row.ACCOUNT, 
                'credit_account' : row.CONTRAACCOUNT, 
                'gl_key' : row.GLKEY, }
            data = {'data': json.dumps(gl_kwargs)}
            result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_new_general_ledger_accounts', data=data)
            gl_account_id = result.get('data', None)
            break

        allocation_df = allocation_df[allocation_df['ID']==a_row.ALLOCATIONID]
        for row in allocation_df.itertuples(index=True, name='Allocations'):

            allocation_kwargs = {'name' : row.DESCRIPTION, }
            data = {'data': json.dumps(allocation_kwargs)}

            result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_new_allocations', data=data)
            allocation_id = result.get('data', None)
            break

            benefit_allocation_calculation_type_id = 1
            if a_row.PERCENTAGE:
                benefit_allocation_calculation_type_id = 1
            elif a_row.AMOUNT:
                benefit_allocation_calculation_type_id = 2
            elif a_row.FACTOR:
                benefit_allocation_calculation_type_id = 3

            allocation_kwargs = {
                'benefit_id' : benefit_id, 
                'gl_account_id' : gl_account_id, 
                'benefit_allocation_id' : allocation_id, 
                'payment_received_type_id' : 1, 
                'benefit_allocation_type_id' : a_row.ALLOCATIONTYPEID, 
                'benefit_allocation_calculation_type_id' : benefit_allocation_calculation_type_id, 
                'amount' : a_row.AMOUNT, 
                'factor' : a_row.FACTOR, 
                'percentage' : a_row.PERCENTAGE, 
                'bln_require_gl_account_id' : True, }

            result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_benefit_allocation', data=data)
    return product_id

def import_voucher_data():
    group_file = os.path.join(path, "inputdata", 'OSUSR_J0M_GROUP.csv')
    group_cols = pd.read_csv(group_file, encoding='latin1', nrows=1).columns
    group_df = pd.read_csv(group_file, encoding='latin1', usecols=group_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

    product_file = os.path.join(path, "inputdata", 'OSUSR_J0M_PRODUCT.csv')
    product_cols = pd.read_csv(product_file, encoding='latin1', nrows=1).columns
    product_df = pd.read_csv(product_file, encoding='latin1', usecols=product_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

    member_file = os.path.join(path, "inputdata", 'OSUSR_J0M_MEMBER.csv')
    member_cols = pd.read_csv(member_file, encoding='latin1', nrows=1).columns
    member_df = pd.read_csv(member_file, encoding='latin1', usecols=member_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

    member_group_file = os.path.join(path, "inputdata", 'OSUSR_J0M_MEMBERGROUP.csv')
    member_group_cols = pd.read_csv(member_group_file, encoding='latin1', nrows=1).columns
    member_group_df = pd.read_csv(member_group_file, encoding='latin1', usecols=member_group_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

    voucher_file = os.path.join(path, "inputdata", 'OSUSR_J0M_VOUCHER.csv')
    voucher_cols = pd.read_csv(voucher_file, encoding='latin1', nrows=1).columns
    voucher_df = pd.read_csv(voucher_file, encoding='latin1', usecols=voucher_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

#     member_product_file = os.path.join(path, "inputdata", 'OSUSR_J0M_MEMBERPRODUCT.csv')
#     member_product_cols = pd.read_csv(member_product_file, encoding='latin1', nrows=1).columns
#     member_product_df = pd.read_csv(member_product_file, encoding='latin1', usecols=member_product_cols, error_bad_lines=False, warn_bad_lines=False, dayfirst=True, na_values=None)

# TENANT_ID,ID,MEMBERID,PRODUCTID,LASTRESETPURCHASEDATE,COVERRESETDATE,COVERUPGRADEDATE,GROUPID,MEMBERASSETID

    voucher_df = voucher_df[voucher_df['TENANT_ID']==TENANT_ID]

    for row in voucher_df.itertuples(index=True, name='Vouchers'):
        # Now we can do stuff here.
        product_code = ''
        member_id = row.MEMBERID
        member_msisdn = ''
        beneficiary_msisdn = ''

        voucher_product_df = product_df[product_df['ID']==row.PRODUCTID]
        for p_row in voucher_product_df.itertuples(index=True, name='Products'):
            product_code = p_row.CODE
            # print('PRODUCT AND CODE" ', product_code, p_row)
            break

        voucher_member_df = member_df[member_df['ID']==row.MEMBERID]
        for m_row in voucher_member_df.itertuples(index=True, name='Members'):
            member_msisdn = m_row.MSISDN

            voucher_member_group_df = member_group_df[member_group_df['MEMBERID']==member_id]
            for mg_row in voucher_member_group_df.itertuples(index=True, name='MemberGroup'):
                if mg_row.GROUPID == m_row.GROUPID:
                    voucher_beneficiary_df = member_df[member_df['ID']==mg_row.BENEFICIARYID]
                    for m_row in voucher_beneficiary_df.itertuples(index=True, name='Beneficiary'):
                        beneficiary_msisdn = m_row.MSISDN
                        break
            break


        purchase_date = correct_date(row.PURCHASEDATE)
        valid_from_date = correct_date(row.VALIDFROMDATE)
        valid_to_date = correct_date(row.VALIDTODATE)


        # batch_import_id = row.BATCHIMPORTID
        voucher_kwargs = {
            'member_msisdn': member_msisdn,
            'beneficiary_msisdn': beneficiary_msisdn,
            'product_code' : product_code, 
            'member_id' : member_id,
            'purchase_date' : purchase_date,
            'valid_from_date' : valid_from_date,
            'valid_to_date' : valid_to_date,}

        result = rapp.post_to_rocketapp(endpoint='/omvim_import/import_policy_exists', data=voucher_kwargs)
    return

def get_product_id_from_code(code):
    if not code:
        return None

    check_kwargs = { 'code' : code, }

    result = rapp.post_to_rocketapp(endpoint='/omvim_import/get_product_id_from_code', data=check_kwargs)
    success = result.get('success', False)
    if not success:
        return None
    
    product_id = result.get('data', None)
    return product_id

def get_product_owner_id_from_entity_id(group_entity_id):
    if not group_entity_id:
        return False

    check_kwargs = { 'entity_id' : group_entity_id, }

    result = rapp.post_to_rocketapp(endpoint='/omvim_import/get_product_owner_id_from_entity_id', data=check_kwargs)
    success = result.get('success', False)
    if not success:
        return False, None
    
    entity_service_provider_id = result.get('data', None)
    return True, entity_service_provider_id

def get_product_owner_id_from_code(code):
    if not code:
        return None

    check_kwargs = { 'code' : code, }

    result = rapp.post_to_rocketapp(endpoint='/omvim_import/get_product_owner_id_from_code', data=check_kwargs)
    success = result.get('success', False)
    if not success:
        return None
    
    entity_service_provider_id = result.get('data', None)
    return entity_service_provider_id

def get_insurer_id_from_entity_id(group_entity_id):
    if not group_entity_id:
        return None

    check_kwargs = { 'entity_id' : group_entity_id, }

    result = rapp.post_to_rocketapp(endpoint='/omvim_import/get_insurer_id_from_entity_id', data=check_kwargs)
    success = result.get('success', False)
    if not success:
        return None
    
    entity_insurer_id = result.get('data', None)
    return entity_insurer_id


def import_member(group_entity_id, m_row):
    
    member_id = m_row.ID
    member_full_name = m_row.NAME
    member_name = member_full_name
    member_surname = member_full_name
    if member_full_name.find(' ') > 0:
        member_full = member_full_name.split(" ", 1)
        member_name = member_full[0]
        member_surname = member_full[1]

    msisdn = m_row.MSISDN
    register_date = m_row.REGISTERDATE
    id_number = m_row.IDNUMBER
    language_id = 123  #m_row.LANGUAGEID
    gender_id = m_row.GENDERID
    if not gender_id or type(gender_id) != str:
        gender_id = 2
    
    birthday = correct_date(m_row.BIRTHDAY)
    enrol_date = correct_date(m_row.ENROLDATE)
    identity_type_id =  3

    entity_person_id = check_member_exists(identity_type_id, msisdn)
    if not entity_person_id:
        entity_person_id = create_person_records(m_row, member_name, member_surname, gender_id, birthday, language_id, identity_type_id, msisdn,  id_number, enrol_date)

    if not entity_person_id:
        return

# BENEFICIARYID,ENROLOPERATOR,LEADOPERATOR,LEADDATE,
# APPLICATIONSERIALNUMBER,ENROLDATE,REGISTRATIONOPERATOR,ISACTIVE,
# ISENROLLED,CREATEDATE,IMEI,
# GROUPID,EXTERNALID,

# ISDECEASED
# BATCHIMPORTID
# ISINFORM

    if not group_entity_id:
        return

    # Now we need to add the guys to the client_person_limnk table.

    client_person_kwargs = {
        'entity_person_id' : entity_person_id, 
        'entity_id' : group_entity_id,
        'created': enrol_date, }

    result = rapp.post_to_rocketapp(endpoint='/omvim_import/link_person_to_client_by_entity_id', data=client_person_kwargs)
    return 

def create_person_records(m_row, member_name, member_surname, gender_id, date_of_birth, language_id, identity_type_id, msisdn, id_number, enrol_date):

    member_kwargs = {
        'entity_person_title_id' : 1,
        'name' : member_name,
        'surname' : member_surname,
        'entity_person_gender_type_id' : gender_id,
        'date_of_birth' : date_of_birth,
        'language_id' : language_id,
        'identity_type_id' : identity_type_id,
        'number' : msisdn, 
        'mobile' : msisdn,
        'is_deceased' :  m_row.ISDECEASED,
        'enrol_date': enrol_date,}

    result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_new_memberobj', data=member_kwargs)
    success = result.get('success', False)
    if not success:
        return None

    entity_person_id = result.get('data', None)

    if not entity_person_id:
        return None

    # Add the ID number should it exist.
    if id_number:
        import_person_identity(1, id_number, entity_person_id)

    # Add the email should it exist.
    if m_row.EMAILADDRESS:
        import_person_contact(entity_person_id, 2,m_row.EMAILADDRESS)

    if m_row.RESADDRESS1:
        if type(m_row.RESADDRESS1) == 'string' and type(m_row.RESADDRESS2) == 'string' and type(m_row.RESADDRESS3) == 'string' and type(m_row.RESADDRESS4) == 'string':
            import_person_address(entity_person_id, 1, m_row.RESADDRESS1+" "+m_row.RESADDRESS2, m_row.RESADDRESS3, m_row.RESADDRESS4)

    if m_row.ACCOUNTHOLDER and m_row.ACCOUNTNUMBER:
        if type(m_row.ACCOUNTHOLDER) == 'string' and type(m_row.ACCOUNTNUMBER) == 'string':
            import_person_bank_account(entity_person_id, m_row.ACCOUNTHOLDER, m_row.ACCOUNTNUMBER, m_row.BANKID, m_row.BRANCHCODE)

    return entity_person_id

def import_person_contact(entity_person_id, entity_contact_type_id, value):
    if type(value) != str:
        return

    contact_kwargs = {
        'entity_person_id' : entity_person_id, 
        'entity_contact_type_id' : entity_contact_type_id, 
        'value' : value,}

    # Using the same as the entity for now as there are not endpoints for member that I could fine.
    result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_new_member_contact', data=contact_kwargs)
    return 

def import_person_address(entity_person_id, address_type_id, address_line, city, postal_code):
    address_kwargs = {
        'address_type_id' : address_type_id, 
        'entity_person_id' : entity_person_id, 
        'address_line' : address_line, 
        'city' : city, 
        'postal_code' : postal_code, 
        'country_id' : 215, }
    result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_person_address', data=address_kwargs)
    return 

def import_person_bank_account(entity_person_id, account_holder, account_number, bank_id, bank_branch_code):
    if type(account_holder) != str or type(account_number) != str:
        return

    account_kwargs = {
        'entity_person_id' : entity_person_id, 
        'account_holder' : account_holder, 
        'account_number' : account_number, 
        'bank_id' : bank_id,
        'iban' : 'Unknown', 
        'currency_id' : 139, }

    result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_person_bank_account', data=account_kwargs)
    return 

def import_person_identity(identity_type_id, value, entity_person_id):
    entity_person_id = check_member_exists(identity_type_id, value)
    if entity_person_id:
        return

    identity_kwargs = {
        'identity_type_id' : identity_type_id, 
        'value' : value, 
        'entity_person_id' : entity_person_id,}

    result = rapp.post_to_rocketapp(endpoint='/omvim_import/save_new_person_identity', data=identity_kwargs)
    return 

def check_member_exists(identity_type_id, value):
    if not identity_type_id or not value:
        return None

    check_kwargs = {
        'identity_type_id' : identity_type_id, 
        'identity_number' : value, }

    result = rapp.post_to_rocketapp(endpoint='/omvim_import/check_member_exists', data=check_kwargs)
    success = result.get('success', False)
    
    entity_person_id = result.get('data', None)
    if not entity_person_id:
        return None
    return entity_person_id


def correct_date(date_to_correct):
    if not date_to_correct or type(date_to_correct) != str or len(date_to_correct) < 5:
        date_to_correct = '1900-01-01 00:00:00'

    date_to_correct_obj = datetime.strptime(date_to_correct, '%Y-%m-%d %H:%M:%S')
    date_to_correct = date_to_correct_obj.date()
    date_to_correct = date_to_correct.strftime("%d-%m-%Y")
    return date_to_correct


if __name__ == '__main__':
    main()

