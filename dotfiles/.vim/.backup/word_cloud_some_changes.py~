#!/bin/python
# -*- coding: utf-8 -*-

import re
import random

from rocket.lib.tg_utils import sort_dict_list

WORD_LIMIT = 50
UPPER_LIMIT_RANK = 12

REGEX_NO_PUNCTUATION = "/[^A-Za-z0-9_\-\s]/g"

class WordCloud():

    def build_and_sort_word_list(self, text='', *args, **kwargs):
        outputdict = {}

        if not text:
            return outputdict

        raw_text = re.sub(REGEX_NO_PUNCTUATION, "", text)

        word_list = raw_text.split(' ')
        if not word_list:
            return outputdict

        for word in word_list:

            if word not in outputdict.keys():
                outputdict[word] = 1
            else:
                outputdict[word] += 1

        sorted_outputlist = sorted(outputdict.items(), key=lambda x: x[1], reverse=True)
        sorted_outputlist = sorted_outputlist[:WORD_LIMIT]

        highest = sorted_outputlist[0][-1]
        lowest = sorted_outputlist[-1][-1]

        for name, count in sorted_outputlist:

            rank = self.get_rank_from_value(count, highest, lowest)
            outputdict[word] = rank

        return outputdict

    def get_rank_from_value(self, count=None, highest=None, lowest=None, *args, **kwargs):
        if not all([count, highest, lowest]):
            return 0

        var1 = count - lowest
        var2 = highest - lowest

        if not all([var1, var2]):
            return UPPER_LIMIT_RANK

        result = var1 / var2
        result = result * (UPPER_LIMIT_RANK - 1)
        result = round(result + 1)
        return result

if __name__ == "__main__":

    text = 'some new words to test with and even some duplicates'

    w = WordCloud()
    result = w.build_and_sort_word_list(text)
    print(result)
