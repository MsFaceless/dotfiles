#!/bin/python

import random
import logging
from pkg_resources import resource_filename

from tg import expose

from calabash.model import *

from calabash.lib.html_utils import *
from calabash.lib.base import BaseController
from calabash.lib.sql_crud_utils import Cruds
from calabash.lib.tg_decorators import safe_headers, time_it
from calabash.lib.image_uploader import ImageUploader
from calabash.lib.rsa_luhn_id_algo import get_rsa_id_dict
from calabash.lib.myimali_api_gateway import MyImaliApiGateway
from calabash.lib.email_creator import CalabashCampusEmailCreator

from calabash.controllers.message import MessageController

import calabash.lib.vault_utils as VAULT

CRUDS = Cruds()
MYIMALI = MyImaliApiGateway()
MESSAGING = MessageController()

LOGGER = logging.getLogger(__name__)

UPDATE_LIMIT = 5
NEW_LIMIT = 1000

PUBLIC_DIRNAME = os.path.abspath(resource_filename('calabash', 'public'))
UPLOADS_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'uploads')

class RegistrationController(BaseController):

    @safe_headers
    @expose('json')
    def preregister_student(self, *args, **kwargs):
        identity_number = kwargs.get('identity_number', None)
        passport_number = kwargs.get('passport_number', None)
        if not identity_number and not passport_number:
            return error_response('No identity_number or passport_number supplied.')

        if identity_number:
            result = get_rsa_id_dict(identity_number)
            luhn_check = result.get('luhn_check', False)
            if not luhn_check:
                return error_response(f'Failed to validate identity_number: {identity_number}')

        name = kwargs.get('name', None)
        if not name:
            return error_response('preregister_student failed: no name')

        surname = kwargs.get('surname', None)
        if not surname:
            return error_response('preregister_student failed: no surname')

        student_number = kwargs.get('student_number', None)
        if not student_number:
            return error_response('preregister_student failed: no student_number')

        """
        # Removed as per JP on 28 Sept 2020
        mobile = kwargs.get('mobile', None)
        kwargs['mobile'] = mobile = mobile.replace(' ', '')
        if not mobile:
            return error_response('preregister_student failed: no mobile')

        result = VAULT.check_mobile_number_exists({'mobile_number' : mobile})
        mobile_exists = result.get('success', False)
        if mobile_exists:
            return error_response('preregister_student failed: mobile is not unique')
        """

        entity_id = self.confirm_person_wallet(**kwargs)
        if not entity_id:
            return error_response('preregister_student failed: confirm_person_wallet failed')

        LOGGER.info(f'preregister_student entity_id: {entity_id}')
        return success_response(entity_id)



    @safe_headers
    @expose('json')
    def register_user(self, *args, **kwargs):
        username = kwargs.get('username', None)
        password = kwargs.get('password', None)
        identity_number = kwargs.get('identity_number', '')
        passport_number = kwargs.get('passport_number', '')
        if not identity_number and not passport_number:
            return error_response('Nothing to identify user.')

        if identity_number and not passport_number:
            result = get_rsa_id_dict(identity_number)
            luhn_check = result.get('luhn_check', False)
            if not luhn_check:
                return error_response(f'Failed to validate identity_number: {identity_number}')
            vault_result = VAULT.get_entity_by_identity_number({'identity_number' : identity_number})

        if passport_number and not identity_number:
            vault_result = VAULT.get_entity_by_passport_number({'passport_number' : passport_number})

        entity = vault_result.get('entity', {})
        kwargs['entity_id'] = entity_id = entity.get('entity_id', None)
        if not entity_id:
            return error_response('Failed to get entity_id from vault')

        wallet_result = self.confirm_person_wallet(**kwargs)
        if not wallet_result:
            return error_response('Failed to create wallet.')

        reference = None
        result = self.get_user_profile(**{'username' : username})
        success = result.get('success', False)
        if not success:
            error = result.get('data', '')
            transfer_result = self.auto_transfer_user_api_key(error, username)
            if transfer_result:
                return self.register_user(**kwargs)

        if success:
            data = result.get('data', {})
            reference = data.get('REF', None)
            if not reference:
                reference = result.get('reference_number', None)

        else:
            kwargs.update(vault_result)
            imali_dict = self.get_imali_dict(**kwargs)
            if not imali_dict:
                return error_response('Failed to get imali_dict from the vault')

            result = MYIMALI.register_customer(**imali_dict)
            success = result.get('success', False)
            if success:
                reference = result.get('REF', None)
            if not reference:
                reference = result.get('reference_number', None)

        if not reference:
            return error_response('Failed to get reference from the vault')
        wallet = Wallet.by_attr_first('entity_id', wallet_result)
        wallet.reference = reference
        DBSession.flush()





        # DONE TILL HERE


        if identity_number:
            result = self.save_user_documents(**kwargs)
            if not result:
                return error_response('Could not save user documents.')
            kwargs['identity_number'] = identity_number
            result = MYIMALI.kyc_idnumber_lite(**kwargs)
            #kyc_success = result.get('success', False)
            #if not kyc_success:
            #    return error_response('KYC submission failed.')

        if passport_number:
            result = self.save_user_documents(**kwargs)
            if not result:
                return error_response('Could not save user documents.')
            kwargs['name'] = entity.get('name', None)
            kwargs['surname'] = entity.get('surname', None)
            result = MYIMALI.kyc_passport_number_lite(**kwargs)
            #kyc_success = result.get('success', False)
            #if not kyc_success:
            #    return error_response('KYC submission failed.')

        kwargs['coupon_type'] = 'iMali'
        result = self.create_transaction_history(**kwargs)

        bln_link_savings = kwargs.get('bln_link_savings', True)
        if bln_link_savings:
            result = MYIMALI.link_savings_pocket(**kwargs)
            LOGGER.info(f'savings result: {result}')
            kwargs['coupon_type'] = 'iMali-Savings'
            result = self.create_transaction_history(**kwargs)

        bln_link_loyalty = kwargs.get('bln_link_loyalty', True)
        if bln_link_loyalty:
            result = MYIMALI.link_loyalty_pocket(**kwargs)
            LOGGER.info(f'loyalty result: {result}')
            kwargs['coupon_type'] = 'iMali-Loyalty'
            result = self.create_transaction_history(**kwargs)

        result = self.create_otp(**kwargs)
        return success_response(str(reference))

    @safe_headers
    @expose('json')
    def get_citizenship_list(self, *args, **kwargs):
        filepath = os.path.join(UPLOADS_DIRNAME, 'COUNTRIES.txt')
        if not os.path.isfile(filepath):
            return error_response([])

        with open(filepath, 'r') as f:
            data = f.readlines()

        outputlist = []
        for country in data:
            country = country.strip().replace('_', ' ').replace(',', '').title()
            outputlist.append({'name' : country})

        return success_response(outputlist)

    def create_otp(self, *args, **kwargs):

        #new_otp = random.randint(1000, 9999)
        new_otp = 1234

        entity_id = kwargs.get('entity_id', None)
        username = kwargs.get('username', None)
        mobile_number = kwargs.get('mobile_number', None)
        if not mobile_number and not username:
            wallet = Wallet.by_attr_first('entity_id', entity_id)
            if not wallet:
                return error_response('Wallet not found.')
            username = wallet.username

        otp = MobileOneTimePin()
        otp.username = username
        otp.mobile = kwargs.get('mobile_number', None)
        otp.otp = new_otp
        otp.expiry = datetime.now()
        DBSession.add(otp)
        DBSession.flush()

        kwargs['message'] = f'Your one time pin is: {otp.otp}'
        result = MESSAGING.sms(**kwargs)
        success = result.get('success', False)
        if not success:
            return error_response('Failed to send OTP.')
        return success_response(otp.otp)

    @safe_headers
    @expose('json')
    def confirm_mobile_otp(self, *args, **kwargs):
        otp = kwargs.get('otp', None)
        if not otp:
            return error_response('No otp to validate.')

        username = kwargs.get('username', None)
        mobile_number = kwargs.get('mobile_number', None)
        if mobile_number and not username:
            exists = DBSession.query(MobileOneTimePin). \
                    filter(MobileOneTimePin.mobile==mobile_number). \
                    filter(MobileOneTimePin.otp==otp). \
                    filter(MobileOneTimePin.active==True). \
                    order_by(MobileOneTimePin.id.desc()). \
                    first()
        elif not mobile_number and username:
            exists = DBSession.query(MobileOneTimePin). \
                    filter(MobileOneTimePin.username==username). \
                    filter(MobileOneTimePin.otp==otp). \
                    filter(MobileOneTimePin.active==True). \
                    order_by(MobileOneTimePin.id.desc()). \
                    first()

        if not exists:
            return error_response('Could not validate OTP')

        exists.active = False
        DBSession.flush()
        return success_response('True')

    @safe_headers
    @expose('json')
    def register_merchant(self, *args, **kwargs):
        username = kwargs.get('username', None)
        if not username:
            return error_response('register_merchant failed: No username supplied.')

        password = kwargs.get('password', None)
        if not password:
            return error_response('register_merchant failed: No password supplied.')

        firstName = kwargs.get('firstName', None)
        if not firstName:
            firstName = kwargs.get('first_name', None)
            if firstName:
                kwargs['firstName'] = firstName
        if not firstName:
            return error_response('register_merchant failed: No firstName supplied.')

        exists = DBSession.query(Wallet). \
                filter_by(username=username). \
                first()
        if exists:
            kwargs['entity_id'] = entity_id = exists.entity_id
            kwargs['wallet_id'] = wallet_id = exists.id
        else:
            kwargs['entity_id'] = entity_id = self.confirm_merchant_exists(**kwargs)
            result = self.register_wallet(**kwargs)
            kwargs['wallet_id'] = wallet_id = result.get('data', None)

        result = self.get_user_profile(**{'username' : username})
        success = result.get('success', False)
        if success:
            data = result.get('data', {})
            kwargs['reference_number'] = reference_number = data.get('REF', None)

        else:
            result = MYIMALI.register_merchant(**kwargs)
            kwargs['reference_number'] = reference_number = result.get('REF', None)

        if not reference_number:
            return error_response('Could not get reference_number.')
        wallet = Wallet.by_id(wallet_id)
        wallet.reference = reference_number
        DBSession.flush()

        exists = DBSession.query(Wallet). \
                filter_by(username=username). \
                first()
        if exists:
            kwargs['entity_id'] = entity_id = exists.entity_id
            kwargs['wallet_id'] = wallet_id = exists.id
        else:
            kwargs['entity_id'] = entity_id = self.confirm_merchant_exists(**kwargs)
            result = self.register_wallet(**kwargs)
            kwargs['wallet_id'] = wallet_id = result.get('data', None)

        if not wallet_id:
            return error_response('Could not save wallet.')

        # By default do no link Merchant Loyalty program
        bln_link_loyalty = kwargs.get('bln_link_loyalty', False)
        if bln_link_loyalty:
            program = MerchantLoyaltyProgram.by_attr_first('name', 'calabash-cashback-10')
            if program:
                kwargs['loyalty_program'] = program.name
                result = MYIMALI.link_loyalty_program(**kwargs)

        # By default do no link Savings pocket
        bln_link_savings = kwargs.get('bln_link_savings', False)
        if bln_link_savings:
            result = MYIMALI.link_savings_pocket(**kwargs)
            LOGGER.info(f'savings result: {result}')

            kwargs['coupon_type'] = 'iMali-Savings'
            result = self.create_transaction_history(**kwargs)

        # By default do no link Loyalty pocket
        bln_link_loyalty = kwargs.get('bln_link_loyalty', False)
        if bln_link_loyalty:
            result = MYIMALI.link_loyalty_pocket(**kwargs)
            LOGGER.info(f'loyalty result: {result}')

            kwargs['coupon_type'] = 'iMali-Loyalty'
            result = self.create_transaction_history(**kwargs)

        kwargs['coupon_type'] = 'iMali'
        result = self.create_transaction_history(**kwargs)
        return success_response({'REF' : reference_number})

    @safe_headers
    @expose('json')
    def kyc_merchant(self, *args, **kwargs):
        identity_number = kwargs.get('identity_number', None)
        passport_number = kwargs.get('passport_number', None)
        if not identity_number and not passport_number:
            return error_response('Nothing to identify user.')

        if identity_number:
            result = MYIMALI.kyc_idnumber_full(**kwargs)

        if passport_number:
            result = MYIMALI.kyc_passport_number_lite(**kwargs)

        message = result.get('message', '')
        success = result.get('success', False)
        if not success:
            if not message:
                message = result.get('error', '')
            return error_response(message)
        return success_response(message)

    def confirm_person_wallet(self, *args, **kwargs):
        username = kwargs.get('username', None)
        entity_id = kwargs.get('entity_id', None)

        if username:
            wallet = Wallet.by_attr_first('username', username)
            if wallet:
                return wallet.entity_id

        if entity_id:
            wallet = Wallet.by_attr_first('entity_id', entity_id)
            if wallet:
                try:
                    exists.username = username
                    DBSession.flush()
                except Exception as e: # Duplicate username
                    LOGGER.warn(f'confirm_person_wallet failed: {e}')
                    return False
                return exists.entity_id

        result = self.register_wallet(**kwargs)
        success = result.get('success', False)
        if not success:
            return False

        wallet_id = result.get('data', None)
        if not wallet_id:
            return False

        wallet = Wallet.by_id(wallet_id)
        if not wallet:
            return False

        return wallet.entity_id

    def confirm_merchant_exists(self, *args, **kwargs):
        mobile = kwargs.get('mobile', None)

        result = VAULT.get_entity_by_mobile({'mobile_number' : mobile})
        if not result:
            return False # The call to the vault failed - no response

        entity = result.get('entity', {})
        if entity:
            entity_id = entity.get('entity_id', None)
            return entity_id

        kwargs['sendMail'] = False
        result = VAULT.create_calabash_organisation(kwargs)
        if not result:
            return False # The call to the vault failed - no response
        entity_id = result.get('entity_id', False)
        return entity_id

    def register_wallet(self, *args, **kwargs):
        usernow = User.by_username('developer')
        merchant_loyalty_program_id = kwargs.get('merchant_loyalty_program_id', 0)
        try:
            merchant_loyalty_program_id = int(merchant_loyalty_program_id)
        except:
            merchant_loyalty_program_id = 0

        entity_id = kwargs.get('entity_id', None)
        if not entity_id:
            entity_id = self.confirm_member_exists(**kwargs)
            if not entity_id:
                return error_response('register_wallet failed: entity_id not found')

        wallet = DBSession.query(Wallet). \
                filter_by(entity_id=entity_id). \
                first()
        if wallet:
            return success_response(wallet.id)

        username = kwargs.get('username', None)
        wallet = Wallet()
        wallet.entity_id = entity_id
        wallet.username = username
        wallet.merchant_loyalty_program_id = merchant_loyalty_program_id
        DBSession.add(wallet)
        DBSession.flush()
        return success_response(wallet.id)

    def confirm_member_exists(self, *args, **kwargs):
        result = {}
        identity_number = kwargs.get('identity_number', None)
        if identity_number:
            result = VAULT.get_entity_by_identity_number({'identity_number' : identity_number})

        passport_number = kwargs.get('passport_number', None)
        if passport_number:
            result = VAULT.get_entity_by_passport_number({'passport_number' : passport_number})

        entity = result.get('entity', {})
        if entity:
            entity_id = entity.get('entity_id', None)
            return entity_id

        name = kwargs.get('firstName', None)
        if not name:
            kwargs['firstName'] = kwargs.get('name', None)

        result = VAULT.create_calabash_person(kwargs)
        if not result:
            return False
        entity_id = result.get('entity_id', None)
        return entity_id




    @expose('json')
    def create_transaction_history(self, *args, **kwargs):
        limit = kwargs.get('limit', None)
        if not limit:
            kwargs['limit'] = limit = NEW_LIMIT

        username = kwargs.get('username', None)
        coupon_type = kwargs.get('coupon_type', None)

        statement = self.get_myimali_transaction_history_list(**kwargs)
        LOGGER.info(f'create_transaction_history for {username} {coupon_type} {len(statement)} records.')
        for item in statement:

            date = item.get('date', None)
            type = item.get('type', None)
            amount = item.get('amount', None)
            time = item.get('time', None)
            seconds = item.get('seconds', None)
            balance = item.get('balance', None)
            other = item.get('other', None)
            TrxId = item.get('TrxId', None)
            paymentReference = item.get('paymentReference', None)

            exists = DBSession.query(TransactionHistory). \
                    filter_by(coupon_type = coupon_type). \
                    filter_by(username = username). \
                    filter_by(date = date). \
                    filter_by(type = type). \
                    filter_by(amount = amount). \
                    filter_by(time = time). \
                    filter_by(seconds = seconds). \
                    filter_by(balance = balance). \
                    filter_by(other = other). \
                    filter_by(TrxId = TrxId). \
                    filter_by(paymentReference = paymentReference). \
                    first()
            if not exists:
                new = TransactionHistory()
                new.coupon_type = coupon_type
                new.username = username
                new.date = date
                new.type = type
                new.amount = amount
                new.time = time
                new.seconds = seconds
                new.balance = balance
                new.other = other
                new.TrxId = TrxId
                new.paymentReference = paymentReference
                DBSession.add(new)
                DBSession.flush()
        return True

    def get_myimali_transaction_history_list(self, *args, **kwargs):
        outputlist = []
        username = kwargs.get('username', None)
        coupon_type = kwargs.get('coupon_type', None)

        result = MYIMALI.get_transaction_history(**kwargs)
        if not result:
            LOGGER.warning('no result')
            return outputlist

        if isinstance(result, list):
            LOGGER.warning(f'result is a list: {result} {username} {coupon_type}')

            result = MYIMALI.link_savings_pocket(**kwargs)
            LOGGER.info(f'savings result: {result}')

            result = MYIMALI.link_loyalty_pocket(**kwargs)
            LOGGER.info(f'loyalty result: {result}')

            result = MYIMALI.get_transaction_history(**kwargs)
            if not result:
                return outputlist

        success = result.get('success', False)
        if not success:
            error = result.get('error', '')

            LOGGER.info(f'get_myimali_transaction_history_list error: {error}')
            transfer_result = self.auto_transfer_user_api_key(error, username)
            if transfer_result:
                return self.get_myimali_transaction_history_list(**kwargs)

            LOGGER.warning(f'error: {error}')
            return outputlist

        return result.get('statement', [])

