#!/bin/python

import cv2
import imutils
from picamera.array import PiRGBArray

class MotionDetector(object):

    def __init__(self, *args, **kwargs):
        self.stream = kwargs.get('stream', None)
        self.verbose = kwargs.get('verbose', None)
        self.min_area = kwargs.get('min_area', 500)
        self.bln_videofile = kwargs.get('bln_videofile', False)
        if not self.stream: 
            if self.verbose: print('ERROR: Starting Video Stream')

    def start_motion_detector(self, *args, **kwargs):
        if self.verbose: print('INFO: Starting Video Stream')
        first_frame = None
        if self.bln_videofile:
            while True:
                frame = self.stream.read()
                if frame is None: break
                frame = imutils.resize(frame, width=500)
                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                gray = cv2.GaussianBlur(gray, (21, 21), 0)

                if first_frame is None:
                    if self.verbose: print('INFO: Setting first frame for comparison')
                    first_frame = gray
                    continue

                # calculate the absolute difference between current frame and first_frame
                frameDelta = cv2.absdiff(first_frame, gray)
                thresh = cv2.threshold(frameDelta, 25, 255, cv2.THRESH_BINARY)[1]
                thresh = cv2.dilate(thresh, None, iterations=2)

                # find contours on threshold image
                contours = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                contours = contours[0] if imutils.is_cv2() else contours[1] # original
                #contours = contours[0] if imutils.is_cv3() else contours[1] # CV3 version

                for c in contours:
                    if cv2.contourArea(c) < self.min_area:
                        if self.verbose: print('INFO: No Movement')
                        yield True, frame
                        continue

                    if self.verbose: print('INFO: Movement detected')
                    yield False, frame

        # Stream from PiCamera
        else:
            raw_capture = PiRGBArray(self.stream, self.stream.resolution)
            for frame in self.stream.capture_continuous(raw_capture, format='bgr', use_video_port=True):

                frame = imutils.resize(frame.array, width=500)
                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                gray = cv2.GaussianBlur(gray, (21, 21), 0)

                if first_frame is None:
                    if self.verbose: print('INFO: Setting first frame for comparison')
                    first_frame = gray.copy().astype('float')
                    raw_capture.truncate(0)
                    continue

                # calculate the absolute difference between current frame and first_frame
                cv2.accumulateWeighted(gray, first_frame, 0.5)
                frameDelta = cv2.absdiff(gray, cv2.convertScaleAbs(first_frame))
                thresh = cv2.threshold(frameDelta, 25, 255, cv2.THRESH_BINARY)[1]
                thresh = cv2.dilate(thresh, None, iterations=2)

                # find contours on threshold image
                contours = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                contours = contours[0] if imutils.is_cv2() else contours[1]

                bln_occupied = False
                for c in contours:
                    if cv2.contourArea(c) < self.min_area:
                            continue
                    bln_occupied = True

                if bln_occupied: movement_text = 'Movement Detected'
                else: movement_text = 'No Movement'

                if self.verbose: print('Info: {0}'.format(movement_text))
                raw_capture.truncate(0)
                yield bln_occupied, frame
