#!/bin/python
"""model/dbinit"""

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

from dotenv import dotenv_values

FROM_ADDRESS = dotenv_values().get("EMAIL_FROM_ADDRESS")
db_user = dotenv_values().get('DBUSER')
db_pass = dotenv_values().get('DBPASS')
db_ipaddress = dotenv_values().get('DBIPADDRESS')
db_port = dotenv_values().get('DBPORT')
db_name = dotenv_values().get('DBNAME')

db_endpoint = f'mysql://{db_user}:{db_pass}@{db_ipaddress}:{db_port}/{db_name}'

engine = create_engine(db_endpoint, echo=False, pool_size=100,
                       max_overflow=50, pool_timeout=10,
                       pool_recycle=280, strategy='threadlocal',
                       case_sensitive=True)

SessionLocal = sessionmaker(autocommit=False, autoflush=False,
                            bind=engine, expire_on_commit=False)

Base = declarative_base()

def get_db():
    try:
        db = SessionLocal()
        yield db
    finally:
        db.close()

def get_session():
    session = SessionLocal()
    try:
        yield session
    except:
        session.rollback()
        raise
    else:
        session.commit()
