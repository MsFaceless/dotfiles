# -*- coding: utf-8 -*-
"""Message Controller"""
import json
from urllib.parse import quote_plus

import requests
from dotenv import dotenv_values
from tg import expose, request, Response

from rocket.lib.base import BaseController

from twilio.jwt import client
from twilio.jwt.client import ClientCapabilityToken
from twilio.jwt.taskrouter.capabilities import WorkerCapabilityToken
from twilio.rest import Client
from twilio.twiml.voice_response import Dial, VoiceResponse

env_vars = dotenv_values()

ACCOUNT_SID = env_vars.get('ACCOUNT_SID', None)
AUTH_TOKEN = env_vars.get('AUTH_TOKEN', None)
TWILIO_NUMBER = env_vars.get('TWILIO_NUMBER', None)
TWIML_APPLICATION_SID = env_vars.get('TWIML_APPLICATION_SID', None)

WORKSPACE_SID = env_vars.get("WORKSPACE_SID")

workflow_support_sid = env_vars.get("SUPPORT_WORKFLOW_SID")  # support workflow
workflow_sales_sid = env_vars.get("SALES_WORKFLOW_SID")  # sales workflow
workflow_billing_sid = env_vars.get("BILLING_WORKFLOW_SID")  # billing workflow
workflow_OOO_sid = env_vars.get("OOO_SID")  # out of office workflow
workflow_mngr = env_vars.get("MANAGER_WORKFLOW_SID")  # manager escalation workflow


client = Client(ACCOUNT_SID, AUTH_TOKEN)

class CallCenterUtils(BaseController):

    def return_work_space(self, *args, **kwargs):

        digit_pressed = kwargs.get('Digits')
        if digit_pressed == "1":
            department = "sales"
            work_flow_sid = workflow_sales_sid
            workflowdata = (work_flow_sid, department)

            return workflowdata

        if digit_pressed == "2":
            department = "support"
            work_flow_sid = workflow_support_sid
            workflowdata = (work_flow_sid, department)

            return workflowdata

        if digit_pressed == "3":
            department = "billing"
            work_flow_sid = workflow_billing_sid
            workflowdata = (work_flow_sid, department)

            return workflowdata

    @expose('json')
    def get_token(self, *args, **kwargs):

        capability = ClientCapabilityToken(ACCOUNT_SID, AUTH_TOKEN)
        # Allow our users to make outgoing calls with Twilio Client
        capability.allow_client_outgoing(TWIML_APPLICATION_SID)
        # User
        capability.allow_client_incoming('support_agent')

        token = capability.to_jwt()
        return str({'token': token})

    @expose()
    def call(self, *args, **kwargs):
        response = VoiceResponse()
        dial = Dial(callerId=TWILIO_NUMBER)

        phone_number = kwargs.get("phoneNumber")
        if phone_number:
            dial.number(phone_number)

        else:
            dial.client('support_agent')
        return str(response.append(dial))

    @expose()
    def incoming_call(self, *args, **kwargs):
        resp = VoiceResponse()

        with resp.gather(num_digits="1", action='/call_center_utils/incoming_call_department', timeout=10) as g:
            g.say( "Hello, welcome to Rocket Insure Tech, thanks for calling please note this call is beign recorded, To continue select from the following options:")
            g.say("For English, press one.", language='en')
            g.say("Vir Afrikaans, druk twee.", language='af')

        return str(resp)


    @expose()
    def incoming_call_department(self, *args, **kwargs):

        resp = VoiceResponse()
        if 'Digits' in kwargs:
            # Get which digit the caller chose
            choice = int(kwargs['Digits'])
            switcher = {
                1: "en",
                2: "af",
            }
            dept_lang = switcher.get(choice)

            resp.redirect("/call_center_utils/dept?lang=" + dept_lang + "&digit=" + str(choice))
            return str(resp)

    @expose()
    def dept(self, *args, **kwargs):
        resp = VoiceResponse()

        dept_lang = kwargs.get('lang')
        digit = kwargs.get('digit')
        say_dict = {
            'en': ["For sales press one", "For support press two", "For billing press three"],
            'af': ["Vir verkope, druk een", "Vir ondersteuning, druk tw", "Vir fakturering druk drie"],

        }
        with resp.gather(num_digits=digit, action="/call_center_utils/enqueue_call?lang=" + dept_lang, timeout="15") as g:
            g.say(say_dict.get(dept_lang)[0], language=dept_lang)
            g.say(say_dict.get(dept_lang)[1], language=dept_lang)

        return str(resp)


    @expose()
    def enqueue_call(self, *args, **kwargs):

        if 'Digits' in kwargs:
            workflow_d = self.return_work_space(**kwargs)  # array of workspace and product
            resp = VoiceResponse()

            select_lang = kwargs.get('lang')
            with resp.enqueue(None, workflow_support_sid=workflow_d[0]) as e:
                e.task('{"selected_language" : "' + select_lang + '", "selected_product" : "' + workflow_d[1] + '"}')
            return str(resp)
        else:
            resp = VoiceResponse()
            resp.say("no digits detected")  # tell user something is amiss
            resp.redirect("/call_center_utils/incoming_call")  # redirect back to initial step
        return str(resp)

    @expose()
    def assignment_callback(self, *args, **kwargs):
        ret = '{"instruction": "call", "to":"+27640605016", "post_work_activity_sid":"WA8ae4604c4e2734101ef8c8d8e3cc7f14", "Content-Type": "application/json"}'
        return str(ret)

    @expose()
    def accept_reservation(self, *args, **kwargs):
        """Accepting a Reservation"""
        task_sid = kwargs.get('task_sid')
        reservation_sid = kwargs.get('reservation_sid')
        reservation = client.taskrouter.workspaces(WORKSPACE_SID) \
            .tasks(task_sid) \
            .reservations(reservation_sid) \
            .update(reservation_status='accepted')


        resp = str(reservation)
        return resp

    @expose()
    def events(self, *args, **kwargs):
        """ Events callback for missed calls """

        event_type = kwargs.get('EventType')
        task_events = ['workflow.timeout', 'task.canceled']
        worker_event = 'worker.activity.update'

        if event_type in task_events:
            task_attributes = json.loads(kwargs['TaskAttributes'])
            print(task_attributes)
            self._save_missed_call(**kwargs)

            if event_type == 'workflow.timeout':
                self._voicemail(task_attributes['call_sid'])

        elif event_type == worker_event and kwargs.get('WorkerActivityName') == 'Offline':
            message = 'Your status has changed to Offline. Reply with ' \
                      '"On" to get back Online'
            worker_number = json.loads(kwargs.get('contact_uri'))
            print("------------------------------------------------------------------")
         #   sms_sender.send(to=worker_number, from_=TWILIO_NUMBER, body=message)

        return str('')

    @expose()
    def _voicemail(self, *args, **kwargs):
        msg = 'Sorry, All agents are busy. Please leave a message. We will call you as soon as possible'
        route_url = 'http://twimlets.com/voicemail?Email=' + "tafadzwa@dotxmltech.com" + '&Message=' + quote_plus(msg)
        self.route_call(**kwargs)

    @expose()
    def route_call(self, *args, **kwargs):

        call_sid = kwargs.get('')
        route_url = kwargs.get('')
        client.api.calls(call_sid).update(url=route_url)

    @expose()
    def _save_missed_call(self, *args, **kwargs):
        print(kwargs)
        #phone_number
        #selected_product


    @expose()
    def get_workspaces_details(self, *args, **kwargs):
        workspaces = client.taskrouter.workspaces.list()
        return workspaces

    @expose()
    def get_workspaces_statistics(self, *args, **kwargs):
        workspace_id = kwargs.get("workspace_sid")
        workspace_statistics = client.taskrouter \
            .workspaces(workspace_id) \
            .statistics() \
            .fetch()

        return workspace_statistics

    @expose()
    def create_workspace(self, *args, **kwargs):
        callback_url = kwargs.get("callback_url")
        works_space_name = kwargs.get("works_space_name")

        workspace = client.taskrouter.workspaces.create(
            friendly_name=works_space_name,
            event_callback_url=callback_url,
            template='FIFO'
        )
        # Delete Default Queue
        workflows = client.taskrouter.workspaces(workspace.sid).workflows.list()

        for workflow_ in workflows:
            workflow = client.taskrouter.workspaces(workspace.sid).workflows(workflow_.sid).fetch()
            if (workflow.friendly_name == 'Default Fifo Workflow'):
                client.taskrouter.workspaces(workspace.sid).workflows(workflow.sid).delete()
            # Delete Default Workflow
        taskqueues = client.taskrouter.workspaces(workspace.sid).task_queues.list()
        for taskqueue in taskqueues:
            taskqueue_ = client.taskrouter.workspaces(workspace.sid).task_queues(taskqueue.sid).fetch()
            if (taskqueue_.friendly_name == 'Sample Queue'):
                client.taskrouter.workspaces(workspace.sid).task_queues(taskqueue_.sid).delete()


        return workspace

    @expose('json')
    def get_workers_list(self, *args, **kwargs):
        workspace_id = kwargs.get("workspace_sid")
        workers = client.taskrouter \
            .workspaces(workspace_id) \
            .workers \
            .list()

        return workers

    @expose('json')
    def get_delete_worker(self, *args, **kwargs):
        workspace_id = kwargs.get("workspace_sid")
        workflow_sid = kwargs.get('workflow_sid')
        worker = client.taskrouter.workspaces(workspace_id) \
            .workers(workflow_sid) \
            .delete()

        return worker

    @expose('json')
    def get_worker_statics(self, *args, **kwargs):
        workers_statistics = client.taskrouter \
            .workspaces(WORKSPACE_SID) \
            .workers \
            .statistics() \
            .fetch()
        return workers_statistics

    # Create  Worker
    @expose()
    def create_worker(self, *args, **kwargs):
        department = kwargs.get("department")
        worker_contact = kwargs.get('worker_contact')
        worker_name = kwargs.get('worker_name')
        workspace_sid = kwargs.get('workspace_sid')

        attributes = {
            "skills": [department],
            "languages": ["en", "af"],
            "contact_uri": worker_contact
        }

        create_worker = client.taskrouter.workspaces(workspace_sid) \
            .workers.create(friendly_name=worker_name,
                            attributes=json.dumps(attributes))

        return create_worker

    @expose('json')
    def get_call_log_details(self, *args, **kwargs):
        calls = client.calls.list(limit=50)
        return calls

    @expose('json')
    def get_recorded_call_log_details(self, *args, **kwargs):
        calls = client.recordings.list(limit=50)
        return calls

    @expose('json')
    def get_activities_list(self, *args, **kwargs):
        workspace_sid = kwargs.get('workspace_sid')
        activities = client.taskrouter.workspaces(workspace_sid).activities.list()
        return activities

############################################################################################################## Start Task Queue
    @expose()
    def create_task_queue(self, *args, **kwargs):

        friendly_name = kwargs.get('friendly_name')
        max_reserved_workers = kwargs.get('max_reserved_workers')
        target_worker = kwargs.get('target_worker')
        workspace_sid = kwargs.get('workspace_sid')
        reservation_activity_sid = kwargs.get('reservation_activity_sid')
        assignment_activity_sid = kwargs.get('assignment_activity_sid')

        attribute = 'skills HAS' + f"""  "{target_worker}" """
        taskqueue = client.taskrouter.workspaces(workspace_sid) \
            .task_queues.create(
            friendly_name=friendly_name,
            reservation_activity_sid=reservation_activity_sid,
            assignment_activity_sid=assignment_activity_sid,
            max_reserved_workers=max_reserved_workers,
            target_workers=attribute,
        )

        return taskqueue

    @expose('json')
    def get_task_queues(self, *args, **kwargs):
        workspace_sid = kwargs.get('workspace_sid')
        task_queues = client.taskrouter \
            .workspaces(workspace_sid) \
            .task_queues \
            .list(limit=20)

        return task_queues


    @expose()
    def create_workflow(self, *args, **kwargs):

        friendly_name = kwargs.get('friendly_name')

        callback_url = kwargs.get('callback_url')
        workspace_sid = kwargs.get('workspace_sid')
        expression = kwargs.get('expression')
        task_queue_sid = kwargs.get('task_queue_sid')

        expression_attribute = 'selected_product ==' + f""""{expression}" """

        attributes = {
            'task_routing': {
                'filters': [
                    {
                        'filter_friendly_name': friendly_name,
                        'expression': expression_attribute,
                        'targets': [{'queue': task_queue_sid,
                                     'expression': 'task.selected_language IN worker.languages'}]
                    },
                ],
                'default_filter': {
                    'queue': task_queue_sid,
                    'priority': 1,
                    'timeout': 30
                }
            }
        }
        workflow_= client.taskrouter.workspaces(workspace_sid).workflows.create(
            friendly_name=friendly_name,
            task_reservation_timeout='120',
            assignment_callback_url=callback_url,
            fallback_assignment_callback_url=callback_url,
            configuration=json.dumps(attributes)
        )

        return workflow

    #Fetch Workflow
    @expose()
    def view_workflow(self, *args, **kwargs):
        workspace_sid = kwargs.get("workspace_sid")
        workflow_sid = kwargs.get('workflow_sid')

        workflow = client.taskrouter \
            .workspaces(workspace_sid) \
            .workflows(workflow_sid) \
            .fetch()
        return workflow

    @expose()
    def get_workflow_list(self, *args, **kwargs):
        workspace_sid = kwargs.get('workspace_sid')
        workflow = client.taskrouter.workspaces(workspace_sid).workflows.list()
        return workflow

    @expose()
    def update_workflow(self, *args, **kwargs):
        workspacesid = kwargs.get("workspacesid")
        workflow_sid = kwargs.get('workflow_sid')
        workflow = client.taskrouter \
            .workspaces(workspacesid) \
            .workflows(workflow_sid) \
            .update(friendly_name='friendly_name')

        return  workflow

#Delete Workflow
    @expose()
    def delete_workflow(self, *args, **kwargs):
        workspace_sid = kwargs.get("workspace_sid")
        workflow_sid = kwargs.get('workflow_sid')

        delete_workflow = client.taskrouter.workspaces(workspace_sid) \
            .workflows(workflow_sid) \
            .delete()
        return delete_workflow

#---------------------------------------------------------------------------------------Reports
    @expose()
    def retrive_workflow_statistics(self, *args, **kwargs):
        workspace_sid = kwargs.get("workspace_sid")
        workflow_sid = kwargs.get('workflow_sid')

        workflow_statistics = client.taskrouter \
            .workspaces(workspace_sid) \
            .workflows(workflow_sid) \
            .statistics() \
            .fetch()

        return workflow_statistics

    @expose()
    def cumulative_workflow_statistics(self, *args, **kwargs):
        workspace_sid = kwargs.get("workspace_sid")
        workflow_sid = kwargs.get('workflow_sid')

        workflow_cumulative_statistics = client.taskrouter \
                .workspaces(workspace_sid) \
                .workflows(workflow_sid) \
                .cumulative_statistics() \
                .fetch()

        return workflow_cumulative_statistics






   


