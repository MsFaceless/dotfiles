# -*- coding: utf-8 -*-

import uuid
import transaction

from calabash.model import *
from calabash.lib.sql_crud_utils import Cruds

CRUDS = Cruds()

def create_defaults():

###############################################################################
# Types
###############################################################################

    MAIN = WalletType.by_attr_first('name', 'main').id
    SOCIAL = WalletType.by_attr_first('name', 'social_club').id
    SAVINGS = WalletType.by_attr_first('name', 'savings').id
    LOYALTY = WalletType.by_attr_first('name', 'loyalty').id
    HOLDING = WalletType.by_attr_first('name', 'holding').id

    MEMBER = WalletAccountType.by_attr_first('name', 'member').id
    MERCHANT = WalletAccountType.by_attr_first('name', 'merchant').id
    SYSTEM = WalletAccountType.by_attr_first('name', 'system').id

    MONTH = WalletWithholdPeriodType.by_attr_first('name', 'months').id

    ACTIVE = WalletStatusType.by_attr_first('name', 'active').id

###############################################################################
# Wallet Provider (Calabash)
###############################################################################

    usernow = User.by_username('developer')
    kwargs = {
        'table_name' : 'WalletProvider',
        'name' : 'Calabash',
        'base_url' : 'http://localhost:9090',
        'documentation_url' : 'http://localhost:9090',
        'added_by' : usernow.id,
    }
    exists = WalletProvider.by_attr_first('name', kwargs.get('name', None))
    calabash_id = None
    if not exists:
        calabash = CRUDS.create_entry(**kwargs)
        calabash_id = calabash.get('data', None)
        transaction.commit()

###############################################################################
# Wallet Provider (My Imali)
###############################################################################

    usernow = User.by_username('developer')
    kwargs = {
        'table_name' : 'WalletProvider',
        'name' : 'My Imali',
        'base_url' : 'https://my-imali-testing.appspot.com',
        'documentation_url' : 'https://documenter.getpostman.com/view/5525103/S1LpbC1A?version=latest',
        'added_by' : usernow.id,
    }
    exists = WalletProvider.by_attr_first('name', kwargs.get('name', None))
    myimali_id = None
    if not exists:
        myimali = CRUDS.create_entry(**kwargs)
        myimali_id = myimali.get('data', None)
        transaction.commit()

###############################################################################
# Wallet Catalog (Calabash - System - Main)
###############################################################################

    if calabash_id:
        usernow = User.by_username('developer')
        kwargs = {
            'table_name' : 'WalletCatalog',
            'name' : 'Calabash System Main',
            'wallet_type_id' : MAIN,
            'wallet_account_type_id' : SYSTEM,
            'wallet_provider_id' : calabash_id,
            'wallet_withhold_period_type_id' : MONTH,
            'wallet_withhold_period_value' : 0,
            'max_transaction_amount' : 9999.00,
            'max_balance' : 9999.00,
            'min_balance' : 0.00,
            'added_by' : usernow.id,

        }
        exists = WalletCatalog.by_attr_first('name', kwargs.get('name', None))
        if not exists:
            result = CRUDS.create_entry(**kwargs)
            result_id = result.get('data', None)
            transaction.commit()

###############################################################################
# Wallet Catalog (Calabash - System - Holding)
###############################################################################

    if calabash_id:
        usernow = User.by_username('developer')
        kwargs = {
            'table_name' : 'WalletCatalog',
            'name' : 'Calabash System Holding',
            'wallet_type_id' : HOLDING,
            'wallet_account_type_id' : SYSTEM,
            'wallet_provider_id' : calabash_id,
            'wallet_withhold_period_type_id' : MONTH,
            'wallet_withhold_period_value' : 0,
            'max_transaction_amount' : 99999.00,
            'max_balance' : 99999.00,
            'min_balance' : 0.00,
            'added_by' : usernow.id,

        }
        exists = WalletCatalog.by_attr_first('name', kwargs.get('name', None))
        if not exists:
            result = CRUDS.create_entry(**kwargs)
            result_id = result.get('data', None)
            transaction.commit()

###############################################################################
# Wallet Catalog (Calabash - Member - Main)
###############################################################################

    if calabash_id:
        usernow = User.by_username('developer')
        kwargs = {
            'table_name' : 'WalletCatalog',
            'name' : 'Calabash Member Main',
            'wallet_type_id' : MAIN,
            'wallet_account_type_id' : MEMBER,
            'wallet_provider_id' : calabash_id,
            'wallet_withhold_period_type_id' : MONTH,
            'wallet_withhold_period_value' : 0,
            'max_transaction_amount' : 9999.00,
            'max_balance' : 9999.00,
            'min_balance' : 0.00,
            'added_by' : usernow.id,

        }
        exists = WalletCatalog.by_attr_first('name', kwargs.get('name', None))
        if not exists:
            result = CRUDS.create_entry(**kwargs)
            result_id = result.get('data', None)
            transaction.commit()

###############################################################################
# Wallet Catalog (Calabash - Member - Social Club)
###############################################################################

    if calabash_id:
        usernow = User.by_username('developer')
        kwargs = {
            'table_name' : 'WalletCatalog',
            'name' : 'Calabash Member Social',
            'wallet_type_id' : SOCIAL,
            'wallet_account_type_id' : MEMBER,
            'wallet_provider_id' : calabash_id,
            'wallet_withhold_period_type_id' : MONTH,
            'wallet_withhold_period_value' : 0,
            'max_transaction_amount' : 9999.00,
            'max_balance' : 9999.00,
            'min_balance' : 0.00,
            'added_by' : usernow.id,

        }
        exists = WalletCatalog.by_attr_first('name', kwargs.get('name', None))
        if not exists:
            result = CRUDS.create_entry(**kwargs)
            result_id = result.get('data', None)
            transaction.commit()

###############################################################################
# Wallet Catalog (Calabash - Member - Savings)
###############################################################################

    if calabash_id:
        usernow = User.by_username('developer')
        kwargs = {
            'table_name' : 'WalletCatalog',
            'name' : 'Calabash Member Savings',
            'wallet_type_id' : SAVINGS,
            'wallet_account_type_id' : MEMBER,
            'wallet_provider_id' : calabash_id,
            'wallet_withhold_period_type_id' : MONTH,
            'wallet_withhold_period_value' : 0,
            'max_transaction_amount' : 9999.00,
            'max_balance' : 9999.00,
            'min_balance' : 0.00,
            'added_by' : usernow.id,

        }
        exists = WalletCatalog.by_attr_first('name', kwargs.get('name', None))
        if not exists:
            result = CRUDS.create_entry(**kwargs)
            result_id = result.get('data', None)
            transaction.commit()

###############################################################################
# Wallet Catalog (Calabash - Member - Loyalty)
###############################################################################

    if calabash_id:
        usernow = User.by_username('developer')
        kwargs = {
            'table_name' : 'WalletCatalog',
            'name' : 'Calabash Member Loyalty',
            'wallet_type_id' : LOYALTY,
            'wallet_account_type_id' : MEMBER,
            'wallet_provider_id' : calabash_id,
            'wallet_withhold_period_type_id' : MONTH,
            'wallet_withhold_period_value' : 0,
            'max_transaction_amount' : 9999.00,
            'max_balance' : 9999.00,
            'min_balance' : 0.00,
            'added_by' : usernow.id,

        }
        exists = WalletCatalog.by_attr_first('name', kwargs.get('name', None))
        if not exists:
            result = CRUDS.create_entry(**kwargs)
            result_id = result.get('data', None)
            transaction.commit()

###############################################################################
# Wallet Catalog (Calabash - Merchant - Main)
###############################################################################

    if calabash_id:
        usernow = User.by_username('developer')
        kwargs = {
            'table_name' : 'WalletCatalog',
            'name' : 'Calabash Merchant Main',
            'wallet_type_id' : MAIN,
            'wallet_account_type_id' : MERCHANT,
            'wallet_provider_id' : calabash_id,
            'wallet_withhold_period_type_id' : MONTH,
            'wallet_withhold_period_value' : 0,
            'max_transaction_amount' : 99999.00,
            'max_balance' : 99999.00,
            'min_balance' : 0.00,
            'added_by' : usernow.id,

        }
        exists = WalletCatalog.by_attr_first('name', kwargs.get('name', None))
        if not exists:
            result = CRUDS.create_entry(**kwargs)
            result_id = result.get('data', None)
            transaction.commit()

###############################################################################
# Wallet Catalog (My Imali - Merchant - Main)
###############################################################################

    if myimali_id:
        usernow = User.by_username('developer')
        kwargs = {
            'table_name' : 'WalletCatalog',
            'name' : 'My Imali Merchant Main',
            'wallet_type_id' : MAIN,
            'wallet_account_type_id' : MERCHANT,
            'wallet_provider_id' : myimali_id,
            'wallet_withhold_period_type_id' : MONTH,
            'wallet_withhold_period_value' : 0,
            'max_transaction_amount' : 99999.00,
            'max_balance' : 99999.00,
            'min_balance' : 0.00,
            'added_by' : usernow.id,

        }
        exists = WalletCatalog.by_attr_first('name', kwargs.get('name', None))
        if not exists:
            result = CRUDS.create_entry(**kwargs)
            result_id = result.get('data', None)
            transaction.commit()

###############################################################################
# Client (Calabash)
###############################################################################

    usernow = User.by_username('developer')
    kwargs = {
        'table_name' : 'Client',
        'name' : 'Calabash',
        'entity_id' : 1,
        'added_by' : usernow.id,
    }
    exists = Client.by_attr_first('name', kwargs.get('name', None))
    if not exists:
        result = CRUDS.create_entry(**kwargs)
        transaction.commit()

###############################################################################
# Client (Eiffel Corp)
###############################################################################

    usernow = User.by_username('developer')
    kwargs = {
        'table_name' : 'Client',
        'name' : 'Eiffel Corp',
        'entity_id' : 2,
        'added_by' : usernow.id,
    }
    exists = Client.by_attr_first('name', kwargs.get('name', None))
    if not exists:
        result = CRUDS.create_entry(**kwargs)
        transaction.commit()

###############################################################################
# Applications
###############################################################################

    namelist = [
        'Calabash Campus',
        'Calabash Merchant',
        'Calabash Campus Website',
        'Eiffel Corp Admin',
        'Eiffel Corp Trading',
            ]
    for name in namelist:
        kwargs = {
            'table_name' : 'Application',
            'name' : name,
        }
        exists = Application.by_attr_first('name', kwargs.get('name', None))
        if not exists:
            result = CRUDS.create_entry(**kwargs)
            application_id = result.get('data', None)

            token = ApplicationToken()
            token.application_id = application_id
            token.guid = get_guid()
            token.token = get_token()
            token.added_by = 1
            DBSession.add(token)
            DBSession.flush()

            transaction.commit()

###############################################################################
# Wallet (john20)
###############################################################################

    from calabash.controllers.ROOT import RootController
    ROOT = RootController()

    kwargs = {
        'student_number': 'student_john20',
        'mobile': '0640605016',
        'title': 'Mr.',
        'name': 'John',
        'surname': 'Developer',
        'identity_number': 'idnumber_john20',
        'email': 'tafadzwa@dotxmltech.com',

        'id_number': 'idnumber_john20',
        'mobile_number': '0640605016',
        'username': 'john20',
        'password': 'john20',
    }
    result = ROOT.preregister_student(**kwargs)
    result = ROOT.register_user(**kwargs)
    transaction.commit()

###############################################################################
# Wallet (garystarfish)
###############################################################################

    from calabash.controllers.ROOT import RootController
    ROOT = RootController()

    kwargs = {
        'student_number': 'student_garystarfish',
        'mobile': '0820394789',
        'title': 'Mr.',
        'name': 'Gary',
        'surname': 'Starfish',
        'identity_number': 'idnumber_garystarfish',
        'email': 'salesstar@testmail.com',

        'id_number': 'idnumber_garystarfish',
        'mobile_number': '0820394789',
        'username': 'garystarfish',
        'password': 'garystarfish',
    }
    result = ROOT.preregister_student(**kwargs)
    result = ROOT.register_user(**kwargs)
    transaction.commit()

###############################################################################
# Wallet (seangrey)
###############################################################################

    from calabash.controllers.ROOT import RootController
    ROOT = RootController()

    kwargs = {
        'student_number': 'student_seangrey',
        'mobile': '0746379920',
        'title': 'Mr.',
        'name': 'Sean2',
        'surname': 'Grey3',
        'identity_number': 'idnumber_seangrey',
        'email': 'sean@testmail.com',

        'id_number': 'idnumber_seangrey',
        'mobile_number': '0746379920',
        'username': 'seangrey',
        'password': 'seangrey',
    }
    result = ROOT.preregister_student(**kwargs)
    result = ROOT.register_user(**kwargs)
    transaction.commit()

###############################################################################
# Wallet (vuyofoodtruck)
###############################################################################

    from calabash.controllers.ROOT import RootController
    ROOT = RootController()

    kwargs = {
        'username': 'vuyofoodtruck',
        'password': 'vuyofoodtruck',
        'email': 'vuyo@foodtruck.com',
        'mobile': '0737297914',
        'firstName': 'Vuyo',
        'surname': 'Foodtruck',
        'sendMail': False,
        'client_id': 2,
    }
    result = ROOT.register_merchant(**kwargs)
    transaction.commit()

###############################################################################
# Wallet (calabash pay)
###############################################################################

    from calabash.controllers.ROOT import RootController
    ROOT = RootController()

    kwargs = {
        'username': 'calabash pay',
        'password': 'calabash123',
        'email': 'jp@calabashpay.com',
        'mobile': '0727297914',
        'firstName': 'Johan-Pierre',
        'surname': 'Bezuidenhout',
        'sendMail': False,
        'client_id': 2,
    }
    result = ROOT.register_merchant(**kwargs)
    transaction.commit()

###############################################################################
# STANDARD BANK DEMO DATA
###############################################################################

    from calabash.controllers.ROOT import RootController
    ROOT = RootController()

    kwargs = {
        'student_number': 'student_camilla',
        'mobile': '0737034769',
        'title': 'Ms.',
        'name': 'Camilla',
        'surname': 'Buys',
        'identity_number': '8911300094083',
        'email': 'camilla.buys@testmail.com',

        'id_number': '8911300094083',
        'mobile_number': '0737034769',
        'username': 'camilla',
        'password': 'camilla',
    }
    result = ROOT.preregister_student(**kwargs)
    result = ROOT.register_user(**kwargs)
    transaction.commit()

    from calabash.controllers.ROOT import RootController
    ROOT = RootController()

    kwargs = {
        'student_number': 'student_tmutero',
        'mobile': '0640605016',
        'title': 'Mr.',
        'name': 'Tafadzwa',
        'surname': 'Mutero',
        'identity_number': 'idnumber_tmutero',
        'email': 'tahaj@gmail.com',

        'id_number': 'idnumber_tmutero',
        'mobile_number': '0640605016',
        'username': 'tmutero',
        'password': 'tmutero',
    }
    result = ROOT.preregister_student(**kwargs)
    result = ROOT.register_user(**kwargs)
    transaction.commit()

    from calabash.controllers.ROOT import RootController
    ROOT = RootController()

    kwargs = {
        'student_number': 'student_jpbez',
        'mobile': '0727297914',
        'title': 'Mr.',
        'name': 'JP',
        'surname': 'Bezuidenhout',
        'identity_number': 'idnumber_jpbez',
        'email': 'jp.bezuidenhout@testmail.com',

        'id_number': 'idnumber_jpbez',
        'mobile_number': '0727297914',
        'username': 'jpbez',
        'password': 'jpbez',
    }
    result = ROOT.preregister_student(**kwargs)
    result = ROOT.register_user(**kwargs)
    transaction.commit()

    from calabash.controllers.groups import GroupsController
    groups = GroupsController()

    kwargs = {
        'username': 'john20',
        'groupname': 'Braai Tonight',
    }
    result = groups.create_group(**kwargs)
    transaction.commit()

    from calabash.controllers.groups import GroupsController
    groups = GroupsController()

    kwargs = {
        'username': 'john20',
        'groupname': 'Braai Tonight',
        'to_mobile_number': '0737034769', # mobile for camilla user
        'admin': True,
    }
    result = groups.add_user(**kwargs)
    transaction.commit()

    from calabash.controllers.groups import GroupsController
    groups = GroupsController()

    kwargs = {
        'username': 'john20',
        'groupname': 'Braai Tonight',
        'to_mobile_number': '0727297914', # mobile for jpbez user
    }
    result = groups.add_user(**kwargs)
    transaction.commit()

    from calabash.controllers.groups import GroupsController
    groups = GroupsController()

    kwargs = {
        'username': 'john20',
        'groupname': 'Braai Tonight',
        'to_mobile_number': '0640605017', # mobile for tmutero user
    }
    result = groups.add_user(**kwargs)
    transaction.commit()

    from calabash.controllers.groups import GroupsController
    groups = GroupsController()

    kwargs = {
        'username': 'camilla',
        'groupname': 'Braai Tonight',
        'amount': '50', # in cents
    }
    result = groups.add_user(**kwargs)
    transaction.commit()

    from calabash.controllers.groups import GroupsController
    groups = GroupsController()

    kwargs = {
        'username': 'jpbez',
        'groupname': 'Braai Tonight',
        'amount': '120', # in cents
    }
    result = groups.user_deposit(**kwargs)
    transaction.commit()

    from calabash.controllers.groups import GroupsController
    groups = GroupsController()

    kwargs = {
        'username': 'tmutero',
        'groupname': 'Braai Tonight',
        'amount': '20', # in cents
    }
    result = groups.user_deposit(**kwargs)
    transaction.commit()

    from calabash.controllers.groups import GroupsController
    groups = GroupsController()

    kwargs = {
        'username': 'camilla',
        'groupname': 'Braai Tonight',
        'amount': '30', # in cents
    }
    result = groups.user_deposit(**kwargs)
    transaction.commit()

def get_guid():
    guid = str(uuid.uuid4())
    exists = DBSession.query(ApplicationToken). \
            filter(ApplicationToken.guid==guid). \
            first()
    if exists:
        return get_guid()
    return guid

def get_token():
    token = str(uuid.uuid4().hex)
    exists = DBSession.query(ApplicationToken). \
            filter(ApplicationToken.token==token). \
            first()
    if exists:
        return get_token()
    return token
