# -*- coding: utf-8 -*-
"""Setup controller module"""

from tg import predicates, require, response, use_wsgi_app
from tg import expose, redirect, validate, flash, url, request

from tg.i18n import ugettext as _
from tg.i18n import lazy_ugettext as l_

from rocket.model import *

from sqlalchemy import func, desc, asc, or_

from rocket.lib.tg_utils import *
from rocket.lib.base import BaseController

from webob.static import FileApp
from reportlab.platypus import Paragraph
from rocket.lib.tg_generic_reportlab import PDFCreator

import rocket.lib.vault_utils as vault

from rocket.lib.type_utils import TypeDictionary as TypeDict
from rocket.controllers.common import CommonController

LIMIT = 20
FILENAME = os.path.abspath(resource_filename('rocket', 'public'))
PUBLIC_DIRNAME = os.path.join(FILENAME)
PDF_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'pdf')

SEARCHKEY_CURRENCY = 'Currency_SearchKeyword'
SEARCHKEY_PREMIUMRATE = 'PremiumRate_SearchKeyword'
SEARCHKEY_PRODUCTLOADER = 'ProductLoader_SearchKeyword'
SEARCHKEY_CLAIMQUESTION = 'ClaimQuestion_SearchKeyword'
SEARCHKEY_INTERMEDIARYDISCLOSURE = 'IntermediaryDisclosure_SearchKeyword'
SEARCHKEY_BANK = 'Bank_SearchKeyword'
SEARCHKEY_VEHICLE_CATAGORY = 'VehicleCategory_SearchKeyword'
SEARCHKEY_CAMPAIGN_TYPE =  'CampaignType_SearchKeyword'
SEARCHKEY_CAMPAIGN =  'Campaign_SearchKeyword'

COMMON = CommonController()
TYPEUTIL = TypeDict()

class SetupController(BaseController):

    def __init__(self, *args, **kwargs):
        pass

########################################################################
# Service Provider
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def service_provider_category(self, *args, **kwargs):
        html = self.get_active_service_provider_category_html(*args, **kwargs)
        javascript = self.get_javascript_service_provider_category_onload()
        title = "Service Provider Category"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_service_provider_category_html(self, *args, **kwargs):
        dbase_query = ServiceProviderCategory.get_all('id')
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'name' : "<div class='edit service_provider_category_edit' service_provider_category_id='{1}'>{0}</div>".format(item.name, item.id),
                'description' : item.description,
                             })
        dbcolumnlist=[
                'name',
                'description',
                    ]
        theadlist=[
                'Name',
                ' Description',
                ]
        htmltbl = build_html_table(outputlist, dbcolumnlist, theadlist, "service_provider_category_table")
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Service_provider_category</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_service_provider_category" class="btn btn-primary ml-auto">Create New Service_provider_category</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input type="text" class="form-control search" name="searchphrase" placeholder="Search">
                        </div>
                        <div class="col-md-8">
                            <button class="btn btn-primary action_search">Search</button>
                            <button class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {htmltbl}
                    </div>
                </div>
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def get_javascript_service_provider_category_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_service_provider_category").click(function(){
            $('#dialogdiv').load('/setup/get_modal_service_provider_category?', function(data){
                return false;
            });
        });
        $(".service_provider_category_edit").click(function(){
            var kwargs = 'service_provider_category_id='+$(this).attr('service_provider_category_id');
            console.log(kwargs);
            $('#dialogdiv').load('/setup/get_modal_service_provider_category?', kwargs, function(data){
                return false;
            });
        });
        """
        return javascript

    @expose()
    def get_modal_service_provider_category(self, *args, **kwargs):
        service_provider_category_id = kwargs.get('service_provider_category_id', None)
        service_provider_category = None
        hidden_input = ''
        if service_provider_category_id:
            service_provider_category = ServiceProviderCategory.by_id(service_provider_category_id)
            hidden_input = get_hidden_input(**{'id': 'service_provider_category_id', 'value': service_provider_category_id})
        print('Service Provider Category', service_provider_category_id, service_provider_category)
        name = service_provider_category.name if service_provider_category else ''
        description = service_provider_category.description if service_provider_category else ''
        html = f"""
        <div class="modal fade" id="dialog_service_provider_category" tabindex="-1" role="dialog" aria-labelledby="myservice_provider_categoryLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">New Service_provider_category</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_service_provider_category'>
                            {hidden_input}
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="name">Name</label>
                                    <div class="col-md-9">
                                        <input id="name" value="{name}" type="text" name="name" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="description"> Description</label>
                                    <div class="col-md-9">
                                        <input id="description" value="{description}" type="text" name="description" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_service_provider_category' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary service_provider_category_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
        var form_id = '#form_service_provider_category'
        setFormValidation(form_id);
        $('#save_service_provider_category').click(function(){
             var valid = FormIsValid(form_id);
             if(valid){
                var formserial = $(form_id).serialize();
                $.post('/setup/save_service_provider_category?', formserial, function(data){
                    $.redirect('/setup/service_provider_category');
                    return false;
                });
             }
        });
        $('.service_provider_category_back').click(function(){
            $('#dialog_service_provider_category').modal('hide');
        });
        $('#dialog_service_provider_category').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_service_provider_category(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        service_provider_category_id = kwargs.get('service_provider_category_id', None)
        if not service_provider_category_id:
            this = ServiceProviderCategory()
            this.name = kwargs.get('name', None)
            this.description = kwargs.get('description', None)
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
        else:
            this = ServiceProviderCategory.by_id(service_provider_category_id)
            if not this: return 'false'
            this.name = kwargs.get('name', None)
            this.description = kwargs.get('description', None)
            DBSession.flush()
        return str(this.id)

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def payment_providers(self, *args, **kwargs):
        html = ""
        javascript = ""
        title = "Payment Providers"
        return dict(title=title, html=html, javascript=javascript)

########################################################################
# System Documents
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def system_documents(self, *args, **kwargs):
        html = self.get_active_system_document_html(*args, **kwargs)
        javascript = self.get_javascript_system_document_onload()
        title = "System Docs"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_system_document_html(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        dbase_query = self.get_active_system_document_list(*args, **kwargs)
        selectbox_system_document_type = self.get_selectbox_system_document_type()
        outputlist = []
        for item in dbase_query:
            name = TypeDict().get_pretty_name("system_document_type", item.system_document_type_id)
            outputlist.append({
                'name': "<div class='edit system_document_edit' system_document_id='{1}'>{0}</div>".format(
                    item.name, item.id),
                'description': item.description,
                'system_document_type_id': name,
            })
        dbcolumnlist = [
            'name',
            'description',
            'system_document_type_id',
        ]
        theadlist = [
            'Name',
            'Description',
            'Document Type',
        ]
        tdclasslist = [
            'action_link',
            'text-right',
            'text-right',
        ]
        system_document_table = build_html_table(outputlist, dbcolumnlist, theadlist, "system_document_table", tdclasslist)
        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <div class="row d-flex">
                                <div class="col-md-6">
                                    <h4 class="card-title">System Documents</h4>
                                </div>
                                <div class="col-md-6 text-right">
                                    <button id="create_new_system_document" class="btn btn-primary ml-auto">Create New System Document</button>
                                </div>
                            </div>
                            <div class="row d-flex align-items-center">
                                <div class="col-md-4">
                                    <input type="text" class="form-control search" name="searchphrase" placeholder="Search">
                                </div>
                                <div class="col-md-4">
                                    {selectbox_system_document_type}
                                </div>
                                <div class="col-md-4">
                                    <button class="btn btn-primary action_search">Search</button>
                                    <button class="btn btn-primary">Reset</button>
                                </div>
                            </div>
                            <hr>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                {system_document_table}
                            </div>
                        </div>
                    </div>
                </div>
            """
        return html

    @expose()
    def get_javascript_system_document_onload(self, *args, **kwargs):
        javascript = """
            $("#create_new_system_document").click(function(){
                $('#dialogdiv').load('/setup/get_modal_new_system_document?', function(data){
                    return false;
                });
            });
            $(".system_document_edit").click(function(){
                var kwargs = 'system_document_id='+$(this).attr('system_document_id');
                $('#dialogdiv').load('/setup/get_modal_edit_system_document?'+kwargs, function(data){
                    return false;
                });
            });
        """
        return javascript

    def get_selectbox_system_document_type(self, selected=None, *args, **kwargs):
        kwargs['id'] = 'system_document_type_id'
        kwargs['selected'] = selected
        kwargs['outputdict'] = TypeDict().get_dict_of_types("system_document_type")
        return create_selectbox_html(**kwargs)

    @expose()
    def get_modal_new_system_document(self, *args, **kwargs):
        selectbox_system_document_type = self.get_selectbox_system_document_type()

        html = f"""
            <div class="modal fade" id="dialog_new_system_document" tabindex="-1" role="dialog" aria-labelledby="mysystem_documentLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">New System Document</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_system_document'>
                                    <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-3 col-form-label" required for="name">Name</label>
    						<div class="col-md-9">
    							<input id="name" type="text" name="name" class="form-control" required='true'>
    						</div>
    					</div>
    				</div>
                                    <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-3 col-form-label" required for="description">Description</label>
    						<div class="col-md-9">
    							<input id="description" type="text" name="description" class="form-control" required='true'>
    						</div>
    					</div>
    				</div>
                                    <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-3 col-form-label" required for="system_document_type_id">Document Type</label>
    						<div class="col-md-9">
    							{selectbox_system_document_type}
    						</div>
    					</div>
    				</div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_system_document' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary system_document_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script>
            setFormValidation('#form_new_system_document');
            $('#save_new_system_document').click(function(){
                 var valid = FormIsValid("#form_new_system_document");
                 if(valid){
                    var formserial = getFormData('#form_new_system_document');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/setup/save_new_system_document?', data, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect('/setup/system_documents');
                        };
                        showNotification(result.status, result.data);
                        return false;
                    });
                 }
            });
            $('.system_document_back').click(function(){
                $('#dialog_new_system_document').modal('hide');
            });
            $('#dialog_new_system_document').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def get_modal_edit_system_document(self, *args, **kwargs):
        system_document_id = kwargs.get('system_document_id', None)
        if not system_document_id:
            return ''
        this = self.get_system_document_by_id(*args, **kwargs)
        selectbox_system_document_type = self.get_selectbox_system_document_type(this.system_document_type_id)

        if not this:
            return ''
        checked = 'checked' if this.active else ''
        html = f"""
            <div class="modal fade" id="dialog_edit_system_document" tabindex="-1" role="dialog" aria-labelledby="mysystem_documentLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">Edit System Document</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_edit_system_document'>
                                <div style='display: none' class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="system_document_id">ID</label>
                                        <div class="col-md-9">
                                            <input id="id" type="text" name="system_document_id" value="{this.id}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="name">Name</label>
                                        <div class="col-md-9">
                                            <input id="name" type="text" name="name" value="{this.name}" class="form-control" required='true' disabled='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="description">Description</label>
                                        <div class="col-md-9">
                                            <input id="description" type="text" name="description" value="{this.description}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="system_document_type_id">Document Type</label>
                                        <div class="col-md-9">
                                        {selectbox_system_document_type}
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-3 col-form-label" for="active" required>Active</label>
                                        <div class="col-9">
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                    <span class="form-check-sign"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_edit_system_document' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary system_document_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script>
            setFormValidation('#form_edit_system_document');
            $('#save_edit_system_document').click(function(){
                 var valid = FormIsValid("#form_edit_system_document");
                 if(valid){
                    var formserial = getFormData('#form_edit_system_document');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/setup/save_edit_system_document?', data, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect('/setup/system_documents');
                        };
                        showNotification(result.status, result.data);
                        return false;
                    });
                 }
            });
            $('.system_document_back').click(function(){
                $('#dialog_edit_system_document').modal('hide');
            });
            $('#dialog_edit_system_document').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def save_new_system_document(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data:
            return json.dumps({'success': False, 'data': 'No data provided', 'status': 'danger'})
        usernow = request.identity.get('user', None)
        doc_name = data.get('name', None)
        exists = DBSession.query(SystemDocument).\
            filter(SystemDocument.name==doc_name).\
            filter(SystemDocument.active==True).\
            first()
        if exists: return json.dumps({'success': False, 'data': 'Document with the same name already exists', 'status': 'danger'})

        this = SystemDocument()
        this.name = doc_name
        this.description = data.get('description', None)
        this.system_document_type_id = data.get('system_document_type_id', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def save_edit_system_document(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data:
            return json.dumps({'success': False, 'data': 'No data provided'})
        usernow = request.identity.get('user', None)
        this = self.get_system_document_by_id(**data)
        if not this:
            return json.dumps({'success': False, 'data': 'No system_document found for id provided'})
        # this.name = data.get('name', None)
        this.description = data.get('description', None)
        this.system_document_type_id = data.get('system_document_type_id', None)
        if not data.get('active', None): this.active = False
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def get_system_document_by_id(self, *args, **kwargs):
        return DBSession.query(SystemDocument). \
            filter(SystemDocument.id == kwargs.get('system_document_id', None)). \
            first()

    @expose()
    def get_active_system_document_list(self, *args, **kwargs):
        searchphrase = kwargs.get('searchphrase', None)

        name = kwargs.get('name', None)
        description = kwargs.get('description', None)
        system_document_system_document_type_id = kwargs.get('system_document_system_document_type_id', None)

        if name:
            searchphrase = "%" + kwargs['name'] + "%"
            dbase_query = DBSession.query(SystemDocument). \
                filter(SystemDocument.name.like(searchphrase)). \
                filter(SystemDocument.active == 1). \
                order_by(asc(SystemDocument.name)).limit(LIMIT)
        if description:
            searchphrase = "%" + kwargs['description'] + "%"
            dbase_query = DBSession.query(SystemDocument). \
                filter(SystemDocument.description.like(searchphrase)). \
                filter(SystemDocument.active == 1). \
                order_by(asc(SystemDocument.description)).limit(LIMIT)
        if system_document_system_document_type_id:
            dbase_query = DBSession.query(SystemDocument). \
                filter(
                SystemDocument.system_document_system_document_type_id == system_document_system_document_type_id). \
                filter(SystemDocument.active == 1). \
                order_by(asc(SystemDocument.system_document_id)).limit(LIMIT)
        else:
            dbase_query = DBSession.query(SystemDocument). \
                filter(SystemDocument.active == 1). \
                order_by(asc(SystemDocument.id)). \
                limit(LIMIT)
        return dbase_query

########################################################################
# Currency
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def currencies(self, *args, **kwargs):
        html = self.get_active_currency_html(*args, **kwargs)
        javascript = self.get_javascript_currency_onload()
        title = "Currency"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_currency_html(self, *args, **kwargs):

        kwargs['searchkey'] = SEARCHKEY_CURRENCY
        usernow = request.identity.get('user', {})
        searchphrase = COMMON.get_searchphrase(**kwargs)
        currencytable = self.get_currency_htmltbl(**kwargs)
        html = f"""
            <div class="row" >
                <div class="col-md-12">
                    <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Currency</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_currency" class="btn btn-primary ml-auto">Add a New Currency</button>
                            </div>
                        </div>
                        <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                <input type="text" class="form-control search" name="searchphrase"  id='searchphrase'  value='{searchphrase}' placeholder="Search">
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary" id='action_search'>Search</button>
                                <button class="btn btn-primary" id='btn_reset'>Reset</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div  class="table-responsive" id='div_currency_table'>
                            {currencytable}
                        </div>
                    </div>
                    </div>
                </div>

            """
        javascript = """
        <script>
            $("#create_new_currency").click(function(){
                $('#dialogdiv').load('/setup/get_modal_new_currency?', function(data){
                    return false;
                });
            });

              $('#action_search').click(function(){
                 var kwargs = 'searchphrase='+$('#searchphrase').val();
                 $('#div_currency_table').load('/setup/get_currency_htmltbl', kwargs, function(data){
                     return false;
                 });
             })
             $('#btn_reset').click(function(){
              $('#searchphrase').val('').focus();
                 $('#div_currency_table').load('/setup/get_currency_htmltbl', 'reset=true', function(data){
                     return false;
                 });
             })
             </script>
             """
        return html + javascript

    @expose()
    def get_currency_htmltbl(self, *args, **kwargs):
        dbase_query = self.get_active_currency_list(*args, **kwargs)
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'code': "<div class='edit currency_edit' currency_id='{1}'>{0}</div>".format(item.code, item.id),
                'name': item.name,
                'is_home_currency': item.is_home_currency,
            })
        dbcolumnlist = [
            'code',
            'name',
            'is_home_currency',
        ]
        theadlist = [
            'Code',
            ' Name',
            ' Home Currency',
        ]
        tdclasslist = [
            'action_link',
            'text-center',
            'text-right',
        ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "currency_table", tdclasslist)
        javascript = """
       <script>
         $(".currency_edit").click(function(){
                var kwargs = 'currency_id='+$(this).attr('currency_id');
                $('#dialogdiv').load('/setup/get_modal_edit_currency?', kwargs, function(data){
                    return false;
                });
            });
        </script>
        """

        return html + javascript

    @expose()
    def get_javascript_currency_onload(self, *args, **kwargs):
        javascript = """
        """
        return javascript

    def get_selectbox_inactive_currencies(self, *args, **kwargs):
        kwargs['id'] = 'currency_id'
        kwargs['case_sensitive'] = True
        dbase_query = DBSession.query(Currency).filter(Currency.active == False).order_by(asc(Currency.code)).all()
        kwargs['outputlist'] = [{'id': x.id, 'name': f"{x.code}: {x.name}"} for x in dbase_query]
        return create_selectbox_html(**kwargs)

    @expose()
    def get_modal_new_currency(self, *args, **kwargs):
        selectbox_inactive_currencies = self.get_selectbox_inactive_currencies()
        html = f"""
            <div class="modal fade" id="dialog_new_currency" tabindex="-1" role="dialog" aria-labelledby="mycurrencyLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">Add Currency</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_currency'>
                                    <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-3 col-form-label" required for="code">Code</label>
    						<div class="col-md-9">
    							{selectbox_inactive_currencies}
    						</div>
    					</div>
    				</div>

                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_currency' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary currency_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script>
            setFormValidation('#form_new_currency');
            $('#save_new_currency').click(function(){
                 var valid = FormIsValid("#form_new_currency");
                 if(valid){
                    var formserial = getFormData('#form_new_currency');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/setup/save_new_currency?', data, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect('/setup/currencies');
                        };
                        return false;
                    });
                 }
            });
            $('.currency_back').click(function(){
                $('#dialog_new_currency').modal('hide');
            });
            $('#dialog_new_currency').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def get_modal_edit_currency(self, *args, **kwargs):
        currency_id = kwargs.get('currency_id', None)
        if not currency_id: return ''
        this = self.get_currency_by_id(*args, **kwargs)
        if not this: return ''
        checked = 'checked' if this.active else ''
        is_home_currency = 'checked' if this.is_home_currency else ''
        html = f"""
            <div class="modal fade" id="dialog_edit_currency" tabindex="-1" role="dialog" aria-labelledby="mycurrencyLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">Edit Currency</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_edit_currency'>
                                <div style='display: none' class="col-md-6">
    					<div class="form-group row">
    						<label class="col-md-3 col-form-label" required for="currency_id">ID</label>
    						<div class="col-md-9">
    							<input id="id" type="text" name="currency_id" value="{this.id}" class="form-control" required='true'>
    						</div>
    					</div>
    				</div>
                                <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-4 col-form-label" required for="code"> Code</label>
    						<div class="col-md-8">
    							<input id="code" type="text" name="code" value="{this.code}" class="form-control" required='true' disabled='true'>
    						</div>
    					</div>
    				</div>
                                <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-4 col-form-label" required for="name"> Name</label>
    						<div class="col-md-8">
    							<input id="name" type="text" name="name" value="{this.name}" class="form-control" required='true' disabled='true'>
    						</div>
    					</div>
    				</div>
                      <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-4 col-form-label" for="is_home_currency" required>{_('Home Currency')}</label>
                                    <div class="col-8">
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="checkbox" name="is_home_currency" id="is_home_currency" {is_home_currency}/>
                                                <span class="form-check-sign"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-4 col-form-label" for="active" required>Active</label>
                                    <div class="col-8">
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                <span class="form-check-sign"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_edit_currency' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary currency_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script>
            setFormValidation('#form_edit_currency');
            $('#save_edit_currency').click(function(){
                 var valid = FormIsValid("#form_edit_currency");
                 if(valid){
                    var formserial = getFormData('#form_edit_currency');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/setup/save_edit_currency?', data, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect('/setup/currencies');
                        };
                        return false;
                    });
                 }
            });
            $('.currency_back').click(function(){
                $('#dialog_edit_currency').modal('hide');
            });
            $('#dialog_edit_currency').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def save_new_currency(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success': False, 'data': 'No data provided'})
        usernow = request.identity.get('user', None)
        this = Currency.by_id_inactive(data.get("currency_id"))
        this.active = True
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def save_edit_currency(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success': False, 'data': 'No data provided'})
        usernow = request.identity.get('user', None)
        this = self.get_currency_by_id(**data)
        if not this: return json.dumps({'success': False, 'data': 'No currency found for id provided'})
        # this.code = data.get('code', None)
        # this.name = data.get('name', None)
        this.is_home_currency = True if data.get('is_home_currency', None) else False
        if not data.get('active', None): this.active = False
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def get_currency_by_id(self, *args, **kwargs):
        return DBSession.query(Currency). \
            filter(Currency.id == kwargs.get('currency_id', None)). \
            first()

    @expose()
    def get_active_currency_list(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_CURRENCY
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()

        if searchphrase:
            searchphrase = "%" + searchphrase + "%"
            dbase_query = DBSession.query(Currency). \
                filter(or_(
                Currency.code.like(searchphrase),
                Currency.name.like(searchphrase),
            )). \
                filter(Currency.active == 1). \
                order_by(asc(Currency.code)).limit(LIMIT)

            return dbase_query
        else:
            dbase_query = DBSession.query(Currency). \
                filter(Currency.active == 1). \
                order_by(asc(Currency.id)). \
                limit(LIMIT)
        return dbase_query

###############################################################################
# Banks
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def banks(self, *args, **kwargs):
        html = self.get_active_bank_html(*args, **kwargs)
        javascript = self.get_javascript_bank_onload()
        title = "Bank"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_bank_html(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_BANK
        searchphrase = COMMON.get_searchphrase(**kwargs)
        banktable = self.get_bank_htmltbl(**kwargs)
        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Bank</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_bank" class="btn btn-primary ml-auto">Create a New Bank</button>
                            </div>
                        </div>
                       <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                <input type="text" class="form-control search" name="searchphrase"  id='searchphrase'  value='{searchphrase}' placeholder="Search">
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary" id='action_search'>Search</button>
                                <button class="btn btn-primary" id='btn_reset'>Reset</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive" id='div_bank'>
                            {banktable}
                        </div>
                    </div>
                    </div>
                </div>
            """
        javascript = """
            <script>
                $("#create_new_bank").click(function(){
                    $('#dialogdiv').load('/setup/get_modal_new_bank?', function(data){
                        return false;
                    });
                });
                $('#action_search').click(function(){
                    var kwargs = 'searchphrase='+$('#searchphrase').val();
                    $('#div_bank').load('/setup/get_bank_htmltbl', kwargs, function(data){
                        return false;
                    });
                })
                $('#btn_reset').click(function(){
                    $('#searchphrase').val('').focus();
                    $('#div_bank').load('/setup/get_bank_htmltbl', 'reset=true', function(data){
                         return false;
                     });
                 })
            </script>
        """
        return html + javascript

    @expose()
    def get_bank_htmltbl(self, *args, **kwargs):
        dbase_query = self.get_active_bank_list(*args, **kwargs)
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'name': "<div class='edit bank_edit action_link' bank_id='{1}'>{0}</div>".format(item.name, item.id),
            })
        dbcolumnlist = [
            'name',
        ]
        theadlist = [
            'Name',
        ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "bank_table")
        javascript = """
            <script>
                $(".bank_edit").click(function(){
                    var kwargs = {'bank_id' : $(this).attr('bank_id')};
                    $.redirect('/setup/get_bank_edit?', kwargs);
                });
            </script>
        """
        return html + javascript

    @expose()
    def get_javascript_bank_onload(self, *args, **kwargs):
        javascript = """
        """
        return javascript

    @expose()
    def get_active_bank_list(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_BANK
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()

        if searchphrase:
            searchphrase = "%" + searchphrase + "%"
            dbase_query = DBSession.query(Bank). \
                filter(Bank.name.like(searchphrase)). \
                filter(Bank.active == True). \
                order_by(asc(Bank.name)).limit(LIMIT)
        else:
            dbase_query = DBSession.query(Bank). \
                filter(Bank.active == True). \
                order_by(asc(Bank.id)). \
                limit(LIMIT)
        return dbase_query

    @expose()
    def get_modal_new_bank(self, *args, **kwargs):
        html = f"""
            <div class="modal fade" id="dialog_new_bank" tabindex="-1" role="dialog" aria-labelledby="mybankLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('New Bank')}</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_bank'>
                                    <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-4 col-form-label" required for="name">Name</label>
    						<div class="col-md-8">
    							<input id="name" type="text" name="name" class="form-control" required='true'>
    						</div>
    					</div>
    				</div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_bank' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary bank_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script>
            setFormValidation('#form_new_bank');
            $('#save_new_bank').click(function(){
                 var valid = FormIsValid("#form_new_bank");
                 if(valid){
                    var formserial = getFormData('#form_new_bank');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/setup/save_new_bank?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect(result.redirect, {'bank_id' : result.bank_id});
                        };
                        showNotification(result.status, result.data);
                        return false;
                    });
                 }
            });
            $('.bank_back').click(function(){
                $('#dialog_new_bank').modal('hide');
            });
            $('#dialog_new_bank').modal();
            </script>
         	"""
        return html + javascript

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def get_bank_edit(self, *args, **kwargs):
        print('Bank Edit: ', kwargs)
        bank_id = kwargs.get('bank_id', None)
        if not bank_id: redirect('/setup/banks')
        title = self.get_bank_title_html(bank_id)
        html = self.get_bank_table_html(*args, **kwargs)
        javascript = self.get_javascript_bank_edit_onload()
        return dict(title=title, html=html, javascript=javascript)

    def get_bank_title_html(self, bank_id=None, *args, **kwargs):
        if not bank_id: return ''
        bank = Bank.by_id(bank_id)
        if not bank: return ''
        return f"Edit: {bank.name}"

    @expose()
    def get_bank_table_html(self, *args, **kwargs):
        bank_id = kwargs.get('bank_id', None)
        bank = Bank.by_id(bank_id)
        checked = 'checked' if bank.active else ''
        bank_branch_table = self.get_bank_branch_table_html(**kwargs)

        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Edit '{bank.name}'</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button class="btn btn-outline-primary" id='save_edit_bank'>Save</button>
                                <button class="btn btn-primary ml-auto action_back bank_back">Back to Bank List</button>
                            </div>
                        </div>
                        <div class="card-body">
                            <form id='form_edit_bank'>
                                <div style='display: none' class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="bank_id">ID</label>
                                        <div class="col-md-9">
                                            <input id="bank_id" type="text" name="bank_id" value="{bank.id}" class="form-control" required='true'/>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-4 col-form-label" required for="name"> Name</label>
                                        <div class="col-md-8">
                                            <input id="name" type="text" name="name" value="{bank.name}" class="form-control"
                                                required='true'/>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-4 col-form-label" for="active" required>Active</label>
                                        <div class="col-8">
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                    <span class="form-check-sign"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            {bank_branch_table}
        """
        javascript = """
            <script>
            $(document).ready(function(){
                setFormValidation('#form_edit_bank');
                $('#save_edit_bank').click(function(){
                    var valid = FormIsValid('#form_edit_bank');
                    if(valid){
                        var formserial = getFormData('#form_edit_bank');
                        var data = {data : JSON.stringify(formserial)};
                        $.post('/setup/save_edit_bank?', data, function(data){
                            var result = JSON.parse(data);
                            if(result.success === true){
                                $.redirect('/setup/banks');
                            };
                            showNotification(result.status, result.data);
                            return false;
                        });
                    }
                });

                $('.bank_back').click(function(){
                    $.redirect('/setup/banks');
                });
            });
            </script>
        """
        return html + javascript

    @expose()
    def get_bank_branch_table_html(self, *args, **kwargs):
        bank_id = kwargs.get('bank_id', None)

        dbase_query = DBSession.query(BankBranch). \
            filter(BankBranch.bank_id == bank_id). \
            filter(BankBranch.active == True). \
            order_by(asc(BankBranch.branch)). \
            limit(LIMIT)

        img_active = "<img src='/images/icon_check.png' />"
        img_inactive = "<img src='/images/icon_cross.png' />"

        outputlist = []
        for item in dbase_query:
            active = img_active
            disable_text = 'Remove'
            if not item.active:
                active = img_inactive
                disable_text = 'Recover'

            outputlist.append({
                'branch': f"<div class='edit bank_branch_edit' bank_branch_id='{item.id}'>{item.branch}</div>",
                'branch_code': item.branch_code,
                'disable' : f"<div class='line_item_active' active='{item.active}' bank_id='{bank_id}' bank_branch_id='{item.id}'>{disable_text}</div>",
            })
        dbcolumnlist = [
            'branch',
            'branch_code',
            'disable',
        ]
        theadlist = [
            'Branch',
            'Branch Code',
            'Remove',
        ]
        tdclasslist = [
            'action_link',
            'text-right',
            'action_link text-right',
        ]

        bank_branch_itemtable = build_html_table(outputlist, dbcolumnlist, theadlist, "rate_table_line_item_table", tdclasslist)

        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{_('Bank Branches')}</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_bank_branch" class="btn btn-primary ml-auto">{_('New Bank Branch')}</button>
                        </div>
                    </div>

                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {bank_branch_itemtable}
                    </div>
                </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_javascript_bank_edit_onload(self, *args, **kwargs):
        javascript = """
            $("#create_new_bank_branch").click(function(){
                var kwargs = {'bank_id': $('#bank_id').attr('value')};
                $('#dialogdiv').load('/setup/get_modal_new_bank_branch?', kwargs, function(data){
                    return false;
                });
            });

            $(".bank_branch_edit").click(function(){
                var data = {bank_branch_id : $(this).attr('bank_branch_id'), 'bank_id': $('#bank_id').attr('value')};
                $('#dialogdiv').load('/setup/get_modal_edit_bank_branch?', data, function(data){
                    return false;
                });
            });

            $(".line_item_active").click(function(){
                var text = $(this).html();
                var data = {bank_branch_id : $(this).attr('bank_branch_id'), 'bank_id': $('#bank_id').attr('value')};
                var kwargs = {'bank_id': $('#bank_id').attr('value')};
                $.post('/setup/toggle_bank_branch_active?', data, function(data){
                    $.redirect('/setup/get_bank_edit?', kwargs);
                    return false;
                });
            });
            //loader_back
        """
        return javascript

    @expose()
    def toggle_bank_branch_active(self, *args, **kwargs):
        bank_branch_id = kwargs.get('bank_branch_id', None)

        this = BankBranch.by_id(bank_branch_id)

        if not this: return 'true'

        if this.active:
            this.active = False
        else:
            this.active = True
        DBSession.flush()
        return 'true'

    @expose()
    def save_new_bank(self, *args, **kwargs):
        bank_name = kwargs.get('name', None)
        usernow = request.identity.get('user', None)
        # Let us first check that the name does not already exist.
        exists = DBSession.query(Bank).\
            filter(Bank.name==bank_name).\
            filter(Bank.active==True).\
            first()
        if exists: return json.dumps({'success': False, 'data': 'Bank name already exists', 'status': 'danger'})

        this = Bank()
        this.name = bank_name
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()

        redirect_url = '/setup/get_bank_edit'
        return json.dumps({'success': True, 'bank_id': this.id, 'redirect': redirect_url})

    @expose()
    def save_edit_bank(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success': False, 'data': 'No data provided'})

        bank_id = data.get('bank_id', None)
        if not bank_id: return json.dumps({'success': False, 'data': 'No bank id provided'})

        this = Bank.by_id(bank_id)
        if not this: return json.dumps({'success': False, 'data': 'No bank found for id provided'})

        this.name = data.get('name', None)
        if not data.get('active', None): this.active = False

        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def get_modal_new_bank_branch(self, *args, **kwargs):
        bank_id = kwargs.get('bank_id', None)
        #Used for all
        html = f"""
            <div class="modal fade" id="dialog_new_bank_branch" tabindex="-1" role="dialog" aria-labelledby="mybank_branchLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-12">
                                <h4 class="card-title">New Bank Branch</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_bank_branch'>
                                <div style='display: none' class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="tbl_bank_branch_id">ID</label>
                                        <div class="col-md-9">
                                            <input id="id" type="text" name="bank_id" value="{bank_id}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="branch">Branch</label>
                                        <div class="col-md-9">
                                            <input id="branch" type="text" name="branch" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="branch_code">Branch Code</label>
                                        <div class="col-md-9">
                                            <input id="branch_code" type="text" name="branch_code" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_bank_branch' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary bank_branch_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        """
        javascript = """
            <script>
                setFormValidation('#form_new_bank_branch');
                $('#save_new_bank_branch').click(function(){
                    var valid = FormIsValid("#form_new_bank_branch");
                    if(valid){
                        var formserial = $('#form_new_bank_branch').serialize();
                        $.post('/setup/save_new_bank_branch?', formserial, function(data){
                            var result = JSON.parse(data);
                            if(result.success === true){
                                $.redirect(result.redirect, {'bank_id' : result.bank_id});
                            };
                            showNotification(result.status, result.data);
                            return false;
                        });
                    }
                });
                $('.bank_branch_back').click(function(){
                    $('#dialog_new_bank_branch').modal('hide');
                });
                $('#dialog_new_bank_branch').modal();
            </script>
        """
        return html + javascript

    @expose()
    def save_new_bank_branch(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        bank_id = kwargs.get('bank_id', None)
        branch = kwargs.get('branch', None)
        branch_code = kwargs.get('branch_code', None)

        exists = DBSession.query(BankBranch).\
            filter(BankBranch.branch==branch).\
            filter(BankBranch.active==True).\
            first()
        if exists:  return json.dumps({'success': False, 'data': 'Branch name already exists.', 'status': 'danger'})
        exists = DBSession.query(BankBranch).\
            filter(BankBranch.branch_code==branch_code).\
            filter(BankBranch.active==True).\
            first()
        if exists:  return json.dumps({'success': False, 'data': 'Branch  Code already exists.', 'status': 'danger'})

        this = BankBranch()
        this.bank_id = bank_id
        this.branch = branch
        this.branch_code = branch_code
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()

        redirect_url = '/setup/get_bank_edit'
        return json.dumps({'success': True, 'bank_id': bank_id, 'redirect': redirect_url})

    @expose()
    def get_modal_edit_bank_branch(self, *args, **kwargs):
        bank_id = kwargs.get('bank_id', None)
        bank_branch_id = kwargs.get('bank_branch_id', None)
        bank_branch = BankBranch.by_id(bank_branch_id)
        if not bank_branch: return ''

        branch = bank_branch.branch
        branch_code = bank_branch.branch_code
        checked = 'checked' if bank_branch.active else ''

        #Used for all
        html = f"""
            <div class="modal fade" id="dialog_edit_bank_branch" tabindex="-1" role="dialog" aria-labelledby="mybank_branchLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-12">
                                <h4 class="card-title">Edit Bank Branch</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_edit_bank_branch'>
                                <div style='display: none' class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="tbl_bank_branch_id">ID</label>
                                        <div class="col-md-9">
                                            <input id="id" type="text" name="bank_branch_id" value="{bank_branch_id}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="branch">Branch</label>
                                        <div class="col-md-9">
                                            <input id="branch" type="text" name="branch" value="{branch}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="branch_code">Branch Code</label>
                                        <div class="col-md-9">
                                            <input id="branch_code" type="text" name="branch_code" value="{branch_code}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-3 col-form-label" for="active" required>Active</label>
                                        <div class="col-9">
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                    <span class="form-check-sign"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_edit_bank_branch' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary bank_branch_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        """
        javascript = """
            <script>
                setFormValidation('#form_edit_bank_branch');
                $('#save_edit_bank_branch').click(function(){
                    var valid = FormIsValid("#form_edit_bank_branch");
                    if(valid){
                        var formserial = $('#form_edit_bank_branch').serialize();
                        $.post('/setup/save_edit_bank_branch?', formserial, function(data){
                            var result = JSON.parse(data);
                            if(result.success === true){
                                $.redirect(result.redirect, {'bank_id' : result.bank_id});
                            };
                            return false;
                        });
                    }
                });
                $('.bank_branch_back').click(function(){
                    $('#dialog_edit_bank_branch').modal('hide');
                });
                $('#dialog_edit_bank_branch').modal();
            </script>
        """
        return html + javascript

    @expose()
    def save_edit_bank_branch(self, *args, **kwargs):
        bank_id = kwargs.get('bank_id', None)
        bank_branch_id = kwargs.get('bank_branch_id', None)
        branch = kwargs.get('branch', None)
        branch_code = kwargs.get('branch_code', None)
        active = True if kwargs.get('active', False) else False
        this = BankBranch.by_id(bank_branch_id)

        this.branch = branch
        this.branch_code = branch_code
        this.active = active
        DBSession.flush()
        redirect_url = '/setup/get_bank_edit'
        return json.dumps({'success': True, 'bank_id': this.bank_id, 'redirect': redirect_url})

###############################################################################
# Loaders Questions and Answers
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def loaders(self, *args, **kwargs):
        html = self.get_product_loaders_html(*args, **kwargs)
        javascript = self.get_javascript_product_loaders_onload()
        title = _("Product Loaders")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_product_loaders_html(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_PRODUCTLOADER
        usernow = request.identity.get('user', {})
        searchphrase = COMMON.get_searchphrase(**kwargs)
        product_loader_table = self.get_product_loaders_htmltbl(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{_('Product Loaders')}</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_product_loader" class="btn btn-primary ml-auto">{_('New Product Loader')}</button>
                        </div>
                    </div>
               <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                <input type="text" class="form-control search" name="searchphrase"  id='searchphrase'  value='{searchphrase}' placeholder="Search">
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary" id='action_search'>Search</button>
                                <button class="btn btn-primary" id='btn_reset'>Reset</button>
                            </div>
                        </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive"  id='div_product_loader_table'>
                     {product_loader_table}
                    </div>
                </div>
                </div>
            </div>
        """
        javascript = """
          <script>
            $("#create_new_product_loader").click(function(){
                $('#dialogdiv').load('/setup/get_modal_new_product_loader?', function(data){
                    return false;
                });
            });
                $('#action_search').click(function(){
                   var kwargs = 'searchphrase='+$('#searchphrase').val();
                   $('#div_product_loader_table').load('/setup/get_product_loaders_htmltbl', kwargs, function(data){
                       return false;
                   });
               })
               $('#btn_reset').click(function(){
                $('#searchphrase').val('').focus();
                   $('#div_product_loader_table').load('/setup/get_product_loaders_htmltbl', 'reset=true', function(data){
                       return false;
                   });
               })
               </script>
               """
        return html + javascript

    @expose()
    def get_product_loaders_htmltbl(self, *args, **kwargs):
        outputlist = []
        dbase_query = self.get_loader_questions_list(**kwargs)
        td = TypeDict()
        for item in dbase_query:
            loader_question_premium_effect_type = td.get_pretty_name('loader_question_premium_effect_type',
                                                                     item.loader_question_premium_effect_type_id)
            outputlist.append({
                'loader_name': f"<div class='edit loader_edit' loader_id='{item.id}'>{item.text}</div>",
                'is_active': item.active,
                'loader_question_premium_effect_type': loader_question_premium_effect_type
            })
        dbcolumnlist = [
            'loader_name',
            'loader_question_premium_effect_type',
            'is_active',
        ]
        theadlist = [
            'Loader Name',
            'Question Premium Effect Type',
            'Is Active',
        ]
        tdclasslist = [
            'action_link',
            'text-center',
            'text-right',
        ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "loader_table", tdclasslist)
        javascript = """
          <script>
            $(".loader_edit").click(function(){
              var data = {loader_id : $(this).attr('loader_id')};
              $.redirect('/setup/get_loader_edit', data);
          });

            </script>
          """
        return html + javascript

    @expose()
    def get_javascript_product_loaders_onload(self, *args, **kwargs):
        javascript = """

        """
        return javascript

    @expose()
    def get_modal_new_product_loader(self, *args, **kwargs):
        dropdown_question_premium_effect = self.get_selectbox_question_premium_effect()
        html = f"""
           <div class="modal fade" id="dialog_new_loader" tabindex="-1" role="dialog" aria-labelledby="myloaderLabel" aria-hidden="true">
               <div class="modal-dialog modal-dialog-centered modal-lg">
                   <div class="modal-content">
                       <div class="modal-header">
                           <div class="col-md-6">
                               <h4 class="card-title">New Loader</h4>
                           </div>
                       </div>
                       <div class="modal-body">
                           <form id='form_new_loader' class="d-flex flex-wrap">
                               <div class="col-md-12">
                                   <div class="form-group row">
                                       <label class="col-md-3 col-form-label" required for="loader_name">Loader Name</label>
                                       <div class="col-md-9">
                                           <input id="loader_name" type="text" name="loader_name" maxlength='100' class="form-control" required='true'>
                                       </div>
                                   </div>
                               </div>
                               <div class="col-md-12">
                                   <div class="form-group row">
                                       <label class="col-md-3 col-form-label" for="loader_question_premium_effect_type_id">{_('Question Premium Effect Type')}</label>
                                         <div class="col-md-9">
                                          {dropdown_question_premium_effect}
                                        </div>
                                   </div>
                               </div>
                           </form>
                       </div>
                       <div class="modal-footer">
                           <button id='save_new_loader' class="btn btn-primary">Save</button>
                       <button class="btn btn-outline-primary product_loader_back" data-dismiss="modal">Cancel</button>
                       </div>
                   </div>
               </div>
           </div>
           """
        javascript = """
       <script>
           setFormValidation('#form_new_loader');
            $('#save_new_loader').click(function(){
                 var valid = FormIsValid("#form_new_loader");
                 if(valid){
                    var formserial = $('#form_new_loader').serialize();
                    $.post('/setup/save_new_loader?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                          $.redirect(result.redirect, {'loader_id' : result.loader_id});
                        };
                        return false;
                    });
                 }
            });
           $('.product_loader_back').click(function(){
                $('#dialog_new_loader').modal('hide');
           });
           $('#dialog_new_loader').modal();
         </script>
        """
        return html + javascript

    @expose()
    def save_new_loader(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = LoaderQuestion()
        this.text = kwargs.get('loader_name', None)
        this.loader_question_premium_effect_type_id = kwargs.get('loader_question_premium_effect_type_id', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        redirect_url = '/setup/get_loader_edit'
        return json.dumps({'success': True, 'loader_id': this.id, 'redirect': redirect_url})

    def get_selectbox_question_premium_effect(self, selected=None, *args, **kwargs):
        kwargs['id'] = 'loader_question_premium_effect_type_id'
        kwargs['selected'] = selected
        kwargs['outputdict'] = TypeDict().get_dict_of_types("loader_question_premium_effect_type")
        return create_selectbox_html(**kwargs)

    @expose()
    def get_loader_questions_list(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_PRODUCTLOADER
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()
        if searchphrase:
            searchphrase = f'%{searchphrase}%'
            dbase_query = DBSession.query(LoaderQuestion). \
                filter(or_(
                LoaderQuestion.text.like(searchphrase),
            )). \
                order_by(asc(LoaderQuestion.text)). \
                limit(LIMIT)
        else:
            dbase_query = DBSession.query(LoaderQuestion). \
                filter(LoaderQuestion.active == kwargs.get('active', True)). \
                order_by(asc(LoaderQuestion.text)). \
                limit(LIMIT)
        return dbase_query

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def get_loader_edit(self, *args, **kwargs):
        loader_id = kwargs.get('loader_id', None)
        if not loader_id: redirect('/setup/loaders')
        html = self.get_edit_loader_html(*args, **kwargs)
        javascript = self.get_javascript_loader_onload()
        title = self.get_loader_title_html(loader_id)
        return dict(title=title, html=html, javascript=javascript)

    def get_loader_title_html(self, loader_id=None, *args, **kwargs):
        if not loader_id: return ''
        loader = LoaderQuestion.by_id(loader_id)
        if not loader: return ''
        return f"Edit: {loader.text}"

    @expose('rocket.templates.generic')
    def get_edit_loader_html(self, *args, **kwargs):
        loader_id = kwargs.get('loader_id', None)
        loader = LoaderQuestion.by_id(loader_id)
        checked = 'checked' if loader.active else ''
        td = TypeDict()
        dropdown_question_premium_effect = self.get_selectbox_question_premium_effect(
            loader.loader_question_premium_effect_type_id)
        selected_type = td.get_pretty_name('loader_question_premium_effect_type',
                                           loader.loader_question_premium_effect_type_id)
        detail_html = self.get_loader_question_answer_html(**kwargs)

        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Edit '{loader.text}'</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button class="btn btn-primary ml-auto action_back loader_back">Back to Loader List</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <form id='form_edit_loader' class="d-flex flex-wrap">
                            <div style='display: none' class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="loader_id">ID</label>
                                    <div class="col-md-9">
                                        <input id="id" type="text" name="loader_id" value="{loader.id}" class="form-control"
                                            required='true'>
                                      <input id="selected_type" type="text" name="selected_type" value="{selected_type}" class="form-control"
                                            required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-6 col-form-label" required for="loader_name">Loader Name</label>
                                    <div class="col-md-6">
                                        <input id="loader_name" type="text" maxlength='100' name="loader_name" value="{loader.text}"
                                            class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>

                           <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-6 col-form-label" required for="loader_question_premium_effect_type_id">Question Premium Effect Type</label>
                                    <div class="col-md-6">
                                        {dropdown_question_premium_effect}
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label">Active</label>
                                    <div class="form-check">
                                        <label class="form-check-label">
                                            <input class="form-check-input" type="checkbox" name='active' {checked}>
                                            <span class="form-check-sign"></span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                          </form>
                               <div class="col-md-12 text-right">
                              <button id='save_edit_loader' class="btn btn-primary">Save</button>
                            </div>
                    </div>
                </div>
            </div>
        </div>
          <div id="div_loader_detail" class="row">
             {detail_html}
          </div>
        </div>
        """
        javascript = """
        <script>
           $('.loader_back').click(function(){
                   $.redirect('/setup/loaders');
              });
        </script>
        """
        return html + javascript

    @expose()
    def get_loader_question_answer_html(self, *args, **kwargs):

        loader_id = kwargs.get('loader_id', None)
        outputlist = []
        loader_question = LoaderQuestion.by_id(loader_id)
        dbase_query = LoaderQuestionAnswer.by_attr_all('loader_question_id', loader_id)

        td = TypeDict()
        amount = td.get_id_of_name('loader_question_premium_effect_type', 'amount')
        percentage = td.get_id_of_name('loader_question_premium_effect_type', 'percentage')

        loader_type = loader_question.loader_question_premium_effect_type_id

        for item in dbase_query:
            value = None
            if loader_type == amount:
                this = LoaderQuestionAnswerAmount.by_attr_first('loader_question_answer_id', item.id)
                value = f"Amount:    {this.amount}"

            if loader_type == percentage:
                this = LoaderQuestionAnswerPercentage.by_attr_first('loader_question_answer_id', item.id)
                value = f"{this.percentage}%"

            outputlist.append({
                'answer_text': f"<div class='edit loader_question_answer_edit' loader_id='{loader_id}' loader_question_answer_id='{item.id}'>{item.answer_text}</div>",
                'value': value,
                'is_active': item.active,
            })

        dbcolumnlist = [
            'answer_text',
            'value',
            'is_active',
        ]
        theadlist = [
            'Answer',
            'Type',
            'Is Active',
        ]
        tdclasslist = [
            'action_link',
            'text-center',
            'text-right',
        ]
        loaderedit_table = build_html_table(outputlist, dbcolumnlist, theadlist, "loader_table", tdclasslist)
        html = f"""
               <div class="col-md-12">
        <div id="div_loader_question">
            <div class="card mh_260">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Loader Question List</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_loaderdetail" class="btn btn-primary ml-auto">New Question</button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div style='display: none' class="col-md-12">
                        <div class="form-group row">
                            <label class="col-md-3 col-form-label" required for="loader_id">ID</label>
                            <div class="col-md-9">
                                <input id="loader_id" type="text" name="loader_id" value="{loader_id}" class="form-control" required='true'>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive">
                        {loaderedit_table}
                    </div>
                </div>
            </div>
            </div>
        </div>
           """
        javascript = """
        <script>
          $(".loader_question_answer_edit").click(function(){
                   var kwargs = {loader_question_answer_id : $(this).attr('loader_question_answer_id'), 'selected_type': $('#selected_type').attr('value'), 'loader_id': $(this).attr('loader_id')};
                  $('#dialogdiv').load('/setup/get_modal_edit_loader_question?', kwargs, function(data){
                 return false;
                   });
              });
                   $("#create_new_loaderdetail").click(function(){
                var kwargs = {'loader_id': $('#loader_id').attr('value'), 'selected_type': $('#selected_type').attr('value'),
                }
                $('#dialogdiv').load('/setup/get_modal_new_loader_question_answer?', kwargs, function(data){
                    return false;
                });
            });

              </script>
        """
        return html + javascript

    @expose()
    def get_modal_edit_loader_question(self, *args, **kwargs):
        loader_question_answer_id = kwargs.get('loader_question_answer_id', None)
        loader_type = kwargs.get('selected_type', '')
        loader_id = kwargs.get('loader_id', None)
        if not loader_question_answer_id: return ''
        this = LoaderQuestionAnswer.by_id(loader_question_answer_id)
        if not this: return ''
        checked = 'checked' if this.active else ''

        type_fields = ''
        if loader_type == "Amount":
            loader_question_answer = LoaderQuestionAnswerAmount.by_attr_first('loader_question_answer_id',
                                                                              loader_question_answer_id)
            type_fields = f"""
                  <div class="col-md-12">
					<div class="form-group row">
						<label class="col-md-3 col-form-label" required for="amount">Amount</label>
						<div class="col-md-9">
							<input id="amount" type="text" name="number" class="form-control" required='true' value='{loader_question_answer.amount}'>
						</div>
					</div>
				</div>
                   """
        if loader_type == "Percentage":
            loader_question_percentage = LoaderQuestionAnswerPercentage.by_attr_first('loader_question_answer_id',
                                                                                      loader_question_answer_id)
            type_fields = f"""
              <div class="col-md-12">
					<div class="form-group row">
						<label class="col-md-3 col-form-label" required for="percentage">Percentage</label>
						<div class="col-md-9">
							<input id="percentage" type="number" name="percentage" class="form-control" required='true' value='{loader_question_percentage.percentage}'>
						</div>
					</div>
				</div>
                 """
        html = f"""
        <div class="modal fade" id="dialog_edit_loader_question" tabindex="-1" role="dialog" aria-labelledby="mytbl_loader_questionLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">Edit Loader Answer</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                       <form id='form_edit_loader_question_answer'>
		                    <div style='display: none' class="col-md-6">
			<div class="form-group row">
				<label class="col-md-3 col-form-label" required for="loader_question_answer_id">ID</label>
				<div class="col-md-9">
					<input id="id" type="text" name="loader_question_answer_id" value="{this.id}" class="form-control" required='true'>
					<input id="loader_id" type="text" name="loader_id" value="{loader_id}" class="form-control" required='true'>
				</div>
			</div>
		 </div>
	                    	<div class="col-md-12">
			                    <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="answer_text">Answer Text</label>
		                    		<div class="col-md-9">
					              <input id="answer_text" type="text" name="answer_text" value="{this.answer_text}" class="form-control" required='true'>
			                	</div>
		                    	</div>
	                    	</div>
                          {type_fields}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-3 col-form-label" for="active" required>Active</label>
                                    <div class="col-9">
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                <span class="form-check-sign"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
		              </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_edit_loader_question' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary loader_question_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
            setFormValidation('#form_edit_loader_question_answer');
        $('#save_edit_loader_question').click(function(){
             var valid = FormIsValid("#form_edit_loader_question_answer");
             if(valid){
                var formserial = getFormData('#form_edit_loader_question_answer');
                $.post('/setup/save_edit_loaderdetails?', formserial, function(data){
                    var result = JSON.parse(data);

                    if(result.success === true){
                       $('#dialog_edit_loader_question').modal('hide');
                            $('#div_loader_question').load('/setup/get_loader_question_answer_html?', result, function(data){
                                 return false;
                            });

                    };
                    return false;
                });
             }
        });
        $('.loader_question_back').click(function(){
            $('#dialog_edit_loader_question').modal('hide');
        });
        $('#dialog_edit_loader_question').modal();
        </script>
        """
        return html + javascript

    @expose()
    def get_active_loader_question_list(self, *args, **kwargs):
        loader_question_id = kwargs.get('loader_id', None)

        if loader_question_id:
            dbase_query = DBSession.query(LoaderQuestionAnswer). \
                filter(
                LoaderQuestionAnswer.loader_question_id == loader_question_id). \
                filter(LoaderQuestionAnswer.active == 1). \
                order_by(asc(LoaderQuestionAnswer.loader_question_id)).limit(LIMIT)
        else:
            dbase_query = DBSession.query(LoaderQuestionAnswer). \
                filter(LoaderQuestionAnswer.active == 1). \
                order_by(asc(LoaderQuestionAnswer.id)). \
                limit(LIMIT)
        return dbase_query

    @expose()
    def get_javascript_loader_onload(self, *args, **kwargs):
        javascript = """
        $('#save_edit_loader').click(function(){
            var valid = FormIsValid("#form_edit_loader");
            if(valid){
                var formserial = $('#form_edit_loader').serialize();
                $.post('/setup/save_edit_loader_detail?', formserial, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $.redirect(result.redirect, {'loader_id' : result.loader_id});
                    };
                    return false;
                });
            }
        });
        """
        return javascript

    @expose()
    def get_modal_new_loader_question_answer(self, *args, **kwargs):
        loader_id = kwargs.get('loader_id', None)
        selected_type = kwargs.get('selected_type', None)
        input_field = selected_type.lower()
        html = f"""
        <div class="modal fade" id="dialog_new_loader_question_answer" tabindex="-1" role="dialog" aria-labelledby="myloaderdetailLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">New Loader Detail</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_new_loaderdetail'>
                            <div class="col-md-12 hidden">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="loader_id">Loader _ID</label>
                                    <div class="col-md-9">
                                        <input id="loader_id" type="text" name="loader_id" class="form-control" required='true' value='{loader_id}'>
                                        <input id="selected_type" type="text" name="selected_type" class="form-control" required='true' value='{selected_type}'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                    <div class="form-group row">
                                      <label class="col-md-4 col-form-label" required for="answer_text">Answer</label>
                                      <div class="col-md-8">
                                         <input id="answer_text" type="text" name="answer_text" class="form-control" required='true'>
                                       </div>
                                    </div>
                             </div>
                               <div class="col-md-12">
                                    <div id="hide_field" >
                                      <div class="form-group row">
                                         <label class="col-md-4 col-form-label" for="">{selected_type}</label>
                                            <div class="col-md-8">
                                              <input id="{input_field}" type="text" name="{input_field}" class="form-control" required='true'>
                                            </div>
                                     </div>
                                    </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_new_loaderdetail' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary loader_question_answer_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
        $(document).ready(function(){
            if($('#selected_type').attr('value') =='None')
            {
              $("#hide_field").hide();
            }
            setFormValidation('#form_new_loaderdetail');
            $('#save_new_loaderdetail').click(function(){
                 var valid = FormIsValid("#form_new_loaderdetail");
                 if(valid){
                    var formserial = $('#form_new_loaderdetail').serialize();
                    $.post('/setup/save_new_loaderdetails?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                           $.redirect(result.redirect, {'loader_id' : result.loader_id});
                        };
                        return false;
                    });
                 }
            });
            $('.loader_question_answer_back').click(function(){
                $('#dialog_new_loader_question_answer').modal('hide');
            });
            $('#dialog_new_loader_question_answer').modal();
        });
        </script>
     	"""
        return html + javascript

    @expose()
    def save_edit_loader_detail(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        loader_id = kwargs.get('loader_id', None)
        this = LoaderQuestion.by_id(loader_id)
        if not this: return ''
        this.text = kwargs.get('loader_name', None)
        this.loader_question_premium_effect_type_id = kwargs.get('loader_question_premium_effect_type_id', None)
        this.added_by = usernow.id
        DBSession.flush()
        redirect_url = '/setup/get_loader_edit'
        return json.dumps({'success': True, 'loader_id': loader_id, 'redirect': redirect_url})

    # New Questions
    @expose()
    def save_new_loaderdetails(self, *args, **kwargs):
        dict_loader_question_answer = {
            'loader_question_id': kwargs.get('loader_id', None),
            'answer_text': kwargs.get("answer_text", None),
        }
        loader_question_answer_id = self.save_new_loader_question_answer(**dict_loader_question_answer)

        percentage = kwargs.get('percentage', None)
        if percentage:
            dict_percentage = {
                'loader_question_answer_id': loader_question_answer_id,
                'percentage': kwargs.get('percentage', None),
            }
            self.save_new_loader_question_answer_percentage(**dict_percentage)
        amount = kwargs.get('amount', None)
        if amount:
            dict_amount = {
                'loader_question_answer_id': loader_question_answer_id,
                'amount': kwargs.get("amount", None),
            }
            self.save_new_loader_question_answer_amount(**dict_amount)

        loader_id = kwargs.get("loader_id")
        redirect_url = '/setup/get_loader_edit'
        return json.dumps({'success': True, 'loader_id': loader_id, 'redirect': redirect_url})

    @expose()
    def save_new_loader_question_answer(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = LoaderQuestionAnswer()
        this.loader_question_id = kwargs.get('loader_question_id', None)
        this.answer_text = kwargs.get('answer_text', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return this.id

    @expose()
    def save_new_loader_question_answer_amount(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = LoaderQuestionAnswerAmount()
        this.loader_question_answer_id = kwargs.get('loader_question_answer_id', None)
        this.amount = kwargs.get('amount', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return this.id

    @expose()
    def save_new_loader_question_answer_percentage(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = LoaderQuestionAnswerPercentage()
        this.loader_question_answer_id = kwargs.get('loader_question_answer_id', None)
        this.percentage = kwargs.get('percentage', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return this.id

    # Question Edits
    @expose()
    def save_edit_loaderdetails(self, *args, **kwargs):

        dict_loader_question_answer = {
            'loader_question_answer_id': kwargs.get('loader_question_answer_id', None),
            'answer_text': kwargs.get("answer_text", None),
            'active': kwargs.get("active", None)
            }
        self.save_edit_loader_question_answer(**dict_loader_question_answer)

        percentage = kwargs.get('percentage', None)
        if percentage:
            dict_percentage = {
                'loader_question_answer_id': kwargs.get('loader_question_answer_id', None),
                'percentage': kwargs.get('percentage', None),
                'active': kwargs.get("active", None)
                }
            self.save_edit_loader_question_answer_percentage(**dict_percentage)

        amount = kwargs.get('amount', None)
        if amount:
            dict_amount = {
                'loader_question_answer_id': kwargs.get('loader_question_answer_id', None),
                'amount': kwargs.get("amount", None),
                'active': kwargs.get("active", None)
            }
            self.save_edit_loader_question_answer_amount(**dict_amount)

        return json.dumps({'success': True, 'loader_id': kwargs.get('loader_id', None)})

    @expose()
    def save_edit_loader_question_answer(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = LoaderQuestionAnswer.by_id(kwargs.get('loader_question_answer_id', None))
        if not this: return ''
        this.answer_text = kwargs.get('answer_text', None)
        this.added_by = usernow.id
        if not kwargs.get('active', None): this.active = False
        DBSession.flush()
        return json.dumps({'success': True})

    @expose()
    def save_edit_loader_question_answer_amount(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = LoaderQuestionAnswerAmount.by_attr_first('loader_question_answer_id',
                                                        kwargs.get('loader_question_answer_id', None))
        if not this: return ''
        this.amount = kwargs.get('amount', None)
        this.added_by = usernow.id
        if not kwargs.get('active', None): this.active = False
        DBSession.flush()
        return json.dumps({'success': True})

    @expose()
    def save_edit_loader_question_answer_percentage(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = LoaderQuestionAnswerPercentage.by_attr_first('loader_question_answer_id',
                                                            kwargs.get('loader_question_answer_id', None))
        if not this: return ''
        this.percentage = kwargs.get('percentage', None)
        this.added_by = usernow.id
        if not kwargs.get('active', None): this.active = False
        DBSession.flush()
        return json.dumps({'success': True})

###############################################################################
# Claim Questions and Answers
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def claim_questions(self, *args, **kwargs):
        html = self.get_active_claim_question_html(*args, **kwargs)
        javascript = self.get_javascript_product_claim_questions_onload()
        title = _("Claim Questions")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_claim_question_html(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_CLAIMQUESTION
        usernow = request.identity.get('user', {})
        searchphrase = COMMON.get_searchphrase(**kwargs)
        claim_question_table = self.get_active_claim_question_htmltbl(**kwargs)
        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('Claim Questions')}</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_claim_question" class="btn btn-primary ml-auto">{_('New Claim Question')}</button>
                            </div>
                        </div>
                   <div class="row d-flex align-items-center">
                                <div class="col-md-4">
                                    <input type="text" class="form-control search" name="searchphrase"  id='searchphrase'  value='{searchphrase}' placeholder="Search">
                                </div>
                                <div class="col-md-8">
                                    <button class="btn btn-primary" id='action_search'>Search</button>
                                    <button class="btn btn-primary" id='btn_reset'>Reset</button>
                                </div>
                            </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive"  id='div_claim_question_table'>
                         {claim_question_table}
                        </div>
                    </div>
                    </div>
                </div>
            """
        javascript = """
              <script>
                $("#create_new_claim_question").click(function(){
                    $('#dialogdiv').load('/setup/get_modal_new_claim_question?', function(data){
                        return false;
                    });
                });
                    $('#action_search').click(function(){
                       var kwargs = 'searchphrase='+$('#searchphrase').val();
                       $('#div_claim_question_table').load('/setup/get_active_claim_question_htmltbl', kwargs, function(data){
                           return false;
                       });
                   })
                   $('#btn_reset').click(function(){
                    $('#searchphrase').val('').focus();
                       $('#div_claim_question_table').load('/setup/get_active_claim_question_htmltbl', 'reset=true', function(data){
                           return false;
                       });
                   })
                   </script>
                   """
        return html + javascript

    @expose()
    def get_active_claim_question_htmltbl(self, *args, **kwargs):
        dbase_query = self.get_active_claim_question_list(**kwargs)
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'id': f"<div class='edit claim_question_edit' claim_question_id='{item.id}'>{item.id}</div>",
                'text': item.text,
                'number_of_answers': len(self.get_active_claim_question_answer_list(claim_question_id=item.id)),
                'is_active': item.active,
            })
        dbcolumnlist = [
            'id',
            'text',
            'number_of_answers',
            'is_active',
        ]
        theadlist = [
            'ID',
            'Question Text',
            'Number of Answers',
            'Is Active',
        ]
        tdclasslist = [
            'action_link',
            'text-center',
            'text-center',
            'text-right',
        ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "claim_question_table", tdclasslist)
        javascript = """
                        <script>
                            $(".claim_question_edit").click(function(){
                                var data = {claim_question_id : $(this).attr('claim_question_id')};
                                $.redirect('/setup/get_claim_question_edit', data);
                        });

                        </script>
              """
        return html + javascript

    @expose()
    def get_javascript_product_claim_questions_onload(self, *args, **kwargs):
        javascript = """

            """
        return javascript

    @expose()
    def get_modal_new_claim_question(self, *args, **kwargs):
        claim_question_id = kwargs.get('claim_question_id', None)
        question = None
        title = 'New Claim Question'
        hidden_input = ''
        if claim_question_id:
            question = ClaimQuestion.by_id(claim_question_id)
            if question:
                title = 'Edit Claim Question'
            hidden_input = get_hidden_input(**{'id': 'claim_question_id', 'value': claim_question_id})
        text = question.text if question else ''
        html = f"""
               <div class="modal fade" id="dialog_claim_question" tabindex="-1" role="dialog" aria-labelledby="myclaim_questionLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">{title}</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_claim_question'>
                                {hidden_input}
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="text">Question Text</label>
                                    <div class="col-md-9">
                                        <textarea name='text' type="text" class="form-control" rows="4" maxlength='1024'>{text}</textarea>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_claim_question' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary claim_question_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script>
                var form_id = '#form_claim_question'
                setFormValidation(form_id);
                $('#save_new_claim_question').click(function(){
                     var valid = FormIsValid(form_id);
                     if(valid){
                        var formserial = $(form_id).serialize();
                        $.post('/setup/save_new_claim_question?', formserial, function(data){
                            $.redirect('/setup/claim_questions');
                            return false;
                        });
                     }
                });
                $('.claim_question_back').click(function(){
                    $('#dialog_claim_question').modal('hide');
                });
                $('#dialog_claim_question').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def save_new_claim_question(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        claim_question_id = kwargs.get('claim_question_id', None)
        if not claim_question_id:
            this = ClaimQuestion()
            this.text = kwargs.get('text', None)
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
        else:
            this = ClaimQuestion.by_id(claim_question_id)
            if not this:
                return 'false'
            this.text = kwargs.get('text', None)
            this.active = True if kwargs.get('active', None) else False
            DBSession.flush()
        return str(this.id)

    @expose()
    def get_active_claim_question_list(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_CLAIMQUESTION
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()
        if searchphrase:
            searchphrase = f'%{searchphrase}%'
            dbase_query = DBSession.query(ClaimQuestion). \
                filter(or_(
                ClaimQuestion.text.like(searchphrase),
            )). \
                filter(ClaimQuestion.active == kwargs.get('active', True)). \
                order_by(asc(ClaimQuestion.id)). \
                limit(LIMIT)
        else:
            dbase_query = DBSession.query(ClaimQuestion). \
                filter(ClaimQuestion.active == kwargs.get('active', True)). \
                order_by(asc(ClaimQuestion.id)). \
                limit(LIMIT)
        return dbase_query

    def get_active_claim_question_answer_list(self, *args, **kwargs):
        claim_question_id = kwargs.get('claim_question_id', None)
        dbase_query = ClaimQuestionAnswer.by_attr_all('claim_question_id', claim_question_id)
        return dbase_query

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def get_claim_question_edit(self, *args, **kwargs):
        claim_question_id = kwargs.get('claim_question_id', None)
        if not claim_question_id:
            redirect('/setup/claim_questions')
        html = self.get_edit_claim_question_html(*args, **kwargs)
        javascript = self.get_javascript_claim_question_onload()
        title = self.get_claim_question_title_html(claim_question_id)
        return dict(title=title, html=html, javascript=javascript)

    def get_claim_question_title_html(self, claim_question_id=None, *args, **kwargs):
        if not claim_question_id:
            return ''
        claim_question = ClaimQuestion.by_id(claim_question_id)
        if not claim_question:
            return ''
        return f"Edit Claim Question: {claim_question.id}"

    @expose('rocket.templates.generic')
    def get_edit_claim_question_html(self, *args, **kwargs):
        claim_question_id = kwargs.get('claim_question_id', None)
        claim_question = ClaimQuestion.by_id(claim_question_id)
        checked = 'checked' if claim_question.active else ''
        detail_html = self.get_claim_question_answer_html(**kwargs)

        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Edit Claim Question: '{claim_question.id}'</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button class="btn btn-primary ml-auto action_back claim_question_back">Back to Claim Questions List</button>
                            </div>
                        </div>
                        <div class="card-body">
                            <form id='form_edit_claim_question' class="d-flex flex-wrap">
                                <div style='display: none' class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="claim_question_id">ID</label>
                                        <div class="col-md-9">
                                            <input id="id" type="text" name="claim_question_id" value="{claim_question.id}" class="form-control"
                                                required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-6 col-form-label" required for="claim_question">Cliam Quesion</label>
                                        <div class="col-md-6">
                                            <input id="claim_question" type="text" maxlength='100' name="claim_question" value="{claim_question.text}"
                                                class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label">Active</label>
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="checkbox" name='active' {checked}>
                                                <span class="form-check-sign"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                              </form>
                                   <div class="col-md-12 text-right">
                                  <button id='save_edit_claim_question' class="btn btn-primary">Save</button>
                                </div>
                        </div>
                    </div>
                </div>
            </div>
              <div id="div_claim_question_detail" class="row">
                 {detail_html}
              </div>
            </div>
            """
        javascript = """
            <script>
               $('.claim_question_back').click(function(){
                       $.redirect('/setup/claim_questions');
                  });
            </script>
            """
        return html + javascript

    @expose()
    def get_claim_question_answer_html(self, *args, **kwargs):

        claim_question_id = kwargs.get('claim_question_id', None)
        outputlist = []
        dbase_query = self.get_active_claim_question_answer_list(claim_question_id=claim_question_id)

        for item in dbase_query:
            outputlist.append({
                'answer_text': f"<div class='edit claim_question_answer_edit' claim_question_id='{claim_question_id}' claim_question_answer_id='{item.id}'>{item.answer_text}</div>",
                'is_active': item.active,
            })

        dbcolumnlist = [
            'answer_text',
            'is_active',
        ]
        theadlist = [
            'Answer',
            'Is Active',
        ]
        tdclasslist = [
            'action_link',
            'text-right',
        ]
        claim_question_edit_table = build_html_table(outputlist, dbcolumnlist, theadlist, "claim_question_table",
                                                     tdclasslist)
        html = f"""
                   <div class="col-md-12">
            <div id="div_claim_question">
                <div class="card mh_260">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Answer List</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_claim_questiondetail" class="btn btn-primary ml-auto">New Answer</button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div style='display: none' class="col-md-12">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="claim_question_answer_id">ID</label>
                                <div class="col-md-9">
                                    <input id="claim_question_id" type="text" name="claim_question_id" value="{claim_question_id}" class="form-control" required='true'>
                                </div>
                            </div>
                        </div>
                        <div class="table-responsive">
                            {claim_question_edit_table}
                        </div>
                    </div>
                </div>
                </div>
            </div>
               """
        javascript = """
            <script>
              $(".claim_question_answer_edit").click(function(){
                       var kwargs = {claim_question_answer_id : $(this).attr('claim_question_answer_id'), 'selected_type': $('#selected_type').attr('value'), 'claim_question_id': $(this).attr('claim_question_id')};
                      $('#dialogdiv').load('/setup/get_modal_edit_claim_question_answer?', kwargs, function(data){
                     return false;
                       });
                  });
                       $("#create_new_claim_questiondetail").click(function(){
                    var kwargs = {'claim_question_id': $('#claim_question_id').attr('value'), 'selected_type': $('#selected_type').attr('value'),
                    }
                    $('#dialogdiv').load('/setup/get_modal_new_claim_question_answer?', kwargs, function(data){
                        return false;
                    });
                });

                  </script>
            """
        return html + javascript

    @expose()
    def get_modal_edit_claim_question_answer(self, *args, **kwargs):
        claim_question_answer_id = kwargs.get('claim_question_answer_id', None)
        claim_question_id = kwargs.get('claim_question_id', None)
        if not claim_question_answer_id:
            return ''
        this = ClaimQuestionAnswer.by_id(claim_question_answer_id)
        if not this:
            return ''
        checked = 'checked' if this.active else ''
        html = f"""
            <div class="modal fade" id="dialog_edit_claim_question" tabindex="-1" role="dialog" aria-labelledby="mytbl_cliam_questionLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">Edit Claim Question Answer</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                           <form id='form_edit_claim_question_answer'>
                                <div style='display: none' class="col-md-6">
                                    <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="claim_question_answer_id">ID</label>
                                        <div class="col-md-9">
                                        <input id="id" type="text" name="claim_question_answer_id" value="{this.id}" class="form-control" required='true'>
                                        <input id="claim_question_id" type="text" name="claim_question_id" value="{claim_question_id}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="answer_text">Answer Text</label>
                                        <div class="col-md-9">
                                        <input id="answer_text" type="text" name="answer_text" value="{this.answer_text}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <label class="col-3 col-form-label" for="active" required>Active</label>
                                        <div class="col-9">
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                    <span class="form-check-sign"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                          </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_edit_claim_question' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary claim_question_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script>
                setFormValidation('#form_edit_claim_question_answer');
            $('#save_edit_claim_question').click(function(){
                 var valid = FormIsValid("#form_edit_claim_question_answer");
                 if(valid){
                    var formserial = getFormData('#form_edit_claim_question_answer');
                    $.post('/setup/save_edit_claimquestiondetails?', formserial, function(data){
                        var result = JSON.parse(data);

                        if(result.success === true){
                           $('#dialog_edit_claim_question').modal('hide');
                                $('#div_claim_question').load('/setup/get_claim_question_answer_html?', result, function(data){
                                     return false;
                                });

                        };
                        return false;
                    });
                 }
            });
            $('.claim_question_back').click(function(){
                $('#dialog_edit_claim_question').modal('hide');
            });
            $('#dialog_edit_claim_question').modal();
            </script>
            """
        return html + javascript

    @expose()
    def get_javascript_claim_question_onload(self, *args, **kwargs):
        javascript = """
            $('#save_edit_claim_question').click(function(){
                var valid = FormIsValid("#form_edit_claim_question");
                if(valid){
                    var formserial = $('#form_edit_claim_question').serialize();
                    $.post('/setup/save_edit_claim_question_detail?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect(result.redirect, {'claim_question_id' : result.claim_question_id});
                        };
                        return false;
                    });
                }
            });
            """
        return javascript

    @expose()
    def get_modal_new_claim_question_answer(self, *args, **kwargs):
        claim_question_id = kwargs.get('claim_question_id', None)
        html = f"""
            <div class="modal fade" id="dialog_new_claim_question_answer" tabindex="-1" role="dialog" aria-labelledby="myclaimquestiondetailLabel"
                aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">New Claim Question Answer</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_claimquestiondetail'>
                                <div class="col-md-12 hidden">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="claim_question_id">Claim Question ID</label>
                                        <div class="col-md-9">
                                            <input id="claim_question_id" type="text" name="claim_question_id" class="form-control" required='true' value='{claim_question_id}'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                        <div class="form-group row">
                                          <label class="col-md-4 col-form-label" required for="answer_text">Answer</label>
                                          <div class="col-md-8">
                                             <input id="answer_text" type="text" name="answer_text" class="form-control" required='true'>
                                           </div>
                                        </div>
                                 </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_claimquestiondetails' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary claim_question_answer_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script>
            $(document).ready(function(){
                setFormValidation('#form_new_claimquestiondetail');
                $('#save_new_claimquestiondetails').click(function(){
                     var valid = FormIsValid("#form_new_claimquestiondetail");
                     if(valid){
                        var formserial = $('#form_new_claimquestiondetail').serialize();
                        $.post('/setup/save_new_claimquestiondetails?', formserial, function(data){
                            var result = JSON.parse(data);
                            if(result.success === true){
                               $.redirect(result.redirect, {'claim_question_id' : result.claim_question_id});
                            };
                            return false;
                        });
                     }
                });
                $('.claim_question_answer_back').click(function(){
                    $('#dialog_new_claim_question_answer').modal('hide');
                });
                $('#dialog_new_claim_question_answer').modal();
            });
            </script>
            """
        return html + javascript

    @expose()
    def save_edit_claim_question_detail(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        claim_question_id = kwargs.get('claim_question_id', None)
        this = ClaimQuestion.by_id(claim_question_id)
        if not this:
            return ''
        this.text = kwargs.get('claim_question', None)
        this.added_by = usernow.id
        if not kwargs.get('active', None):
            this.active = False
            redirect_url = '/setup/claim_questions'
        else:
            redirect_url = '/setup/get_claim_question_edit'
        DBSession.flush()
        return json.dumps(
            {'success': True, 'claim_question_id': claim_question_id, 'redirect': redirect_url})

    # New Questions
    @expose()
    def save_new_claimquestiondetails(self, *args, **kwargs):
        dict_claim_question_answer = {
            'claim_question_id': kwargs.get('claim_question_id', None),
            'answer_text': kwargs.get("answer_text"),
        }
        self.save_new_claim_question_answer(**dict_claim_question_answer)
        claim_question_id = kwargs.get('claim_question_id', None)
        redirect_url = '/setup/get_claim_question_edit'
        return json.dumps({'success': True, 'claim_question_id': claim_question_id, 'redirect': redirect_url})

    @expose()
    def save_new_claim_question_answer(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = ClaimQuestionAnswer()
        this.claim_question_id = kwargs.get('claim_question_id', None)
        this.answer_text = kwargs.get('answer_text', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return this.id

    # Question Edits
    @expose()
    def save_edit_claimquestiondetails(self, *args, **kwargs):

        dict_claim_question_answer = {
            'claim_question_answer_id': kwargs.get('claim_question_answer_id', None),
            'answer_text': kwargs.get("answer_text", None),
            'active': kwargs.get("active")

        }
        self.save_edit_claim_question_answer(**dict_claim_question_answer)

        return json.dumps({'success': True, 'claim_question_id': kwargs.get('claim_question_id', None)})

    @expose()
    def save_edit_claim_question_answer(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        claim_question_answer_id = kwargs.get('claim_question_answer_id', None)
        this = ClaimQuestionAnswer.by_id(claim_question_answer_id)
        if not this: return ''

        this.answer_text = kwargs.get('answer_text', None)
        this.added_by = usernow.id
        if not kwargs.get('active', None):
            this.active = False
        DBSession.flush()
        return json.dumps({'success': True})

###############################################################################
# Rounding Rate Tables
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def rounding_rates(self, *args, **kwargs):
        html = ""
        javascript = ""
        title = "Rounding Rates"
        return dict(title=title, html=html, javascript=javascript)

###############################################################################
# Rate Tables
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def premium_rates(self, *args, **kwargs):
        html = self.get_rate_table_html(*args, **kwargs)
        javascript = self.get_javascript_rate_table_onload()
        title = "Rate Tables"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_rate_table_html(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_PREMIUMRATE
        searchphrase = COMMON.get_searchphrase(**kwargs)
        rate_table_table = self.get_product_premium_htmltbl(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{_('Rate Tables')}</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_rate_table" class="btn btn-primary ml-auto">{_('Create New Rate Table')}</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                <input type="text" class="form-control search" name="searchphrase"  id='searchphrase'  value='{searchphrase}' placeholder="Search">
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary" id='action_search'>Search</button>
                                <button class="btn btn-primary" id='btn_reset'>Reset</button>
                            </div>
                        </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive" id='div_premium_rate'>
                        {rate_table_table}
                    </div>
                </div>
                </div>
            </div>
        """
        javascript = """
         <script>
         $("#create_new_rate_table").click(function(){
            $('#dialogdiv').load('/setup/get_modal_new_rate_table?', function(data){
                return false;
            });
            });
               $('#action_search').click(function(){
                  var kwargs = 'searchphrase='+$('#searchphrase').val();
                  $('#div_premium_rate').load('/setup/get_product_premium_htmltbl', kwargs, function(data){
                      return false;
                  });
              })
              $('#btn_reset').click(function(){
               $('#searchphrase').val('').focus();
                  $('#div_premium_rate').load('/setup/get_product_premium_htmltbl', 'reset=true', function(data){
                      return false;
                  });
              })
              </script>
              """
        return html + javascript

    @expose()
    def get_product_premium_htmltbl(self, *args, **kwargs):
        dbase_query = self.get_rate_table_list(*args, **kwargs)
        outputlist = []
        for item in dbase_query:
            rate_name = 'Unknown'
            rate_table_base = DBSession.query(RateTableBaseValue).\
                filter(RateTableBaseValue.rate_table_id==item.id).\
                filter(RateTableBaseValue.active==True).\
                first()

            if rate_table_base:
                rate_name = rate_table_base.base_value
            else:
                rate_table_benefit_link = DBSession.query(RateTableAssetTypeLink).\
                    filter(RateTableAssetTypeLink.rate_table_id==item.id).\
                    filter(RateTableAssetTypeLink.active==True).\
                    first()
                if rate_table_benefit_link:
                    rate_name = TypeDict().get_pretty_name("benefit_asset_type", rate_table_benefit_link.benefit_asset_type_id)

            outputlist.append({
                'code': f"<div class='edit rate_table_edit' rate_table_id='{item.id}'>{item.code}</div>",
                'name': item.name,
                'base_value': rate_name, })

        dbcolumnlist = [
            'code',
            'name',
            'base_value',
        ]
        theadlist = [
            'Code',
            'Name',
            'Base Value/Asset',
        ]
        tdclasslist = [
            'action_link',
            '',
            'text-right',
        ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "rate_table_table", tdclasslist)
        javascript = """
        <script>
            $(".rate_table_edit").click(function(){
                var data = {rate_table_id : $(this).attr('rate_table_id')};
                $.redirect('/setup/get_rate_table_edit', data);
            });
        </script>
        """
        return html + javascript

    @expose()
    def get_javascript_rate_table_onload(self, *args, **kwargs):
        javascript = """
        """
        return javascript

    @expose()
    def get_modal_new_rate_table(self, *args, **kwargs):
        checked = ''
        html = f"""
        <div class="modal fade" id="dialog_new_rate_table" tabindex="-1" role="dialog" aria-labelledby="myrate_tableLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">New Rate</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_new_rate_table'>
                            <div class="col-md-12">
				            	<div class="form-group row">
						            <label class="col-md-4 col-form-label" required for="code">Code</label>
						            <div class="col-md-4">
							            <input id="code" type="text" name="code" class="form-control" required='true' maxlength='10'>
						            </div>
					            </div>
				            </div>
                            <div class="col-md-12">
					            <div class="form-group row">
						            <label class="col-md-4 col-form-label" required for="name">Name</label>
						            <div class="col-md-8">
							            <input id="name" type="text" name="name" class="form-control" required='true'>
						            </div>
					            </div>
				            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-4 col-form-label">Life Cover</label>
                                    <div class="form-check">
                                        <label class="form-check-label">
                                          <input class="form-check-input" type="checkbox" id='is_life_rate_table' name='is_life' {checked}>
                                          <span class="form-check-sign"></span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div id="rate_type_fields" class="col-md-12">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_new_rate_table' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary rate_table_back" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
            setFormValidation('#form_new_rate_table');
            $('#save_new_rate_table').click(function(){
                var valid = FormIsValid("#form_new_rate_table");
                if(valid){
                    var formserial = $('#form_new_rate_table').serialize();

                    $.post('/setup/save_new_rate_table?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect(result.redirect, {'rate_table_id' : result.rate_table_id});
                        };
                        showNotification(result.status, result.message);
                        return false;
                    });
                }
            });

            $('#is_life_rate_table').change(function(){
                var is_life = $('#is_life_rate_table').val();
                if(this.checked) {
                    $('#rate_type_fields').load('/setup/get_rate_type_field_life', function(data){
                        return false;
                    });
                } else {
                    $('#rate_type_fields').load('/setup/get_rate_type_field_not_life', function(data){
                        return false;
                    });
                }
            });
            $('#is_life_rate_table').trigger('change');

            $('.rate_table_back').click(function(){
                $('#dialog_new_rate_table').modal('hide');
            });

            $('#dialog_new_rate_table').modal();

        </script>
     	"""
        return html + javascript

    @expose()
    def get_rate_type_field_life(self, *args, **kwargs):
        return f"""
        <div class="form-group row">
            <label class="col-md-4 col-form-label" required for="base_rate">Base Rate</label>
            <div class="col-md-4">
                <input id="base_rate" type="number" name="base_rate" class="form-control" required='true'>
            </div>
        </div>
        """

    @expose()
    def get_rate_type_field_not_life(self, *args, **kwargs):
        selectbox_benefit_asset_type = self.get_selectbox_benefit_asset_type()
        return f"""
        <div class="form-group row">
            <label class="col-md-4 col-form-label" required for="benefit_asset_type_id">Benefit Asset</label>
            <div class="col-md-4">
                {selectbox_benefit_asset_type}
            </div>
        </div>
        """

    def get_selectbox_benefit_asset_type(self, selected=None, *args, **kwargs):
        kwargs['id'] = 'benefit_asset_type_id'
        kwargs['selected'] = selected
        kwargs['outputdict'] = TypeDict().get_dict_of_types("benefit_asset_type")
        return create_selectbox_html(**kwargs)

    @expose()
    def save_new_rate_table(self, *args, **kwargs):
        if not kwargs: return json.dumps({'success': False, 'data': 'No data provided', 'status': 'danger'})
        usernow = request.identity.get('user', None)
        rate_code = kwargs.get('code', None)
        rate_code = rate_code[0:10]
        base_rate = kwargs.get('base_rate', None)

        exists = DBSession.query(RateTable).\
            filter(RateTable.code==rate_code).\
            filter(RateTable.active==True).\
            first()
        if exists: return json.dumps({'success': False, 'message': 'This code already exists.', 'status': 'danger'})

        this_is_life = True if kwargs.get('is_life', None) else False

        this_benefit_asset_type_id = kwargs.get('benefit_asset_type_id', None)

        if this_is_life and this_benefit_asset_type_id \
            or not this_is_life and not this_benefit_asset_type_id:
            return json.dumps({'success': False, 'message': 'Select either Life or Benefit Asset.', 'status': 'danger'})

        if this_is_life and not base_rate:
            return json.dumps({'success': False, 'message': 'Please supply a base rate.', 'status': 'danger'})

        if this_is_life: this_benefit_asset_type_id = None
        if this_benefit_asset_type_id:
            this_is_life = False
            base_rate = None

        this = RateTable()
        this.code = rate_code
        this.name = kwargs.get('name', None)
        this.is_life = this_is_life
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()

        #Add the basae rate if necessary
        if this.is_life:
            that = RateTableBaseValue()
            that.rate_table_id = this.id
            that.base_rate = int(base_rate)
            that.added_by = usernow.id
        else:
            that = RateTableAssetTypeLink()
            that.rate_table_id = this.id
            that.benefit_asset_type_id = int(this_benefit_asset_type_id)
            that.added_by = usernow.id
        DBSession.add(that)
        DBSession.flush()

        redirect_url = '/setup/get_rate_table_edit'
        return json.dumps({'success': True, 'rate_table_id': this.id, 'redirect': redirect_url})

    @expose()
    def save_edit_rate_table(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate_table_name = kwargs.get('name', None)
        rate_table_active = kwargs.get('active', 'off')
        if not rate_table_active: rate_table_active = 'off'
        if not rate_table_id: return json.dumps({'success': False, 'data': 'Rate Table not provided.', 'status':'danger'})

        this = RateTable.by_id(rate_table_id)
        if not this: return json.dumps({'success': False, 'data': 'No rate_table found for id provided', 'status':'danger'})
        this.name = rate_table_name
        if rate_table_active =='on':
            this.active = True
        else:
            this.active = False
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id, 'status':'success'})

    @expose()
    def get_rate_table_list(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_PREMIUMRATE
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()
        if searchphrase:
            searchphrase = "%" + searchphrase + "%"
            dbase_query = DBSession.query(RateTable). \
                filter(or_(RateTable.code.like(searchphrase),
                           RateTable.name.like(searchphrase), )). \
                filter(RateTable.active == True). \
                order_by(asc(RateTable.code)).limit(LIMIT)
            return dbase_query
        else:
            dbase_query = DBSession.query(RateTable). \
                filter(RateTable.active == True). \
                order_by(asc(RateTable.id)). \
                limit(LIMIT)
        return dbase_query

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def get_rate_table_edit(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        if not rate_table_id: redirect('/setup/premium_rates')
        html = self.get_edit_rate_table_html(*args, **kwargs)
        javascript = self.get_javascript_rate_table_edit_onload()
        title = self.get_rate_table_title_html(rate_table_id)
        return dict(title=title, html=html, javascript=javascript)

    def get_rate_table_title_html(self, rate_table_id=None, *args, **kwargs):
        if not rate_table_id: return ''
        rate_table = RateTable.by_id(rate_table_id)
        if not rate_table: return ''
        return f"Edit: {rate_table.name}"

    @expose('rocket.templates.generic')
    def get_edit_rate_table_html(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate_table = RateTable.by_id(rate_table_id)
        checked = 'checked' if rate_table.active else ''
        base_value = ''
        if rate_table.is_life:
            rate_table_base = DBSession.query(RateTableBaseValue).\
                filter(RateTableBaseValue.rate_table_id==rate_table.id).\
                filter(RateTableBaseValue.active==True).\
                first()
            if rate_table_base:
                base_value = rate_table_base.base_value

        rate_table_line_item_table = self.get_rate_table_line_item_html(**kwargs)

        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">Edit '{rate_table.name}'</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button class="btn btn-outline-primary" id='save_edit_rate_table'>Save</button>
                            <button class="btn btn-primary ml-auto action_back product_premium_back">Back Rate Table List</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <form id='form_edit_loader' class="d-flex flex-wrap">
                            <div style='display: none' class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-3 col-form-label" required for="rate_table_id">ID</label>
                                    <div class="col-md-9">
                                        <input id="rate_table_id" type="text" name="rate_table_id" value="{rate_table.id}" class="form-control"
                                            required='true'>

                                    </div>
                                </div>
                            </div>
                             <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-6 col-form-label" required for="code">{_('Rate Table Code')}</label>
                                    <div class="col-md-4">
                                        <input id="code" type="text" maxlength='100' name="code" value="{rate_table.code}"
                                            class="form-control" required='true' disabled='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-6 col-form-label" required for="name">{_('Rate Table Name')}</label>
                                    <div class="col-md-6">
                                        <input id="name" type="text" maxlength='100' name="name" value="{rate_table.name}"
                                            class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-6 col-form-label">Active</label>
                                    <div class="form-check">
                                        <label class="form-check-label">
                                            <input class="form-check-input" type="checkbox" name='active' {checked}>
                                            <span class="form-check-sign"></span>
                                        </label>
                                    </div>
                                </div>
                            </div>
        """

        if rate_table.is_life:
            html += f"""
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-md-6 col-form-label" required for="base_value">{_('Base Value')}</label>
                                    <div class="col-md-6">
                                        <input id="base_value" type="number" maxlength='1000'  max="1000" name="base_value" value="{base_value}"
                                            class="form-control" required='true' disabled='true'>
                                    </div>
                                </div>
                            </div>
            """

        html += f"""
                        </form>
                    </div>
                </div>
            </div>
        </div>

        {rate_table_line_item_table}
        """
        javascript = """
        <script>
            $('#save_edit_rate_table').click(function(){
                var formserial = $('#form_edit_loader').serialize();

                $.post('/setup/save_edit_rate_table?', formserial, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){
                        $.redirect('/setup/premium_rates');
                    };
                    showNotification(result.status, result.data);
                    return false;
                });
            });
            $('.product_premium_back').click(function(){
                    $.redirect('/setup/premium_rates');
               });
         </script>
         """
        return html + javascript

    @expose()
    def get_rate_table_line_item_html(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate_table = RateTable.by_id(rate_table_id)
        rate_table_benefit_link = DBSession.query(RateTableAssetTypeLink).\
            filter(RateTableAssetTypeLink.rate_table_id==rate_table.id).\
            filter(RateTableAssetTypeLink.active==True).\
            first()
        if not rate_table.is_life and not rate_table_benefit_link:
            return ''

        img_active = "<img src='/images/icon_check.png' />"
        img_inactive = "<img src='/images/icon_cross.png' />"

        if rate_table.is_life:
            dbase_query = DBSession.query(RateTableLineItemLife). \
                filter(RateTableLineItemLife.rate_table_id == rate_table_id). \
                filter(RateTableLineItemLife.active == True). \
                order_by(asc(RateTableLineItemLife.rate_table_id)). \
                limit(LIMIT)

            outputlist = []
            for item in dbase_query:
                active = img_active
                disable_text = 'Remove'
                if not item.active:
                    active = img_inactive
                    disable_text = 'Recover'

                gender = TYPEUTIL.get_pretty_name("person_gender_type", item.gender_type_id)
                outputlist.append({
                    'gender': gender,
                    'maximum_age': item.maximum_age,
                    'minimum_age': item.minimum_age,
                    'rate_factor': item.rate_factor,
                    'disable' : f"<div class='line_item_active' active='{item.active}' rate_table_id='{rate_table_id}' rate_table_line_item_id='{item.id}'>{disable_text}</div>",
                })
                # outputlist.append({
                #     'gender': f"<div class='edit rate_table_line_item_edit' rate_table_line_item_id='{item.id}'>{gender}</div>",
                #     'maximum_age': item.maximum_age,
                #     'minimum_age': item.minimum_age,
                #     'rate_factor': item.rate_factor,
                # })
            dbcolumnlist = [
                'gender',
                'maximum_age',
                'minimum_age',
                'rate_factor',
                'disable',
            ]
            theadlist = [
                'Gender',
                'Maximum Age',
                'Minimum Age',
                'Rate Factor',
                'Remove',
            ]
            tdclasslist = [
                '',
                '',
                '',
                'text-right',
                'action_link text-right',
            ]

        elif rate_table_benefit_link.benefit_asset_type_id == TYPEUTIL.get_id_of_name('benefit_asset_type', 'employee'):
            dbase_query = DBSession.query(RateTableLineItemEmployee). \
                filter(RateTableLineItemEmployee.rate_table_id == rate_table_id). \
                filter(RateTableLineItemEmployee.active == True). \
                order_by(asc(RateTableLineItemEmployee.rate_table_id)). \
                limit(LIMIT)

            outputlist = []
            for item in dbase_query:
                active = img_active
                disable_text = 'Remove'
                if not item.active:
                    active = img_inactive
                    disable_text = 'Recover'

                outputlist.append({
                    'min_employees': item.minimum_employees_coverable,
                    'max_employees': item.maximum_employees_coverable,
                    'amount': item.amount,
                    'disable' : f"<div class='line_item_active' active='{item.active}' rate_table_id='{rate_table_id}' rate_table_line_item_id='{item.id}'>{disable_text}</div>",
                })
                # outputlist.append({
                #     'min_employees': f"<div class='edit rate_table_line_item_edit' rate_table_line_item_id='{item.id}'>{item.minimum_employees_coverable}</div>",
                #     'max_employees': item.maximum_employees_coverable,
                #     'amount': item.amount,
                # })
            dbcolumnlist = [
                'min_employees',
                'max_employees',
                'amount',
                'disable',
            ]
            theadlist = [
                'Minimum Number of Employees',
                'Maximum Number of Employees',
                'Amount',
                'Remove',
            ]
            tdclasslist = [
                '',
                '',
                'text-right',
                'action_link text-right',
            ]

        elif rate_table_benefit_link.benefit_asset_type_id == TYPEUTIL.get_id_of_name('benefit_asset_type', 'business') \
            or rate_table_benefit_link.benefit_asset_type_id == TYPEUTIL.get_id_of_name('benefit_asset_type', 'property'):
            dbase_query = DBSession.query(RateTableLineItemTurnover). \
                filter(RateTableLineItemTurnover.rate_table_id == rate_table_id). \
                filter(RateTableLineItemTurnover.active == True). \
                order_by(asc(RateTableLineItemTurnover.minimum_turnover)). \
                limit(LIMIT)

            outputlist = []
            for item in dbase_query:
                active = img_active
                disable_text = 'Remove'
                if not item.active:
                    active = img_inactive
                    disable_text = 'Recover'

                outputlist.append({
                    'min_turnover': item.minimum_turnover,
                    'max_turnover': item.maximum_turnover,
                    'amount': item.amount,
                    'disable' : f"<div class='line_item_active' active='{item.active}' rate_table_id='{rate_table_id}' rate_table_line_item_id='{item.id}'>{disable_text}</div>",
                })
                # outputlist.append({
                #     'min_turnover': f"<div class='edit rate_table_line_item_edit' rate_table_line_item_id='{item.id}'>{item.minimum_turnover}</div>",
                #     'max_turnover': item.maximum_turnover,
                #     'amount': item.amount,
                # })
            dbcolumnlist = [
                'min_turnover',
                'max_turnover',
                'amount',
                'disable',
            ]
            theadlist = [
                'Minimum Turnover',
                'Maximum Turnover',
                'Amount',
                'Remove',
            ]
            tdclasslist = [
                '',
                '',
                'text-right',
                'action_link text-right',
            ]

        elif rate_table_benefit_link.benefit_asset_type_id == TYPEUTIL.get_id_of_name('benefit_asset_type', 'vehicle'):
            dbase_query = DBSession.query(RateTableLineItemVehicle). \
                filter(RateTableLineItemVehicle.rate_table_id == rate_table_id). \
                filter(RateTableLineItemVehicle.active == True). \
                order_by(asc(RateTableLineItemVehicle.description)). \
                limit(LIMIT)

            outputlist = []
            for item in dbase_query:
                active = img_active
                disable_text = 'Remove'
                if not item.active:
                    active = img_inactive
                    disable_text = 'Recover'

                outputlist.append({
                    'description': item.description,
                    'ins_amount': item.insured_amount,
                    'unins_amount': item.uninsured_amount,
                    'tp_amount': item.third_party_amount,
                    'disable' : f"<div class='line_item_active' active='{item.active}' rate_table_id='{rate_table_id}' rate_table_line_item_id='{item.id}'>{disable_text}</div>",
                })
                # outputlist.append({
                #     'description': f"<div class='edit rate_table_line_item_edit' rate_table_line_item_id='{item.id}'>{item.description}</div>",
                #     'ins_amount': item.insured_amount,
                #     'unins_amount': item.uninsured_amount,
                #     'tp_amount': item.third_party_amount,
                # })
            dbcolumnlist = [
                'description',
                'ins_amount',
                'unins_amount',
                'tp_amount',
                'disable',
            ]
            theadlist = [
                'Description',
                'Insured Amount',
                'Uninsured Amount',
                'Third Party Amount',
                'Remove',
            ]
            tdclasslist = [
                '',
                'text-right',
                'text-right',
                'text-right',
                'action_link text-right',
            ]

        rate_table_line_itemtable = build_html_table(outputlist, dbcolumnlist, theadlist, "rate_table_line_item_table", tdclasslist)

        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{_('Rate Table Line Item')}</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_rate_table_line_item" class="btn btn-primary ml-auto">{_('New Rate Table Line')}</button>
                        </div>
                    </div>

                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {rate_table_line_itemtable}
                    </div>
                </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_javascript_rate_table_edit_onload(self, *args, **kwargs):
        javascript = """
            $("#create_new_rate_table_line_item").click(function(){
                var kwargs = {'rate_table_id': $('#rate_table_id').attr('value')};

                $('#dialogdiv').load('/setup/get_modal_new_rate_table_line_item?', kwargs, function(data){
                    return false;
                });
            });

            $(".rate_table_line_item_edit").click(function(){
                var data = {rate_table_line_item_id : $(this).attr('rate_table_line_item_id'), 'rate_table_id': $('#rate_table_id').attr('value')};
                $('#dialogdiv').load('/setup/get_modal_edit_rate_table_line_item?', data, function(data){
                    return false;
                });
            });

            $(".line_item_active").click(function(){
                var text = $(this).html();
                var data = {rate_table_line_item_id : $(this).attr('rate_table_line_item_id'), 'rate_table_id': $('#rate_table_id').attr('value')};
                var kwargs = {'rate_table_id': $('#rate_table_id').attr('value')};
                $.post('/setup/toggle_line_item_active?', data, function(data){
                    $.redirect('/setup/get_rate_table_edit?', kwargs);
                    return false;
                });
            });
            //loader_back
        """
        return javascript

            # $(".line_item_active").click(function(){
            #     var text = $(this).html();
            #     var result = window.confirm("Are you sure you want to remove this linet item?");
            #     if(result === true){
            #         var data = {rate_table_line_item_id : $(this).attr('rate_table_line_item_id'), 'rate_table_id': $('#rate_table_id').attr('value')};
            #         var kwargs = {'rate_table_id': $('#rate_table_id').attr('value')};
            #         $.post('/setup/toggle_line_item_active?', data, function(data){
            #             $.redirect('/setup/get_rate_table_edit?', kwargs);
            #             return false;
            #         });
            #     }
            # });

    @expose()
    def toggle_line_item_active(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate_table_line_item_id = kwargs.get('rate_table_line_item_id', None)

        rate_table = RateTable.by_id(rate_table_id)
        rate_table_benefit_link = DBSession.query(RateTableAssetTypeLink).\
            filter(RateTableAssetTypeLink.rate_table_id==rate_table.id).\
            filter(RateTableAssetTypeLink.active==True).\
            first()

        employee_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'employee')
        business_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'business')
        property_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'property')
        vehicle_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'vehicle')

        if rate_table.is_life:
            this = DBSession.query(RateTableLineItemLife). \
                filter(RateTableLineItemLife.id == rate_table_line_item_id). \
                first()

        elif rate_table_benefit_link.benefit_asset_type_id == employee_type_id:
            this = DBSession.query(RateTableLineItemEmployee). \
                filter(RateTableLineItemEmployee.id == rate_table_line_item_id). \
                first()

        elif rate_table_benefit_link.benefit_asset_type_id == business_type_id \
            or rate_table_benefit_link.benefit_asset_type_id == property_type_id:
            this = DBSession.query(RateTableLineItemTurnover). \
                filter(RateTableLineItemTurnover.id == rate_table_line_item_id). \
                first()

        elif rate_table_benefit_link.benefit_asset_type_id == vehicle_type_id:
            this = DBSession.query(RateTableLineItemVehicle). \
                filter(RateTableLineItemVehicle.id == rate_table_line_item_id). \
                first()

        if not this: return 'true'

        if this.active:
            this.active = False
        else:
            this.active = True
        DBSession.flush()
        return 'true'

    @expose()
    def get_modal_new_rate_table_line_item(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        #Used for all
        field_set = self.get_new_rate_table_type_fields(*args, **kwargs)

        html = f"""
            <div class="modal fade" id="dialog_new_rate_table" tabindex="-1" role="dialog" aria-labelledby="myrate_tableLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-12">
                                <h4 class="card-title">New Rate Table</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_rate_table_line_item'>
                                <div style='display: none' class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="tbl_rate_table_line_item_id">ID</label>
                                        <div class="col-md-9">
                                            <input id="id" type="text" name="rate_table_id" value="{rate_table_id}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                {field_set}
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_rate_table_line_item' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary rate_table_line_item_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script>
              setFormValidation('#form_new_rate_table_line_item');
              $('#save_new_rate_table_line_item').click(function(){
                 var valid = FormIsValid("#form_new_rate_table_line_item");
                 if(valid){
                    var formserial = $('#form_new_rate_table_line_item').serialize();
                    $.post('/setup/save_new_rate_table_line_item?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                           $.redirect(result.redirect, {'rate_table_id' : result.rate_table_id});
                        };
                        return false;
                    });
                 }
            });
           $('.rate_table_line_item_back').click(function(){
               $('#dialog_new_rate_table').modal('hide');
             });
             $('#dialog_new_rate_table').modal();
            </script>
         	"""
        return html + javascript

    def get_new_rate_table_type_fields(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate_table = RateTable.by_id(rate_table_id)
        rate_table_benefit_link = DBSession.query(RateTableAssetTypeLink).\
            filter(RateTableAssetTypeLink.rate_table_id==rate_table.id).\
            filter(RateTableAssetTypeLink.active==True).\
            first()

        employee_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'employee')
        business_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'business')
        property_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'property')
        vehicle_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'vehicle')

        fields_html = ''
        if rate_table.is_life:
            fields_html = self.get_new_rate_table_type_fields_life(self, *args, **kwargs)

        elif rate_table_benefit_link.benefit_asset_type_id == employee_type_id:
            fields_html = self.get_new_rate_table_type_fields_employee(self, *args, **kwargs)

        elif rate_table_benefit_link.benefit_asset_type_id == business_type_id \
            or rate_table_benefit_link.benefit_asset_type_id == property_type_id:
            fields_html = self.get_new_rate_table_type_fields_turnover(self, *args, **kwargs)

        elif rate_table_benefit_link.benefit_asset_type_id == vehicle_type_id:
            fields_html = self.get_new_rate_table_type_fields_vehicle(self, *args, **kwargs)

        return fields_html

    def get_new_rate_table_type_fields_life(self, *args, **kwargs):
        dropdown_gender = COMMON.get_selectbox_gender_type()
        maximum_age = 0
        minimum_age = 0
        rate_factor = 0

        fields_html =f"""
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="gender_type_id">Gender</label>
                    <div class="col-md-9">
                        {dropdown_gender}
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="maximum_age">Maximum Age</label>
                    <div class="col-md-9">
                        <input id="maximum_age" type="text" name="maximum_age" value="{maximum_age}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="minimum_age">Minimum Age</label>
                    <div class="col-md-9">
                        <input id="minimum_age" type="text" name="minimum_age" value="{minimum_age}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="rate_factor">Rate Factor</label>
                    <div class="col-md-9">
                        <input id="rate_factor" type="text" name="rate_factor" value="{rate_factor}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
        """
        return fields_html

    def get_new_rate_table_type_fields_employee(self, *args, **kwargs):
        minimum_employees_coverable = 0
        maximum_employees_coverable = 0
        amount = 0.00

        fields_html =f"""
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="maximum_employees_coverable">Minimum Number of Employees</label>
                    <div class="col-md-9">
                        <input id="minimum_employees_coverable" type="text" name="minimum_employees_coverable" value="{minimum_employees_coverable}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="minimum_employees_coverable">Maximum Number of Employees</label>
                    <div class="col-md-9">
                        <input id="maximum_employees_coverable" type="text" name="maximum_employees_coverable" value="{maximum_employees_coverable}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="amount">Amount</label>
                    <div class="col-md-9">
                        <input id="amount" type="text" name="amount" value="{amount}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
        """
        return fields_html

    def get_new_rate_table_type_fields_turnover(self, *args, **kwargs):
        minimum_turnover = 0.00
        maximum_turnover = 0.00
        amount = 0.00

        fields_html =f"""
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="minimum_turnover">Minimum Turnover</label>
                    <div class="col-md-9">
                        <input id="minimum_turnover" type="text" name="minimum_turnover" value="{minimum_turnover}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="maximum_turnover">Maximum Turnover</label>
                    <div class="col-md-9">
                        <input id="maximum_turnover" type="text" name="maximum_turnover" value="{maximum_turnover}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="amount">Amount</label>
                    <div class="col-md-9">
                        <input id="amount" type="text" name="amount" value="{amount}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
        """
        return fields_html

    def get_new_rate_table_type_fields_vehicle(self, *args, **kwargs):
        description = ''
        insured_amount = 0.00
        uninsured_amount = 0.00
        third_party_amount = 0.00
        selectbox_vehicle_category = self.get_vehicle_category_list()

        fields_html =f"""
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="asset_vehicle_category_id">Vehicle Category</label>
                    <div class="col-md-9">
                        {selectbox_vehicle_category}
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="description">Description</label>
                    <div class="col-md-9">
                        <input id="description" type="text" name="description" value="{description}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="insured_amount">Insured Amount</label>
                    <div class="col-md-9">
                        <input id="insured_amount" type="text" name="insured_amount" value="{insured_amount}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="uninsured_amount">Uninsured Amount</label>
                    <div class="col-md-9">
                        <input id="uninsured_amount" type="text" name="uninsured_amount" value="{uninsured_amount}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="third_party_amount">Third Party Amount</label>
                    <div class="col-md-9">
                        <input id="third_party_amount" type="text" name="third_party_amount" value="{third_party_amount}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
        """
        return fields_html

    @expose()
    def get_modal_edit_rate_table_line_item(self, *args, **kwargs):
        rate_table_line_item_id = kwargs.get('rate_table_line_item_id', None)
        rate_table_id = kwargs.get('rate_table_id', None)
        rate_table = RateTable.by_id(rate_table_id)
        rate_table_benefit_link = DBSession.query(RateTableAssetTypeLink).\
            filter(RateTableAssetTypeLink.rate_table_id==rate_table.id).\
            filter(RateTableAssetTypeLink.active==True).\
            first()
        if not rate_table.is_life and not rate_table_benefit_link:
            return ''

        html = f"""
            <div class="modal fade" id="dialog_edit_rate_table_line" tabindex="-1" role="dialog" aria-labelledby="myrate_tableLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-12">
                                <h4 class="card-title">Edit</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_edit_rate_table_line_item'>
                                <div style='display: none' class="col-md-6">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="tbl_rate_table_line_item_id">ID</label>
                                        <div class="col-md-9">
                                            <input id="id" type="text" name="rate_table_line_item_id" value="{rate_table_line_item_id}" class="form-control" required='true'>
                                            <input id="id" type="text" name="rate_table_id" value="{rate_table_id}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
        """
        html += self.get_edit_rate_table_type_fields(*args, **kwargs)
        html +="""
                     </form>
                        </div>
                            <div class="modal-footer">
                                <button id='save_edit_rate_table_line_item' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary rate_table_line_item_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        """
        javascript = """
            <script>
                setFormValidation('#form_edit_rate_table_line_item');
                $('#save_edit_rate_table_line_item').click(function(){
                    var valid = FormIsValid("#form_edit_rate_table_line_item");
                    if(valid){
                    var formserial = $('#form_edit_rate_table_line_item').serialize();

                    $.post('/setup/save_edit_rate_table_line_item?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect(result.redirect, {'rate_table_id' : result.rate_table_id});
                        };
                        return false;
                    });
                    }
            });
            $('.rate_table_line_item_back').click(function(){
                $('#dialog_edit_rate_table_line').modal('hide');
                });
            $('#dialog_edit_rate_table_line').modal();
            </script>
        """
        return html + javascript

    def get_edit_rate_table_type_fields(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate_table = RateTable.by_id(rate_table_id)
        rate_table_benefit_link = DBSession.query(RateTableAssetTypeLink).\
            filter(RateTableAssetTypeLink.rate_table_id==rate_table.id).\
            filter(RateTableAssetTypeLink.active==True).\
            first()

        employee_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'employee')
        business_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'business')
        property_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'property')
        vehicle_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'vehicle')

        fields_html = ''
        if rate_table.is_life:
            fields_html = self.get_edit_rate_table_type_fields_life(self, *args, **kwargs)

        elif rate_table_benefit_link.benefit_asset_type_id == employee_type_id:
            fields_html = self.get_edit_rate_table_type_fields_employee(self, *args, **kwargs)

        elif rate_table_benefit_link.benefit_asset_type_id == business_type_id \
            or rate_table_benefit_link.benefit_asset_type_id == property_type_id:
            fields_html = self.get_edit_rate_table_type_fields_turnover(self, *args, **kwargs)

        elif rate_table_benefit_link.benefit_asset_type_id == vehicle_type_id:
            fields_html = self.get_edit_rate_table_type_fields_vehicle(self, *args, **kwargs)
        return fields_html

    def get_edit_rate_table_type_fields_life(self, *args, **kwargs):
        rate_table_line_item_id = kwargs.get('rate_table_line_item_id', None)
        item = DBSession.query(RateTableLineItemLife). \
            filter(RateTableLineItemLife.id == rate_table_line_item_id). \
            first()
        if not item: return ''

        dropdown_gender = COMMON.get_selectbox_gender_type(item.gender_type_id)
        checked = 'checked' if item.active else ''
        fields_html =f"""
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="gender_type_id">Gender</label>
                    <div class="col-md-9">
                        {dropdown_gender}
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="maximum_age">Maximum Age</label>
                    <div class="col-md-9">
                        <input id="maximum_age" type="text" name="maximum_age" value="{item.maximum_age}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="minimum_age">Minimum Age</label>
                    <div class="col-md-9">
                        <input id="minimum_age" type="text" name="minimum_age" value="{item.minimum_age}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="rate_factor">Rate Factor</label>
                    <div class="col-md-9">
                        <input id="rate_factor" type="text" name="rate_factor" value="{item.rate_factor}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-3 col-form-label" for="active" required>Active</label>
                    <div class="col-9">
                        <div class="form-check">
                            <label class="form-check-label">
                                <input class="form-check-input" type="checkbox" name="active" id="active"{checked}/>
                                <span class="form-check-sign"></span>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        """
        return fields_html

    def get_edit_rate_table_type_fields_employee(self, *args, **kwargs):
        rate_table_line_item_id = kwargs.get('rate_table_line_item_id', None)
        item = DBSession.query(RateTableLineItemEmployee). \
            filter(RateTableLineItemEmployee.id == rate_table_line_item_id). \
            first()
        if not item: return ''

        checked = 'checked' if item.active else ''
        fields_html =f"""
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="maximum_employees_coverable">Minimum Number of Employees</label>
                    <div class="col-md-9">
                        <input id="minimum_employees_coverable" type="text" name="minimum_employees_coverable" value="{item.minimum_employees_coverable}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="minimum_employees_coverable">Maximum Number of Employees</label>
                    <div class="col-md-9">
                        <input id="maximum_employees_coverable" type="text" name="maximum_employees_coverable" value="{item.maximum_employees_coverable}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="amount">Amount</label>
                    <div class="col-md-9">
                        <input id="amount" type="text" name="amount" value="{item.amount}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-3 col-form-label" for="active" required>Active</label>
                    <div class="col-9">
                        <div class="form-check">
                            <label class="form-check-label">
                                <input class="form-check-input" type="checkbox" name="active" id="active"{checked}/>
                                <span class="form-check-sign"></span>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        """
        return fields_html

    def get_edit_rate_table_type_fields_turnover(self, *args, **kwargs):
        rate_table_line_item_id = kwargs.get('rate_table_line_item_id', None)
        item = DBSession.query(RateTableLineItemTurnover). \
            filter(RateTableLineItemTurnover.id == rate_table_line_item_id). \
            first()
        if not item: return ''

        checked = 'checked' if item.active else ''
        fields_html =f"""
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="minimum_turnover">Minimum Turnover</label>
                    <div class="col-md-9">
                        <input id="minimum_turnover" type="text" name="minimum_turnover" value="{item.minimum_turnover}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="maximum_turnover">Maximum Turnover</label>
                    <div class="col-md-9">
                        <input id="maximum_turnover" type="text" name="maximum_turnover" value="{item.maximum_turnover}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="amount">Amount</label>
                    <div class="col-md-9">
                        <input id="amount" type="text" name="amount" value="{item.amount}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-3 col-form-label" for="active" required>Active</label>
                    <div class="col-9">
                        <div class="form-check">
                            <label class="form-check-label">
                                <input class="form-check-input" type="checkbox" name="active" id="active"{checked}/>
                                <span class="form-check-sign"></span>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        """
        return fields_html

    def get_edit_rate_table_type_fields_vehicle(self, *args, **kwargs):
        rate_table_line_item_id = kwargs.get('rate_table_line_item_id', None)
        item = DBSession.query(RateTableLineItemVehicle). \
            filter(RateTableLineItemVehicle.id == rate_table_line_item_id). \
            first()
        if not item: return ''
        selectbox_vehicle_category = self.get_vehicle_category_list(**{'selected': item.asset_vehicle_category_id, })
        checked = 'checked' if item.active else ''

        fields_html =f"""
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="asset_vehicle_category_id">Vehicle Category</label>
                    <div class="col-md-9">
                        {selectbox_vehicle_category}
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="description">Description</label>
                    <div class="col-md-9">
                        <input id="description" type="text" name="description" value="{item.description}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="insured_amount">Insured Amount</label>
                    <div class="col-md-9">
                        <input id="insured_amount" type="text" name="insured_amount" value="{item.insured_amount}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="uninsured_amount">Uninsured Amount</label>
                    <div class="col-md-9">
                        <input id="uninsured_amount" type="text" name="uninsured_amount" value="{item.uninsured_amount}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-md-3 col-form-label" required for="third_party_amount">Third Party Amount</label>
                    <div class="col-md-9">
                        <input id="third_party_amount" type="text" name="third_party_amount" value="{item.third_party_amount}" class="form-control" required='true'>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="col-3 col-form-label" for="active" required>Active</label>
                    <div class="col-9">
                        <div class="form-check">
                            <label class="form-check-label">
                                <input class="form-check-input" type="checkbox" name="active" id="active"{checked}/>
                                <span class="form-check-sign"></span>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        """
        return fields_html

    def get_vehicle_category_list(self, selected=None, *args, **kwargs):
        kwargs['id'] = 'asset_vehicle_category_id'
        kwargs['selected'] = selected
        kwargs['case_sensitive'] = True
        dbase_query = DBSession.query(AssetVehicleCategory).filter(AssetVehicleCategory.active == True).order_by(asc(AssetVehicleCategory.name)).all()
        kwargs['outputlist'] = [{'id': x.id, 'name': x.name} for x in dbase_query]
        return create_selectbox_html(**kwargs)

    @expose()
    def get_rate_table_line_item_by_id(self, *args, **kwargs):
        rate_table_line_item_id = kwargs.get('rate_table_line_item_id', None)
        rate_table_id = kwargs.get('rate_table_id', None)
        rate_table = RateTable.by_id(rate_table_id)
        if rate_table.is_life:
            dbase_query =  DBSession.query(BenefitRateTableLineItem). \
                filter(BenefitRateTableLineItem.id == rate_table_line_item_id). \
                first()
        else:
            rate_table_benefit_link = DBSession.query(RateTableAssetTypeLink).\
                filter(RateTableAssetTypeLink.rate_table_id==item.id).\
                filter(RateTableAssetTypeLink.active==True).\
                first()

            employee_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'employee')
            business_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'business')
            property_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'property')
            vehicle_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'vehicle')

            fields_html = ''
            if rate_table.is_life:
                dbase_query = DBSession.query(RateTableLineItemLife). \
                    filter(RateTableLineItemLife.id == rate_table_line_item_id). \
                    first()

            elif rate_table_benefit_link.benefit_asset_type_id == employee_type_id:
                dbase_query = DBSession.query(RateTableLineItemEmployee). \
                    filter(RateTableLineItemEmployee.id == rate_table_line_item_id). \
                    first()

            elif rate_table_benefit_link.benefit_asset_type_id == business_type_id \
                or rate_table_benefit_link.benefit_asset_type_id == property_type_id:
                dbase_query = DBSession.query(RateTableLineItemTurnover). \
                    filter(RateTableLineItemTurnover.id == rate_table_line_item_id). \
                    first()

            elif rate_table_benefit_link.benefit_asset_type_id == vehicle_type_id:
                dbase_query = DBSession.query(RateTableLineItemVehicle). \
                    filter(RateTableLineItemVehicle.id == rate_table_line_item_id). \
                    first()

        return dbase_query

    @expose()
    def save_new_rate_table_line_item(self, *args, **kwargs):
        rate_table_id = kwargs.get('rate_table_id', None)
        rate_table = RateTable.by_id(rate_table_id)
        rate_table_benefit_link = DBSession.query(RateTableAssetTypeLink).\
            filter(RateTableAssetTypeLink.rate_table_id==rate_table.id).\
            filter(RateTableAssetTypeLink.active==True).\
            first()

        employee_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'employee')
        business_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'business')
        property_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'property')
        vehicle_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'vehicle')

        if rate_table.is_life:
            this_id = self.save_new_rate_table_line_item_life(**kwargs)

        elif rate_table_benefit_link.benefit_asset_type_id == employee_type_id:
            this_id = self.save_new_rate_table_line_item_employee(**kwargs)

        elif rate_table_benefit_link.benefit_asset_type_id == business_type_id \
            or rate_table_benefit_link.benefit_asset_type_id == property_type_id:
            this_id = self.save_new_rate_table_line_item_turnover(**kwargs)

        elif rate_table_benefit_link.benefit_asset_type_id == vehicle_type_id:
            this_id = self.save_new_rate_table_line_item_vehicle(**kwargs)

        rate_table_id = kwargs.get("rate_table_id")
        redirect_url = '/setup/get_rate_table_edit'

        return json.dumps(
            {'success': True, 'rate_table_id': rate_table_id, 'redirect': redirect_url})

    @expose()
    def save_edit_rate_table_line_item(self, *args, **kwargs):
        rate_table_line_item_id = kwargs.get('rate_table_line_item_id', None)
        rate_table_id = kwargs.get('rate_table_id', None)
        rate_table = RateTable.by_id(rate_table_id)
        rate_table_benefit_link = DBSession.query(RateTableAssetTypeLink).\
            filter(RateTableAssetTypeLink.rate_table_id==item.id).\
            filter(RateTableAssetTypeLink.active==True).\
            first()

        employee_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'employee')
        business_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'business')
        property_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'property')
        vehicle_type_id = TYPEUTIL.get_id_of_name('benefit_asset_type', 'vehicle')

        fields_html = ''
        if rate_table.is_life:
            if not self.save_new_rate_table_line_item_life(**kwargs):
                return json.dumps({'success': False})

        elif rate_table_benefit_link.benefit_asset_type_id == employee_type_id:
            if not self.save_new_rate_table_line_item_employee(**kwargs):
                return json.dumps({'success': False})

        elif rate_table_benefit_link.benefit_asset_type_id == business_type_id \
            or rate_table_benefit_link.benefit_asset_type_id == property_type_id:
            if not self.save_new_rate_table_line_item_turnover(**kwargs):
                return json.dumps({'success': False})

        elif rate_table_benefit_link.benefit_asset_type_id == vehicle_type_id:
            if not self.save_new_rate_table_line_item_vehicle(**kwargs):
                return json.dumps({'success': False})

        redirect_url = '/setup/get_rate_table_edit'
        return json.dumps(
            {'success': True, 'rate_table_id': rate_table_id, 'redirect': redirect_url})

    def save_edit_rate_table_line_item_life(self, *args, **kwargs):
        rate_table_line_item_id = kwargs.get('rate_table_line_item_id', None)
        this = DBSession.query(RateTableLineItemLife). \
            filter(RateTableLineItemLife.id == rate_table_line_item_id). \
            first()
        if not this: return False

        this.gender_type_id = kwargs.get('gender_type_id', None)
        this.maximum_age = kwargs.get('maximum_age', None)
        this.minimum_age = kwargs.get('minimum_age', None)
        this.rate_factor = kwargs.get('rate_factor', None)
        if not kwargs.get('active', None): this.active = False
        DBSession.flush()
        return True

    def save_edit_rate_table_line_item_employee(self, *args, **kwargs):
        this = DBSession.query(RateTableLineItemEmployee). \
            filter(RateTableLineItemEmployee.id == rate_table_line_item_id). \
            first()
        if not this: return False

        this.minimum_employees_coverable = kwargs.get('minimum_employees_coverable', None)
        this.minimumaximum_employees_coverable_age = kwargs.get('maximum_employees_coverable', None)
        this.amount = kwargs.get('amount', None)
        if not kwargs.get('active', None): this.active = False
        DBSession.flush()
        return True

    def save_edit_rate_table_line_item_turnover(self, *args, **kwargs):
        this = DBSession.query(RateTableLineItemTurnover). \
            filter(RateTableLineItemTurnover.id == rate_table_line_item_id). \
            first()
        if not this: return False

        this.minimum_turnover = kwargs.get('minimum_turnover', None)
        this.maximum_turnover = kwargs.get('maximum_turnover', None)
        this.amount = kwargs.get('amount', None)
        if not kwargs.get('active', None): this.active = False
        DBSession.flush()
        return True

    def save_edit_rate_table_line_item_vehicle(self, *args, **kwargs):
        this = DBSession.query(RateTableLineItemVehicle). \
            filter(RateTableLineItemVehicle.id == rate_table_line_item_id). \
            first()
        if not this: return False

        this.description = kwargs.get('description', None)
        this.insured_amount = kwargs.get('insured_amount', None)
        this.uninsured_amount = kwargs.get('uninsured_amount', None)
        this.third_party_amount = kwargs.get('third_party_amount', None)
        if not kwargs.get('active', None): this.active = False
        DBSession.flush()
        return True

    def save_new_rate_table_line_item_life(self, *args, **kwargs):
        usernow = request.identity.get('user', None)

        this = RateTableLineItemLife()
        this.rate_table_id = kwargs.get('rate_table_id', None)
        this.gender_type_id = kwargs.get('gender_type_id', None)
        this.maximum_age = kwargs.get('maximum_age', None)
        this.minimum_age = kwargs.get('minimum_age', None)
        this.rate_factor = kwargs.get('rate_factor', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return this.id

    def save_new_rate_table_line_item_employee(self, *args, **kwargs):
        usernow = request.identity.get('user', None)

        this = RateTableLineItemEmployee()
        this.rate_table_id = kwargs.get('rate_table_id', None)
        this.minimum_employees_coverable = kwargs.get('minimum_employees_coverable', None)
        this.minimumaximum_employees_coverable_age = kwargs.get('maximum_employees_coverable', None)
        this.amount = kwargs.get('amount', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return this.id

    def save_new_rate_table_line_item_turnover(self, *args, **kwargs):
        usernow = request.identity.get('user', None)

        this = RateTableLineItemTurnover()
        this.rate_table_id = kwargs.get('rate_table_id', None)
        this.minimum_turnover = kwargs.get('minimum_turnover', None)
        this.maximum_turnover = kwargs.get('maximum_turnover', None)
        this.amount = kwargs.get('amount', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return this.id

    def save_new_rate_table_line_item_vehicle(self, *args, **kwargs):
        usernow = request.identity.get('user', None)

        this = RateTableLineItemVehicle()
        this.rate_table_id = kwargs.get('rate_table_id', None)
        this.asset_vehicle_category_id = kwargs.get('asset_vehicle_category_id', None)
        this.description = kwargs.get('description', None)
        this.insured_amount = kwargs.get('insured_amount', None)
        this.uninsured_amount = kwargs.get('uninsured_amount', None)
        this.third_party_amount = kwargs.get('third_party_amount', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return this.id

    @expose()
    def get_rate_table_by_id(self, *args, **kwargs):
        return DBSession.query(BenefitRateTable). \
            filter(BenefitRateTable.id == kwargs.get('rate_table_id', None)). \
            first()

###############################################################################
# Cover Exclusion
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def cover_exclusions(self, *args, **kwargs):
        html = self.get_active_cover_exclusions_html(*args, **kwargs)
        javascript = self.get_javascript_cover_exclusions_onload()
        title = _("Cover & Exclusions")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_cover_exclusions_html(self, *args, **kwargs):
        detailtable = self.get_cover_and_exclusion_html(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('Cover & Exclusions')}</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_cover_exclusion" class="btn btn-primary ml-auto">Create New Cover/Exclusion</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        {detailtable}
                    </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_javascript_cover_exclusions_onload(self, *args, **kwargs):
        javascript = """
            $("#create_new_cover_exclusion").click(function(){
                $('#dialogdiv').load('/setup/get_modal_new_cover_exclusion?', function(data){
                    return false;
                });
            });
            $(".cover_exclusion_edit").click(function(){
                var kwargs = 'cover_and_exclusion_id='+$(this).attr('cover_and_exclusion_id');
                $('#dialogdiv').load('/setup/get_modal_edit_cover_exclusion?'+kwargs, function(data){
                    return false;
                });
            });
            checkboxCheckOptions('.product_benefit_exclusion', 'cover_and_exclusion_id', '/setup/save_new_product_benefit_exclusion_link?', '/setup/save_delete_product_benefit_exclusion_link?');
            checkboxCheckOptions('.benefit_cover', 'cover_and_exclusion_id', '/setup/save_new_benefit_cover_link?', '/setup/save_delete_benefit_cover_link?');
            checkboxCheckOptions('.cover', 'cover_and_exclusion_id', '/setup/save_new_cover_link?', '/setup/save_delete_cover_link?');
        """
        return javascript

    @expose()
    def get_cover_and_exclusion_html(self, *args, **kwargs):

        dbase_query = DBSession.query(CoverAndExclusion).\
            filter(CoverAndExclusion.active==True).\
            order_by(CoverAndExclusion.code).\
            all()
        outputlist = []
        for item in dbase_query:
            cover_link = DBSession.query(BenefitCoverLink).\
                filter(BenefitCoverLink.cover_and_exclusion_id==item.id).\
                first()
            exclusion_link = DBSession.query(BenefitExclusionLink).\
                filter(BenefitExclusionLink.cover_and_exclusion_id==item.id).\
                first()

            checked_benefit_cover = ''
            checked_benefit_exclusion = ''
            if cover_link: checked_benefit_cover = "checked"
            if exclusion_link: checked_benefit_exclusion = "checked"

            outputlist.append({
                'code': f"<div class='edit cover_exclusion_edit' cover_and_exclusion_id='{item.id}'>{item.code}</div>",
                'description': f"{item.description}",
                'cover': f"""<input class="form-check-input cover" cover_and_exclusion_id='{item.id}' name="is_benefit_cover" id="is_benefit_cover" type="checkbox" {checked_benefit_cover}>""",
                'exclusion': f"""<input class="form-check-input product_benefit_exclusion" cover_and_exclusion_id='{item.id}' name="is_benefit_exclusion" id="is_benefit_exclusion" type="checkbox" {checked_benefit_exclusion}>""",
            })
        theadlist = [
            'Code',
            'Description',
            'Benefit Cover',
            'Benefit Exclusion'
        ]
        dbcolumnlist = [
            'code',
            'description',
            'cover',
            'exclusion'
        ]
        tdclasslist = [
            'action_link',
            '',
            'text-center',
            'text-center',
        ]
        return build_html_table(outputlist, dbcolumnlist, theadlist, "entity_table", tdclasslist)

    @expose()
    def get_modal_new_cover_exclusion(self, *args, **kwargs):
        html = f"""
            <div class="modal fade" id="dialog_new_cover_exclusion" tabindex="-1" role="dialog" aria-labelledby="mycover_exclusionLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">New Cover/Exclusion</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_cover_exclusion'>
                                <div class="col-md-12">
    					            <div class="form-group row">
    						            <label class="col-md-3 col-form-label" required for="code">Code</label>
    						            <div class="col-md-9">
    							            <input id="code" type="text" name="code" class="form-control" required='true'>
    						            </div>
    					            </div>
    				            </div>
                                <div class="col-md-12">
    					            <div class="form-group row">
    						            <label class="col-md-3 col-form-label" required for="description">Description</label>
    						            <div class="col-md-9">
    							            <input id="description" type="text" name="description" class="form-control" required='true'>
    						            </div>
    					            </div>
    				            </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_cover_exclusion' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary cover_exclusion_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        """
        javascript = """
            <script>
                setFormValidation('#form_new_cover_exclusion');
                $('#save_new_cover_exclusion').click(function(){
                    var valid = FormIsValid("#form_new_cover_exclusion");
                    if(valid){
                        var formserial = getFormData('#form_new_cover_exclusion');
                        var data = {data : JSON.stringify(formserial)};

                        $.post('/setup/save_new_cover_exclusion?', data, function(data){
                            var result = JSON.parse(data);
                            if(result.success === true){
                                $.redirect('/setup/cover_exclusions');
                            };
                            showNotification(result.status, result.data);
                            return false;
                        });
                    }
                });
                $('.cover_exclusion_back').click(function(){
                    $('#dialog_new_cover_exclusion').modal('hide');
                });
                $('#dialog_new_cover_exclusion').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def get_modal_edit_cover_exclusion(self, *args, **kwargs):
        cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        if not cover_and_exclusion_id: return ''

        this = CoverAndExclusion.by_id(cover_and_exclusion_id)
        if not this: return ''

        checked = 'checked' if this.active else ''
        html = f"""
            <div class="modal fade" id="dialog_edit_cover_exclusion" tabindex="-1" role="dialog" aria-labelledby="mycover_exclusionLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">Edit Cover/Exclusion</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_edit_cover_exclusion'>
                                <div style='display: none' class="col-md-6">
                					<div class="form-group row">
    						            <label class="col-md-3 col-form-label" required for="cover_and_exclusion_id">ID</label>
    						            <div class="col-md-9">
    							            <input id="id" type="text" name="cover_and_exclusion_id" value="{this.id}" class="form-control" required='true'>
    						            </div>
    					            </div>
    				            </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="code">Code</label>
                                        <div class="col-md-9">
                                            <input id="code" type="text" name="code" value="{this.code}" class="form-control" required='true' disabled='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="description">Description</label>
                                        <div class="col-md-9">
                                            <input id="description" type="text" name="description" value="{this.description}" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-3 col-form-label" for="active" required>Active</label>
                                        <div class="col-9">
                                            <div class="form-check">
                                                <label class="form-check-label">
                                                    <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                    <span class="form-check-sign"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_edit_cover_exclusion' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary cover_exclusion_back" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        """
        javascript = """
            <script>
                setFormValidation('#form_edit_cover_exclusion');
                $('#save_edit_cover_exclusion').click(function(){
                    var valid = FormIsValid("#form_edit_cover_exclusion");
                    if(valid){
                        var formserial = getFormData('#form_edit_cover_exclusion');
                        var data = {data : JSON.stringify(formserial)};

                        $.post('/setup/save_edit_cover_exclusion?', data, function(data){
                            var result = JSON.parse(data);
                            if(result.success === true){
                                $.redirect('/setup/cover_exclusions');
                            };
                            showNotification(result.status, result.data);
                            return false;
                        });
                    }
                });
                $('.cover_exclusion_back').click(function(){
                    $('#dialog_edit_cover_exclusion').modal('hide');
                });
                $('#dialog_edit_cover_exclusion').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def save_new_cover_exclusion(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data:
            return json.dumps({'success': False, 'data': 'No data provided', 'status': 'danger'})
        usernow = request.identity.get('user', None)
        code = data.get('code', None)
        exists = DBSession.query(CoverAndExclusion).\
            filter(CoverAndExclusion.code==code).\
            filter(CoverAndExclusion.active==True).\
            first()
        if exists: return json.dumps({'success': False, 'data': 'Cover/Exclusion with this code already exists', 'status': 'danger'})

        this = CoverAndExclusion()
        this.code = code
        this.description = data.get('description', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def save_edit_cover_exclusion(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success': False, 'data': 'No data provided', 'status': 'danger'})
        usernow = request.identity.get('user', None)
        cover_and_exclusion_id = data.get('cover_and_exclusion_id', None)
        description = data.get('description', 'Unknown Description')
        if not cover_and_exclusion_id: return json.dumps({'success': False, 'data': 'No cover_and_exclusion_id provided', 'status': 'danger'})

        this = CoverAndExclusion.by_id(cover_and_exclusion_id)
        if not this: return json.dumps({'success': False, 'data': 'No cover_exclusion found for id provided', 'status': 'danger'})

        this.description = description
        if not data.get('active', None): this.active = False
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def save_delete_cover_link(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = DBSession.query(BenefitCoverLink). \
            filter(BenefitCoverLink.cover_and_exclusion_id == kwargs.get('cover_and_exclusion_id', None)). \
            first()
        DBSession.delete(this)
        DBSession.flush()
        return 'true'

    @expose()
    def save_new_cover_link(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = BenefitCoverLink()
        this.cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return 'true'

    @expose()
    def save_delete_benefit_cover_link(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = DBSession.query(BenefitCoverLink). \
            filter(BenefitCoverLink.cover_and_exclusion_id == kwargs.get(
            'cover_and_exclusion_id', None)). \
            first()
        DBSession.delete(this)
        DBSession.flush()
        return 'true'

    @expose()
    def save_new_benefit_cover_link(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = BenefitCoverLink()
        this.cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return 'true'

    @expose()
    def save_new_product_benefit_exclusion_link(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = BenefitExclusionLink()
        this.cover_and_exclusion_id = kwargs.get('cover_and_exclusion_id', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return 'true'

    @expose()
    def save_delete_product_benefit_exclusion_link(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        this = DBSession.query(BenefitExclusionLink). \
            filter(BenefitExclusionLink.cover_and_exclusion_id == kwargs.get(
            'cover_and_exclusion_id', None)). \
            first()
        DBSession.delete(this)
        DBSession.flush()
        return 'true'

#######################################################################
# Mail Merge
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def mail_merge(self, *args, **kwargs):
        html = self.get_active_mail_merge_html(*args, **kwargs)
        javascript = self.get_javascript_mail_merge_onload()
        title = _("Mail Merge")
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_javascript_mail_merge_onload(self, *args, **kwargs):
        javascript = """
        $("#create_new_mail_merge").click(function(){
            $('#dialogdiv').load('/setup/get_modal_new_mail_merge?', function(data){
                return false;
            });
        });
        exportFile('#download_mail_merge', '/setup/download_mail_merge', focus=true);
        $(".mail_merge_edit").click(function(){
            var kwargs = 'mail_merge_id='+$(this).attr('mail_merge_id');
            $('#dialogdiv').load('/setup/get_modal_edit_mail_merge?', kwargs, function(data){
                return false;
            });
        });
        """
        return javascript

    @expose()
    def download_mail_merge(self, *args, **kwargs):
        datenow = datetime.date(datetime.now())
        pdf_file_name = f"Mail Merge {datenow}.pdf"
        output_pdf_filepath = os.path.join(PDF_DIRNAME, pdf_file_name)
        pdffile = PDFCreator(**{'filename': output_pdf_filepath})
        headers = [
            'Code',
            'Name'
        ]
        headerwidths = [
            200,
            200,
        ]
        outputlist = []
        dbase_query = MailMerge.get_all('code')
        for item in dbase_query:
            outputlist.append((
                Paragraph(checknullvalue(item.code), pdffile.styleNormal),
                Paragraph(checknullvalue(item.name), pdffile.styleNormal),
            ))
        userdata = {
            'header': 'Mail Merge',
            'right1_header': 'Date Printed', 'right1_content': str(datenow),
        }
        pdffile.CreatePDF_Table_Portrait(userdata, outputlist, headers, headerwidths)
        response.headers["Content-Type"] = 'application/pdf'
        response.headers["Content-Disposition"] = 'attachment; filename="' + pdf_file_name + '"'
        filecontent = FileApp(output_pdf_filepath)
        return use_wsgi_app(filecontent)

    @expose()
    def get_active_mail_merge_html(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        dbase_query = self.get_active_mail_merge_list(*args, **kwargs)
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'code': "<div class='edit mail_merge_edit' mail_merge_id='{1}'>{0}</div>".format(item.code, item.id),
                'name': item.name,
            })
        dbcolumnlist = [
            'code',
            'name',
        ]
        theadlist = [
            'Code',
            'Name',
        ]
        tdclasslist = [
            'action_link',
            'text-right',
        ]

        mail_mergetable = build_html_table(outputlist, dbcolumnlist, theadlist, "mail_merge_table", tdclasslist)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{_('Mail Merge')}</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="download_mail_merge" class="btn btn-secondary ml-auto">Download Mail Merge</button>
                            <button id="create_new_mail_merge" class="btn btn-primary ml-auto">Create New Mail Merge</button>
                        </div>
                    </div>

                    <hr>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        {mail_mergetable}
                    </div>
                </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_modal_new_mail_merge(self, *args, **kwargs):
        html = f"""
            <div class="modal fade" id="dialog_new_mail_merge" tabindex="-1" role="dialog" aria-labelledby="mytbl_mail_mergeLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('New Mail Merge')}</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_mail_merge'>
                                    <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-3 col-form-label" required for="code">{_('Code')}</label>
    						<div class="col-md-9">
    							<input id="code" type="text" name="code" class="form-control" required='true'>
    						</div>
    					</div>
    				</div>
                                    <div class="col-md-12">
    					<div class="form-group row">
    						<label class="col-md-3 col-form-label" required for="name">{_('Name')}</label>
    						<div class="col-md-9">
    							<input id="name" type="text" name="name" class="form-control" required='true'>
    						</div>
    					</div>
    				</div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_mail_merge' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary mail_merge_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script>
            setFormValidation('#form_new_mail_merge');
            $('#save_new_mail_merge').click(function(){
                 var valid = FormIsValid("#form_new_mail_merge");
                 if(valid){

                   var formserial = $('#form_new_mail_merge').serialize();
                    $.post('/setup/save_new_mail_merge?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                           location.reload();
                        };
                        showNotification(result.status, result.data);
                        return false;
                    });
                 }
            });
            $('.mail_merge_back').click(function(){
                $('#dialog_new_mail_merge').modal('hide');
            });
            $('#dialog_new_mail_merge').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def get_modal_edit_mail_merge(self, *args, **kwargs):
        mail_merge_id = kwargs.get('mail_merge_id', None)
        if not mail_merge_id: return ''
        this = self.get_mail_merge_by_id(*args, **kwargs)
        if not this: return ''
        checked = 'checked' if this.active else ''
        html = f"""
        <div class="modal fade" id="dialog_edit_mail_merge" tabindex="-1" role="dialog" aria-labelledby="mytbl_mail_mergeLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">{_('Edit Mail Merge')}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_edit_mail_merge'>
                            <div style='display: none' class="col-md-12">
					<div class="form-group row">
						<label class="col-md-3 col-form-label" required for="mail_merge_id">ID</label>
						<div class="col-md-9">
							<input id="id" type="text" name="mail_merge_id" value="{this.id}" class="form-control" required='true'>
						</div>
					</div>
				</div>
                            <div class="col-md-12">
					<div class="form-group row">
						<label class="col-md-3 col-form-label" required for="code">Code</label>
						<div class="col-md-9">
							<input id="code" type="text" name="code" value="{this.code}" class="form-control" required='true' disabled='true'>
						</div>
					</div>
				</div>
                            <div class="col-md-12">
					<div class="form-group row">
						<label class="col-md-3 col-form-label" required for="name">Name</label>
						<div class="col-md-9">
							<input id="name" type="text" name="name" value="{this.name}" class="form-control" required='true'>
						</div>
					</div>
				</div>
                    <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-3 col-form-label" for="active" required>Active</label>
                                    <div class="col-9">
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                <span class="form-check-sign"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_edit_mail_merge' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary mail_merge_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
        setFormValidation('#form_edit_mail_merge');
        $('#save_edit_mail_merge').click(function(){
             var valid = FormIsValid("#form_edit_mail_merge");
             if(valid){
                var formserial = getFormData('#form_edit_mail_merge');
                var data = {data : JSON.stringify(formserial)};

                $.post('/setup/save_edit_mail_merge?', data, function(data){
                    var result = JSON.parse(data);
                    if(result.success === true){

                          $.redirect('/setup/mail_merge', data);
                    };
                    return false;
                });
             }
        });
        $('.mail_merge_back').click(function(){
            $('#dialog_edit_mail_merge').modal('hide');
        });
        $('#dialog_edit_mail_merge').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_new_mail_merge(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        if not kwargs:
            return json.dumps({'success': False, 'data': 'No parameters provided', 'status': 'danger'})
        merge_code = kwargs.get('code', None)
        exists=DBSession.query(MailMerge).\
            filter(MailMerge.code==merge_code).\
            filter(MailMerge.active==True).\
            first()
        if exists: return json.dumps({'success': False, 'data': 'Code already exists', 'status': 'danger'})

        this = MailMerge()
        this.code = merge_code
        this.name = kwargs.get('name', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id, 'status': 'success'})

    @expose()
    def get_mail_merge_by_id(self, *args, **kwargs):
        return DBSession.query(MailMerge). \
            filter(MailMerge.id == kwargs.get('mail_merge_id', None)). \
            first()

    @expose()
    def get_active_mail_merge_list(self, *args, **kwargs):
        searchphrase = kwargs.get('searchphrase', None)

        code = kwargs.get('code', None)
        name = kwargs.get('name', None)

        # if code:
        # searchphrase = "%" + kwargs['code'] + "%"
        dbase_query = DBSession.query(MailMerge). \
            filter(MailMerge.active == True). \
            order_by(asc(MailMerge.code)).limit(LIMIT)
        # dbase_query = DBSession.query(MailMerge). \
        #     filter(MailMerge.code.like(searchphrase)). \
        #     filter(MailMerge.active == True). \
        #     order_by(asc(MailMerge.code)).limit(LIMIT)
        # if name:
        #     searchphrase = "%" + kwargs['name'] + "%"
        #     dbase_query = DBSession.query(MailMerge). \
        #         filter(MailMerge.name.like(searchphrase)). \
        #         filter(MailMerge.active == True). \
        #         order_by(asc(MailMerge.name)).limit(LIMIT)
        # else:
        #     dbase_query = DBSession.query(MailMerge). \
        #         filter(MailMerge.active == True). \
        #         order_by(asc(MailMerge.id)). \
        #         limit(LIMIT)
        return dbase_query

    @expose()
    def save_edit_mail_merge(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success': False, 'data': 'No data provided'})
        usernow = request.identity.get('user', None)
        this = self.get_mail_merge_by_id(**data)
        if not this: return json.dumps({'success': False, 'data': 'No text merge found for id provided'})
        # this.code = data.get('code', None)
        this.name = data.get('name', None)
        if not data.get('active', None): this.active = False
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

#######################################################################
# Disclosure
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def intermediary_disclosure(self, *args, **kwargs):
        html = self.get_active_intermediary_disclosure_html(*args, **kwargs)
        javascript = self.get_javascript_intermediary_disclosure_onload()
        title = "Disclosure"
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_intermediary_disclosure_html(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_INTERMEDIARYDISCLOSURE
        usernow = request.identity.get('user', {})
        searchphrase = COMMON.get_searchphrase(**kwargs)
        intermediary_disclosuretable = self.get_intermediary_disclosure_htmltbl(**kwargs)
        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Disclosure</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_intermediary_disclosure" class="btn btn-primary ml-auto">Create a New Disclosure</button>
                            </div>
                        </div>
                       <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                <input type="text" class="form-control search" name="searchphrase"  id='searchphrase'  value='{searchphrase}' placeholder="Search">
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary" id='action_search'>Search</button>
                                <button class="btn btn-primary" id='btn_reset'>Reset</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive" id='div_intermediary_disclosure'>
                            {intermediary_disclosuretable}
                        </div>
                    </div>
                    </div>
                </div>
            """
        javascript = """
           <script>
                 $("#create_new_intermediary_disclosure").click(function(){
                $('#dialogdiv').load('/setup/get_modal_new_intermediary_disclosure?', function(data){
                    return false;
                });
            });
                 $('#action_search').click(function(){
                    var kwargs = 'searchphrase='+$('#searchphrase').val();
                    $('#div_intermediary_disclosure').load('/setup/get_intermediary_disclosure_htmltbl', kwargs, function(data){
                        return false;
                    });
                })
                $('#btn_reset').click(function(){
                 $('#searchphrase').val('').focus();
                    $('#div_intermediary_disclosure').load('/setup/get_intermediary_disclosure_htmltbl', 'reset=true', function(data){
                        return false;
                    });
                })
                </script>
                """
        return html + javascript

    @expose()
    def get_intermediary_disclosure_htmltbl(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        dbase_query = self.get_active_intermediary_disclosure_list(*args, **kwargs)
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'text': "<div class='edit intermediary_disclosure_edit action_link' intermediary_disclosure_id='{1}'>{0}</div>".format(
                    item.text, item.id),
            })
        dbcolumnlist = [
            'text',
        ]
        theadlist = [
            'Text',
        ]
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "intermediary_disclosure_table")
        javascript = """
           <script>
              $(".intermediary_disclosure_edit").click(function(){
                  var kwargs = 'intermediary_disclosure_id='+$(this).attr('intermediary_disclosure_id');
                  $('#dialogdiv').load('/setup/get_modal_edit_intermediary_disclosure?', kwargs, function(data){
                      return false;
                  });
              });
            </script>
              """
        return html + javascript

    @expose()
    def get_javascript_intermediary_disclosure_onload(self, *args, **kwargs):
        javascript = """


            """
        return javascript

    @expose()
    def get_modal_new_intermediary_disclosure(self, *args, **kwargs):
        html = """
            <div class="modal fade" id="dialog_new_intermediary_disclosure" tabindex="-1" role="dialog" aria-labelledby="myintermediary_disclosureLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">New Disclosure</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_new_intermediary_disclosure'>
                           <div class="col-md-12">
    					        <div class="form-group row">
    						        <label class="col-md-4 col-form-label" required for="text">Text</label>
    						        <div class="col-md-8">
    						           <textarea required="true" name='text' type="text" class="form-control" rows="3" maxlength='1024'></textarea>
    						       </div>
    					</div>
    				</div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_new_intermediary_disclosure' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary intermediary_disclosure_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            """
        javascript = """
            <script>
            setFormValidation('#form_new_intermediary_disclosure');
            $('#save_new_intermediary_disclosure').click(function(){
                 var valid = FormIsValid("#form_new_intermediary_disclosure");
                 if(valid){
                    var formserial = getFormData('#form_new_intermediary_disclosure');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/setup/save_new_intermediary_disclosure?', data, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect('/setup/intermediary_disclosure');
                        };
                        return false;
                    });
                 }
            });
            $('.intermediary_disclosure_back').click(function(){
                $('#dialog_new_intermediary_disclosure').modal('hide');
            });
            $('#dialog_new_intermediary_disclosure').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def get_modal_edit_intermediary_disclosure(self, *args, **kwargs):
        intermediary_disclosure_id = kwargs.get('intermediary_disclosure_id', None)
        if not intermediary_disclosure_id: return ''
        this = self.get_intermediary_disclosure_by_id(*args, **kwargs)
        if not this: return ''
        checked = 'checked' if this.active else ''
        html = f"""
            <div class="modal fade" id="dialog_edit_intermediary_disclosure" tabindex="-1" role="dialog"
         aria-labelledby="myintermediary_disclosureLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="col-md-6">
                        <h4 class="card-title">Edit Disclosure</h4>
                    </div>
                </div>
                <div class="modal-body">
                    <form id='form_edit_intermediary_disclosure'>
                        <div style='display: none' class="col-md-6">
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label" required for="intermediary_disclosure_id">ID</label>
                                <div class="col-md-9">
                                    <input id="id" type="text" name="intermediary_disclosure_id" value="{this.id}"
                                           class="form-control" required='true'/>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group row">
                                <label class="col-md-4 col-form-label" required for="text"> Text</label>
                                <div class="col-md-8">
                                    <textarea required="true" name='text' type="text" class="form-control" rows="3" maxlength='1024'>{this.text}</textarea>
                                </div>
                            </div>
                        </div>
                       <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-4 col-form-label" for="active" required>Active</label>
                                    <div class="col-8">
                                        <div class="form-check">
                                            <label class="form-check-label">
                                                <input class="form-check-input" type="checkbox" name="active" id="active" {checked}/>
                                                <span class="form-check-sign"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button id='save_edit_intermediary_disclosure' class="btn btn-primary">Save</button>
                    <button class="btn btn-outline-primary intermediary_disclosure_back">Cancel</button>
                </div>
            </div>
        </div>
            </div>
        """
        javascript = """
            <script>
            setFormValidation('#form_edit_intermediary_disclosure');
            $('#save_edit_intermediary_disclosure').click(function(){
                 var valid = FormIsValid("#form_edit_intermediary_disclosure");
                 if(valid){
                    var formserial = getFormData('#form_edit_intermediary_disclosure');
                    var data = {data : JSON.stringify(formserial)};

                    $.post('/setup/save_edit_intermediary_disclosure?', data, function(data){
                        var result = JSON.parse(data);
                        if(result.success === true){
                            $.redirect('/setup/intermediary_disclosure');
                        };
                        return false;
                    });
                 }
            });
            $('.intermediary_disclosure_back').click(function(){
                $('#dialog_edit_intermediary_disclosure').modal('hide');
            });
            $('#dialog_edit_intermediary_disclosure').modal();
            </script>
         	"""
        return html + javascript

    @expose()
    def save_new_intermediary_disclosure(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success': False, 'data': 'No data provided'})
        usernow = request.identity.get('user', None)
        this = EntityOrganisationIntermediaryDisclosure()
        this.text = data.get('text', None)
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def save_edit_intermediary_disclosure(self, *args, **kwargs):
        data = json.loads(kwargs.get('data', json.dumps({})))
        if not data: return json.dumps({'success': False, 'data': 'No data provided'})
        usernow = request.identity.get('user', None)
        this = self.get_intermediary_disclosure_by_id(**data)
        if not this: return json.dumps(
            {'success': False, 'data': 'No intermediary_disclosure found for id provided'})
        this.text = data.get('text', None)
        if not data.get('active', None): this.active = False
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id})

    @expose()
    def get_intermediary_disclosure_by_id(self, *args, **kwargs):
        return DBSession.query(EntityOrganisationIntermediaryDisclosure). \
            filter(EntityOrganisationIntermediaryDisclosure.id == kwargs.get('intermediary_disclosure_id', None)). \
            first()

    @expose()
    def get_active_intermediary_disclosure_list(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        kwargs['searchkey'] = SEARCHKEY_INTERMEDIARYDISCLOSURE
        searchphrase = COMMON.get_searchphrase(**kwargs).lower()
        if searchphrase:
            searchphrase = "%" + searchphrase + "%"
            dbase_query = DBSession.query(EntityOrganisationIntermediaryDisclosure). \
                filter(EntityOrganisationIntermediaryDisclosure.text.like(searchphrase)). \
                filter(EntityOrganisationIntermediaryDisclosure.active == 1). \
                order_by(asc(EntityOrganisationIntermediaryDisclosure.text)).limit(LIMIT)
            return dbase_query
        else:
            dbase_query = DBSession.query(EntityOrganisationIntermediaryDisclosure). \
                filter(EntityOrganisationIntermediaryDisclosure.active == 1). \
                order_by(asc(EntityOrganisationIntermediaryDisclosure.id)). \
                limit(LIMIT)
        return dbase_query

#######################################################################
# Vehicle Category
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def vehicle_category(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_VEHICLE_CATAGORY
        searchphrase = COMMON.get_searchphrase(**kwargs)
        kwargs['searchphrase'] = searchphrase
        title = _('Vehicle Categories')
        html = self.get_active_vehicle_category_html(*args, **kwargs)
        javascript = self.get_javascript_vehicle_category_onload()
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_vehicle_category_html(self, *args, **kwargs):
        searchphrase = kwargs.get('searchphrase', '')
        card_title = _('Vehicle Categories')
        vehicle_category_table = self.get_vehicle_category_table()
        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">{card_title}</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_vehicle_category" class="btn btn-primary ml-auto">Create New Vehicle Category</button>
                            </div>
                        </div>
                        <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                <input type="text" class="form-control search" name="searchphrase"  id='searchphrase'  value='{searchphrase}' placeholder="Search">
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary" id="action_search">Search</button>
                                <button class="btn btn-primary" id="btn_reset">Reset</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive" id='div_vehicle_category_table'>
                            {vehicle_category_table}
                        </div>
                    </div>
                    </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_vehicle_category_table(self, *args, **kwargs):
        searchphrase = kwargs.get('searchphrase', '')
        if searchphrase:
            searchphrase = '%'+searchphrase+'%'
            dbase_query = DBSession.query(AssetVehicleCategory). \
                filter(AssetVehicleCategory.name.like(searchphrase)). \
                filter(AssetVehicleCategory.active == 1). \
                order_by(asc(AssetVehicleCategory.name)).\
                limit(LIMIT)
        else:
            dbase_query = DBSession.query(AssetVehicleCategory). \
                filter(AssetVehicleCategory.active == 1). \
                order_by(asc(AssetVehicleCategory.name)).\
                limit(LIMIT)

        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'name' : f"<div class='edit vehicle_category_edit' vehicle_category_id='{item.id}'>{item.name}</div>".format(item.name, item.id),
                             })
        dbcolumnlist=[
                'name',
                    ]
        theadlist=[
                'Name',
                ]
        return build_html_table(outputlist, dbcolumnlist, theadlist, "vehicle_category_table")

    @expose()
    def get_javascript_vehicle_category_onload(self, *args, **kwargs):
        javascript = """
            $("#create_new_vehicle_category").click(function(){
                $('#dialogdiv').load('/setup/get_modal_vehicle_category?', function(data){
                    return false;
                });
            });
            $(".vehicle_category_edit").click(function(){
                var kwargs = 'vehicle_category_id='+$(this).attr('vehicle_category_id');
                $('#dialogdiv').load('/setup/get_modal_vehicle_category', kwargs, function(data){
                    return false;
                });
            });

            $('#action_search').click(function(){
                var kwargs = 'searchphrase='+$('#searchphrase').val();
                $('#div_vehicle_category_table').load('/setup/get_vehicle_category_table', kwargs, function(data){
                    return false;
                });
            })

            $('#btn_reset').click(function(){
                $('#searchphrase').val('').focus();
                $('#div_vehicle_category_table').load('/setup/get_vehicle_category_table', 'reset=true', function(data){
                    return false;
                 });
             })
        """
        return javascript

    @expose()
    def get_modal_vehicle_category(self, *args, **kwargs):
        vehicle_category_id = kwargs.get('vehicle_category_id', None)
        vehicle_category = None
        hidden_input = ''
        card_title = _('New Vehicle Category')
        if vehicle_category_id:
            card_title = _('Edit Vehicle Category')
            vehicle_category = AssetVehicleCategory.by_id(vehicle_category_id)
            hidden_input = get_hidden_input(**{'id': 'vehicle_category_id', 'value': vehicle_category_id})
        name = vehicle_category.name if vehicle_category else ''

        html = f"""
        <div class="modal fade" id="dialog_vehicle_category" tabindex="-1" role="dialog" aria-labelledby="myvehicle_categoryLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-6">
                            <h4 class="card-title">{card_title}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_vehicle_category'>
                            {hidden_input}
                            <div class="col-md-12">
					            <div class="form-group row">
						            <label class="col-md-2 col-form-label" required for="name">Name</label>
						            <div class="col-md-9">
							            <input id="name" value="{name}" type="text" name="name" class="form-control" required='true'>
						            </div>
					            </div>
				            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_vehicle_category' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary vehicle_category_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
            <script>
                setFormValidation('#form_vehicle_category');
                $('#save_vehicle_category').click(function(){
                    var valid = FormIsValid('#form_vehicle_category');
                    if(valid){
                        var formserial = $('#form_vehicle_category').serialize();
                        $.post('/setup/save_vehicle_category?', formserial, function(data){
                            $.redirect('/setup/vehicle_category');
                            return false;
                        });
                    }
                });

                $('.vehicle_category_back').click(function(){
                    $('#dialog_vehicle_category').modal('hide');
                });
                $('#dialog_vehicle_category').modal();
            </script>
     	"""
        return html + javascript

    @expose()
    def save_vehicle_category(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        vehicle_category_id = kwargs.get('vehicle_category_id', None)
        if not vehicle_category_id:
            this = AssetVehicleCategory()
            this.name = kwargs.get('name', None)
            this.added_by = usernow.id
            DBSession.add(this)
            DBSession.flush()
        else:
            this = AssetVehicleCategory.by_id(vehicle_category_id)
            if not this: return 'false'
            this.name = kwargs.get('name', None)
            DBSession.flush()
        return str(this.id)

########################################################################
# Campaigns
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def campaigns(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_CAMPAIGN
        searchphrase = COMMON.get_searchphrase(**kwargs)
        title = "Campaigns"
        html = self.get_active_campaign_html(*args, **kwargs)
        javascript = self.get_javascript_campaign_onload()
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_campaign_html(self, *args, **kwargs):
        searchphrase = kwargs.get('searchphrase', '')
        campaign_table = self.get_campaign_table()

        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <div class="row d-flex">
                                <div class="col-md-6">
                                    <h4 class="card-title">{_('Campaigns')}</h4>
                                </div>
                                <div class="col-md-6 text-right">
                                    <button id="create_new_campaign" class="btn btn-primary ml-auto">Create New Campaign</button>
                                </div>
                            </div>
                            <div class="row d-flex align-items-center">
                                <div class="col-md-4">
                                    <input type="text" class="form-control search" name="searchphrase"  id='searchphrase' value='{searchphrase}' placeholder="Search">
                                </div>
                                <div class="col-md-8">
                                    <button class="btn btn-primary" id="action_search">Search</button>
                                    <button class="btn btn-primary" id="action_Reset">Reset</button>
                                </div>
                            </div>
                            <hr>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive" id='div_campaign_table'>
                                {campaign_table}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_javascript_campaign_onload(self, *args, **kwargs):
        javascript = """
            $("#create_new_campaign").click(function(){
                $('#dialogdiv').load('/setup/get_new_modal_campaign?', function(data){
                    return false;
                });
            });
            $(".campaign_edit").click(function(){
                var data = {campaign_id : $(this).attr('campaign_id')};
                $.redirect('/setup/edit_campaign', data);
            });
            $('#action_search').click(function(){
                var kwargs = 'searchphrase='+$('#searchphrase').val();
                $('#div_campaign_table').load('/setup/get_campaign_table', kwargs, function(data){
                    return false;
                });
            })
            $('#action_Reset').click(function(){
                $('#searchphrase').val('').focus();
                $('#div_campaign_table').load('/setup/get_campaign_table', 'reset=true', function(data){
                    return false;
                 });
             })
        """
        return javascript

    @expose()
    def get_campaign_table(self, *args, **kwargs):
        searchphrase = kwargs.get('searchphrase', '')
        if searchphrase:
            searchphrase = '%'+searchphrase+'%'
            dbase_query = DBSession.query(Campaign). \
                filter(or_(Campaign.code.like(searchphrase),  \
                           Campaign.name.like(searchphrase))). \
                filter(Campaign.active == 1). \
                order_by(asc(Campaign.name)).\
                limit(LIMIT)
        else:
            dbase_query = DBSession.query(Campaign). \
                filter(Campaign.active == 1). \
                order_by(asc(Campaign.name)).\
                limit(LIMIT)

        outputlist = []
        for item in dbase_query:
            campaign_type = CampaignType.by_id(item.campaign_type_id)
            outputlist.append({
                'code' : "<div class='edit campaign_edit action_link' campaign_id='{1}'>{0}</div>".format(item.code, item.id),
                'name' : item.name,
                'campaign_type' : campaign_type.name if campaign_type else 'Unknown',
                'start_date' : item.start_date,
                'end_date' : item.end_date,
                             })
        dbcolumnlist=[
                'code',
                'name',
                'campaign_type',
                'start_date',
                'end_date',
                    ]
        theadlist=[
                'Code',
                'Name',
                'Campaign Type',
                'Start_Date',
                'End_Date ',
                ]
        return build_html_table(outputlist, dbcolumnlist, theadlist, "campaign_table")

    @expose()
    def get_new_modal_campaign(self, *args, **kwargs):
        campaign_id = kwargs.get('campaign_id', None)
        campaign = None
        hidden_input = ''
        selectbox_campaign_type = self.get_campaign_type_list()
        card_title = _('New Campaign')
        if campaign_id:
            card_title = _('Edit Campaign')
            campaign = Campaign.by_id(campaign_id)
            hidden_input = get_hidden_input(**{'id': 'campaign_id', 'value': campaign_id})
            selectbox_campaign_type = self.get_campaign_type_list(**{'selected': campaign.campaign_type_id, })
        code = campaign.code if campaign else ''
        name = campaign.name if campaign else ''
        campaign_type_id = campaign.campaign_type_id if campaign else ''
        start_date = campaign.start_date if campaign else ''
        end_date = campaign.end_date if campaign else ''
        html = f"""
            <div class="modal fade" id="dialog_campaign" tabindex="-1" role="dialog" aria-labelledby="mycampaignLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">{card_title}</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_campaign'>
                               {hidden_input}
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="code">Code</label>
                                        <div class="col-md-9">
                                            <input id="code" value="{code}" type="text" name="code" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="name">Name</label>
                                        <div class="col-md-9">
                                            <input id="name" value="{name}" type="text" name="name" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="campaign_type_id">Campaign Type</label>
                                        <div class="col-md-9">
                                            {selectbox_campaign_type}
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="start_date">Start_Date</label>
                                        <div class="col-md-9">
                                            <input id="start_date" value="{start_date}" type="text" name="start_date" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required for="end_date">End_Date </label>
                                        <div class="col-md-9">
                                            <input id="end_date" value="{end_date}" type="text" name="end_date" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_campaign' class="btn btn-primary">Save</button>
                            <button class="btn btn-outline-primary campaign_back">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        """
        javascript = """
            <script>
                var form_id = '#form_campaign'
                setFormValidation(form_id);
                $("#start_date").datetimepicker({ format: 'DD-MM-YYYY' });
                $("#end_date").datetimepicker({ format: 'DD-MM-YYYY' });
                $('#save_campaign').click(function(){
                    var valid = FormIsValid(form_id);
                    if(valid){
                        var formserial = $(form_id).serialize();
                        $.post('/setup/save_new_campaign?', formserial, function(data){
                            var result = JSON.parse(data);
                            if(result.success === true){
                                $.redirect(result.redirect, {'campaign_id' : result.campaign_id});
                            };
                            showNotification(result.status, result.message);
                            return false;
                        });
                    }
                });
                $('.campaign_back').click(function(){
                    $('#dialog_campaign').modal('hide');
                });
                $('#dialog_campaign').modal();
            </script>
     	"""
        return html + javascript

    @expose()
    def save_new_campaign(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        campaign_id = kwargs.get('campaign_id', None)
        start_date = kwargs.get('start_date', None)
        end_date = kwargs.get('end_date', None)
        start_date = str_to_date(start_date).date().isoformat()
        end_date = str_to_date(end_date).date().isoformat()

        this = Campaign()
        this.code = kwargs.get('code', None)
        this.name = kwargs.get('name', None)
        this.campaign_type_id = kwargs.get('campaign_type_id', None)
        this.start_date = start_date
        this.end_date = end_date
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()

        redirect_url = '/setup/edit_campaign'
        return json.dumps({'success': True, 'campaign_id': this.id, 'redirect': redirect_url})

    def get_campaign_type_list(self, selected=None, *args, **kwargs):
        kwargs['id'] = 'campaign_type_id'
        kwargs['selected'] = selected
        kwargs['case_sensitive'] = True
        dbase_query = DBSession.query(CampaignType).filter(CampaignType.active == True).order_by(asc(CampaignType.name)).all()
        kwargs['outputlist'] = [{'id': x.id, 'name': x.name} for x in dbase_query]
        return create_selectbox_html(**kwargs)

    @expose('rocket.templates.generic')
    def edit_campaign(self, *args, **kwargs):
        campaign_id = kwargs.get('campaign_id', None)
        if not campaign_id: return redirect('/setup/campaigns')
        title = self.get_campaign_title_html(campaign_id)
        html = self.get_edit_campaign_html(campaign_id)
        javascript = self.get_javascript_edit_campaign_onload()
        return dict(title=title, html=html, javascript=javascript)

    def get_campaign_title_html(self, campaign_id=None, *args, **kwargs):
        if not campaign_id: return ''
        campaign = Campaign.by_id(campaign_id)
        if not campaign: return ''
        return f"Edit: {campaign.code} - {campaign.name}"

    def get_edit_campaign_html(self, campaign_id=None, *args, **kwargs):
        if not campaign_id: return ''
        campaign = Campaign.by_id(campaign_id)
        if not campaign: return ''
        added_date = campaign.added
        code = campaign.code
        name = campaign.name
        start_date = campaign.start_date
        end_date = campaign.end_date
        campaign_type_id = campaign.campaign_type_id
        selectbox_campaign_type = self.get_campaign_type_list(**{'selected': campaign_type_id})
        get_campaign_document_table = self.get_campaign_document_html(**{'campaign_id': campaign_id})

        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">{_('Edit Campaign')}</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="save_edit_campaign" class="btn btn-primary">{_('Save')}</button>
                            <button id="back_campaign" class="btn btn-secondary ml-auto">{_('Back to Campagn List')}</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <form id="edit_campaign">
                            <input type="hidden" id="campaign_id" name="campaign_id" class="form-control" value="{campaign_id}"/>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="col-md-12">
                                        <div class="form-group row">
                                            <label class="col-md-3 col-form-label" required for="code">Code</label>
                                            <div class="col-md-9">
                                                <input id="code" value="{code}" type="text" name="code" class="form-control" disabled='true'>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12">
                                        <div class="form-group row">
                                            <label class="col-md-3 col-form-label" required for="name">Name</label>
                                            <div class="col-md-9">
                                                <input id="name" value="{name}" type="text" name="name" class="form-control" required='true'>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12">
                                        <div class="form-group row">
                                            <label class="col-md-3 col-form-label" required for="campaign_type_id">Campaign Type</label>
                                            <div class="col-md-9">
                                                {selectbox_campaign_type}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="col-md-12">
                                        <div class="form-group row">
                                            <label class="col-md-3 col-form-label" required for="start_date">Start_Date</label>
                                            <div class="col-md-9">
                                                <input id="start_date" value="{start_date}" type="text" name="start_date" class="form-control" required='true'>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12">
                                        <div class="form-group row">
                                            <label class="col-md-3 col-form-label" required for="end_date">End_Date </label>
                                            <div class="col-md-9">
                                                <input id="end_date" value="{end_date}" type="text" name="end_date" class="form-control" required='true'>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12">
                                        <div class="form-group row">
                                            <label class="col-md-3 col-form-label required">{_('Register Date')}</label>
                                            <div class="col-md-9">
                                                <input type="text" name='register_date' id='register_date' class="form-control" value="{added_date}" disabled="true">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        {get_campaign_document_table}
        """
        return html

    @expose()
    def get_campaign_document_html(self, *args, **kwargs):
        campaign_id = kwargs.get('campaign_id', None)
        if not campaign_id: return ''
        dbase_query = DBSession.query(CampaignMedia). \
            filter(CampaignMedia.campaign_id == campaign_id). \
            filter(CampaignMedia.active == True). \
            order_by(asc(CampaignMedia.id)). \
            limit(LIMIT)

        img_active = "<img src='/images/icon_check.png' />"
        img_inactive = "<img src='/images/icon_cross.png' />"

        outputlist = []
        for item in dbase_query:
            active = img_active
            disable_text = 'Remove'
            if not item.active:
                active = img_inactive
                disable_text = 'Recover'

            outputlist.append({
                'file_name': item.file_name,
                'disable' : f"<div class='campaign_media_active' active='{item.active}' campaign_id='{campaign_id}' campaign_media_id='{item.id}'>{disable_text}</div>",
            })
        dbcolumnlist = [
            'file_name',
            'disable',
        ]
        theadlist = [
            'File Name',
            'Remove',
        ]
        tdclasslist = [
            '',
            'action_link text-right',
        ]

        get_campaign_document_table = build_html_table(outputlist, dbcolumnlist, theadlist, "get_campaign_document_table", tdclasslist)

        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('Campaign Media')}</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_campaign_media" class="btn btn-primary ml-auto" campaign_id="{campaign_id}">{_('New Media')}</button>
                            </div>
                        </div>

                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            {get_campaign_document_table}
                        </div>
                    </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_javascript_edit_campaign_onload(self, *args, **kwargs):
        javascript = """
            $("#start_date").datetimepicker({ format: 'DD-MM-YYYY' });
            $("#end_date").datetimepicker({ format: 'DD-MM-YYYY' });
            $('#save_edit_campaign').click(function(){
                var valid = FormIsValid('#edit_campaign');
                if(valid){
                    var formserial = $('#edit_campaign').serialize();
                    $.post('/setup/save_new_campaign?', formserial, function(data){
                        $.redirect('/setup/campaigns');
                        return false;
                    });
                }
            });

            $('#back_campaign').click(function(){
                $.redirect('/setup/campaigns');
            });

            $("#create_new_campaign_media").click(function(){
                var data = {campaign_id : $(this).attr('campaign_id'), };
                $('#dialogdiv').load('/setup/get_new_modal_campaign_media?', data, function(data){
                    return false;
                });
            });

            $(".campaign_media_active").click(function(){
                var text = $(this).html();
                var data = {campaign_media_id : $(this).attr('campaign_media_id'), 'campaign_media_id': $('#campaign_media_id').attr('value')};
                var kwargs = {'campaign_id': $('#campaign_id').attr('value')};
                $.post('/setup/toggle_campaign_media_active?', data, function(data){
                    $.redirect('/setup/edit_campaign?', kwargs);
                    return false;
                });
            });
        """

        return javascript

    @expose()
    def save_edit_campaign(self, *args, **kwargs):

        campaign_id = kwargs.get('campaign_id', None)
        if not campaign_id: return json.dumps({'success': False, 'data': 'No Campaign ID Found', 'status': 'danger'})
        this = Campaign.by_id(campaign_id)
        if not this: return json.dumps({'success': False, 'data': 'No Campaign Found', 'status': 'danger'})

        usernow = request.identity.get('user', None)
        start_date = kwargs.get('start_date', None)
        end_date = kwargs.get('end_date', None)
        start_date = str_to_date(start_date)
        end_date = str_to_date(end_date)
        start_date = start_date.date()
        end_date = end_date.date()
        start_date = start_date.isoformat()
        end_date = end_date.isoformat()

        this.code = kwargs.get('code', None)
        this.name = kwargs.get('name', None)
        this.campaign_type_id = kwargs.get('campaign_type_id', None)
        this.start_date = start_date
        this.end_date = end_date
        DBSession.flush()
        return json.dumps({'success': True, 'campaign_id': this.id, 'status': 'success'})

    @expose()
    def toggle_campaign_media_active(self, *args, **kwargs):
        campaign_id = kwargs.get('campaign_id', None)
        campaign_media_id = kwargs.get('campaign_media_id', None)
        if not campaign_media_id: return 'true'

        this = DBSession.query(CampaignMedia). \
            filter(CampaignMedia.id == campaign_media_id). \
            first()
        if not this: return 'true'

        if this.active:
            this.active = False
        else:
            this.active = True
        DBSession.flush()
        return 'true'

    @expose()
    def get_new_modal_campaign_media(self, *args, **kwargs):
        campaign_id = kwargs.get('campaign_id', None)
        if not campaign_id: return ''
        card_title = _('New Campaign Media')
        campaign = Campaign.by_id(campaign_id)
        hidden_input = get_hidden_input(**{'id': 'campaign_id', 'value': campaign_id})
        html = f"""
            <div class="modal fade" id="dialog_campaign_media" tabindex="-1" role="dialog" aria-labelledby="mycampaignLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">{card_title}</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_campaign_media'>
                               {hidden_input}
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_campaign_media' class="btn btn-primary">Save</button>
                            <button id="campaign_media_back" class="btn btn-outline-primary">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        """
        javascript = """
            <script>
                setFormValidation('#form_campaign_media');
                var form_id = '#form_campaign_media'
                $('#save_campaign_media').click(function(){
                    var valid = FormIsValid('#form_campaign_media');
                    if(valid){
                        var formserial = $(form_id).serialize();
                    }
                    $('#dialog_campaign_media').modal('hide');
                });
                $('#campaign_media_back').click(function(){
                    $('#dialog_campaign_media').modal('hide');
                });
                $('#dialog_campaign_media').modal();
            </script>
     	"""
        return html + javascript


########################################################################
# Campaign Types
#######################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def campaign_types(self, *args, **kwargs):
        kwargs['searchkey'] = SEARCHKEY_CAMPAIGN_TYPE
        searchphrase = COMMON.get_searchphrase(**kwargs)
        title = "Campaign Types"
        html = self.get_active_campaign_type_html(*args, **kwargs)
        javascript = self.get_javascript_campaign_type_onload()
        return dict(title=title, html=html, javascript=javascript)

    @expose()
    def get_active_campaign_type_html(self, *args, **kwargs):
        searchphrase = kwargs.get('searchphrase', '')
        campaign_type_table = self.get_campaign_type_table()
        html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">{_('Campaign Types')}</h4>
                            </div>
                            <div class="col-md-6 text-right">
                                <button id="create_new_campaign_type" class="btn btn-primary ml-auto">Create New Campaign Type</button>
                            </div>
                        </div>
                        <div class="row d-flex align-items-center">
                            <div class="col-md-4">
                                <input type="text" class="form-control search" name="searchphrase"  id='searchphrase'  value='{searchphrase}' placeholder="Search">
                            </div>
                            <div class="col-md-8">
                                <button class="btn btn-primary" id="action_search">Search</button>
                                <button class="btn btn-primary" id="action_reset">Reset</button>
                            </div>
                        </div>
                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive" id='div_campaign_type_table'>
                            {campaign_type_table}
                        </div>
                    </div>
                    </div>
                </div>
            </div>
        """
        return html

    @expose()
    def get_javascript_campaign_type_onload(self, *args, **kwargs):
        javascript = """
            $("#create_new_campaign_type").click(function(){
                $('#dialogdiv').load('/setup/get_modal_campaign_type?', function(data){
                    return false;
                });
            });
            $(".campaign_type_edit").click(function(){
                var kwargs = 'campaign_type_id='+$(this).attr('campaign_type_id');
                $('#dialogdiv').load('/setup/get_modal_campaign_type?', kwargs, function(data){
                    return false;
                });
            });
            $('#action_search').click(function(){
                var kwargs = 'searchphrase='+$('#searchphrase').val();
                $('#div_campaign_type_table').load('/setup/get_campaign_type_table', kwargs, function(data){
                    return false;
                });
            })

            $('#action_reset').click(function(){
                $('#searchphrase').val('').focus();
                $('#div_campaign_type_table').load('/setup/get_campaign_type_table', 'reset=true', function(data){
                    return false;
                 });
             })
        """
        return javascript

    @expose()
    def get_campaign_type_table(self, *args, **kwargs):
        searchphrase = kwargs.get('searchphrase', '')
        if searchphrase:
            searchphrase = '%'+searchphrase+'%'
            dbase_query = DBSession.query(CampaignType). \
                filter(CampaignType.name.like(searchphrase)). \
                filter(CampaignType.active == 1). \
                order_by(asc(CampaignType.name)).\
                limit(LIMIT)
        else:
            dbase_query = DBSession.query(CampaignType). \
                filter(CampaignType.active == 1). \
                order_by(asc(CampaignType.name)).\
                limit(LIMIT)

        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'name' : "<div class='edit campaign_type_edit' campaign_type_id='{1}'>{0}</div>".format(item.name, item.id), })
        dbcolumnlist=[
                'name',
                    ]
        theadlist=[
                'Name',
                ]

        return build_html_table(outputlist, dbcolumnlist, theadlist, "campaign_type_table")

    @expose()
    def get_modal_campaign_type(self, *args, **kwargs):
        campaign_type_id = kwargs.get('campaign_type_id', None)
        campaign_type = None
        hidden_input = ''
        card_title = _('New Campaign Type')
        if campaign_type_id:
            card_title = _('Edit Campaign Type')
            campaign_type = CampaignType.by_id(campaign_type)
            hidden_input = get_hidden_input(**{'id': 'campaign_type_id', 'value': campaign_type_id})
        name = campaign_type.name if campaign_type else ''
        html = f"""
            <div class="modal fade" id="dialog_campaign_type" tabindex="-1" role="dialog" aria-labelledby="mycampaign_typeLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="col-md-6">
                                <h4 class="card-title">{card_title}</h4>
                            </div>
                        </div>
                        <div class="modal-body">
                            <form id='form_campaign_type'>
                                {hidden_input}
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-2 col-form-label" required for="name">Name</label>
                                        <div class="col-md-9">
                                            <input id="name" value="{name}" type="text" name="name" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button id='save_campaign_type' class="btn btn-primary">Save</button>
                            <button id='campaign_type_back' class="btn btn-outline-primary">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        """
        javascript = """
            <script>
                var form_id = '#form_campaign_type'
                setFormValidation(form_id);
                $('#save_campaign_type').click(function(){
                    var valid = FormIsValid(form_id);
                    if(valid){
                        var formserial = $(form_id).serialize();
                        $.post('/setup/save_campaign_type?', formserial, function(data){
                            $.redirect('/setup/campaign_types');
                            return false;
                        });
                    }
                });
                $('#campaign_type_back').click(function(){
                    $('#dialog_campaign_type').modal('hide');
                });
                $('#dialog_campaign_type').modal();
            </script>
     	"""
        return html + javascript

    @expose()
    def save_campaign_type(self, *args, **kwargs):
        usernow = request.identity.get('user', None)
        campaign_type_id = kwargs.get('campaign_type_id', None)
        name = kwargs.get('name', None)
        if not campaign_type_id:
            this = CampaignType()
            this.name = name
            this.added_by = usernow.id
            DBSession.add(this)
        else:
            this = CampaignType.by_id(campaign_type_id)
            if not this: return 'false'
            this.name = name
        DBSession.flush()
        return str(this.id)
