from datetime import datetime

def operation_a(idnumber):

    # Add all the digits of the ID number in the odd positions
    # (except for the last number, which is the control digit)
    idnumber = idnumber.copy()

    control_digit = idnumber.pop(-1)

    odds = [int(num) for i, num in enumerate(idnumber) if i % 2 == 0]
    sum_of_odds = sum(odds)
    return sum_of_odds

def operation_b(idnumber):
    # Take all the even digits as one number and multiply that by 2
    idnumber = idnumber.copy()

    evens = [int(num) for i, num in enumerate(idnumber) if i % 2]
    even_single = "".join(str(even) for even in evens)
    even_double = int(even_single) * 2
    return even_double

def operation_c(idnumber):
    # Add the digits of operation_b result together

    idnumber = idnumber.copy()
    even_double = operation_b(idnumber)
    list_even_double = list("".join(str(char) for char in str(even_double)))
    even_double_sum = 0
    for char in list_even_double: even_double_sum += int(char)
    return even_double_sum

def operation_d(a_result, c_result):
    # Add the answer of C to the answer of A
    return a_result + c_result

def operation_e(d_result, control_digit):
    # Subtract the second character from D from 10, this number should now equal the control character
    subtract_digit = str(d_result)[-1]
    e_result = 10 - int(subtract_digit)
    returnable = e_result
    if len(str(e_result)) > 1: returnable = str(e_result)[-1]
    return int(returnable)

def luhn_check(idnumber):
    str_idnumber = list(str(idnumber))
    if len(str_idnumber) != 13:
        return False
    step_a = operation_a(str_idnumber)
    #print("Doing Step A")
    #print(step_a)

    step_b = operation_b(str_idnumber)
    #print("Doing Step B")
    #print(step_b)

    step_c = operation_c(str_idnumber)
    #print("Doing Step C")
    #print(step_c)

    step_d = operation_d(step_a, step_c)
    #print("Doing Step D")
    #print(step_d)

    control_digit = str_idnumber[-1]
    step_e = operation_e(step_d, control_digit)
    #print("Doing Step E")
    if int(step_e) == int(control_digit): return True
    return False

def rsa_identity_get_dob(idnumber):
    str_dob = str(idnumber)[0: 6]
    try:
        date_object = datetime.strptime(str_dob, "%y%m%d").date()
    except ValueError:
        return False
    if datetime.now().date() < date_object: date_object = datetime.strptime("19" + str_dob, "%Y%m%d").date()
    return date_object

def rsa_identity_get_gender(idnumber):
    target = str(idnumber)[6: 10]
    try:
        target = int(target)
    except ValueError:
        return False
    if target < 5000:
        return 'Female'
    return 'Male'

def get_rsa_id_dict(idnumber):
    id_dict = {}
    id_dict['luhn_check'] = luhn_check(idnumber)
    id_dict['dob'] = rsa_identity_get_dob(idnumber)
    id_dict['gender'] = rsa_identity_get_gender(idnumber)
    return id_dict

if __name__ == "__main__":
    id_list = [
        9012195035080,
        9010200553089,
        8911300094083,
        8710015160084,
        6204235130087,
        9109135047082,
        5304205009088,
        8105225108082,
        5304205009088,
        5404205009088,
        ]
    id_dict = {}
    for thisid in id_list:
        print(get_rsa_id_dict(thisid))
