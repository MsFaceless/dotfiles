# -*- coding: utf-8 -*-
"""Media Management Controller"""
import math
import logging

from tg import expose, require, url, lurl, request, redirect, tmpl_context, validate, response
from tg.i18n import ugettext as _, lazy_ugettext as l_
from tg.exceptions import HTTPFound
from tg import predicates, use_wsgi_app

from webob.static import FileApp
from sqlalchemy import func, desc, asc, or_

from rocket.model import *

from rocket.lib.tg_utils import *
from rocket.lib.media_ocr import MediaOcr
from rocket.lib.word_cloud import WordCloud
from rocket.lib.base import BaseController
from rocket.lib.type_utils import TypeDictionary
from rocket.lib.tgfileuploader import FileUploader
#from rocket.lib.word_cloud_image import MediaWordCloud

LOGGER = logging.getLogger(__name__)

FILENAME = os.path.abspath(resource_filename('rocket', 'public'))
PUBLIC_DIRNAME = os.path.join(FILENAME)

MEDIA_DIRNAME = 'media'
FULL_MEDIA_DIRNAME = os.path.join(PUBLIC_DIRNAME, MEDIA_DIRNAME)

MEDIA_OCR = MediaOcr()
TYPEUTIL = TypeDictionary()

DBQUERY_LIMIT = 20
FILE_SIZE_DBQUERY_LIMIT_MB = 256

PRIVATE = None
PRIVATE_CABINET = Cabinet.by_attr_first('name', 'Private')
if PRIVATE_CABINET:
    PRIVATE = PRIVATE_CABINET.name

__all__ = ['MediaController']

class MediaController(BaseController):
    """Docstring for Media Management."""

    @expose()
    def _default(self, *args, **kwargs):
        return 'This page is not available.'

###############################################################################
# DMS - Admin
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def admin(self, *args, **kwargs):
        html = self.get_tab_screen(*args, **kwargs)
        javascript = self.get_javascript_tabs_onload()
        title = "Cabinets"
        return dict(title=title, html=html, javascript =javascript)

    @expose()
    def get_tab_screen(self, *args, **kwargs):
        tab_cabinets_content = self.get_active_cabinet_html(**kwargs)
        tab_drawers_content = self.get_active_drawer_html(**kwargs)
        tab_cabinet_permissions_content = self.get_active_cabinet_permissions_html(**kwargs)
        tab_drawer_permissions_content = self.get_active_drawer_permissions_html(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Document Management System</h4>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 ml-auto mr-auto">
                <div class="col-md-12 ml-auto mr-auto">
                    <ul class="nav nav-pills nav-pills-primary justify-content-center" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link active" id="cabinet_tab" data-toggle="pill"
                               href="#tab_cabinets" role="tablist" aria-controls="pills-home" aria-selected="true">
                               Cabinets
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="cabinet_tab" data-toggle="pill"
                               href="#tab_drawers" role="tablist" aria-controls="pills-home" aria-selected="false">
                               Drawers
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="cabinet_tab" data-toggle="pill"
                               href="#tab_cabinet_permissions" role="tablist" aria-controls="pills-home" aria-selected="false">
                               Cabinet Permissions
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="cabinet_tab" data-toggle="pill"
                               href="#tab_drawer_permissions" role="tablist" aria-controls="pills-home" aria-selected="false">
                               Drawer Permissions
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="tab-content tab-space tab-subcategories">
                    <div class="tab-pane active" id="tab_cabinets">
                        {tab_cabinets_content}
                    </div>
                    <div class="tab-pane" id="tab_drawers">
                        {tab_drawers_content}
                    </div>
                    <div class="tab-pane" id="tab_cabinet_permissions">
                        {tab_cabinet_permissions_content}
                    </div>
                    <div class="tab-pane" id="tab_drawer_permissions">
                        {tab_drawer_permissions_content}
                    </div>
                </div>
            </div>
        </div>
        """
        return html

    def get_active_cabinet_html(self, *args, **kwargs):
        cabinet_table = self.get_active_cabinet_html_table(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                <div class="card-header">
                    <div class="row d-flex">
                        <div class="col-md-6">
                            <h4 class="card-title">DMS Cabinets</h4>
                        </div>
                        <div class="col-md-6 text-right">
                            <button id="create_new_cabinet" class="btn btn-primary ml-auto">Create New Cabinet</button>
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input type="text" class="form-control search" id="searchcabinet" name="searchcabinet" placeholder="Search">
                        </div>
                        <div class="col-md-8">
                            <button id="btn_cabinet_search" class="btn btn-primary action_search">Search</button>
                            <button id="btn_cabinet_reset" class="btn btn-primary">Reset</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div  id="cabinetTblDiv" class="table-responsive">
                        {cabinet_table}
                    </div>
                </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script type="text/javascript">
            $("#create_new_cabinet").click(function(){
                $('#dialogdiv').load('/media/get_modal_new_cabinet?', function(data){
                    return false;
                });
            });
            $(".edit_cabinet").click(function(){
                var kwargs = 'cabinet_id='+$(this).attr('cabinet_id');
                $('#dialogdiv').load('/media/get_modal_edit_cabinet?', kwargs, function(data){
                    return false;
                });
            });
            $(".open_cabinet").click(function(){
                var kwargs = 'cabinet_id='+$(this).attr('cabinet_id');
                $('#tab_cabinet_permissions').load('/media/get_active_cabinet_permissions_html', kwargs, function(data){

                    $('#tab_drawers').load('/media/get_active_drawer_html', kwargs, function(data){

                        $('.nav-link[href="#tab_drawers"]').trigger('click')
                        return false;
                    });
                    return false;
                });
            });
            $('#btn_cabinet_search').click(function(){
                var kwargs = 'searchcabinet='+$('#searchcabinet').val();
                $('#cabinetTblDiv').load('/media/get_active_cabinet_html_table', kwargs, function(data){
                    return false;
                });
            })
            $('#btn_cabinet_reset').click(function(){
                $('#searchcabinet').val('').focus();
                $('#cabinetTblDiv').load('/media/get_active_cabinet_html_table', function(data){
                    return false;
                });
            })
        </script>
        """
        return html + javascript

    @expose()
    def get_active_cabinet_html_table(self, *args, **kwargs):
        dbase_query = self.get_active_cabinet_dbase_query(**kwargs)
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'name' : item.name,
                'description' : item.description,
                'edit' : f"<div class='edit edit_cabinet action_link' cabinet_id='{item.id}'>Edit</div>",
                'open' : f"<div class='edit open_cabinet action_link' cabinet_id='{item.id}'>Open</div>",
                             })
        dbcolumnlist =[
                'name',
                'description',
                'edit',
                'open',
                    ]
        theadlist =[
                'Name',
                'Description',
                '',
                '',
                ]
        return build_html_table(outputlist, dbcolumnlist, theadlist, "cabinet_table")

    def get_active_cabinet_dbase_query(self, *args, **kwargs):
        searchcabinet = kwargs.get('searchcabinet', None)
        if not searchcabinet:
            return DBSession.query(Cabinet). \
                filter(Cabinet.bln_active == 1). \
                order_by(asc(Cabinet.name)).\
                limit(DBQUERY_LIMIT)

        searchcabinet = '%'+searchcabinet+'%'
        return DBSession.query(Cabinet). \
            filter(or_(Cabinet.name.like(searchcabinet),
                       Cabinet.description.like(searchcabinet))). \
            filter(Cabinet.bln_active == 1). \
            order_by(asc(Cabinet.name)). \
            limit(DBQUERY_LIMIT)

    @expose()
    def get_javascript_tabs_onload(self, *args, **kwargs):
        javascript = """
        """
        return javascript

    @expose()
    def get_modal_new_cabinet(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        cabinet = None
        name = description = hidden_input = ''
        if cabinet_id:
            cabinet = Cabinet.by_id(cabinet_id)
            if cabinet:
                name = cabinet.name
                description = cabinet.description
            hidden_input = get_hidden_input(**{'id': 'cabinet_id', 'value': cabinet_id})

        html = f"""
        <div class="modal fade" id="dialog_cabinet" tabindex="-1" role="dialog" aria-labelledby="mycabinetLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">New Cabinet</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_cabinet'>
                            {hidden_input}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-2 col-form-label" required for="name">Name</label>
                                    <div class="col-md-10">
                                        <input id="name" value="{name}" type="text" name="name" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-2 col-form-label" required for="description">Description</label>
                                    <div class="col-md-10">
                                        <input id="description" value="{description}" type="text" name="description" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_new_cabinet' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary cabinet_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script type="text/javascript">
            var form_id = '#form_cabinet'
            setFormValidation(form_id);
            $('#save_new_cabinet').click(function(){
                var valid = FormIsValid(form_id);
                if(valid){
                    var formserial = $(form_id).serialize();
                    $.post('/media/save_new_cabinet?', formserial, function(data){
                        $.redirect('/media/admin');
                        return false;
                    });
                }
            });
            $('.cabinet_back').click(function(){
                $('#dialog_cabinet').modal('hide');
            });
            $('#dialog_cabinet').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def get_modal_edit_cabinet(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        if not cabinet_id:
            return json.dumps({'success': False, 'message': 'Cabinet Identifier not supplied.', 'status': 'danger'})

        name = description = ''

        cabinet = Cabinet.by_id(cabinet_id)
        if cabinet:
            name = cabinet.name
            description = cabinet.description

        hidden_cabinet_id = get_hidden_input(**{'id': 'cabinet_id', 'value': cabinet_id})
        hidden_cabinet_name = get_hidden_input(**{'id': 'name', 'value': cabinet.name})

        html = f"""
        <div class="modal fade" id="dialog_cabinet" tabindex="-1" role="dialog" aria-labelledby="mycabinetLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">Edit Cabinet {cabinet.name}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_cabinet'>
                            {hidden_cabinet_id}
                            {hidden_cabinet_name}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-2 col-form-label" >Name</label>
                                    <div class="col-md-10">
                                        <input id="name" value="{name}" type="text" name="name" class="form-control" required='true' disabled>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-2 col-form-label" required for="description">Description</label>
                                    <div class="col-md-10">
                                        <input id="description" value="{description}" type="text" name="description" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_edit_cabinet' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary cabinet_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script type="text/javascript">
            var form_id = '#form_cabinet'
            setFormValidation(form_id);
            $('#save_edit_cabinet').click(function(){
                var valid = FormIsValid(form_id);
                if(valid){
                    var formserial = $(form_id).serialize();
                    $.post('/media/save_edit_cabinet?', formserial, function(data){
                        $.redirect('/media/admin');
                        return false;
                    });
                }
            });
            $('.cabinet_back').click(function(){
                $('#dialog_cabinet').modal('hide');
            });
            $('#dialog_cabinet').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_new_cabinet(self, *args, **kwargs):
        name = kwargs.get('name', None)
        description = kwargs.get('description', '')
        if not name:
            return json.dumps({'success': False, 'message': 'Missing Cabinet Name.', 'status': 'danger'})

        test_string = name.strip() + ' ' + description.strip()
        result = self.confirm_string_passes_stop_words(test_string)
        success = json.loads(result).get('success', False)
        if not success:
            return result

        cabinet = self.create_cabinet(**kwargs)
        if not cabinet:
            return json.dumps({'success': False, 'message': 'Cabinet not created.', 'status': 'danger'})
        return json.dumps({'success': True, 'message': 'Cabinet created.', 'status': 'success', 'cabinet_id': cabinet.id})

    @expose()
    def save_edit_cabinet(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        if not cabinet_id:
            return json.dumps({'success': False, 'message': 'Missing Cabinet Identifier.', 'status': 'danger'})

        name = kwargs.get('name', None)
        description = kwargs.get('description', '')
        if not name:
            return json.dumps({'success': False, 'message': 'Missing Cabinet Name.', 'status': 'danger'})

        test_string = description.strip()
        result = self.confirm_string_passes_stop_words(test_string)
        success = json.loads(result).get('success', False)
        if not success:
            return result

        cabinet = self.update_existing_cabinet(**kwargs)
        if not cabinet:
            return json.dumps({'success': False, 'message': 'Cabinet not created.', 'status': 'danger'})
        return json.dumps({'success': True, 'message': 'Cabinet created.', 'status': 'success', 'cabinet_id': cabinet.id})

    @expose()
    def get_active_drawer_html(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        if not cabinet_id:
            this_cabinet = Cabinet.oldest_entry()
            cabinet_id = this_cabinet.id
            kwargs['cabinet_id'] = cabinet_id

        selectbox_cabinet = self.get_cabinet_select(**{'selected': cabinet_id})
        drawer_detail = self.get_drawer_detail_html(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header d-flex">
                        <div class="col-md-4">
                            {selectbox_cabinet}
                        </div>
                        <div class="col-md-8 text-right">
                            <button class="btn btn-primary ml-auto action_back cabinet_back">{_('Back to Cabinet List')}</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row" id="drawerDetailDiv">
            {drawer_detail}
        </div>
        """
        javascript = """
        <script type="text/javascript">

            $('.cabinet_back').click(function(){
                $('.nav-link[href="#tab_cabinets"]').trigger('click')
            });

            $('#cabinet_id').change(function(){
                var kwargs = {cabinet_id: $('#cabinet_id').val()};
                $('#tab_cabinet_permissions').load('/media/get_active_cabinet_permissions_html', kwargs, function(data){
                    return false
                });
                $('#drawerDetailDiv').load('/media/get_drawer_detail_html', kwargs, function(data){
                    return false
                });
            });

        </script>
        """
        return html + javascript

    @expose()
    def get_drawer_detail_html(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        cabinet_name = "Unknown Cabinet"
        cabinet = Cabinet.by_id(cabinet_id)
        if cabinet:
            cabinet_name = cabinet.name

        drawer_table = self.get_active_drawer_html_table(**kwargs)

        html = f"""
        <div class="col-md-12">
            <div class="card">
                <div class="card-header d-flex">
                    <div class="col-md-4">
                        <h4 class="card-title">DMS Drawers for {cabinet_name}</h4>
                    </div>
                </div>
            </div>
            <div class="card">
                <div class="card-body">
                    <div class="row d-flex align-items-center">
                        <div class="col-md-4">
                            <input type="text" class="form-control search" cabinet_id="{cabinet_id}" id="searchdrawer" name="searchdrawer" placeholder="Search">
                        </div>
                        <div class="col-md-4">
                            <button id="btn_drawer_search" cabinet_id="{cabinet_id}" class="btn btn-primary action_search">Search</button>
                            <button id="btn_drawer_reset" cabinet_id="{cabinet_id}" class="btn btn-primary">Reset</button>
                        </div>
                        <div class="col-md-4 text-right">
                            <button id="create_new_drawer" cabinet_id="{cabinet_id}" class="btn btn-primary ml-auto">Create New Drawer</button>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="card-body">
                    <div  id="div_drawer_htmltbl" class="table-responsive">
                        {drawer_table}
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script type="text/javascript">
            $("#create_new_drawer").click(function(){
                var kwargs = {
                    cabinet_id : $(this).attr('cabinet_id'),
                    searchdrawer: $('#searchdrawer').val(),
                }
                $('#dialogdiv').load('/media/get_new_modal_drawer?', kwargs, function(data){
                    $('#div_drawer_htmltbl').load('/media/get_active_drawer_html_table', kwargs, function(data){
                        return false;
                    });
                });
            });
            $('#btn_drawer_search').click(function(){
                var kwargs = {
                    cabinet_id : $(this).attr('cabinet_id'),
                    searchdrawer: $('#searchdrawer').val(),
                }
                $('#div_drawer_htmltbl').load('/media/get_active_drawer_html_table', kwargs, function(data){
                    return false;
                });
            })
            $('#btn_drawer_reset').click(function(){
                $('#searchdrawer').val('').focus();
                var kwargs = {
                    cabinet_id : $(this).attr('cabinet_id'),
                }
                $('#div_drawer_htmltbl').load('/media/get_active_drawer_html_table', kwargs, function(data){
                    return false;
                 });
            })
        </script>
        """
        return html + javascript

    @expose()
    def get_active_drawer_html_table(self, *args, **kwargs):
        dbase_query = self.get_active_drawer_dbase_query(**kwargs)
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'name' : item.name,
                'description' : item.description,
                'edit' : f"<div class='edit edit_drawer action_link' drawer_id='{item.id}'>Edit</div>",
                'open' : f"<div class='edit open_drawer action_link' drawer_id='{item.id}'>Open</div>",
                })
        dbcolumnlist =[
                'name',
                'description',
                'edit',
                'open',
                    ]
        theadlist =[
                'Name',
                'Description',
                '',
                '',
                ]

        javascript = """
        <script type="text/javascript">
            $(".edit_drawer").click(function(){
                var kwargs = {drawer_id : $(this).attr('drawer_id')};
                $('#dialogdiv').load('/media/get_modal_edit_drawer?', kwargs, function(data){
                    return false;
                });
            });
            $(".open_drawer").click(function(){
                var kwargs = {drawer_id: $(this).attr('drawer_id')};
                $('#tab_drawer_permissions').load('/media/get_active_drawer_permissions_html', kwargs, function(data){
                    $('.nav-link[href="#tab_drawer_permissions"]').trigger('click')
                    return false;
                });
            });
        </script>
        """
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "drawer_table")
        return html + javascript

    @expose()
    def get_new_modal_drawer(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        cabinet = Cabinet.by_id(cabinet_id)
        if not cabinet:
            return ''
        hidden_input = get_hidden_input(**{'id': 'cabinet_id', 'value': cabinet_id})
        name =  ''
        description = ''

        html = f"""
        <div class="modal fade" id="dialog_drawer" tabindex="-1" role="dialog" aria-labelledby="mydrawerLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">New Drawer for {cabinet.name}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_drawer'>
                            {hidden_input}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-2 col-form-label" required for="name">Name</label>
                                    <div class="col-md-10">
                                        <input id="name" value="{name}" type="text" name="name" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-2 col-form-label" required for="description">Description</label>
                                    <div class="col-md-10">
                                        <input id="description" value="{description}" type="text" name="description" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_new_drawer' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary drawer_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """

        javascript = """
        <script type="text/javascript">
            var form_id = '#form_drawer'
            setFormValidation(form_id);
            $('#save_new_drawer').click(function(){
                var valid = FormIsValid(form_id);
                if(valid){
                    var formserial = $(form_id).serialize();
                    $.post('/media/save_new_drawer?', formserial, function(data){
                        var result = JSON.parse(data);
                        if(result.success){
                            $('#dialog_drawer').modal('hide');
                            $('#div_drawer_htmltbl').load('/media/get_active_drawer_html_table', formserial, function(data){
                                return false;
                            });
                        };
                        showNotification(result.status, result.message);
                        return false;
                    });
                }
            });
            $('.drawer_back').click(function(){
                $('#dialog_drawer').modal('hide');
            });
            $('#dialog_drawer').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def get_modal_edit_drawer(self, *args, **kwargs):
        drawer_id = kwargs.get('drawer_id', None)
        if not drawer_id:
            return json.dumps({'success': False, 'message': 'Drawer Identifier not supplied.', 'status': 'danger'})

        name = description =  ''
        drawer = Drawer.by_id(drawer_id)
        if drawer:
            name = drawer.name
            description = drawer.description

        cabinet_id = drawer.cabinet_id
        cabinet_name = 'Unknown Cabinet'

        cabinet = Cabinet.by_id(cabinet_id)
        if cabinet:
            cabinet_name = cabinet.name

        hidden_cabinet = get_hidden_input(**{'id': 'cabinet_id', 'value': cabinet_id})
        hidden_drawer = get_hidden_input(**{'id': 'drawer_id', 'value': drawer_id})

        html = f"""
        <div class="modal fade" id="dialog_drawer" tabindex="-1" role="dialog" aria-labelledby="mycabinetLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">Edit Drawer {drawer.name} in Cabinet {cabinet_name}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_drawer'>
                            {hidden_cabinet}
                            {hidden_drawer}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-2 col-form-label" required for="name">Name</label>
                                    <div class="col-md-10">
                                        <input id="name" value="{name}" type="text" name="name" class="form-control" required='true' disabled>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-2 col-form-label" required for="description">Description</label>
                                    <div class="col-md-10">
                                        <input id="description" value="{description}" type="text" name="description" class="form-control" required='true'>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button id='save_edit_drawer' class="btn btn-primary">Save</button>
                        <button class="btn btn-outline-primary drawer_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script type="text/javascript">
            var form_id = '#form_drawer'
            setFormValidation(form_id);
            $('#save_edit_drawer').click(function(){
                var valid = FormIsValid(form_id);
                if(valid){
                    var formserial = $(form_id).serialize();
                    $.post('/media/save_edit_drawer?', formserial, function(data){
                        $.redirect('/media/admin');
                        return false;
                    });
                }
            });
            $('.drawer_back').click(function(){
                $('#dialog_drawer').modal('hide');
            });
            $('#dialog_drawer').modal();
        </script>
     	"""
        return html + javascript

    @expose()
    def save_new_drawer(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        name = kwargs.get('name', None)
        description = kwargs.get('description', '')
        if not cabinet_id:
            return json.dumps({'success': False, 'message': 'Missing Cabinet Identifier.', 'status': 'danger'})

        if not name:
            return json.dumps({'success': False, 'message': 'Missing Drawer Name.', 'status': 'danger'})

        test_string = name.strip() + ' ' + description.strip()
        result = self.confirm_string_passes_stop_words(test_string)
        success = json.loads(result).get('success', False)
        if not success:
            return result

        drawer = self.create_new_drawer(**kwargs)
        if not drawer:
            return json.dumps({'success': False, 'message': 'Drawer not created.', 'status': 'danger'})
        return json.dumps({'success': True, 'message': 'Drawer created.', 'status': 'success', 'drawer_id': drawer.id})

    @expose()
    def save_edit_drawer(self, *args, **kwargs):
        drawer_id = kwargs.get('drawer_id', None)
        if not drawer_id:
            return json.dumps({'success': False, 'message': 'Missing Drawer Identifier.', 'status': 'danger'})
        name = kwargs.get('name', None)
        description = kwargs.get('description', '')
        cabinet_id = kwargs.get('cabinet_id', None)
        if not name:
            return json.dumps({'success': False, 'message': 'Missing Drawer Name.', 'status': 'danger'})

        test_string = description.strip()
        result = self.confirm_string_passes_stop_words(test_string)
        success = json.loads(result).get('success', False)
        if not success:
            return result

        drawer = self.update_existing_drawer(**kwargs)
        if not drawer:
            return json.dumps({'success': False, 'message': 'Drawer not updatged.', 'status': 'danger'})
        return json.dumps({'success': True, 'message': 'Drawer Updated.', 'status': 'success', 'drawer_id': drawer.id})

    @expose()
    def get_active_cabinet_permissions_html(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        if not cabinet_id:
            html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header ">
                            <div class="row d-flex">
                                <div class="col-md-12 text-center">
                                    <h4 class="card-title">Please Select a Cabinet</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            """
            return html

        cabinet_name = 'Unknown Cabinet'
        cabinet = Cabinet.by_id(cabinet_id)
        if cabinet:
            cabinet_name = cabinet.name

        available_cabinet_users, cabinet_useds = self.get_cabinet_users_html(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-6">
                <div class="card mh_260">
                    <div class="card-header ">
                        <div class="row d-flex">
                            <div class="col-md-12">
                                <h4 class="card-title">Access Granted to Cabinet: {cabinet_name}</h4>
                            </div>
                        </div>
                    </div>
                    <hr>
                    <div id='div_cabinet_users' class="card-body">
                        {cabinet_useds}
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card mh_260">
                    <div class="card-header ">
                        <div class="row d-flex">
                            <div class="col-md-12">
                                <h4 class="card-title">Available Users</h4>
                            </div>
                        </div>
                    </div>
                    <hr>
                    <div id='div_available_cabinet_users' class="card-body">
                        {available_cabinet_users}
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script type="text/javascript">
            function SegmentCabinet(selector, href){
                $(selector).click(function(data){
                    var cabinet_id = $(this).attr('cabinet_id');
                    var kwargs = 'cabinet_id='+cabinet_id;
                    kwargs += '&user_id='+$(this).attr('user_id');
                    $.post(href, kwargs, function(data){
                        $('#tab_drawer_permissions').load('/media/get_active_drawer_permissions_html', function(data){
                            return false;
                        });
                        $('#tab_cabinet_permissions').load('/media/get_active_cabinet_permissions_html', kwargs, function(data){
                            return false;
                        });
                    });
                });
            };
            SegmentCabinet('#div_cabinet_users .segment', '/media/save_cabinet_user_access_remove');
            SegmentCabinet('#div_available_cabinet_users .segment', '/media/save_new_cabinet_user_access');
        </script>
        """
        return html + javascript

    def get_cabinet_users_html(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        if not cabinet_id:
            return '', ''

        cabinet = Cabinet.by_id(cabinet_id)
        if not cabinet:
            return '', ''

        linklist = self.get_cabinet_users_by_id(**kwargs)
        idlist = [int(x.user_id) for x in linklist]
        userlist = self.get_available_cabinet_users(**kwargs)

        is_public = True
        class_name = "class='segment'"
        if cabinet.name == PRIVATE:
            is_public = False
            class_name = ''

        avail, used = '', ''
        for item in userlist:
            element = f"""
                <div {class_name} cabinet_id='{cabinet_id}' user_id='{item.id}'>
                    <b>{item.name}</b>
                </div> """
            if int(item.id) in idlist:
                used += element
            else:
                if is_public:
                    avail += element

        return avail, used

    def get_cabinet_users_by_id(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        return DBSession.query(CabinetUserLink).\
            filter(CabinetUserLink.cabinet_id == cabinet_id).\
            filter(CabinetUserLink.bln_active == True).\
            order_by(asc(CabinetUserLink.user_id)).\
            all()

    def get_available_cabinet_users(self, *args, **kwargs):
        adminrole = Role.by_name('DMS Administrator')
        userrole = Role.by_name('DMS User')
        outputlist = []

        for admin in adminrole.users:
            outputlist.append(admin)

        idlist = [int(x.id) for x in outputlist]

        for user in adminrole.users:
            if not int(user.id) in idlist:
                outputlist.append(user)
        return outputlist

    @expose()
    def save_new_cabinet_user_access(self, *args, **kwargs):
        cabinet_id = int(kwargs.get('cabinet_id', '0'))
        user_id = int(kwargs.get('user_id', '0'))
        self.create_cabinet_user_link(cabinet_id, user_id)
        self.add_cabinet_user_to_all_drawers(cabinet_id, user_id)
        return ''

    @expose()
    def save_cabinet_user_access_remove(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        if not cabinet_id or cabinet_id == '0':
            return ''

        user_id = kwargs.get('user_id', None)
        if not user_id or user_id == '0':
            return ''

        this = DBSession.query(CabinetUserLink). \
                filter(CabinetUserLink.cabinet_id == cabinet_id). \
                filter(CabinetUserLink.user_id == user_id). \
                one()
        DBSession.delete(this)
        DBSession.flush()
        self.remove_cabinet_user_from_all_drawers(cabinet_id, user_id)
        return ''

    @expose()
    def get_active_drawer_permissions_html(self, *args, **kwargs):
        drawer_id = kwargs.get('drawer_id', None)
        if not drawer_id:
            html = f"""
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header ">
                            <div class="row d-flex">
                                <div class="col-md-12 text-center">
                                    <h4 class="card-title">Please Select a Drawer</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            """
            return html

        drawer_name = 'Unknown Drawer'
        drawer = Drawer.by_id(drawer_id)
        if drawer:
            drawer_name =  drawer.name

        available_drawer_users, drawer_users = self.get_drawer_users_html(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-6">
                <div class="card mh_260">
                    <div class="card-header ">
                        <div class="row d-flex">
                            <div class="col-md-12">
                                <h4 class="card-title">Access Granted to Drawer: {drawer_name}</h4>
                            </div>
                        </div>
                    </div>
                    <hr>
                    <div id='div_drawer_users' class="card-body">
                        {drawer_users}
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card mh_260">
                    <div class="card-header ">
                        <div class="row d-flex">
                            <div class="col-md-12">
                                <h4 class="card-title">Available Users</h4>
                            </div>
                        </div>
                    </div>
                    <hr>
                    <div id='div_available_drawer_users' class="card-body">
                        {available_drawer_users}
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script type="text/javascript">
            function SegmentDrawer(selector, href){
                $(selector).click(function(data){
                    var drawer_id = $(this).attr('drawer_id');
                    var kwargs = 'drawer_id='+drawer_id;
                    kwargs += '&user_id='+$(this).attr('user_id');
                    $.post(href, kwargs, function(data){
                        $('#tab_drawer_permissions').load('/media/get_active_drawer_permissions_html', kwargs, function(data){
                            return false;
                        });
                    });
                });
            };
            SegmentDrawer('#div_drawer_users .segment', '/media/save_drawer_user_access_remove');
            SegmentDrawer('#div_available_drawer_users .segment', '/media/save_new_drawer_user_access');
        </script>
        """
        return html + javascript

    def get_drawer_users_html(self, *args, **kwargs):
        linklist = self.get_drawer_users_by_id(**kwargs)
        idlist = [int(x.user_id) for x in linklist]
        userlist = self.get_available_drawer_users(**kwargs)

        drawer = Drawer.by_id(kwargs.get('drawer_id', None))
        cabinet = Cabinet.by_id(drawer.cabinet_id)
        is_public = True
        class_name = "class='segment'"
        if cabinet.name == PRIVATE:
            is_public = False
            class_name = ''

        avail, used = '', ''
        for item in userlist:
            element = f"""
                <div {class_name} drawer_id='{drawer.id}' user_id='{item.id}'>
                    <b>{item.name}</b>
                </div> """
            if int(item.id) in idlist:
                used += element
            else:
                if is_public:
                    avail += element
        return avail, used

    def get_drawer_users_by_id(self, *args, **kwargs):
        return DBSession.query(DrawerUserLink).\
            filter(DrawerUserLink.drawer_id == kwargs.get('drawer_id')).\
            filter(DrawerUserLink.bln_active == True).\
            order_by(asc(DrawerUserLink.user_id)).\
            all()

    def get_available_drawer_users(self, *args, **kwargs):
        adminrole = Role.by_name('DMS Administrator')
        userrole = Role.by_name('DMS User')
        outputlist = []

        for admin in adminrole.users:
            outputlist.append(admin)

        idlist = [int(x.id) for x in outputlist]

        for user in adminrole.users:
            if not int(user.id) in idlist:
                outputlist.append(user)
        return outputlist

    @expose()
    def save_new_drawer_user_access(self, *args, **kwargs):
        self.create_drawer_user_link(kwargs.get('drawer_id', None), kwargs.get('user_id', None))
        return ''

    @expose()
    def save_drawer_user_access_remove(self, *args, **kwargs):
        this = DBSession.query(DrawerUserLink). \
                filter(DrawerUserLink.drawer_id==kwargs.get('drawer_id')). \
                filter(DrawerUserLink.user_id==kwargs.get('user_id')). \
                one()
        DBSession.delete(this)
        DBSession.flush()
        return ''

###############################################################################
# DMS - Manage
###############################################################################

    @require(predicates.not_anonymous())
    @expose('rocket.templates.generic')
    def manage(self, *args, **kwargs):
        html = self.get_dms_manage_html(*args, **kwargs)
        javascript = self.get_javascript_show_cabinets_onload()
        title = "DMS - Manage"
        return dict(title=title, html=html, javascript =javascript)

    @expose()
    def get_dms_manage_html(self, *args, **kwargs):
        selectbox_cabinet = self.get_filtered_cabinet_select(**kwargs)
        show_drawer_list = self.show_drawer_list_for_cabinet(**kwargs)
        show_file_list = self.show_file_list_for_drawer(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row d-flex">
                            <div class="col-md-6">
                                <h4 class="card-title">Document Management System</h4>
                            </div>
                        </div>
                    </div>
                    <div class="card-body"></div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header d-flex">
                        <div class="col-md-2 text-right">
                            <h4 class="card-title">Select Cabinet:</h4>
                        </div>
                        <div class="col-md-4">
                            {selectbox_cabinet}
                        </div>
                    </div>
                    <div class="card-body"></div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4" id="div_show_drawer_list">
                {show_drawer_list}
            </div>
            <div class="col-md-8" id="div_show_file_list">
                {show_file_list}
            </div>
        </div>
        """
        return html

    def get_javascript_show_cabinets_onload(self, *args, **kwargs):
        javascript = """
        $('#cabinet_id').change(function(){
            var kwargs = {cabinet_id: $('#cabinet_id').val()};
            $('#div_show_file_list').load('/media/show_file_list_for_drawer?', kwargs, function(data){
                $('#div_show_drawer_list').load('/media/show_drawer_list_for_cabinet', kwargs, function(data){
                    return false;
                });
                return false;
            });
        });
        $( "#cabinet_id" ).trigger( "change" );
        """
        return javascript

    @expose()
    def show_drawer_list_for_cabinet(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        if not cabinet_id:
            return self.show_empty_drawer_list_for_cabinet()

        cabinet = Cabinet.by_id(cabinet_id)
        if not cabinet:
            return self.show_empty_drawer_list_for_cabinet()

        hidden_cabinet_id = get_hidden_input(**{'id': 'cabinet_id', 'value': cabinet_id})
        drawer_list = self.show_filtered_drawer_html_table(**kwargs)
        html = f"""
        <div class="card">
            <div class="card-header ">
                <div class="row">
                    <div class="col-md-12">
                        <h4 class="card-title">Drawers</h4>
                    </div>
                </div>
            </div>
            <div class="card-body">
                {hidden_cabinet_id}
                <div id="drawerListDiv">
                    {drawer_list}
                </div>
            </div>
        </div>
        """
        return html

    def show_empty_drawer_list_for_cabinet(self, *args, **kwargs):
        return """
        <div class="card">
            <div class="card-header ">
                <div class="row d-flex">
                    <div class="col-md-12">
                        <h4 class="card-title">Please Select a Cabinet</h4>
                    </div>
                </div>
            </div>
        </div>
        """

    @expose()
    def show_file_list_for_drawer(self, *args, **kwargs):
        drawer_id = kwargs.get('drawer_id', None)
        if not drawer_id:
            return self.show_empty_file_list_for_drawer()

        drawer = Drawer.by_id(drawer_id)
        if not drawer:
            return self.show_empty_file_list_for_drawer()

        file_list = self.show_file_html_table(**kwargs)
        drawer_word_dict = self.get_drawer_weighted_word_dict(**kwargs)
        drawer_word_cloud_html = ''

        html = f"""
        <div class="card">
            <div class="card-header ">
                <div class="row">
                    <div class="col-md-12">
                        <h4 class="card-title">Drawer Name: {drawer.name}</h4>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div id="fileListDiv">
                    {file_list}
                </div>
                <div class="row" id="wordDictDiv" >
                    {drawer_word_cloud_html}
                </div>
            </div>
        </div>
        """
        return html

    @expose()
    def show_file_details(self, *args, **kwargs):
        file_id = kwargs.get('file_id', None)
        if not file_id:
            return ''

        this_file = File.by_id(file_id)
        if not this_file:
            return ''

        drawer = Drawer.by_id(this_file.drawer_id)
        if not drawer:
            return ''

        cabinet = Cabinet.by_id(drawer.cabinet_id)
        if not cabinet:
            return ''

        file_word_cloud_image = self.build_word_cloud_image(file_id)

        file_size = self.pretty_file_size_display_format(this_file.size)
        hidden_file = get_hidden_input(**{'id': 'file_id', 'value': file_id})
        html = f"""
        <div class="modal fade" id="dialog_file" tabindex="-1" role="dialog" aria-labelledby="myfileLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">File Details</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_file'>
                            {hidden_file}
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-2 col-form-label">Cabinet</label>
                                    <div class="col-md-10">
                                        <input id="cabinet_name" value="{cabinet.name}" type="text" name="name" class="form-control" disabled>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-2 col-form-label">Drawer</label>
                                    <div class="col-md-10">
                                        <input id="drawer_name" value="{drawer.name}" type="text" name="name" class="form-control" disabled>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-2 col-form-label">Name</label>
                                    <div class="col-md-10">
                                        <input id="file_name" value="{this_file.name}" type="text" name="name" class="form-control" disabled>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-2 col-form-label">Description</label>
                                    <div class="col-md-10">
                                        <input id="description" value="{this_file.description}" type="text" name="description" class="form-control" disabled>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-2 col-form-label">Size</label>
                                    <div class="col-md-4">
                                        <input id="file_size" value="{file_size}" type="text" name="description" class="form-control" disabled>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-md-2 col-form-label">Version</label>
                                    <div class="col-md-2">
                                        <input id="version" value="{this_file.version}" type="text" name="description" class="form-control" disabled>
                                    </div>
                                </div>
                            </div>
                            {file_word_cloud_image}
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-outline-primary file_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script type="text/javascript">
            $('.file_back').click(function(){
                $('#dialog_file').modal('hide');
            });
            $('#dialog_file').modal();
        </script>
     	"""
        return html + javascript

    def show_empty_file_list_for_drawer(self, *args, **kwargs):
        return """
        <div class="card">
            <div class="card-header ">
                <div class="row d-flex">
                    <div class="col-md-12">
                        <h4 class="card-title">Please Select a Drawer</h4>
                    </div>
                </div>
            </div>
        </div>
        """

    @expose()
    def show_filtered_drawer_html_table(self, *args, **kwargs):
        dbase_query = self.get_active_filtered_drawer_dbase_query(**kwargs)
        outputlist = []
        for item in dbase_query:
            outputlist.append({
                'name' : item.name,
                'action' : f"""
                    <div class="d-flex justify-content-end flex-wrap">
                        <button class='btn btn-outline-primary m-1 drawer_add_file' drawer_id='{item.id}'>Add File</button>
                        <button class='btn btn-outline-primary m-1 drawer_access' drawer_id='{item.id}'>Access</button>
                        <button class='btn btn-outline-primary m-1 open_drawer' drawer_id='{item.id}'>Open</button>
                    </div>
                    """,
                })

        dbcolumnlist =[
                'name',
                'action',
                    ]
        theadlist =[
                'Drawer Name',
                '',
                ]

        tdclasslist =[
                '',
                'text-nowrap',
                ]
        javascript = """
        <script type="text/javascript">
            $(".drawer_add_file").click(function(){
                var kwargs = {
                    drawer_id : $(this).attr('drawer_id'),
                    cabinet_id: $('#cabinet_id').val()
                };
                console.log(kwargs);
                $('#dialogdiv').load('/media/get_add_file_to_drawer?', kwargs, function(data){
                    return false;
                });
            });

            $(".drawer_access").click(function(){
                var kwargs = {drawer_id: $(this).attr('drawer_id')};
                $('#dialogdiv').load('/media/show_drawer_access?', kwargs, function(data){
                    return false;
                });
            });

            $(".open_drawer").click(function(){
                var kwargs = {drawer_id: $(this).attr('drawer_id')};
                $('#div_show_file_list').load('/media/show_file_list_for_drawer?', kwargs, function(data){
                    return false;
                });
            });
        </script>
        """
        html = build_html_table(outputlist, dbcolumnlist, theadlist, "drawer_table", tdclasslist)
        return html + javascript

    @expose()
    def show_file_html_table(self, *args, **kwargs):
        dbase_query = self.get_active_file_dbase_query(**kwargs)
        drawer_id = kwargs.get('drawer_id', None)
        outputlist = []
        for item in dbase_query:

            is_prev = DBSession.query(FileVersionLink).\
                filter(FileVersionLink.previous_file_id == item.id).\
                first()
            if is_prev:
                continue

            file_type = TYPEUTIL.get_pretty_name("file_type", item.file_type_id)
            file_size = self.pretty_file_size_display_format(item.size)

            outputlist.append({
                'name' : item.name,
                'description' : item.description,
                'type' : file_type,
                'version' : item.version,
                'size': file_size,
                'actions' : f"""
                    <div class="text-nowrap text-right">
                        <button class="btn-outline-primary ml-auto btn_file_details" file_id="{item.id}" title="View this File Details"><i class="fas fa-info-circle" file_id="{item.id}"></i></button>
                        <button class="btn-outline-primary ml-auto btn_file_replace" drawer_id="{drawer_id}" file_id="{item.id}"title="Replace this File"><i class="fas fa-sync-alt" file_id="{item.id}"></i></button>
                        <button class="btn-outline-primary ml-auto btn_file_delete"  drawer_id="{drawer_id}" file_id="{item.id}"><i class="fas fa-trash-alt" file_id="{item.id}"title="Delete this File"></i></button>
                        <button class="btn-outline-primary ml-auto btn_file_download" file_id="{item.id}"><i class="fas fa-file-download" file_id="{item.id}"title="Download this File"></i></button>
                    </div>
                    """,
                })
        dbcolumnlist =[
                'name',
                'description',
                'type',
                'version',
                'size',
                'actions',
                ]
        theadlist =[
                'Name',
                'Description',
                'Type',
                'Size',
                'Version',
                '',
                ]
        tdclasslist =[
                '',
                '',
                '',
                'text-right',
                '',
                ]
        html =  build_html_table(outputlist, dbcolumnlist, theadlist, "file_table")

        javascript = """
        <script type="text/javascript">
            $(".btn_file_details").click(function(){
                var kwargs = {
                    file_id : $(this).attr('file_id'),
                };
                $('#dialogdiv').load('/media/show_file_details?', kwargs, function(data){
                    return false;
                });
            });

            $(".btn_file_replace").click(function(){
                var kwargs = {
                    file_id: $(this).attr('file_id'),
                    drawer_id : $(this).attr('drawer_id'),
                    cabinet_id: $('#cabinet_id').val()
                };

                $('#dialogdiv').load('/media/get_add_file_to_drawer?', kwargs, function(data){
                    return false;
                });
            });

            $(".btn_file_delete").click(function(){
                var this_drawer = $(this).attr('drawer_id');
                var kwargs = {
                    file_id : $(this).attr('file_id'),
                };
                $.post('/media/delete_this_file?', kwargs, function(data){
                    var result = JSON.parse(data);
                    if(result.success){
                        $('.open_drawer[drawer_id="'+this_drawer+'"]').trigger('click');
                        return false;
                    };
                    return false;
                });
            });

            $(".btn_file_download").click(function(){
                var selected = $(this).attr('file_id');
                var href_with_formserial = '/media/download_file?file_id=' + selected;
                window.location = href_with_formserial
            });
        </script>
        """
        return html + javascript

    @expose()
    def download_file(self, *args, **kwargs):
        file_id = str_to_int(kwargs.get('file_id', None))
        if not file_id:
            return ''

        download_file = File.by_id(file_id)
        if not download_file:
            return ''

        this_mime = self.get_mime_type_from_file_name(download_file.long_name)

        filepath = os.path.join(PUBLIC_DIRNAME, download_file.location)
        filepath = os.path.join(filepath, download_file.long_name)

        if not os.path.exists(filepath):
            return ''

        response.headers["Content-Type"] = this_mime
        response.headers["Content-Disposition"] = f'attachment; filename="{download_file.name}"'
        filecontent = FileApp(filepath)
        return use_wsgi_app(filecontent)

    @expose()
    def show_drawer_access(self, *args, **kwargs):
        drawer_id = kwargs.get('drawer_id', None)
        if not drawer_id:
            return json.dumps({'success': False, 'message': 'Drawer Identifier not supplied.', 'status': 'danger'})

        drawer = Drawer.by_id(drawer_id)
        cabinet_id = drawer.cabinet_id

        cabinet_name = 'Unknown Cabinet'
        cabinet = Cabinet.by_id(cabinet_id)
        if cabinet:
            cabinet_name = cabinet.name

        drawer_users = self.show_drawer_users_html(**kwargs)

        html = f"""
        <div class="modal fade" id="dialog_drawer" tabindex="-1" role="dialog" aria-labelledby="mycabinetLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="col-md-12">
                            <h4 class="card-title">Drawer: {drawer.name}</h4>
                            <h4 class="card-title">Cabinet: {cabinet_name}</h4>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form id='form_drawer'>
                            <div class="col-md-12">
                                <div id='div_drawer_users' class="card-body">
                                    {drawer_users}
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-outline-primary drawer_back">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script type="text/javascript">
            $('.drawer_back').click(function(){
                $('#dialog_drawer').modal('hide');
            });
            $('#dialog_drawer').modal();
        </script>
     	"""
        return html + javascript

    def show_drawer_users_html(self, *args, **kwargs):
        linklist = self.get_drawer_users_by_id(**kwargs)

        drawer = Drawer.by_id(kwargs.get('drawer_id', None))
        cabinet = Cabinet.by_id(drawer.cabinet_id)
        user_list = ''
        for item in linklist:
            user = User.by_id(item.user_id)
            element = f"""
                <div class="row" >
                    <b>{user.name}</b>
                </div> """
            user_list += element
        return user_list

    @expose()
    def get_add_file_to_drawer(self, *args, **kwargs):
        file_id = kwargs.get('file_id', '0')
        drawer_id = kwargs.get('drawer_id', None)
        if not drawer_id:
            return ''

        drawer = Drawer.by_id(drawer_id)
        cabinet_id = drawer.cabinet_id

        description = ''
        tags = ''
        is_hidden = ''
        version = 1
        if file_id:
            get_file = File.by_id(file_id)
            if get_file:
                description = get_file.description
                is_hidden = 'hidden'

        hidden_file_input = get_hidden_input(**{'id': 'file_id', 'value': file_id})
        hidden_drawer_input = get_hidden_input(**{'id': 'drawer_id', 'value': drawer_id})
        hidden_cabinet_input = get_hidden_input(**{'id': 'cabinet_id', 'value': cabinet_id})

        html = f"""
        <div class="modal fade" id="dialog_new_file_upload" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">New File Upload</h4>
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                            <i class="now-ui-icons ui-1_simple-remove"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form id='new_file_upload'>
                            {hidden_file_input}
                            {hidden_drawer_input}
                            {hidden_cabinet_input}
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label" required>Description</label>
                                        <div class="col-md-9">
                                            <input id="description" value="{description}" type="text" name="description" class="form-control" required='true'>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row" {is_hidden}>
                                <div class="col-md-12">
                                    <div class="form-group row">
                                        <label class="col-md-3 col-form-label">Search Tags</label>
                                        <div class="col-md-9">
                                            <input id="tags" value="{tags}" type="text" name="tags" class="form-control">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <div class='dropzone' id='dropzone_file_import'></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button id='btn_start_upload' class="btn btn-primary">Import</button>
                        <button class="btn btn-outline-primary file_back" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        accepted_files = self.get_accepted_file_extensions()
        javascript = """
        <script src=''>
            $(document).ready(function(){

                function checkStopWords(elem){
                    $(elem).change(function(){
                        var kwargs = 'string='+ $(this).val();
                        $.post('/media/check_stop_words_against_string?', kwargs, function(data){
                            var result = JSON.parse(data);
                            if(result.success == false){
                                showNotification('danger', result.word + ' is not allowed.');
                                $(elem).val('').focus();
                            };
                            return false;
                        });
                    });
                };
                checkStopWords('#description');
                checkStopWords('#tags');

                var form_id = '#new_file_upload'
                setFormValidation('#new_file_upload');
                var fileDropzone = new Dropzone('#dropzone_file_import', {
                    maxFiles: 1,
        """
        javascript += f"""
                    maxFilesize: {FILE_SIZE_DBQUERY_LIMIT_MB},
        """
        javascript += """
                    parallelUploads: 1,
                    uploadMultiple: false,
                    autoProcessQueue: false,
        """
        javascript += f"""
                    acceptedFiles: '{accepted_files}',
        """
        javascript += """

                    url: '/media/handle_file_upload',
                    params: {
        """
        javascript += f"""
                        'cabinet_id' : {drawer.cabinet_id}, 'drawer_id' : {drawer_id}, 'file_id' : {file_id}, 'allowed_extensions' : '{accepted_files}'
        """
        javascript += """
                    },
                    success: function(file, response){
                        var result = JSON.parse(response);
                        console.log('result', result);
                        if(result.success === true){
                            var this_drawer = $('#drawer_id').val()
                            var kwargs = {
                                cabinet_id : $('#cabinet_id').val(),
                                drawer_id : this_drawer,
                                file_id : $('#file_id').val(),
                                description : $('#description').val(),
                                tags : $('#tags').val(),
                                prev_long_name : result.name,
                                file_ext : result.file_ext,
                                filesize : result.filesize,
                            }
                            $.post('/media/save_new_file_upload?', kwargs, function(data){
                                var result = JSON.parse(data);
                                if(result.success){

                                    $('.open_drawer[drawer_id="'+this_drawer+'"]').trigger('click');
                                    $('#dialog_new_file_upload').modal('hide');
                                    var kwargs = {
                                        file_id : result.file_id,
                                        tags : result.tags,
                                    }
                                    $.post('/media/add_file_tags_from_ocr?', kwargs, function(data){
                                        return false;
                                    });
                                }
                                else {
                                    showNotification(result.status, result.message);
                                    return false;
                                }
                            });

                        }else{
                            showNotification('danger', 'Something went wrong.');
                            $('#dialog_new_file_upload').modal('hide');
                        };
                    },
                    error: function (file, response) {
                        file.previewElement.classList.add("dz-error");
                    }
                });
                $('#btn_start_upload').click(function(){
                    var valid = FormIsValid('#new_file_upload');
                    if(valid){
                        fileDropzone.processQueue();
                    };
                });
                $('.file_back').click(function(){
                    $('#dialog_new_file_upload').modal('hide');
                });
                $('#dialog_new_file_upload').modal();
            });
        </script>
        """
        return html + javascript

    @expose()
    def check_stop_words_against_string(self, *args, **kwargs):
        outputdict = {'success' : False}

        string = kwargs.get('string', None)
        if not string:
            return json.dumps(outputdict)

        result = MEDIA_OCR.sanitise_the_text(text=string)
        text = result.get('text', '')
        word_list = text.split()

        word = None
        success = True
        for word in word_list:

            match = StopWord.by_attr_first('name', word)
            if match:
                success = False
                break

        outputdict['success'] = success
        outputdict['word'] = word
        return json.dumps(outputdict)

    @expose()
    def save_new_file_upload(self, *args, **kwargs):
        file_id = str_to_int(kwargs.get('file_id', None))
        drawer_id = str_to_int(kwargs.get('drawer_id', None))
        if not drawer_id:
            return json.dumps({'success': False})

        drawer = Drawer.by_id(drawer_id)
        if not drawer:
            return json.dumps({'success': False})

        description = kwargs.get('description', None)
        if not description:
            return json.dumps({'success': False})

        prev_long_name = kwargs.get('prev_long_name', None)
        if not prev_long_name:
            return json.dumps({'success': False})

        file_ext = kwargs.get('file_ext', None)
        if not file_ext:
            return json.dumps({'success': False})


        is_acceptable = self.check_string_against_stop_words(description)
        if not is_acceptable:
            return json.dumps({'success': False, 'message': 'The Description contains unacceptable words.'})

        # Let Us check the description for bad words.
        prev_name = self.remove_uuid_from_file_name(prev_long_name)

        uploader = FileUploader()
        long_name = uploader.build_full_file_name(prev_name, None)

        must_ocr = False
        tags = kwargs.get('tags', '')
        tags = tags.replace(", ", " ")
        tags = tags.replace("  ", " ")

        version = kwargs.get('version', 1)
        prev_file = None

        if file_id:
            prev_file = File.by_id(file_id)
            if prev_file:
                version = prev_file.version + 1

        file_type_id = self.get_file_type_from_extension(file_ext)
        path = self.get_upload_directory(drawer_id)
        full_path = self.get_full_upload_directory(drawer_id)

        prev_full_path = os.path.join(full_path, prev_long_name)
        full_path = os.path.join(full_path, long_name)

        os.rename(prev_full_path, full_path)

        name = self.remove_uuid_from_file_name(prev_long_name)
        size = os.path.getsize(full_path)

        new_file = File()
        new_file.drawer_id = drawer_id
        new_file.long_name = long_name
        new_file.name = name
        new_file.description = description
        new_file.file_type_id = file_type_id
        new_file.location = path
        new_file.size = size
        new_file.version = version
        DBSession.add(new_file)
        DBSession.flush()

        if file_id and prev_file:
            new_file_version = FileVersionLink()
            new_file_version.new_file_id = new_file.id
            new_file_version.previous_file_id = prev_file.id
            DBSession.add(new_file_version)
            DBSession.flush()

        return json.dumps({'success': True, 'file_id': new_file.id, 'tags': tags})
        # self.add_file_tags(new_file.id, tags)
        # if must_ocr:
        #     return json.dumps({'success': True, 'file_id': new_file.id})
        # return json.dumps({'success': True})

    @expose()
    def handle_file_upload(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        kwargs['user_id'] = usernow.id
        cabinet_id = kwargs.get('cabinet_id', 1)
        drawer_id = kwargs.get('drawer_id', 1)
        allowed_extensions = kwargs.get('allowed_extensions', '')
        upload_dir = self.get_full_upload_directory(drawer_id)
        kwargs['upload_dir'] = upload_dir
        kwargs['size_limit'] = 256000000 # 256 MB
        kwargs['allowed_extensions'] = allowed_extensions
        uploader = FileUploader(**kwargs)
        result = uploader.handle_file_upload()
        return result

###############################################################################
# DMS - Common
###############################################################################

    def get_file_type_select(self, selected=None, *args, **kwargs):
        kwargs['id'] = 'file_type_id'
        kwargs['selected'] = selected
        kwargs['outputdict'] = TYPEUTIL.get_dict_of_types("file_type")
        return create_selectbox_html(**kwargs)

    def get_cabinet_select(self, selected=0, *args, **kwargs):
        kwargs['id'] = 'cabinet_id'
        if selected:
            kwargs['selected'] = int(selected)
        outputlist = []
        dbase_query = Cabinet.get_all('name', True)
        for cabinet in dbase_query:
            outputlist.append({'id': cabinet.id, 'name': cabinet.name})
        kwargs['outputlist'] = outputlist
        return create_selectbox_html(**kwargs)

    def get_filtered_cabinet_select(self, selected=None, *args, **kwargs):
        usernow = request.identity.get('user', {})
        kwargs['id'] = 'cabinet_id'
        kwargs['selected'] = selected

        outputlist = []
        dbase_query = DBSession.query(Cabinet).\
            join(CabinetUserLink, CabinetUserLink.cabinet_id == Cabinet.id).\
            filter(Cabinet.bln_active == True).\
            filter(CabinetUserLink.user_id == usernow.id).\
            order_by(asc(Cabinet.name)).\
            all()
        for cabinet in dbase_query:
            outputlist.append({'id': cabinet.id, 'name': cabinet.name})

        kwargs['outputlist'] = outputlist
        return create_selectbox_html(**kwargs)

    def get_active_filtered_drawer_dbase_query(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        drawer_id = kwargs.get('drawer_id', None)
        cabinet_id = kwargs.get('cabinet_id', None)
        searchdrawer = kwargs.get('searchdrawer', None)
        if drawer_id:
            return DBSession.query(Drawer).\
                join(DrawerUserLink, DrawerUserLink.drawer_id == Drawer.id).\
                filter(Drawer.bln_active == True).\
                filter(Drawer.id == drawer_id).\
                filter(DrawerUserLink.user_id == usernow.id).\
                order_by(asc(Drawer.name)).\
                all()

        if not searchdrawer:
            return DBSession.query(Drawer).\
                join(DrawerUserLink, DrawerUserLink.drawer_id == Drawer.id).\
                filter(Drawer.bln_active == True).\
                filter(Drawer.cabinet_id == cabinet_id).\
                filter(DrawerUserLink.user_id == usernow.id).\
                order_by(asc(Drawer.name)).\
                all()

        searchdrawer = '%'+searchdrawer+'%'
        return DBSession.query(Drawer).\
            join(DrawerUserLink, DrawerUserLink.drawer_id == Drawer.id). \
            filter(Drawer.bln_active == True).\
            filter(Drawer.cabinet_id == cabinet_id).\
            filter(DrawerUserLink.user_id == usernow.id).\
            filter(or_(
                Drawer.name.like(searchdrawer),
                Drawer.description.like(searchdrawer),
            )). \
            order_by(asc(Drawer.name)).\
            all()

    def get_active_file_dbase_query(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        drawer_id = kwargs.get('drawer_id', None)
        searchfile = kwargs.get('searchfile', None)
        if not searchfile:
            return DBSession.query(File).\
                filter(File.bln_active == True).\
                filter(File.drawer_id == drawer_id).\
                order_by(asc(File.name)).\
                limit(DBQUERY_LIMIT)

        searchfile = '%'+searchfile+'%'
        return DBSession.query(File).\
            filter(File.bln_active == True).\
            filter(File.drawer_id == drawer_id).\
            filter(or_(
                File.name.like(searchfile),
                File.description.like(searchfile),
            )). \
            order_by(asc(File.name)).\
            limit(DBQUERY_LIMIT)

    def get_active_drawer_dbase_query(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        searchdrawer = kwargs.get('searchdrawer', None)
        if not searchdrawer:
            return DBSession.query(Drawer). \
                filter(Drawer.cabinet_id == cabinet_id).\
                filter(Drawer.bln_active == True). \
                order_by(asc(Drawer.name)).\
                all()

        searchdrawer = '%'+searchdrawer+'%'
        return DBSession.query(Drawer). \
            filter(Drawer.cabinet_id == cabinet_id).\
            filter(or_(
                Drawer.name.like(searchdrawer),
                Drawer.description.like(searchdrawer),
            )). \
            filter(Drawer.bln_active == True). \
            order_by(asc(Drawer.name)).\
            all()

    def get_files_for_drawer(self, drawer_id, limit=0, *args, **kwargs):
        if limit:
            return self.get_files_for_drawer_id_limit(drawer_id, limit)
        return self.get_files_for_drawer_id_all(drawer_id)

    def get_files_for_drawer_id_all(self, drawer_id=None, *args, **kwargs):
        return File.by_attr_all_order('drawer_id', drawer_id, 'name')

    def get_files_for_drawer_id_limit(self, drawer_id, limit=50, *args, **kwargs):
        return File.by_attr_limit_order('drawer_id', drawer_id, limit, 'name')

    def get_cabinet_by_name(self, name=None, *args, **kwargs):
        return DBSession.query(Cabinet).\
            filter(Cabinet.name == name).\
            order_by(asc(Cabinet.id)).\
            first()

    def ensure_cabinet_by_name(self, name=None, description=None, *args, **kwargs):
        if not name:
            return None

        is_acceptable = self.check_string_against_stop_words(name)
        if not is_acceptable:
            return None

        if description:
            is_acceptable = self.check_string_against_stop_words(description)
            if not is_acceptable:
                return None

        cabinet = self.get_cabinet_by_name(name)
        if not cabinet:
            return self.create_cabinet(**{
                'name': name,
                'description': description,
                })

        return self.update_cabinet(cabinet.id, name, description)

    def update_existing_cabinet(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        name = kwargs.get('name', None)
        description = kwargs.get('description', '')
        if not cabinet_id or not name:
            return None

        return self.update_cabinet(cabinet_id, name, description)

    def create_cabinet(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        name = kwargs.get('name', '')
        description = kwargs.get('description', None)
        if not description:
            description = name

        cabinet = Cabinet()
        cabinet.name = name
        cabinet.description = description
        cabinet.added_by = usernow.id
        DBSession.add(cabinet)
        DBSession.flush()

        if cabinet.name == PRIVATE:
            self.create_cabinet_user_link(cabinet.id, usernow.id)
        else:
            self.public_cabinet_default_access(cabinet.id)

        tag_add_string = cabinet.name.strip()+' '+cabinet.description.strip()
        self.add_cabinet_tags(cabinet.id, tag_add_string)
        return cabinet

    def update_cabinet(self, cabinet_id, name, description, *args, **kwargs):
        usernow = request.identity.get('user', {})
        cabinet = Cabinet.by_id(cabinet_id)
        cabinet.name = name
        cabinet.description = description
        DBSession.flush()

        tag_add_string = cabinet.name.strip()+' '+cabinet.description.strip()
        self.add_cabinet_tags(cabinet.id, tag_add_string)
        return cabinet

    def public_cabinet_default_access(self, cabinet_id=None, *args, **kwargs):
        adminrole = Role.by_name('DMS Administrator')
        userrole = Role.by_name('DMS User')
        for admin in adminrole.users:
            cabinet_user = self.get_cabinet_user_link(cabinet_id, admin.id)
            if not cabinet_user:
                self.create_cabinet_user_link(cabinet_id, admin.id)

        for user in adminrole.users:
            cabinet_user = self.get_cabinet_user_link(cabinet_id, user.id)
            if not cabinet_user:
                self.create_cabinet_user_link(cabinet_id, user.id)
        return True

    def get_cabinet_user_link(self, cabinet_id=None, user_id=None, *args, **kwargs):
        return DBSession.query(CabinetUserLink).\
                filter(CabinetUserLink.cabinet_id == cabinet_id).\
                filter(CabinetUserLink.user_id == user_id).\
                first()

    def create_cabinet_user_link(self, cabinet_id=None, user_id=None, *args, **kwargs):
        cabinet_user = CabinetUserLink()
        cabinet_user.cabinet_id = cabinet_id
        cabinet_user.user_id = user_id
        DBSession.add(cabinet_user)
        DBSession.flush()
        return True

    def ensure_drawer_by_name(self, cabinet_id=None, name=None, description=None, *args, **kwargs):
        if not cabinet_id or not name:
            return None

        is_acceptable = self.check_string_against_stop_words(name)
        if not is_acceptable:
            return None

        if description:
            is_acceptable = self.check_string_against_stop_words(description)
            if not is_acceptable:
                return None

        usernow = request.identity.get('user', {})
        drawer = self.get_drawer_by_name(cabinet_id, name)

        if not drawer:
            drawer = self.create_drawer(**{
                'cabinet_id': cabinet_id,
                'name': name,
                'description': description,
                })
        return drawer

    def get_drawer_by_name(self, cabinet_id, name, *args, **kwargs):
        return DBSession.query(Drawer).\
            filter(Drawer.cabinet_id == cabinet_id).\
            filter(Drawer.name == name).\
            filter(Drawer.bln_active == True).\
            first()

    def create_new_drawer(self, *args, **kwargs):
        name = kwargs.get('name', None)
        if not name:
            return None

        cabinet_id = kwargs.get('cabinet_id', None)
        if not cabinet_id:
            return None

        drawer = self.create_drawer(**kwargs)
        return drawer

    def update_existing_drawer(self, *args, **kwargs):
        drawer_id = kwargs.get('drawer_id', None)
        name = kwargs.get('name', None)
        if not drawer_id or not name:
            return None

        drawer = self.update_drawer(**kwargs)
        return cabinet

    def create_drawer(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        name = kwargs.get('name', None)
        description = kwargs.get('description', name)
        usernow = request.identity.get('user', {})

        drawer = Drawer()
        drawer.cabinet_id = cabinet_id
        drawer.name = name
        drawer.description = description
        drawer.added_by = usernow.id
        DBSession.add(drawer)
        DBSession.flush()
        self.add_default_users_to_drawer(cabinet_id, drawer.id)
        tag_add_string = drawer.name.strip()+' '+drawer.description.strip()
        self.add_drawer_tags(drawer.id, tag_add_string)
        return drawer

    def update_drawer(self, drawer_id, name, description, *args, **kwargs):
        drawer_id = kwargs.get('drawer_id', None)
        name = kwargs.get('name', None)
        description = kwargs.get('description', name)

        drawer = Drawer.by_id(drawer_id)
        drawer.name = name
        drawer.description = description
        DBSession.flush()

        tag_add_string = drawer.name.strip()+' '+drawer.description.strip()
        self.add_drawer_tags(drawer.id, tag_add_string)
        return drawer

    def add_cabinet_user_to_all_drawers(self, cabinet_id, user_id=None, *args, **kwargs):
        drawer_list = Drawer.by_attr_all('cabinet_id', cabinet_id)
        if not drawer_list:
            return False

        for drawer in drawer_list:
            drawer_user = self.get_drawer_user_link(drawer.id, user_id)
            if not drawer_user:
                self.create_drawer_user_link(drawer.id, user_id)
        return True

    def remove_cabinet_user_from_all_drawers(self, cabinet_id, user_id=None, *args, **kwargs):
        drawer_list = Drawer.by_attr_all('cabinet_id', cabinet_id)
        if not drawer_list:
            return

        for drawer in drawer_list:
            drawer_link_list = DrawerUserLink.by_attr_all('drawer_id', drawer.id)

            if not drawer_link_list:
                continue

            for link in drawer_link_list:
                if link.user_id == user_id:
                    DBSession.delete(link)
                    DBSession.flush()
        return True

    def add_default_users_to_drawer(self, cabinet_id, drawer_id=None, *args, **kwargs):
        cabinet_user_link_list = self.get_user_link_for_cabinet(cabinet_id)
        if not cabinet_user_link_list:
            return

        for link in cabinet_user_link_list:
            drawer_user = self.get_drawer_user_link(drawer_id, link.user_id)
            if not drawer_user:
                self.create_drawer_user_link(drawer_id, link.user_id)
        return True

    def get_user_link_for_cabinet(self, cabinet_id=None, *args, **kwargs):
        return DBSession.query(CabinetUserLink).\
            filter(CabinetUserLink.cabinet_id == cabinet_id).\
            order_by(asc(CabinetUserLink.user_id)).\
            all()

    def get_drawer_user_link(self, drawer_id, user_id=None, *args, **kwargs):
        return DBSession.query(DrawerUserLink).\
                filter(DrawerUserLink.drawer_id == drawer_id).\
                filter(DrawerUserLink.user_id == user_id).\
                first()

    def create_drawer_user_link(self, drawer_id, user_id=None, *args, **kwargs):
        drawer_user = DrawerUserLink()
        drawer_user.drawer_id = drawer_id
        drawer_user.user_id = user_id
        DBSession.add(drawer_user)
        DBSession.flush()
        return True

    @expose()
    def confirm_string_passes_stop_words(self, string=None, *args, **kwargs):
        if not string:
            return json.dumps({'success': False, 'message': 'String is empty.', 'status': 'danger'})

        can_be_used = self.check_string_against_stop_words(string)
        if not can_be_used:
            return json.dumps({'success': False, 'message': 'Contains unacceptable word or phrase.', 'status': 'danger'})

        return json.dumps({'success': True, 'message': 'String is acceptable.', 'status': 'success'})

    @expose()
    def add_cabinet_tags(self, cabinet_id, string, *args, **kwargs):
        word_list = self.build_sanitized_word_list_from_string(string)
        for word in word_list:
            tag = self.get_tag_from_word(word)
            if tag:
                tag_exists = self.check_cabinet_tag_link(cabinet_id, tag.id)
                if not tag_exists:
                    self.create_cabinet_tag_link(cabinet_id, tag.id)
        return True

    def check_cabinet_tag_link(self, cabinet_id=None, tag_id=None, *args, **kwargs):
        return DBSession.query(CabinetTagLink).\
            filter(CabinetTagLink.cabinet_id == cabinet_id).\
            filter(CabinetTagLink.tag_id == tag_id).\
            first()

    def create_cabinet_tag_link(self, cabinet_id=None, tag_id=None, *args, **kwargs):
        usernow = request.identity.get('user', {})
        this = CabinetTagLink()
        this.cabinet_id = cabinet_id
        this.tag_id = tag_id
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return True

    def add_drawer_tags(self, drawer_id, string, *args, **kwargs):
        word_list = self.build_sanitized_word_list_from_string(string)

        for word in word_list:
            tag = self.get_tag_from_word(word)
            if tag:
                tag_exists = self.check_drawer_tag_link(drawer_id, tag.id)
                if not tag_exists:
                    self.create_drawer_tag_link(drawer_id, tag.id)
        return True

    def check_drawer_tag_link(self, drawer_id=None, tag_id=None, *args, **kwargs):
        return DBSession.query(DrawerTagLink).\
            filter(DrawerTagLink.drawer_id == drawer_id).\
            filter(DrawerTagLink.tag_id == tag_id).\
            first()

    def create_drawer_tag_link(self, drawer_id=None, tag_id=None, *args, **kwargs):
        usernow = request.identity.get('user', {})
        this = DrawerTagLink()
        this.drawer_id = drawer_id
        this.tag_id = tag_id
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return True

    def add_file_tags(self, file_id, string, must_ocr=False, *args, **kwargs):
        if not must_ocr:
            if not string:
                must_ocr = True

        if not must_ocr:
            self.add_tag_from_string(file_id, string)

        return True

    @expose()
    def add_file_tags_from_ocr(self, *args, **kwargs):
        file_id = kwargs.get('file_id', None)
        tags = kwargs.get('tags', '')
        if not file_id:
            return ''

        read_file = File.by_id(file_id)
        if not read_file:
            return ''

        filepath = os.path.join(PUBLIC_DIRNAME, read_file.location)
        file_name = os.path.join(filepath, read_file.long_name)

        result = MEDIA_OCR.process_file(file_name=file_name)
        success = result.get('success', False)
        if not success:
            return ''

        string = result.get('text', '')
        if tags:
            string += " "+tags
        self.add_tag_from_string(file_id, string)
        return ''

    def add_tag_from_string(self, file_id, string, *args, **kwargs):
        word_list = self.build_sanitized_word_list_from_string(string)
        for word in word_list:
            tag = self.get_tag_from_word(word)
            if tag:
                tag_exists = self.check_file_tag_link(file_id, tag.id)
                if not tag_exists:
                    self.create_file_tag_link(file_id, tag.id)
                else:
                    tag_exists.count += 1
                    DBSession.flush()

        return True

    def check_file_tag_link(self, file_id=None, tag_id=None, *args, **kwargs):
        return DBSession.query(FileTagLink).\
            filter(FileTagLink.file_id == file_id).\
            filter(FileTagLink.tag_id == tag_id).\
            first()

    def create_file_tag_link(self, file_id=None, tag_id=None, *args, **kwargs):
        usernow = request.identity.get('user', {})
        this = FileTagLink()
        this.file_id = file_id
        this.tag_id = tag_id
        this.count = 1
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return True

    def build_sanitized_word_list_from_string(self, string='', *args, **kwargs):
        if not string:
            return []

        result = MEDIA_OCR.sanitise_the_text(text=string)
        success = result.get('success', False)
        if not success:
            return []

        text = result.get('text', '')
        text = text.lower()
        if not text:
            return []

        # PLACEHOLDER
        word_list = text.split()
        return word_list

    def get_tag_from_word(self, word=None, *args, **kwargs):
        word = word.replace('(', '')
        word = word.replace(')', '')
        word = word.lower()
        tag = self.check_tag(word)
        return tag

    def check_tag(self, word=None, *args, **kwargs):
        if not word:
            return None
        tag = self.get_tag_for_word_from_db(word)
        if not tag:
            tag = self.create_tag_for_word(word)
        return tag

    def get_tag_for_word_from_db(self, word=None, *args, **kwargs):
        return DBSession.query(Tag).\
            filter(Tag.name == word).\
            first()

    def create_tag_for_word(self, word=None, *args, **kwargs):
        usernow = request.identity.get('user', {})

        tag = Tag()
        tag.name = word
        tag.added_by = usernow.id
        DBSession.add(tag)
        DBSession.flush()
        return tag

    def get_accepted_file_extensions(self, *args, **kwargs):
        dbase_query = FileExtension.get_all('extension', True)
        if not dbase_query:
            return ''

        file_extensions = ''
        for ext in dbase_query:
            if file_extensions:
                file_extensions += ', .'+ext.extension
            else:
                file_extensions = '.'+ext.extension
        return file_extensions

    def get_file_type_from_extension(self, file_ext='', *args, **kwargs):
        if not file_ext:
            file_type_id = TYPEUTIL.get_id_of_name('file_type', 'file')
            return file_type_id

        file_ext = file_ext.replace('.', '')
        extension = FileExtension.by_attr_first_ignore_active('extension', file_ext)
        if not extension:
            file_type_id = TYPEUTIL.get_id_of_name('file_type', 'file')
            return file_type_id

        return extension.file_type_id

    def physical_file_exists(self, full_file_path=None, *args, **kwargs):
        if os.path.isfile(full_file_path):
            return True
        return False

    def get_upload_directory(self, drawer_id=None, *args, **kwargs):
        drawer = Drawer.by_id(drawer_id)
        return_val = os.path.join(MEDIA_DIRNAME, str(drawer.cabinet_id))
        return_val = os.path.join(return_val, str(drawer_id).strip())
        return_val = os.path.join(return_val, '')
        return return_val

    def get_full_upload_directory(self, drawer_id=None, *args, **kwargs):
        drawer = Drawer.by_id(drawer_id)
        return_val = os.path.join(FULL_MEDIA_DIRNAME, str(drawer.cabinet_id))
        return_val = os.path.join(return_val, str(drawer_id).strip())
        return_val = os.path.join(return_val, '')
        return return_val

    def remove_uuid_from_file_name(self, filename='', *args, **kwargs):
        pos = filename.find('_')
        if pos <=0:
            return filename
        return filename[pos+1:]

    def get_user_private_drawer(self, user_id=None, *args, **kwargs):
        if not user_id:
            usernow = request.identity.get('user', {})
            user_id = usernow.id

        return DBSession.query(Drawer).\
            join(DrawerUserLink, DrawerUserLink.drawer_id == Drawer.id).\
            filter(Drawer.bln_active == True).\
            filter(Drawer.cabinet_id == PRIVATE_CABINET.id).\
            filter(DrawerUserLink.user_id == user_id).\
            first()

    def get_user_private_drawer_id(self, user_id=None, *args, **kwargs):
        if not user_id:
            usernow = request.identity.get('user', {})
            user_id = usernow.id

        user_drawer = self.get_user_private_drawer(user_id)
        return user_drawer.id

    def get_cabinet_weighted_word_dict(self, *args, **kwargs):
        cabinet_id = kwargs.get('cabinet_id', None)
        if not cabinet_id:
            return {}

        drawer_list = Drawer.by_attr_all('cabinet_id', cabinet_id)
        if not drawer_list:
            return {}

        word_string = ''
        for drawer in drawer_list:
            word_string += self.get_tag_words_for_drawer(drawer.id)
            word_string += self.get_tag_words_for_files_in_drawer(drawer.id)

        weighted_dict = self.get_weighted_word_dict_from_text(word_string)
        return weighted_dict

    def get_drawer_weighted_word_dict(self, *args, **kwargs):
        drawer_id = kwargs.get('drawer_id', None)
        if not drawer_id:
            return {}

        word_string = ''
        word_string += self.get_tag_words_for_drawer(drawer_id)
        word_string += self.get_tag_words_for_files_in_drawer(drawer_id)

        weighted_dict = self.get_weighted_word_dict_from_text(word_string)
        return weighted_dict

    def get_tag_words_for_drawer(self, drawer_id=None, *args, **kwargs):
        if not drawer_id:
            return ''

        tag_list = DBSession.query(Tag).\
            join(DrawerTagLink, DrawerTagLink.tag_id == Tag.id).\
            filter(DrawerTagLink.drawer_id == drawer_id).\
            all()

        if not tag_list:
            return ''

        return_string = ''
        for tag in tag_list:
            return_string += ' '+tag.name

        return return_string

    def get_tag_words_for_files_in_drawer(self, drawer_id=None, *args, **kwargs):
        if not drawer_id:
            return ''

        file_list = File.by_attr_all('drawer_id', drawer_id)
        if not file_list:
            return ''

        file_word_string = ''
        for item in file_list:
            file_word_string += self.get_tag_words_for_file(item.id)

        return file_word_string

    def get_tag_words_for_file(self, file_id=None, *args, **kwargs):
        if not file_id:
            return ''

        tag_list = DBSession.query(Tag).\
            join(FileTagLink, FileTagLink.tag_id == Tag.id).\
            filter(FileTagLink.file_id == file_id).\
            order_by(desc(FileTagLink.count)).\
            all()

        if not tag_list:
            return ''

        return_string = ''
        for tag in tag_list:
            return_string += ' '+tag.name

        return return_string

    def get_weighted_word_dict_from_text(self, raw_text='', *args, **kwargs):
        if not raw_text:
            return {}

        result = MEDIA_OCR.sanitise_the_text(text=raw_text)
        success = result.get('success', False)
        if not success:
            return {}

        string = result.get('text', '')

        wc = WordCloud()
        word_dict = wc.build_and_sort_word_list(string)
        return word_dict

    def build_word_cloud_image(self, file_id=None, *arg, **kwargs):
        if not file_id:
            return ''

        selected_file = File.by_id(file_id)
        if not selected_file:
            return ''

        filename, file_extension = os.path.splitext(selected_file.long_name)
        full_file_path = os.path.join(PUBLIC_DIRNAME, selected_file.location)
        full_file_name = os.path.join(full_file_path, selected_file.long_name)

        full_image_name = full_file_name.replace(file_extension, '_wordcloud.png')
        full_path = os.path.dirname(full_file_name)

        this_image_name = full_image_name.replace(PUBLIC_DIRNAME, '')
        return_html = f"""
        <div class="col-md-12">
            <div class="form-group row">
                <label class="col-md-2 col-form-label">Word Cloud</label>
                <div class="col-md-10">
                    <img src="{this_image_name}">
                </div>
            </div>
        </div>
        """
        if not os.path.isfile(full_image_name):
            result = self.generate_word_cloud_image_from_file(file_id, full_image_name)
            if not result:
                return_html = f"""
                <div class="col-md-12">
                    <div class="form-group row">
                        <label class="col-md-2 col-form-label">Word Cloud</label>
                        <div class="col-md-10">
                            <input class="btn-outline-primary" value="Word Cloud Unavailable" type="text">
                        </div>
                    </div>
                </div>
                """
        return return_html

    def generate_word_cloud_image_from_file(self, file_id=None, full_image_name='', *arg, **kwargs):
        if not file_id or not full_image_name:
            return False

        tag_list = DBSession.query(Tag, FileTagLink).\
            filter(FileTagLink.tag_id == Tag.id).\
            filter(FileTagLink.file_id == file_id).\
            order_by(desc(FileTagLink.count)).\
            all()

        if not tag_list:
            return False

        word_list = ''
        for tag, link in tag_list:
            for x in range(link.count):
                word_list += ' '+tag.name

        if not word_list:
            return False

        #cloud_kwargs = {'text': word_list, 'full_file_path': full_image_name}
        #word_cloud = MediaWordCloud(**cloud_kwargs)
        #result = word_cloud.generate_word_cloud_image()
        #return result
        return False

    @expose()
    def delete_this_file(self, *arg, **kwargs):
        file_id = kwargs.get('file_id', None)
        if not file_id:
            return json.dumps({'success': False, 'message': 'File ID not supplied.', 'status': 'danger'})

        delete_file = File.by_id(file_id)
        if not delete_file:
            return json.dumps({'success': False, 'message': 'File not Found.', 'status': 'danger'})

        delete_file.bln_active = False
        DBSession.flush()
        return json.dumps({'success': True, 'message': 'File Deleted.', 'status': 'success'})

    def get_mime_type_from_file_name(self, file_name='', *args, **kwargs):
        if not file_name:
            return ''

        fn, ext = os.path.splitext(file_name)
        ext = ext.replace(".", "")
        this_mime = ''

        file_extension = DBSession.query(FileExtension).\
            filter(FileExtension.extension == ext).\
            first()

        if not file_extension:
            return ''

        mime_type = MimeType.by_id(file_extension.mime_type_id)
        if not mime_type:
            return ''

        mime_parent_type = MimeParentType.by_id(mime_type.mime_parent_type_id)
        if not mime_parent_type:
            return ''

        return f"{mime_parent_type.name}/{mime_type.name}"

    def pretty_file_size_display_format(self, num=0, suffix='B', *args, **kwargs):
        try:
            magnitude = int(math.floor(math.log(num, 1024)))
        except Exception as e:
            LOGGER.warn(str(e))
            return num

        try:
            val = num / math.pow(1024, magnitude)
        except Exception as e:
            LOGGER.warn(str(e))
            return num

        try:
            if magnitude > 7:
                return '{:.1f} {}{}'.format(val, 'Yi', suffix)
        except Exception as e:
            LOGGER.warn(str(e))
            return num

        try:
            return '{:3.1f} {}{}'.format(val, ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z'][magnitude], suffix)
        except Exception as e:
            LOGGER.warn(str(e))
            return num

    def check_string_against_stop_words(self, string='', *args, **kwargs):
        if not string:
            return True

        word_list = string.split(' ')
        for word in word_list:
            word = word.replace('(', '')
            word = word.replace(')', '')
            word = word.replace(', ', '')
            word = word.lower()
            is_stopped = self.is_stop_word(word)
            if is_stopped:
                return False

        return True

    def is_stop_word(self, word=None, *args, **kwargs):
        if not word:
            return False

        stopped = DBSession.query(StopWord).filter(StopWord.name == word).first()
        if not stopped:
            return False

        return True
