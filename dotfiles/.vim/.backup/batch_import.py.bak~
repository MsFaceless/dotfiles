# -*- coding: utf-8 -*-
"""BatchImportController controller module"""

import os,json,time,transaction
import pandas as pd
from datetime import datetime
from sqlalchemy import func, desc, asc
from pkg_resources import resource_filename
from tg import expose, require, redirect, validate, flash, url, request, response, predicates


from eiffel_back.model import *
from eiffel_back.lib.tg_utils import *
from eiffel_back.lib.base import BaseController
from eiffel_back.lib.tgfileuploader import FileUploader
from eiffel_back.lib.tg_generic_reportlab import PDFCreator, Paragraph
from eiffel_back.controllers.common import CommonController
from dotenv import dotenv_values

dotenv_values = dotenv_values()

FRONT_BASE_URL = dotenv_values.get('FRONT_BASE_URL')
STUDENT_IMG_URL = os.path.join(FRONT_BASE_URL, 'img/students')
POST_IMG_URL = os.path.join(FRONT_BASE_URL, 'img/posts')

COMMON = CommonController()

FILENAME = os.path.abspath(resource_filename('eiffel_back', 'public'))
PUBLIC_DIRNAME = os.path.join(FILENAME)
PDF_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'pdf')
IMAGES_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'images')
IMPORTS_DIRNAME = os.path.join(PUBLIC_DIRNAME, 'imports')
CATALOG_DIRNAME = os.path.join(IMAGES_DIRNAME, 'catalog_pictures')

__all__ = ['BatchImportController']

class BatchImportController(BaseController):

    @expose()
    def handle_file_upload(self, *args, **kwargs):
        usernow = request.identity.get('user', {})
        filename = kwargs.get('filename', None)
        image_type = kwargs.get('file', None)
        usernow = request.identity.get('user', {})
        kwargs['size_limit'] = 256000000 # 256 MB
        kwargs['allowed_extensions'] = ['.xlsx']
        kwargs['upload_dir'] = IMPORTS_DIRNAME
        uploader = FileUploader(**kwargs)
        return uploader.handle_file_upload(name=f'{filename}.xlsx')

    @expose()
    def upload_file(self, *args, **kwargs):
        usernow = request.identity.get('user', {})

        now = datetime.now()
        file_id = now.strftime("%d%m%Y%H%M")
        kwargs['filename'] = f'{file_id}_import_{usernow.id}'
        
        result = json.loads(self.handle_file_upload(**kwargs))
        success = result.get('success', None)
        if not success:
            return json.dumps({'success': 'false', 'message': 'Upload failed, please review the file and try again', 'status': 'danger'})
        filename = result.get('name', None)
        this = StudentImport()
        this.desc = kwargs.get('description', 'Import')
        this.filepath = filename
        this.total_row_count = 0
        this.invalid_count = 0
        this.rows_complete = 0
        this.bln_is_complete = False
        this.active = True
        this.added = datetime.now()
        this.added_by = usernow.id
        DBSession.add(this)
        DBSession.flush()
        return json.dumps({'success': True, 'data': this.id, 'file_id': file_id})

    @expose()
    def start_import(self, *args, **kwargs):
        print(kwargs)
        import_id = kwargs.get('import_id', None)
        if not import_id:
            print('DEBUG (START IMPORT): Import_id not present in kwargs')
            return json.dumps({'success': False, 'message': 'We could not identify the import from the data you provided.', 'status': 'danger'})
        file_id = kwargs.get('file_id', None)
        if not file_id:
            print('DEBUG (START IMPORT): File_id not present in kwargs')
            return json.dumps({'success': False, 'message': 'We could not identify the import from the data you provided.', 'status': 'danger'})
        
        this = StudentImport.by_id(import_id)
        this_file = os.path.join(IMPORTS_DIRNAME, this.filepath)
        output = self.process_file(this_file, this.id, file_id)
        print(output)
        return json.dumps({'success': True, 'message': 'Import Complete.', 'status':'success'})

    def process_file(self, import_file, import_id, file_id, *args, **kwargs):
        usernow = request.identity.get('user', {})
        data = pd.read_excel(import_file)
        df  = pd.DataFrame(data)
        df.fillna('', inplace=True)
        
        total_row_count = len(df.index)

        invalid_items = []
        rows_complete = 0

        for i, row in df.iterrows():
            params = {
                'import_id': import_id,
                'total_row_count': total_row_count,
                'invalid_count': len(invalid_items),
                'rows_complete': rows_complete
            }
            print('process file', params)
            self.update_import_record(**params)

            student_number = row.get('student_number')
            if not student_number:
                row['comment'] = 'Student number field cannot be empty.'
                invalid_items.append(row)
                continue

            student_number_exists = DBSession.query(Student). \
                filter(Student.student_number == student_number). \
                first()
            if student_number_exists:
                row['comment'] = 'Student with this student number already in the system.'
                invalid_items.append(row)
                continue
            
            identity_number = row.get('identity_number', None)
            if not identity_number:
                row['comment'] = 'Identity number field cannot be empty.'
                invalid_items.append(row)
                continue
            
            email = row.get('email', None)
            if not email:
                row['comment'] = 'Email field cannot be empty.'
                invalid_items.append(row)
                continue
            
            name = row.get('name', None)
            surname = row.get('surname', None)
            mobile = row.get('mobile', None)
            kwargs = {
                'student_number': student_number,
                'title': row.get('title', None),
                'name': name,
                'surname': surname,
                'identity_number': identity_number,
                'mobile': f'0{mobile}',
                'email': email,
                'address1': row.get('address1', None),
                'address2': row.get('address2', None),
                'address3': row.get('address3', None),
                'postal_code': row.get('postal_code', None),
                'password': f'password{student_number}',
                'display_name': f'{name} {surname}',
                'about': '',
                'last_active': datetime.now(),
                'username': student_number,
                'added': datetime.now(),
            }

            response = COMMON.save_register_student(**kwargs)
            rows_complete = rows_complete + 1
        import_kwargs = {}
        if invalid_items:
            invalid_object = pd.DataFrame(invalid_items)
            invalid_filename = f'{file_id}_invalid_{usernow.id}.xlsx'
            invalid_location = os.path.join(IMPORTS_DIRNAME, invalid_filename)
            invalid_object.to_excel(invalid_location, engine='xlsxwriter')
            import_kwargs['invalid_filename'] = invalid_filename
        
        import_kwargs['import_id'] = import_id
        import_kwargs['invalid_count'] = len(invalid_items)
        import_kwargs['total_row_count'] = total_row_count
        import_kwargs['rows_complete'] = rows_complete
        result = self.update_import_record(**import_kwargs)
        
        return True

    def update_import_record(self, *args, **kwargs):
        import_id = kwargs.get('import_id', None)
        if not import_id:
            print('DEBUG (UPDATE IMPORT COUNTS): Import_id not present in kwargs')
            return False
        this = StudentImport.by_id(import_id)
        if not this: return False
        this.total_row_count = kwargs.get('total_row_count', )
        this.invalid_count = kwargs.get('invalid_count', this.invalid_count)
        this.rows_complete = kwargs.get('rows_complete', this.rows_complete)
        this.invalid_filename = kwargs.get('invalid_filename', '')
        DBSession.flush()
        transaction.commit()
        return True

    @expose()
    def get_import_counts(self, *args, **kwargs):
        import_id = kwargs.get('import_id', None)
        if not import_id:
            return json.dumps({'success': False, 'message': 'Please supply an import_id', 'status': 'danger'})
        this = StudentImport.by_id(import_id)
        counts = {
            'total_row_count': this.total_row_count,
            'invalid_count': this.invalid_count,
            'rows_complete': this.rows_complete,
        }
        print('counts', counts)
        return json.dumps({'success': True, 'data': counts})


    @expose()
    def get_batch_import_modal(self, *args, **kwargs):
        html = f"""
        <div id="importModal" class="modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered modal" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Batch Import</h5>
                    </div>
                    <div id="bodyDiv" class="modal-body">
                        <div id="progressDiv" class="progress" style="display:none;">
                            <div class="progress-bar" role="progressbar" style="width: 20%" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100"></div>
                            <div class="progress-bar progress-bar-success" role="progressbar" style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"></div>
                            <div class="progress-bar progress-bar-info" role="progressbar" style="width: 20%" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <div id="uploadFormDiv">
                            <form id="uploadForm">
                                <div class="form-group">
                                    <label class="bmd-label-floating">Description</label>
                                    <input type="text" name="description" class="form-control mb-3" required value="">
                                </div>
                                <div class="form-group form-file-upload form-file-multiple bmd-form-group">
                                    <input type="file" name="file" multiple="" class="inputFileHidden">
                                    <div class="input-group">
                                        <input type="text" class="form-control inputFileVisible" name="invisibleInput" required placeholder="Upload the import file...">
                                        <span class="input-group-btn">
                                            <button type="button" class="btn btn-fab btn-round btn-primary">
                                                <i class="material-icons">attach_file</i>
                                            </button>
                                        </span>
                                    </div>
                                </div>
                                <p class="mt-4">Download an import template 
                                    <a href="/imports/preregistration_template.xlsx" download>here</a>
                                </p>
                            </form>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button id="submitBtn" type="button" class="btn btn-primary">Import</button>
                        <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        <script>
            var progressDiv = $('#progressDiv');
            var uploadFormDiv = $('#uploadFormDiv');
            var uploadForm = $('#uploadForm')[0];
            var importId;
            setFormValidation(uploadForm);
            $('#submitBtn').click(function(e){
                var valid = FormIsValid(uploadForm);
                if (valid){
                    uploadFormDiv.slideUp('slow');
                    var data = new FormData(uploadForm);
                    $.ajax({
                        type: "POST",
                        enctype: 'multipart/form-data',
                        url: "/batch_import/upload_file",
                        data: data,
                        processData: false,
                        contentType: false,
                        cache: false,
                        timeout: 600000,
                        success: function (data) {
                            result = JSON.parse(data);
                            if (result.success === true){
                                progressDiv.slideDown('slow');
                                importId = result.data;
                                var kwargs = {
                                    'import_id': importId,
                                    'file_id': result.file_id,
                                }
                                setInterval(checkImportCounts, 1000);
                                $.post('/batch_import/start_import', kwargs, function(resp){
                                    var final_result = JSON.parse(resp);
                                    clearInterval(checkImportCounts);
                                })
                            }
                        },
                        error: function (e) {
                            console.log("ERROR : ", e);
                        }
                    });
                }
            });
            $('#importModal').modal({'backdrop': 'static'});

            $('.form-file-multiple .inputFileVisible, .form-file-multiple .input-group-btn').click(function() {
                $(this).parent().parent().find('.inputFileHidden').trigger('click');
                $(this).parent().parent().addClass('is-focused');
            });

            $('.form-file-multiple .inputFileHidden').change(function() {
                var names = '';
                for (var i = 0; i < $(this).get(0).files.length; ++i) {
                    if (i < $(this).get(0).files.length - 1) {
                        names += $(this).get(0).files.item(i).name + ',';
                    } else {
                        names += $(this).get(0).files.item(i).name;
                    }
                }
                $(this).siblings('.input-group').find('.inputFileVisible').val(names);
            });

            $('.form-file-multiple .btn').on('focus', function() {
                $(this).parent().siblings().trigger('focus');
            });

            $('.form-file-multiple .btn').on('focusout', function() {
                $(this).parent().siblings().trigger('focusout');
            });


            //var checkImportCounts = setInterval(checkImportCounts, 5000);

            function checkImportCounts(){
                var kwargs = {
                    'import_id': importId,
                }
                $.get('/batch_import/get_import_counts', kwargs, function(data){
                    var result = JSON.parse(data);
                    console.table(result);
                });
            };
        </script>
     	"""
        return html + javascript

    @require(predicates.not_anonymous())
    @expose('eiffel_back.templates.generic')
    def imports(self, *args, **kwargs):
        htmltbl = self.get_import_htmltbl(**kwargs)
        html = f"""
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header card-header-primary card-header-icon">
                	<div class="row">
						<div class="col-md-4">
						     <div class="card-icon">
                            <i class="material-icons">school</i>
                        </div>
                        <h4 class="card-title">Batch Imports</h4>
                        </div>
				 	</div>
                    </div>
                    <div class="card-body pt-0">
                        <div class="toolbar">
                            <div class="col-md-12 d-flex mt-4 px-0">
                                <button class="btn btn-sm btn-primary ml-auto" id='btn_import'>Import Pre-Registered Student List</button>
                                <a class="btn btn-sm btn-outline-primary ml-2" 
                                    href="/imports/preregistration_template.xlsx" download>Download import template</a>
                            </div>
                        </div>
                        <div class="material-datatables mt-3" id="div_student">
                            {htmltbl}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
        javascript = """
        $('#btn_import').click(function(){
            $('#dialogdiv').load('/batch_import/get_batch_import_modal');
            return false;
        });
        """
        return dict(title='Imports', html=html, javascript=javascript)

    @expose()
    def get_import_htmltbl(self, *args, **kwargs):
        dbase_query = StudentImport.get_all('id')
        outputlist = []
        for item in dbase_query:
            added_by = User.by_id(item.added_by)
            data = f'data-import-id="{item.id}"'
            invalid_count = 0 if item.invalid_count == 0 else f'<div data-url="/imports/{item.invalid_filename}" class="display_link d-flex viewInvalid">{item.invalid_count} <span class="material-icons ml-2">cloud_download</span></div>'
            # invalid_count = 0 if item.invalid_count == 0 else f'<div data-url="/imports/{item.invalid_filename}" class="display_link d-flex viewInvalid">{item.invalid_count} <small class="ml-2">Download file</small></div>'
            actions = ""
            outputlist.append({
                'description': item.desc,
                'invalid_count': invalid_count,
                'total_count': item.total_row_count,
                'added': item.added,
                'added_by': f'{added_by.name} {added_by.surname}',
                             })
        dbcolumnlist=[
                'description',
                'invalid_count',
                'total_count',
                'added',
                'added_by',
                    ]
        theadlist=[
                'Description',
                'Exceptions',
                'Total rows',
                'Date',
                'Added By',
                ]
        tdclasslist = [
                '',
                '',
                '',
                '',
                'text-right',
                ]
        javascript = """
        <script>
        $('#import_tbl').DataTable({
            "pagingType": "full_numbers",
            "lengthMenu": [[10, 25, 50, -1],[10, 25, 50, 'All']],
            "dom": "<'toolbar'f>" +
                "<'row'<'col-md-12't>>" + 
                "<'row'<'col-md-6 d-flex'<'mt-1'l><'ml-2'i>><'col-md-6'p>>",
            "order": [[ 3, "desc" ]],
            "columns": [
                    null,
                    null,
                    null,
                    null,
                    null,
                ],
            responsive: true,
            language: {
                search: "_INPUT_",
                searchPlaceholder: "Search records",
                emptyTable: "No imports to show...",
            }
        });
        $('.viewInvalid').click(function(){
            window.open($(this).data('url'));
        });
        </script>
        """
        return build_html_table_material(outputlist, dbcolumnlist, theadlist, "import_tbl", tdclasslist) + javascript