from model.dbinit import Base as DeclarativeBase
from sqlalchemy import Column
from sqlalchemy.types import Integer, Unicode
from sqlalchemy import UniqueConstraint
from sqlalchemy import Column
from sqlalchemy import ForeignKey
from sqlalchemy.types import Boolean, Integer, Unicode, Date, Time, DateTime, Numeric, Binary, BigInteger
from sqlalchemy.orm import relationship
from sqlalchemy.types import Numeric as Decimal
from datetime import date, time, datetime

defaults = {}
defaults['id'] = lambda: Column(Integer, primary_key=True, autoincrement=True, unique=True, nullable=False, index=True)
defaults['added'] = lambda: Column(DateTime, nullable=False, default=datetime.now())
defaults['added_by'] = lambda: Column(Integer, nullable=False)
defaults['bln_edited'] = lambda: Column(Boolean, nullable=False, default=False)
defaults['bln_active'] = lambda: Column(Boolean, nullable=False, default=True)

def defaultify(thedict: dict):
    for k, v in defaults.items(): thedict[k] = v()


def get_type_table(model_name=None):
    if not model_name: return False
    if 'type' in model_name.lower(): return False
    table_name = model_name.lower()

    output_table_name = f'tbl_{table_name.lower()}_type'
    output_model_name = f'{model_name}Type'

    primary_id = Column(Integer, primary_key=True, autoincrement=True, unique=True, nullable=False, index=True)
    name = Column(Unicode(100), unique=True, nullable=False)

    type_table_dict = {
            '__tablename__':output_table_name,
            'id':primary_id,
            'name':name,
                       }

    type_table = type(output_model_name, (DeclarativeBase,), type_table_dict)
    setattr(type_table, "__name__", output_model_name)
    setattr(type_table, "__qualname__", output_model_name)
    return type_table

def get_link_table(table_a_name=None, table_b_name=None):
    if not table_a_name or not table_b_name: return False
    name = f"{table_a_name.lower()}{table_b_name.lower()}_link"
    table_name = f"tbl_{name}"
    
    model_name = f"{table_a_name.capitalize()}{table_b_name.capitalize()}Link"

    name = Column(Unicode(100), unique=False, nullable=True)

    table_a_foreignkey_name = f"tbl_{table_a_name.lower()}.id"
    if 'type' in table_a_foreignkey_name: table_a_foreignkey_name = f"{table_a_foreignkey_name.split('type')[0]}_type.id"
    table_b_foreignkey_name = f"tbl_{table_b_name.lower()}.id"
    if 'type' in table_b_foreignkey_name: table_b_foreignkey_name = f"{table_b_foreignkey_name.split('type')[0]}_type.id"

    table_a_key = Column(Integer, ForeignKey(table_a_foreignkey_name), nullable=False)
    table_b_key = Column(Integer, ForeignKey(table_b_foreignkey_name), nullable=False)

    table_a_id_name = f"{table_a_name.lower()}_id"
    table_b_id_name = f"{table_b_name.lower()}_id"

    link_table_dict = {
            '__tablename__':table_name,
            'name':name,
            table_a_id_name:table_a_key,
            table_b_id_name:table_b_key,
                       }
    defaultify(link_table_dict)

    link_table = type(model_name, (DeclarativeBase,), link_table_dict)
    setattr(link_table, "__name__", model_name)
    setattr(link_table, "__qualname__", model_name)
    return link_table

def get_table(model_name, table_dict):
    defaultify(table_dict)
    table_dict["__tablename__"] = f'tbl_{model_name.lower()}'
    return type(model_name, (DeclarativeBase,), table_dict)
